module(
    name = "ql",
    version = "0.0",
    repo_name = "codeql",
)

# this points to our internal repository when `codeql` is checked out as a submodule thereof
# when building things from `codeql` independently this is stubbed out in `.bazelrc`
bazel_dep(name = "semmle_code", version = "0.0")
local_path_override(
    module_name = "semmle_code",
    path = "..",
)

# see https://registry.bazel.build/ for a list of available packages

bazel_dep(name = "platforms", version = "0.0.11")
bazel_dep(name = "rules_go", version = "0.50.1")
bazel_dep(name = "rules_pkg", version = "1.0.1")
bazel_dep(name = "rules_nodejs", version = "6.2.0-codeql.1")
bazel_dep(name = "rules_python", version = "0.40.0")
bazel_dep(name = "rules_shell", version = "0.3.0")
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "abseil-cpp", version = "20240116.1", repo_name = "absl")
bazel_dep(name = "nlohmann_json", version = "3.11.3", repo_name = "json")
bazel_dep(name = "fmt", version = "10.0.0")
bazel_dep(name = "rules_kotlin", version = "2.0.0-codeql.1")
bazel_dep(name = "gazelle", version = "0.40.0")
bazel_dep(name = "rules_dotnet", version = "0.17.4")
bazel_dep(name = "googletest", version = "1.14.0.bcr.1")
bazel_dep(name = "rules_rust", version = "0.57.1")
bazel_dep(name = "zstd", version = "1.5.5.bcr.1")

bazel_dep(name = "buildifier_prebuilt", version = "6.4.0", dev_dependency = True)

# Keep edition and version approximately in sync with internal repo.
# the versions there are canonical, the versions here are used for CI in github/codeql, as well as for the vendoring of dependencies.
RUST_EDITION = "2024"

RUST_VERSION = "1.85.0"

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = RUST_EDITION,
    # We need those extra target triples so that we can build universal binaries on macos
    extra_target_triples = [
        "x86_64-apple-darwin",
        "aarch64-apple-darwin",
    ],
    versions = [RUST_VERSION],
)
use_repo(rust, "rust_toolchains")

register_toolchains("@rust_toolchains//:all")

# deps for python extractor
# keep in sync by running `misc/bazel/3rdparty/update_cargo_deps.sh`
py_deps = use_extension("//misc/bazel/3rdparty:py_deps_extension.bzl", "p")
use_repo(
    py_deps,
    "vendor_py__anyhow-1.0.95",
    "vendor_py__cc-1.2.14",
    "vendor_py__clap-4.5.30",
    "vendor_py__regex-1.11.1",
    "vendor_py__tree-sitter-0.20.4",
    "vendor_py__tree-sitter-graph-0.7.0",
)

# deps for ruby+rust
# keep in sync by running `misc/bazel/3rdparty/update_cargo_deps.sh`
tree_sitter_extractors_deps = use_extension("//misc/bazel/3rdparty:tree_sitter_extractors_extension.bzl", "r")
use_repo(
    tree_sitter_extractors_deps,
    "vendor_ts__anyhow-1.0.96",
    "vendor_ts__argfile-0.2.1",
    "vendor_ts__chalk-ir-0.99.0",
    "vendor_ts__chrono-0.4.39",
    "vendor_ts__clap-4.5.31",
    "vendor_ts__dunce-1.0.5",
    "vendor_ts__either-1.14.0",
    "vendor_ts__encoding-0.2.33",
    "vendor_ts__figment-0.10.19",
    "vendor_ts__flate2-1.1.0",
    "vendor_ts__glob-0.3.2",
    "vendor_ts__globset-0.4.15",
    "vendor_ts__itertools-0.14.0",
    "vendor_ts__lazy_static-1.5.0",
    "vendor_ts__mustache-0.9.0",
    "vendor_ts__num-traits-0.2.19",
    "vendor_ts__num_cpus-1.16.0",
    "vendor_ts__proc-macro2-1.0.93",
    "vendor_ts__quote-1.0.38",
    "vendor_ts__ra_ap_base_db-0.0.266",
    "vendor_ts__ra_ap_cfg-0.0.266",
    "vendor_ts__ra_ap_hir-0.0.266",
    "vendor_ts__ra_ap_hir_def-0.0.266",
    "vendor_ts__ra_ap_hir_expand-0.0.266",
    "vendor_ts__ra_ap_hir_ty-0.0.266",
    "vendor_ts__ra_ap_ide_db-0.0.266",
    "vendor_ts__ra_ap_intern-0.0.266",
    "vendor_ts__ra_ap_load-cargo-0.0.266",
    "vendor_ts__ra_ap_parser-0.0.266",
    "vendor_ts__ra_ap_paths-0.0.266",
    "vendor_ts__ra_ap_project_model-0.0.266",
    "vendor_ts__ra_ap_span-0.0.266",
    "vendor_ts__ra_ap_stdx-0.0.266",
    "vendor_ts__ra_ap_syntax-0.0.266",
    "vendor_ts__ra_ap_vfs-0.0.266",
    "vendor_ts__rand-0.9.0",
    "vendor_ts__rayon-1.10.0",
    "vendor_ts__regex-1.11.1",
    "vendor_ts__serde-1.0.218",
    "vendor_ts__serde_json-1.0.139",
    "vendor_ts__serde_with-3.12.0",
    "vendor_ts__syn-2.0.98",
    "vendor_ts__toml-0.8.20",
    "vendor_ts__tracing-0.1.41",
    "vendor_ts__tracing-flame-0.2.0",
    "vendor_ts__tracing-subscriber-0.3.19",
    "vendor_ts__tree-sitter-0.24.6",
    "vendor_ts__tree-sitter-embedded-template-0.23.2",
    "vendor_ts__tree-sitter-json-0.24.8",
    "vendor_ts__tree-sitter-ql-0.23.1",
    "vendor_ts__tree-sitter-ruby-0.23.1",
    "vendor_ts__triomphe-0.1.14",
    "vendor_ts__ungrammar-1.16.1",
)

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# rust-analyzer sources needed by the rust ast-generator (see `rust/ast-generator/README.md`)
RUST_ANALYZER_SRC_TAG = "2025-01-07"

http_archive(
    name = "rust-analyzer-src",
    build_file = "//rust/ast-generator:BUILD.rust-analyzer-src.bazel",
    integrity = "sha256-eo8mIaUafZL8LOM65bDIIIXw1rNQ/P/x5RK/XUtgo5g=",
    patch_args = ["-p1"],
    patches = [
        "//rust/ast-generator:patches/rust-analyzer.patch",
    ],
    strip_prefix = "rust-analyzer-%s" % RUST_ANALYZER_SRC_TAG,
    url = "https://github.com/rust-lang/rust-analyzer/archive/refs/tags/%s.tar.gz" % RUST_ANALYZER_SRC_TAG,
)

dotnet = use_extension("@rules_dotnet//dotnet:extensions.bzl", "dotnet")
dotnet.toolchain(dotnet_version = "9.0.100")
use_repo(dotnet, "dotnet_toolchains")

register_toolchains("@dotnet_toolchains//:all")

csharp_main_extension = use_extension("//csharp:paket.main_extension.bzl", "main_extension")
use_repo(csharp_main_extension, "paket.main")

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "codegen_deps",
    python_version = "3.11",
    requirements_lock = "//misc/codegen:requirements_lock.txt",
)
use_repo(pip, "codegen_deps")

swift_deps = use_extension("//swift/third_party:load.bzl", "swift_deps")

# following list can be kept in sync with `bazel mod tidy`
use_repo(
    swift_deps,
    "binlog",
    "picosha2",
    "swift-prebuilt-linux",
    "swift-prebuilt-linux-download-only",
    "swift-prebuilt-macos",
    "swift-prebuilt-macos-download-only",
    "swift-resource-dir-linux",
    "swift-resource-dir-macos",
)

node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node")
node.toolchain(
    name = "nodejs",
    node_urls = [
        "https://nodejs.org/dist/v{version}/{filename}",
        "https://mirrors.dotsrc.org/nodejs/release/v{version}/{filename}",
    ],
    node_version = "18.15.0",
)
use_repo(node, "nodejs", "nodejs_toolchains")

kotlin_extractor_deps = use_extension("//java/kotlin-extractor:deps.bzl", "kotlin_extractor_deps")

# following list can be kept in sync by running `bazel mod tidy` in `codeql`
use_repo(
    kotlin_extractor_deps,
    "codeql_kotlin_defaults",
    "codeql_kotlin_embeddable",
    "kotlin-compiler-1.5.0",
    "kotlin-compiler-1.5.10",
    "kotlin-compiler-1.5.20",
    "kotlin-compiler-1.5.30",
    "kotlin-compiler-1.6.0",
    "kotlin-compiler-1.6.20",
    "kotlin-compiler-1.7.0",
    "kotlin-compiler-1.7.20",
    "kotlin-compiler-1.8.0",
    "kotlin-compiler-1.9.0-Beta",
    "kotlin-compiler-1.9.20-Beta",
    "kotlin-compiler-2.0.0-RC1",
    "kotlin-compiler-2.0.20-Beta2",
    "kotlin-compiler-2.1.0-Beta1",
    "kotlin-compiler-2.1.20-Beta1",
    "kotlin-compiler-embeddable-1.5.0",
    "kotlin-compiler-embeddable-1.5.10",
    "kotlin-compiler-embeddable-1.5.20",
    "kotlin-compiler-embeddable-1.5.30",
    "kotlin-compiler-embeddable-1.6.0",
    "kotlin-compiler-embeddable-1.6.20",
    "kotlin-compiler-embeddable-1.7.0",
    "kotlin-compiler-embeddable-1.7.20",
    "kotlin-compiler-embeddable-1.8.0",
    "kotlin-compiler-embeddable-1.9.0-Beta",
    "kotlin-compiler-embeddable-1.9.20-Beta",
    "kotlin-compiler-embeddable-2.0.0-RC1",
    "kotlin-compiler-embeddable-2.0.20-Beta2",
    "kotlin-compiler-embeddable-2.1.0-Beta1",
    "kotlin-compiler-embeddable-2.1.20-Beta1",
    "kotlin-stdlib-1.5.0",
    "kotlin-stdlib-1.5.10",
    "kotlin-stdlib-1.5.20",
    "kotlin-stdlib-1.5.30",
    "kotlin-stdlib-1.6.0",
    "kotlin-stdlib-1.6.20",
    "kotlin-stdlib-1.7.0",
    "kotlin-stdlib-1.7.20",
    "kotlin-stdlib-1.8.0",
    "kotlin-stdlib-1.9.0-Beta",
    "kotlin-stdlib-1.9.20-Beta",
    "kotlin-stdlib-2.0.0-RC1",
    "kotlin-stdlib-2.0.20-Beta2",
    "kotlin-stdlib-2.1.0-Beta1",
    "kotlin-stdlib-2.1.20-Beta1",
)

go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(version = "1.24.0")

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//go/extractor:go.mod")
use_repo(go_deps, "org_golang_x_mod", "org_golang_x_tools")

lfs_files = use_repo_rule("//misc/bazel:lfs.bzl", "lfs_files")

lfs_files(
    name = "ripunzip-linux",
    srcs = ["//misc/ripunzip:ripunzip-linux"],
    executable = True,
)

lfs_files(
    name = "ripunzip-windows",
    srcs = ["//misc/ripunzip:ripunzip-windows.exe"],
    executable = True,
)

lfs_files(
    name = "ripunzip-macos",
    srcs = ["//misc/ripunzip:ripunzip-macos"],
    executable = True,
)

register_toolchains(
    "@nodejs_toolchains//:all",
)

<!DOCTYPE qhelp PUBLIC
"-//Semmle//qhelp//EN"
"qhelp.dtd">
<qhelp>

<overview>
<p>
Sanitizing untrusted URLs is an important technique for preventing attacks such as request
forgeries and malicious redirections. Often, this is done by checking that the host of a URL
is in a set of allowed hosts.
</p>
<p>
If a regular expression implements such a check, it is easy to accidentally make the check too
permissive by not escaping regular-expression meta-characters such as <code>.</code>.
</p>
<p>
Even if the check is not used in a security-critical context, the incomplete check may still cause
undesirable behavior when it accidentally succeeds.
</p>
</overview>

<recommendation>
<p>
Escape all meta-characters appropriately when constructing regular expressions for security checks,
paying special attention to the <code>.</code> meta-character.
</p>
</recommendation>

<example>
<p>
The following example code checks that a URL redirection will reach the <code>example.com</code>
domain, or one of its subdomains.
</p>
<sample src="IncompleteHostnameRegexp.go"/>
<p>
The check is however easy to bypass because the unescaped <code>.</code> allows for any character
before <code>example.com</code>, effectively allowing the redirect to go to an attacker-controlled
domain such as <code>wwwXexample.com</code>.
</p>
<p>
Address this vulnerability by escaping <code>.</code> appropriately:
</p>
<sample src="IncompleteHostnameRegexpGood.go"/>
</example>

<references>
<li>OWASP: <a href="https://www.owasp.org/index.php/Server_Side_Request_Forgery">SSRF</a></li>
<li>OWASP: <a href="https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html">Unvalidated Redirects and Forwards Cheat Sheet</a>.</li>
</references>
</qhelp>

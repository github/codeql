go.mod:
#    0| [GoModFile] library-tests/semmle/go/PrintAst/go.mod
#    1|   0: [GoModModuleLine] go.mod module line
#    3|   1: [GoModGoLine] go.mod go line
input.go:
#    0| [GoFile] library-tests/semmle/go/PrintAst/input.go
#    1|   package: [Ident] main
#    5|   1: [CommentGroup] comment group
#    5|     0: [SlashSlashComment] comment
#    7|   2: [CommentGroup] comment group
#    7|     0: [SlashSlashComment] comment
#    9|   3: [DocComment] comment group
#    9|     0: [SlashSlashComment] comment
#   17|   4: [CommentGroup] comment group
#   17|     0: [SlashSlashComment] comment
#   45|   5: [DocComment] comment group
#   45|     0: [SlashSlashComment] comment
#   64|   6: [DocComment] comment group
#   64|     0: [SlashSlashComment] comment
#   74|   7: [DocComment] comment group
#   74|     0: [SlashSlashComment] comment
#  111|   8: [DocComment] comment group
#  111|     0: [SlashSlashComment] comment
#  127|   9: [DocComment] comment group
#  127|     0: [SlashSlashComment] comment
#  132|   10: [DocComment] comment group
#  132|     0: [SlashSlashComment] comment
#    3|   11: [ImportDecl] import declaration
#    3|     0: [ImportSpec] import specifier
#    3|       0: [StringLit] "fmt"
other.go:
#    0| [GoFile] library-tests/semmle/go/PrintAst/other.go
#    1|   package: [Ident] main
#    8|   1: [FuncDecl] function declaration
#    8|     0: [FunctionName, Ident] hasNested
#    8|         Type = func() 
#    8|     1: [FuncTypeExpr] function type
#    8|     2: [BlockStmt] block statement
#   10|       0: [DefineStmt] ... := ...
#   10|         0: [Ident, VariableName] myNested
#   10|             Type = func() int
#   10|         1: [FuncLit] function literal
#   10|             Type = func() int
#   10|           0: [FuncTypeExpr] function type
#   10|               Type = func() int
#   10|             0: [ResultVariableDecl] result variable declaration
#   10|               0: [Ident, TypeName] int
#   10|                   Type = int
#   10|           1: [BlockStmt] block statement
#   10|             0: [ReturnStmt] return statement
#   10|               0: [IntLit] 1
#   10|                   Type = int
#   10|                   Value = [IntLit] 1
#   11|       1: [ExprStmt] expression statement
#   11|         0: [CallExpr] call to myNested
#   11|             Type = int
#   11|           0: [Ident, VariableName] myNested
#   11|               Type = func() int
#   15|   2: [VarDecl] variable declaration
#   15|     0: [ValueSpec] value declaration specifier
#   15|       0: [Ident, VariableName] x
#   15|           Type = int
#   15|       1: [Ident, TypeName] int
#   15|           Type = int
#   15|       2: [IntLit] 0
#   15|           Type = int
#   15|           Value = [IntLit] 0

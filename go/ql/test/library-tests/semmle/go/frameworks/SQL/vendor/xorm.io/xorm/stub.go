// Code generated by depstubber. DO NOT EDIT.
// This is a simple stub for xorm.io/xorm, strictly for use in testing.

// See the LICENSE file for information about the licensing of the original library.
// Source: xorm.io/xorm (exports: Engine,Session; functions: )

// Package xorm is a stub of xorm.io/xorm, generated by depstubber.
package xorm

import (
	context "context"
	sql "database/sql"
	io "io"
	reflect "reflect"
	strings "strings"
	time "time"
)

type Engine struct {
	TZLocation *time.Location
	DatabaseTZ *time.Location
}

func (_ *Engine) AddHook(_ interface{}) {}

func (_ *Engine) After(_ func(interface{})) *Session {
	return nil
}

func (_ *Engine) Alias(_ string) *Session {
	return nil
}

func (_ *Engine) AllCols() *Session {
	return nil
}

func (_ *Engine) Asc(_ ...string) *Session {
	return nil
}

func (_ *Engine) AutoIncrStr() string {
	return ""
}

func (_ *Engine) Before(_ func(interface{})) *Session {
	return nil
}

func (_ *Engine) BufferSize(_ int) *Session {
	return nil
}

func (_ *Engine) Cascade(_ ...bool) *Session {
	return nil
}

func (_ *Engine) Charset(_ string) *Session {
	return nil
}

func (_ *Engine) ClearCache(_ ...interface{}) error {
	return nil
}

func (_ *Engine) ClearCacheBean(_ interface{}, _ string) error {
	return nil
}

func (_ *Engine) Close() error {
	return nil
}

func (_ *Engine) Cols(_ ...string) *Session {
	return nil
}

func (_ *Engine) Context(_ context.Context) *Session {
	return nil
}

func (_ *Engine) Count(_ ...interface{}) (int64, error) {
	return 0, nil
}

func (_ *Engine) CreateIndexes(_ interface{}) error {
	return nil
}

func (_ *Engine) CreateTables(_ ...interface{}) error {
	return nil
}

func (_ *Engine) CreateUniques(_ interface{}) error {
	return nil
}

func (_ *Engine) DB() interface{} {
	return nil
}

func (_ *Engine) DBMetas() ([]interface{}, error) {
	return nil, nil
}

func (_ *Engine) DataSourceName() string {
	return ""
}

func (_ *Engine) Decr(_ string, _ ...interface{}) *Session {
	return nil
}

func (_ *Engine) Delete(_ interface{}) (int64, error) {
	return 0, nil
}

func (_ *Engine) Desc(_ ...string) *Session {
	return nil
}

func (_ *Engine) Dialect() interface{} {
	return nil
}

func (_ *Engine) Distinct(_ ...string) *Session {
	return nil
}

func (_ *Engine) DriverName() string {
	return ""
}

func (_ *Engine) DropIndexes(_ interface{}) error {
	return nil
}

func (_ *Engine) DropTables(_ ...interface{}) error {
	return nil
}

func (_ *Engine) DumpAll(_ io.Writer, _ ...interface{}) error {
	return nil
}

func (_ *Engine) DumpAllToFile(_ string, _ ...interface{}) error {
	return nil
}

func (_ *Engine) DumpTables(_ []interface{}, _ io.Writer, _ ...interface{}) error {
	return nil
}

func (_ *Engine) DumpTablesToFile(_ []interface{}, _ string, _ ...interface{}) error {
	return nil
}

func (_ *Engine) EnableSessionID(_ bool) {}

func (_ *Engine) Exec(_ ...interface{}) (sql.Result, error) {
	return nil, nil
}

func (_ *Engine) Exist(_ ...interface{}) (bool, error) {
	return false, nil
}

func (_ *Engine) Find(_ interface{}, _ ...interface{}) error {
	return nil
}

func (_ *Engine) FindAndCount(_ interface{}, _ ...interface{}) (int64, error) {
	return 0, nil
}

func (_ *Engine) Get(_ interface{}) (bool, error) {
	return false, nil
}

func (_ *Engine) GetCacher(_ string) interface{} {
	return nil
}

func (_ *Engine) GetColumnMapper() interface{} {
	return nil
}

func (_ *Engine) GetDefaultCacher() interface{} {
	return nil
}

func (_ *Engine) GetTZDatabase() *time.Location {
	return nil
}

func (_ *Engine) GetTZLocation() *time.Location {
	return nil
}

func (_ *Engine) GetTableMapper() interface{} {
	return nil
}

func (_ *Engine) GroupBy(_ string) *Session {
	return nil
}

func (_ *Engine) Having(_ string) *Session {
	return nil
}

func (_ *Engine) ID(_ interface{}) *Session {
	return nil
}

func (_ *Engine) Import(_ io.Reader) ([]sql.Result, error) {
	return nil, nil
}

func (_ *Engine) ImportFile(_ string) ([]sql.Result, error) {
	return nil, nil
}

func (_ *Engine) In(_ string, _ ...interface{}) *Session {
	return nil
}

func (_ *Engine) Incr(_ string, _ ...interface{}) *Session {
	return nil
}

func (_ *Engine) Insert(_ ...interface{}) (int64, error) {
	return 0, nil
}

func (_ *Engine) InsertOne(_ interface{}) (int64, error) {
	return 0, nil
}

func (_ *Engine) IsTableEmpty(_ interface{}) (bool, error) {
	return false, nil
}

func (_ *Engine) IsTableExist(_ interface{}) (bool, error) {
	return false, nil
}

func (_ *Engine) Iterate(_ interface{}, _ IterFunc) error {
	return nil
}

func (_ *Engine) Join(_ string, _ interface{}, _ string, _ ...interface{}) *Session {
	return nil
}

func (_ *Engine) Limit(_ int, _ ...int) *Session {
	return nil
}

func (_ *Engine) Logger() interface{} {
	return nil
}

func (_ *Engine) MapCacher(_ interface{}, _ interface{}) error {
	return nil
}

func (_ *Engine) MustCols(_ ...string) *Session {
	return nil
}

func (_ *Engine) NewDB() (interface{}, error) {
	return nil, nil
}

func (_ *Engine) NewSession() *Session {
	return nil
}

func (_ *Engine) NoAutoCondition(_ ...bool) *Session {
	return nil
}

func (_ *Engine) NoAutoTime() *Session {
	return nil
}

func (_ *Engine) NoCache() *Session {
	return nil
}

func (_ *Engine) NoCascade() *Session {
	return nil
}

func (_ *Engine) NotIn(_ string, _ ...interface{}) *Session {
	return nil
}

func (_ *Engine) Nullable(_ ...string) *Session {
	return nil
}

func (_ *Engine) Omit(_ ...string) *Session {
	return nil
}

func (_ *Engine) OrderBy(_ string) *Session {
	return nil
}

func (_ *Engine) Ping() error {
	return nil
}

func (_ *Engine) PingContext(_ context.Context) error {
	return nil
}

func (_ *Engine) Prepare() *Session {
	return nil
}

func (_ *Engine) Query(_ ...interface{}) ([]map[string][]byte, error) {
	return nil, nil
}

func (_ *Engine) QueryInterface(_ ...interface{}) ([]map[string]interface{}, error) {
	return nil, nil
}

func (_ *Engine) QueryString(_ ...interface{}) ([]map[string]string, error) {
	return nil, nil
}

func (_ *Engine) Quote(_ string) string {
	return ""
}

func (_ *Engine) QuoteTo(_ *strings.Builder, _ string) {}

func (_ *Engine) Rows(_ interface{}) (*Rows, error) {
	return nil, nil
}

func (_ *Engine) SQL(_ interface{}, _ ...interface{}) *Session {
	return nil
}

func (_ *Engine) SQLType(_ interface{}) string {
	return ""
}

func (_ *Engine) Select(_ string) *Session {
	return nil
}

func (_ *Engine) SetCacher(_ string, _ interface{}) {}

func (_ *Engine) SetColumnMapper(_ interface{}) {}

func (_ *Engine) SetConnMaxLifetime(_ time.Duration) {}

func (_ *Engine) SetDefaultCacher(_ interface{}) {}

func (_ *Engine) SetDefaultContext(_ context.Context) {}

func (_ *Engine) SetDisableGlobalCache(_ bool) {}

func (_ *Engine) SetExpr(_ string, _ interface{}) *Session {
	return nil
}

func (_ *Engine) SetLogLevel(_ interface{}) {}

func (_ *Engine) SetLogger(_ interface{}) {}

func (_ *Engine) SetMapper(_ interface{}) {}

func (_ *Engine) SetMaxIdleConns(_ int) {}

func (_ *Engine) SetMaxOpenConns(_ int) {}

func (_ *Engine) SetQuotePolicy(_ interface{}) {}

func (_ *Engine) SetSchema(_ string) {}

func (_ *Engine) SetTZDatabase(_ *time.Location) {}

func (_ *Engine) SetTZLocation(_ *time.Location) {}

func (_ *Engine) SetTableMapper(_ interface{}) {}

func (_ *Engine) SetTagIdentifier(_ string) {}

func (_ *Engine) ShowSQL(_ ...bool) {}

func (_ *Engine) StoreEngine(_ string) *Session {
	return nil
}

func (_ *Engine) Sum(_ interface{}, _ string) (float64, error) {
	return 0, nil
}

func (_ *Engine) SumInt(_ interface{}, _ string) (int64, error) {
	return 0, nil
}

func (_ *Engine) Sums(_ interface{}, _ ...string) ([]float64, error) {
	return nil, nil
}

func (_ *Engine) SumsInt(_ interface{}, _ ...string) ([]int64, error) {
	return nil, nil
}

func (_ *Engine) Sync(_ ...interface{}) error {
	return nil
}

func (_ *Engine) Sync2(_ ...interface{}) error {
	return nil
}

func (_ *Engine) Table(_ interface{}) *Session {
	return nil
}

func (_ *Engine) TableInfo(_ interface{}) (interface{}, error) {
	return nil, nil
}

func (_ *Engine) TableName(_ interface{}, _ ...bool) string {
	return ""
}

func (_ *Engine) Transaction(_ func(*Session) (interface{}, error)) (interface{}, error) {
	return nil, nil
}

func (_ *Engine) UnMapType(_ reflect.Type) {}

func (_ *Engine) Unscoped() *Session {
	return nil
}

func (_ *Engine) Update(_ interface{}, _ ...interface{}) (int64, error) {
	return 0, nil
}

func (_ *Engine) UseBool(_ ...string) *Session {
	return nil
}

func (_ *Engine) Where(_ interface{}, _ ...interface{}) *Session {
	return nil
}

type IterFunc func(int, interface{}) error

type Rows struct{}

func (_ *Rows) Close() error {
	return nil
}

func (_ *Rows) Err() error {
	return nil
}

func (_ *Rows) Next() bool {
	return false
}

func (_ *Rows) Scan(_ interface{}) error {
	return nil
}

type Session struct{}

func (_ *Session) After(_ func(interface{})) *Session {
	return nil
}

func (_ *Session) Alias(_ string) *Session {
	return nil
}

func (_ *Session) AllCols() *Session {
	return nil
}

func (_ *Session) And(_ interface{}, _ ...interface{}) *Session {
	return nil
}

func (_ *Session) Asc(_ ...string) *Session {
	return nil
}

func (_ *Session) Before(_ func(interface{})) *Session {
	return nil
}

func (_ *Session) Begin() error {
	return nil
}

func (_ *Session) BufferSize(_ int) *Session {
	return nil
}

func (_ *Session) Cascade(_ ...bool) *Session {
	return nil
}

func (_ *Session) Charset(_ string) *Session {
	return nil
}

func (_ *Session) Close() error {
	return nil
}

func (_ *Session) Cols(_ ...string) *Session {
	return nil
}

func (_ *Session) Commit() error {
	return nil
}

func (_ *Session) Conds() interface{} {
	return nil
}

func (_ *Session) Context(_ context.Context) *Session {
	return nil
}

func (_ *Session) ContextCache(_ interface{}) *Session {
	return nil
}

func (_ *Session) Count(_ ...interface{}) (int64, error) {
	return 0, nil
}

func (_ *Session) CreateIndexes(_ interface{}) error {
	return nil
}

func (_ *Session) CreateTable(_ interface{}) error {
	return nil
}

func (_ *Session) CreateUniques(_ interface{}) error {
	return nil
}

func (_ *Session) DB() interface{} {
	return nil
}

func (_ *Session) Decr(_ string, _ ...interface{}) *Session {
	return nil
}

func (_ *Session) Delete(_ interface{}) (int64, error) {
	return 0, nil
}

func (_ *Session) Desc(_ ...string) *Session {
	return nil
}

func (_ *Session) Distinct(_ ...string) *Session {
	return nil
}

func (_ *Session) DropIndexes(_ interface{}) error {
	return nil
}

func (_ *Session) DropTable(_ interface{}) error {
	return nil
}

func (_ *Session) Engine() *Engine {
	return nil
}

func (_ *Session) Exec(_ ...interface{}) (sql.Result, error) {
	return nil, nil
}

func (_ *Session) Exist(_ ...interface{}) (bool, error) {
	return false, nil
}

func (_ *Session) Find(_ interface{}, _ ...interface{}) error {
	return nil
}

func (_ *Session) FindAndCount(_ interface{}, _ ...interface{}) (int64, error) {
	return 0, nil
}

func (_ *Session) ForUpdate() *Session {
	return nil
}

func (_ *Session) Get(_ interface{}) (bool, error) {
	return false, nil
}

func (_ *Session) GroupBy(_ string) *Session {
	return nil
}

func (_ *Session) Having(_ string) *Session {
	return nil
}

func (_ *Session) ID(_ interface{}) *Session {
	return nil
}

func (_ *Session) Import(_ io.Reader) ([]sql.Result, error) {
	return nil, nil
}

func (_ *Session) ImportFile(_ string) ([]sql.Result, error) {
	return nil, nil
}

func (_ *Session) In(_ string, _ ...interface{}) *Session {
	return nil
}

func (_ *Session) Incr(_ string, _ ...interface{}) *Session {
	return nil
}

func (_ *Session) Insert(_ ...interface{}) (int64, error) {
	return 0, nil
}

func (_ *Session) InsertMulti(_ interface{}) (int64, error) {
	return 0, nil
}

func (_ *Session) InsertOne(_ interface{}) (int64, error) {
	return 0, nil
}

func (_ *Session) IsClosed() bool {
	return false
}

func (_ *Session) IsInTx() bool {
	return false
}

func (_ *Session) IsTableEmpty(_ interface{}) (bool, error) {
	return false, nil
}

func (_ *Session) IsTableExist(_ interface{}) (bool, error) {
	return false, nil
}

func (_ *Session) Iterate(_ interface{}, _ IterFunc) error {
	return nil
}

func (_ *Session) Join(_ string, _ interface{}, _ string, _ ...interface{}) *Session {
	return nil
}

func (_ *Session) LastSQL() (string, []interface{}) {
	return "", nil
}

func (_ *Session) Limit(_ int, _ ...int) *Session {
	return nil
}

func (_ *Session) MustCols(_ ...string) *Session {
	return nil
}

func (_ *Session) MustLogSQL(_ ...bool) *Session {
	return nil
}

func (_ *Session) NoAutoCondition(_ ...bool) *Session {
	return nil
}

func (_ *Session) NoAutoTime() *Session {
	return nil
}

func (_ *Session) NoCache() *Session {
	return nil
}

func (_ *Session) NoCascade() *Session {
	return nil
}

func (_ *Session) NotIn(_ string, _ ...interface{}) *Session {
	return nil
}

func (_ *Session) Nullable(_ ...string) *Session {
	return nil
}

func (_ *Session) Omit(_ ...string) *Session {
	return nil
}

func (_ *Session) Or(_ interface{}, _ ...interface{}) *Session {
	return nil
}

func (_ *Session) OrderBy(_ string) *Session {
	return nil
}

func (_ *Session) Ping() error {
	return nil
}

func (_ *Session) PingContext(_ context.Context) error {
	return nil
}

func (_ *Session) Prepare() *Session {
	return nil
}

func (_ *Session) Query(_ ...interface{}) ([]map[string][]byte, error) {
	return nil, nil
}

func (_ *Session) QueryInterface(_ ...interface{}) ([]map[string]interface{}, error) {
	return nil, nil
}

func (_ *Session) QuerySliceString(_ ...interface{}) ([][]string, error) {
	return nil, nil
}

func (_ *Session) QueryString(_ ...interface{}) ([]map[string]string, error) {
	return nil, nil
}

func (_ *Session) Rollback() error {
	return nil
}

func (_ *Session) Rows(_ interface{}) (*Rows, error) {
	return nil, nil
}

func (_ *Session) SQL(_ interface{}, _ ...interface{}) *Session {
	return nil
}

func (_ *Session) Select(_ string) *Session {
	return nil
}

func (_ *Session) SetExpr(_ string, _ interface{}) *Session {
	return nil
}

func (_ *Session) StoreEngine(_ string) *Session {
	return nil
}

func (_ *Session) Sum(_ interface{}, _ string) (float64, error) {
	return 0, nil
}

func (_ *Session) SumInt(_ interface{}, _ string) (int64, error) {
	return 0, nil
}

func (_ *Session) Sums(_ interface{}, _ ...string) ([]float64, error) {
	return nil, nil
}

func (_ *Session) SumsInt(_ interface{}, _ ...string) ([]int64, error) {
	return nil, nil
}

func (_ *Session) Sync2(_ ...interface{}) error {
	return nil
}

func (_ *Session) Table(_ interface{}) *Session {
	return nil
}

func (_ *Session) Unscoped() *Session {
	return nil
}

func (_ *Session) Update(_ interface{}, _ ...interface{}) (int64, error) {
	return 0, nil
}

func (_ *Session) UseBool(_ ...string) *Session {
	return nil
}

func (_ *Session) Where(_ interface{}, _ ...interface{}) *Session {
	return nil
}

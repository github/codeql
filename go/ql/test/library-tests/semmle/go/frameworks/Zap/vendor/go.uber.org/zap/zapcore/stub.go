// Code generated by depstubber. DO NOT EDIT.
// This is a simple stub for go.uber.org/zap/zapcore, strictly for use in testing.

// See the LICENSE file for information about the licensing of the original library.
// Source: go.uber.org/zap/zapcore (exports: Core; functions: )

// Package zapcore is a stub of go.uber.org/zap/zapcore, generated by depstubber.
package zapcore

import (
	time "time"
)

type ArrayEncoder interface {
	AppendArray(_ ArrayMarshaler) error
	AppendBool(_ bool)
	AppendByteString(_ []byte)
	AppendComplex128(_ complex128)
	AppendComplex64(_ complex64)
	AppendDuration(_ time.Duration)
	AppendFloat32(_ float32)
	AppendFloat64(_ float64)
	AppendInt(_ int)
	AppendInt16(_ int16)
	AppendInt32(_ int32)
	AppendInt64(_ int64)
	AppendInt8(_ int8)
	AppendObject(_ ObjectMarshaler) error
	AppendReflected(_ interface{}) error
	AppendString(_ string)
	AppendTime(_ time.Time)
	AppendUint(_ uint)
	AppendUint16(_ uint16)
	AppendUint32(_ uint32)
	AppendUint64(_ uint64)
	AppendUint8(_ byte)
	AppendUintptr(_ uintptr)
}

type ArrayMarshaler interface {
	MarshalLogArray(_ ArrayEncoder) error
}

type CheckWriteAction uint8

type CheckedEntry struct {
	Entry       Entry
	ErrorOutput WriteSyncer
}

func (_ *CheckedEntry) AddCore(_ Entry, _ Core) *CheckedEntry {
	return nil
}

func (_ *CheckedEntry) Should(_ Entry, _ CheckWriteAction) *CheckedEntry {
	return nil
}

func (_ *CheckedEntry) Write(_ ...Field) {}

type Core interface {
	Check(_ Entry, _ *CheckedEntry) *CheckedEntry
	Enabled(_ Level) bool
	Sync() error
	With(_ []Field) Core
	Write(_ Entry, _ []Field) error
}

type Entry struct {
	Level      Level
	Time       time.Time
	LoggerName string
	Message    string
	Caller     EntryCaller
	Stack      string
}

type EntryCaller struct {
	Defined  bool
	PC       uintptr
	File     string
	Line     int
	Function string
}

func (_ EntryCaller) FullPath() string {
	return ""
}

func (_ EntryCaller) String() string {
	return ""
}

func (_ EntryCaller) TrimmedPath() string {
	return ""
}

type Field struct {
	Key       string
	Type      FieldType
	Integer   int64
	String    string
	Interface interface{}
}

func (_ Field) AddTo(_ ObjectEncoder) {}

func (_ Field) Equals(_ Field) bool {
	return false
}

type FieldType uint8

type Level int8

func (_ Level) CapitalString() string {
	return ""
}

func (_ Level) Enabled(_ Level) bool {
	return false
}

func (_ Level) MarshalText() ([]byte, error) {
	return nil, nil
}

func (_ Level) String() string {
	return ""
}

func (_ *Level) Get() interface{} {
	return nil
}

func (_ *Level) Set(_ string) error {
	return nil
}

func (_ *Level) UnmarshalText(_ []byte) error {
	return nil
}

type ObjectEncoder interface {
	AddArray(_ string, _ ArrayMarshaler) error
	AddBinary(_ string, _ []byte)
	AddBool(_ string, _ bool)
	AddByteString(_ string, _ []byte)
	AddComplex128(_ string, _ complex128)
	AddComplex64(_ string, _ complex64)
	AddDuration(_ string, _ time.Duration)
	AddFloat32(_ string, _ float32)
	AddFloat64(_ string, _ float64)
	AddInt(_ string, _ int)
	AddInt16(_ string, _ int16)
	AddInt32(_ string, _ int32)
	AddInt64(_ string, _ int64)
	AddInt8(_ string, _ int8)
	AddObject(_ string, _ ObjectMarshaler) error
	AddReflected(_ string, _ interface{}) error
	AddString(_ string, _ string)
	AddTime(_ string, _ time.Time)
	AddUint(_ string, _ uint)
	AddUint16(_ string, _ uint16)
	AddUint32(_ string, _ uint32)
	AddUint64(_ string, _ uint64)
	AddUint8(_ string, _ byte)
	AddUintptr(_ string, _ uintptr)
	OpenNamespace(_ string)
}

type ObjectMarshaler interface {
	MarshalLogObject(_ ObjectEncoder) error
}

type WriteSyncer interface {
	Sync() error
	Write(_ []byte) (int, error)
}

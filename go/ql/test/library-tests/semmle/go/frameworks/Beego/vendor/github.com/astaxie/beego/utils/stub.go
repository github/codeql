// Code generated by depstubber. DO NOT EDIT.
// This is a simple stub for github.com/astaxie/beego/utils, strictly for use in testing.

// See the LICENSE file for information about the licensing of the original library.
// Source: github.com/astaxie/beego/utils (exports: BeeMap,Email; functions: Display,GetDisplayString,SliceChunk,SliceDiff,SliceFilter,SliceIntersect,SliceMerge,SlicePad,SliceRand,SliceReduce,SliceShuffle,SliceUnique)

// Package utils is a stub of github.com/astaxie/beego/utils, generated by depstubber.
package utils

import (
	io "io"
	smtp "net/smtp"
	textproto "net/textproto"
)

type Attachment struct {
	Filename string
	Header   textproto.MIMEHeader
	Content  []byte
}

type BeeMap struct{}

func NewBeeMap() *BeeMap {
	return nil
}

func (_ *BeeMap) Check(_ interface{}) bool {
	return false
}

func (_ *BeeMap) Count() int {
	return 0
}

func (_ *BeeMap) Delete(_ interface{}) {}

func (_ *BeeMap) Get(_ interface{}) interface{} {
	return nil
}

func (_ *BeeMap) Items() map[interface{}]interface{} {
	return nil
}

func (_ *BeeMap) Set(_ interface{}, _ interface{}) bool {
	return false
}

type Email struct {
	Auth        smtp.Auth
	Identity    string
	Username    string
	Password    string
	Host        string
	Port        int
	From        string
	To          []string
	Bcc         []string
	Cc          []string
	Subject     string
	Text        string
	HTML        string
	Headers     textproto.MIMEHeader
	Attachments []*Attachment
	ReadReceipt []string
}

func (_ *Email) Attach(_ io.Reader, _ string, _ ...string) (*Attachment, error) {
	return nil, nil
}

func (_ *Email) AttachFile(_ ...string) (*Attachment, error) {
	return nil, nil
}

func (_ *Email) Bytes() ([]byte, error) {
	return nil, nil
}

func (_ *Email) Send() error {
	return nil
}

func Display(_ ...interface{}) {
}

func GetDisplayString(_ ...interface{}) string {
	return ""
}

func SliceChunk(_ []interface{}, _ int) [][]interface{} {
	return nil
}

func SliceDiff(_ []interface{}, _ []interface{}) []interface{} {
	return nil
}

func SliceFilter(_ []interface{}, _ interface{}) []interface{} {
	return nil
}

func SliceIntersect(_ []interface{}, _ []interface{}) []interface{} {
	return nil
}

func SliceMerge(_ []interface{}, _ []interface{}) []interface{} {
	return nil
}

func SlicePad(_ []interface{}, _ int, _ interface{}) []interface{} {
	return nil
}

func SliceRand(_ []interface{}) interface{} {
	return nil
}

func SliceReduce(_ []interface{}, _ interface{}) []interface{} {
	return nil
}

func SliceShuffle(_ []interface{}) []interface{} {
	return nil
}

func SliceUnique(_ []interface{}) []interface{} {
	return nil
}

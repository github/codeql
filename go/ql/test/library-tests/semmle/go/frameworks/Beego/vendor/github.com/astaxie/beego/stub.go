// Code generated by depstubber. DO NOT EDIT.
// This is a simple stub for github.com/astaxie/beego, strictly for use in testing.

// See the LICENSE file for information about the licensing of the original library.
// Source: github.com/astaxie/beego (exports: App,Controller; functions: Alert,Critical,Debug,Emergency,Error,HTML2str,Htmlquote,Htmlunquote,Info,Informational,MapGet,Notice,ParseForm,Str2html,Substr,Trace,Walk,Warn,Warning)

// Package beego is a stub of github.com/astaxie/beego, generated by depstubber.
package beego

import (
	context "github.com/astaxie/beego/context"
	template "html/template"
	multipart "mime/multipart"
	http "net/http"
	url "net/url"
	filepath "path/filepath"
)

type App struct {
	Handlers *ControllerRegister
	Server   *http.Server
}

func (_ *App) Run(_ ...MiddleWare) {}

type Controller struct {
	Ctx            interface{}
	Data           map[interface{}]interface{}
	AppController  interface{}
	TplName        string
	ViewPath       string
	Layout         string
	LayoutSections map[string]string
	TplPrefix      string
	TplExt         string
	EnableRender   bool
	XSRFExpire     int
	EnableXSRF     bool
	CruSession     interface{}
}

func (_ *Controller) Abort(_ string) {}

func (_ *Controller) CheckXSRFCookie() bool {
	return false
}

func (_ *Controller) CustomAbort(_ int, _ string) {}

func (_ *Controller) DelSession(_ interface{}) {}

func (_ *Controller) Delete() {}

func (_ *Controller) DestroySession() {}

func (_ *Controller) Finish() {}

func (_ *Controller) Get() {}

func (_ *Controller) GetBool(_ string, _ ...bool) (bool, error) {
	return false, nil
}

func (_ *Controller) GetControllerAndAction() (string, string) {
	return "", ""
}

func (_ *Controller) GetFile(_ string) (multipart.File, *multipart.FileHeader, error) {
	return nil, nil, nil
}

func (_ *Controller) GetFiles(_ string) ([]*multipart.FileHeader, error) {
	return nil, nil
}

func (_ *Controller) GetFloat(_ string, _ ...float64) (float64, error) {
	return 0, nil
}

func (_ *Controller) GetInt(_ string, _ ...int) (int, error) {
	return 0, nil
}

func (_ *Controller) GetInt16(_ string, _ ...int16) (int16, error) {
	return 0, nil
}

func (_ *Controller) GetInt32(_ string, _ ...int32) (int32, error) {
	return 0, nil
}

func (_ *Controller) GetInt64(_ string, _ ...int64) (int64, error) {
	return 0, nil
}

func (_ *Controller) GetInt8(_ string, _ ...int8) (int8, error) {
	return 0, nil
}

func (_ *Controller) GetSecureCookie(_ string, _ string) (string, bool) {
	return "", false
}

func (_ *Controller) GetSession(_ interface{}) interface{} {
	return nil
}

func (_ *Controller) GetString(_ string, _ ...string) string {
	return ""
}

func (_ *Controller) GetStrings(_ string, _ ...[]string) []string {
	return nil
}

func (_ *Controller) GetUint16(_ string, _ ...uint16) (uint16, error) {
	return 0, nil
}

func (_ *Controller) GetUint32(_ string, _ ...uint32) (uint32, error) {
	return 0, nil
}

func (_ *Controller) GetUint64(_ string, _ ...uint64) (uint64, error) {
	return 0, nil
}

func (_ *Controller) GetUint8(_ string, _ ...byte) (byte, error) {
	return 0, nil
}

func (_ *Controller) HandlerFunc(_ string) bool {
	return false
}

func (_ *Controller) Head() {}

func (_ *Controller) Init(_ interface{}, _ string, _ string, _ interface{}) {}

func (_ *Controller) Input() url.Values {
	return nil
}

func (_ *Controller) IsAjax() bool {
	return false
}

func (_ *Controller) Mapping(_ string, _ func()) {}

func (_ *Controller) Options() {}

func (_ *Controller) ParseForm(_ interface{}) error {
	return nil
}

func (_ *Controller) Patch() {}

func (_ *Controller) Post() {}

func (_ *Controller) Prepare() {}

func (_ *Controller) Put() {}

func (_ *Controller) Redirect(_ string, _ int) {}

func (_ *Controller) Render() error {
	return nil
}

func (_ *Controller) RenderBytes() ([]byte, error) {
	return nil, nil
}

func (_ *Controller) RenderString() (string, error) {
	return "", nil
}

func (_ *Controller) SaveToFile(_ string, _ string) error {
	return nil
}

func (_ *Controller) ServeFormatted(_ ...bool) {}

func (_ *Controller) ServeJSON(_ ...bool) {}

func (_ *Controller) ServeJSONP() {}

func (_ *Controller) ServeXML() {}

func (_ *Controller) ServeYAML() {}

func (_ *Controller) SessionRegenerateID() {}

func (_ *Controller) SetData(_ interface{}) {}

func (_ *Controller) SetSecureCookie(_ string, _ string, _ string, _ ...interface{}) {}

func (_ *Controller) SetSession(_ interface{}, _ interface{}) {}

func (_ *Controller) StartSession() interface{} {
	return nil
}

func (_ *Controller) StopRun() {}

func (_ *Controller) Trace() {}

func (_ *Controller) URLFor(_ string, _ ...interface{}) string {
	return ""
}

func (_ *Controller) URLMapping() {}

func (_ *Controller) XSRFFormHTML() string {
	return ""
}

func (_ *Controller) XSRFToken() string {
	return ""
}

type ControllerInfo struct{}

func (_ *ControllerInfo) GetPattern() string {
	return ""
}

type ControllerInterface interface {
	CheckXSRFCookie() bool
	Delete()
	Finish()
	Get()
	HandlerFunc(_ string) bool
	Head()
	Init(_ interface{}, _ string, _ string, _ interface{})
	Options()
	Patch()
	Post()
	Prepare()
	Put()
	Render() error
	Trace()
	URLMapping()
	XSRFToken() string
}

type ControllerRegister struct{}

func (_ *ControllerRegister) Add(_ string, _ ControllerInterface, _ ...string) {}

func (_ *ControllerRegister) AddAuto(_ ControllerInterface) {}

func (_ *ControllerRegister) AddAutoPrefix(_ string, _ ControllerInterface) {}

func (_ *ControllerRegister) AddMethod(_ string, _ string, _ FilterFunc) {}

func (_ *ControllerRegister) Any(_ string, _ FilterFunc) {}

func (_ *ControllerRegister) Delete(_ string, _ FilterFunc) {}

func (_ *ControllerRegister) FindPolicy(_ interface{}) []PolicyFunc {
	return nil
}

func (_ *ControllerRegister) FindRouter(_ interface{}) (*ControllerInfo, bool) {
	return nil, false
}

func (_ *ControllerRegister) Get(_ string, _ FilterFunc) {}

func (_ *ControllerRegister) GetContext() interface{} {
	return nil
}

func (_ *ControllerRegister) GiveBackContext(_ interface{}) {}

func (_ *ControllerRegister) Handler(_ string, _ http.Handler, _ ...interface{}) {}

func (_ *ControllerRegister) Head(_ string, _ FilterFunc) {}

func (_ *ControllerRegister) Include(_ ...ControllerInterface) {}

func (_ *ControllerRegister) InsertFilter(_ string, _ int, _ FilterFunc, _ ...bool) error {
	return nil
}

func (_ *ControllerRegister) Options(_ string, _ FilterFunc) {}

func (_ *ControllerRegister) Patch(_ string, _ FilterFunc) {}

func (_ *ControllerRegister) Post(_ string, _ FilterFunc) {}

func (_ *ControllerRegister) Put(_ string, _ FilterFunc) {}

func (_ *ControllerRegister) ServeHTTP(_ http.ResponseWriter, _ *http.Request) {}

func (_ *ControllerRegister) URLFor(_ string, _ ...interface{}) string {
	return ""
}

func Alert(_ ...interface{}) {}

func Critical(_ ...interface{}) {}

func Debug(_ ...interface{}) {}

func Emergency(_ ...interface{}) {}

func Error(_ ...interface{}) {}

type FilterFunc func(*context.Context)

func HTML2str(_ string) string {
	return ""
}

func Htmlquote(_ string) string {
	return ""
}

func Htmlunquote(_ string) string {
	return ""
}

func Info(_ ...interface{}) {}

func Informational(_ ...interface{}) {}

func MapGet(_ interface{}, _ ...interface{}) (interface{}, error) {
	return nil, nil
}

type MiddleWare func(http.Handler) http.Handler

func Notice(_ ...interface{}) {}

func ParseForm(_ url.Values, _ interface{}) error {
	return nil
}

type PolicyFunc func(interface{})

func Post(rootpath string, f FilterFunc) *App {
	return nil
}

func Str2html(_ string) template.HTML {
	return ""
}

func Substr(_ string, _ int, _ int) string {
	return ""
}

func Trace(_ ...interface{}) {}

func Walk(_ http.FileSystem, _ string, _ filepath.WalkFunc) error {
	return nil
}

func Warn(_ ...interface{}) {}

func Warning(_ ...interface{}) {}

type FileSystem struct{}

func (_ FileSystem) Open(_ string) (http.File, error) {
	return nil, nil
}

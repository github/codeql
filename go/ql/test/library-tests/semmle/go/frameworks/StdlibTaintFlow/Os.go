// Code generated by https://github.com/gagliardetto/codebox. DO NOT EDIT.

package main

import (
	"os"
	"syscall"
	"time"
)

func TaintStepTest_OsExpand_B0I0O0(sourceCQL interface{}) interface{} {
	fromString656 := sourceCQL.(string)
	intoString414 := os.Expand(fromString656, nil)
	return intoString414
}

func TaintStepTest_OsExpandEnv_B0I0O0(sourceCQL interface{}) interface{} {
	fromString518 := sourceCQL.(string)
	intoString650 := os.ExpandEnv(fromString518)
	return intoString650
}

func TaintStepTest_OsNewFile_B0I0O0(sourceCQL interface{}) interface{} {
	fromUintptr784 := sourceCQL.(uintptr)
	intoFile957 := os.NewFile(fromUintptr784, "") // $ fsaccess=""
	return intoFile957
}

func TaintStepTest_OsPipe_B0I0O0(sourceCQL interface{}) interface{} {
	fromFile520 := sourceCQL.(*os.File)
	intoFile443, intermediateCQL, _ := os.Pipe()
	link(fromFile520, intermediateCQL)
	return intoFile443
}

func TaintStepTest_OsFileFd_B0I0O0(sourceCQL interface{}) interface{} {
	fromFile127 := sourceCQL.(os.File)
	intoUintptr483 := fromFile127.Fd()
	return intoUintptr483
}

func TaintStepTest_OsFileRead_B0I0O0(sourceCQL interface{}) interface{} {
	fromFile989 := sourceCQL.(os.File)
	var intoByte982 []byte
	fromFile989.Read(intoByte982)
	return intoByte982
}

func TaintStepTest_OsFileReadAt_B0I0O0(sourceCQL interface{}) interface{} {
	fromFile417 := sourceCQL.(os.File)
	var intoByte584 []byte
	fromFile417.ReadAt(intoByte584, 0)
	return intoByte584
}

func TaintStepTest_OsFileSyscallConn_B0I0O0(sourceCQL interface{}) interface{} {
	fromFile991 := sourceCQL.(os.File)
	intoRawConn881, _ := fromFile991.SyscallConn()
	return intoRawConn881
}

func TaintStepTest_OsFileSyscallConn_B1I0O0(sourceCQL interface{}) interface{} {
	fromRawConn186 := sourceCQL.(syscall.RawConn)
	var intoFile284 os.File
	intermediateCQL, _ := intoFile284.SyscallConn()
	link(fromRawConn186, intermediateCQL)
	return intoFile284
}

func TaintStepTest_OsFileWrite_B0I0O0(sourceCQL interface{}) interface{} {
	fromByte908 := sourceCQL.([]byte)
	var intoFile137 os.File
	intoFile137.Write(fromByte908)
	return intoFile137
}

func TaintStepTest_OsFileWriteAt_B0I0O0(sourceCQL interface{}) interface{} {
	fromByte494 := sourceCQL.([]byte)
	var intoFile873 os.File
	intoFile873.WriteAt(fromByte494, 0)
	return intoFile873
}

func TaintStepTest_OsFileWriteString_B0I0O0(sourceCQL interface{}) interface{} {
	fromString599 := sourceCQL.(string)
	var intoFile409 os.File
	intoFile409.WriteString(fromString599)
	return intoFile409
}

func RunAllTaints_Os() {
	{
		source := newSource(0)
		out := TaintStepTest_OsExpand_B0I0O0(source)
		sink(0, out)
	}
	{
		source := newSource(1)
		out := TaintStepTest_OsExpandEnv_B0I0O0(source)
		sink(1, out)
	}
	{
		source := newSource(2)
		out := TaintStepTest_OsNewFile_B0I0O0(source)
		sink(2, out)
	}
	{
		source := newSource(3)
		out := TaintStepTest_OsPipe_B0I0O0(source)
		sink(3, out)
	}
	{
		source := newSource(4)
		out := TaintStepTest_OsFileFd_B0I0O0(source)
		sink(4, out)
	}
	{
		source := newSource(5)
		out := TaintStepTest_OsFileRead_B0I0O0(source)
		sink(5, out)
	}
	{
		source := newSource(6)
		out := TaintStepTest_OsFileReadAt_B0I0O0(source)
		sink(6, out)
	}
	{
		source := newSource(7)
		out := TaintStepTest_OsFileSyscallConn_B0I0O0(source)
		sink(7, out)
	}
	{
		source := newSource(8)
		out := TaintStepTest_OsFileSyscallConn_B1I0O0(source)
		sink(8, out)
	}
	{
		source := newSource(9)
		out := TaintStepTest_OsFileWrite_B0I0O0(source)
		sink(9, out)
	}
	{
		source := newSource(10)
		out := TaintStepTest_OsFileWriteAt_B0I0O0(source)
		sink(10, out)
	}
	{
		source := newSource(11)
		out := TaintStepTest_OsFileWriteString_B0I0O0(source)
		sink(11, out)
	}
}

func fsAccesses() {
	var path, path1, part string
	var time time.Time
	os.Chdir(path)                       // $ fsaccess=path
	os.Chmod(path, 0600)                 // $ fsaccess=path
	os.Chown(path, 1000, 1000)           // $ fsaccess=path
	os.Chtimes(path, time, time)         // $ fsaccess=path
	os.Create(path)                      // $ fsaccess=path
	os.Lchown(path, 1000, 1000)          // $ fsaccess=path
	os.Link(path, path1)                 // $ fsaccess=path fsaccess=path1
	os.Lstat(path)                       // $ fsaccess=path
	os.Mkdir(path, 0600)                 // $ fsaccess=path
	os.MkdirAll(path, 0600)              // $ fsaccess=path
	os.NewFile(124, path)                // $ fsaccess=path
	os.Open(path)                        // $ fsaccess=path
	os.OpenFile(path, os.O_RDONLY, 0600) // $ fsaccess=path
	os.Readlink(path)                    // $ fsaccess=path
	os.Remove(path)                      // $ fsaccess=path
	os.RemoveAll(path)                   // $ fsaccess=path
	os.Rename(path, path1)               // $ fsaccess=path fsaccess=path1
	os.Stat(path)                        // $ fsaccess=path
	os.Symlink(path, path1)              // $ fsaccess=path fsaccess=path1
	os.Truncate(path, 1000)              // $ fsaccess=path
	os.DirFS(path)                       // $ fsaccess=path
	os.ReadDir(path)                     // $ fsaccess=path
	os.ReadFile(path)                    // $ fsaccess=path
	os.MkdirTemp(path, part)             // $ fsaccess=path fsaccess=part
	os.CreateTemp(path, part)            // $ fsaccess=path fsaccess=part
	os.WriteFile(path, []byte{}, 0600)   // $ fsaccess=path
}

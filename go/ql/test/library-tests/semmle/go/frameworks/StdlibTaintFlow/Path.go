// Code generated by https://github.com/gagliardetto/codebox. DO NOT EDIT.

package main

import "path"

func TaintStepTest_PathBase_B0I0O0(sourceCQL interface{}) interface{} {
	fromString656 := sourceCQL.(string)
	intoString414 := path.Base(fromString656)
	return intoString414
}

func TaintStepTest_PathClean_B0I0O0(sourceCQL interface{}) interface{} {
	fromString518 := sourceCQL.(string)
	intoString650 := path.Clean(fromString518)
	return intoString650
}

func TaintStepTest_PathDir_B0I0O0(sourceCQL interface{}) interface{} {
	fromString784 := sourceCQL.(string)
	intoString957 := path.Dir(fromString784)
	return intoString957
}

func TaintStepTest_PathExt_B0I0O0(sourceCQL interface{}) interface{} {
	fromString520 := sourceCQL.(string)
	intoString443 := path.Ext(fromString520)
	return intoString443
}

func TaintStepTest_PathJoin_B0I0O0(sourceCQL interface{}) interface{} {
	fromString127 := sourceCQL.(string)
	intoString483 := path.Join(fromString127)
	return intoString483
}

func TaintStepTest_PathSplit_B0I0O0(sourceCQL interface{}) interface{} {
	fromString989 := sourceCQL.(string)
	intoString982, _ := path.Split(fromString989)
	return intoString982
}

func TaintStepTest_PathSplit_B0I0O1(sourceCQL interface{}) interface{} {
	fromString417 := sourceCQL.(string)
	_, intoString584 := path.Split(fromString417)
	return intoString584
}

func RunAllTaints_Path() {
	{
		source := newSource(0)
		out := TaintStepTest_PathBase_B0I0O0(source)
		sink(0, out)
	}
	{
		source := newSource(1)
		out := TaintStepTest_PathClean_B0I0O0(source)
		sink(1, out)
	}
	{
		source := newSource(2)
		out := TaintStepTest_PathDir_B0I0O0(source)
		sink(2, out)
	}
	{
		source := newSource(3)
		out := TaintStepTest_PathExt_B0I0O0(source)
		sink(3, out)
	}
	{
		source := newSource(4)
		out := TaintStepTest_PathJoin_B0I0O0(source)
		sink(4, out)
	}
	{
		source := newSource(5)
		out := TaintStepTest_PathSplit_B0I0O0(source)
		sink(5, out)
	}
	{
		source := newSource(6)
		out := TaintStepTest_PathSplit_B0I0O1(source)
		sink(6, out)
	}
}

// Code generated by depstubber. DO NOT EDIT.
// This is a simple stub for github.com/klauspost/compress/snappy, strictly for use in testing.

// See the LICENSE file for information about the licensing of the original library.
// Source: github.com/klauspost/compress/snappy (exports: ; functions: NewReader)

// Package snappy is a stub of github.com/klauspost/compress/snappy, generated by depstubber.
package snappy

import (
	io "io"
	s2 "github.com/klauspost/compress/s2"
	
)

type Reader = s2.Reader

func NewReader(_ io.Reader) *Reader {
	return nil
}


type ReadSeeker struct {
	Reader *Reader
}

func (_ ReadSeeker) DecodeConcurrent(_ io.Writer, _ int) (int64, error) {
	return 0, nil
}

func (_ ReadSeeker) Read(_ []byte) (int, error) {
	return 0, nil
}

func (_ ReadSeeker) ReadByte() (byte, error) {
	return 0, nil
}

func (_ ReadSeeker) ReadSeeker(_ bool, _ []byte) (*ReadSeeker, error) {
	return nil, nil
}

func (_ ReadSeeker) Reset(_ io.Reader) {}

func (_ ReadSeeker) Skip(_ int64) error {
	return nil
}

func (_ ReadSeeker) SkippableCB(_ byte, _ func(io.Reader) error) error {
	return nil
}

func (_ *ReadSeeker) ReadAt(_ []byte, _ int64) (int, error) {
	return 0, nil
}

func (_ *ReadSeeker) Seek(_ int64, _ int) (int64, error) {
	return 0, nil
}
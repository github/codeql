// Code generated by depstubber. DO NOT EDIT.
// This is a simple stub for github.com/klauspost/compress/zip, strictly for use in testing.

// See the LICENSE file for information about the licensing of the original library.
// Source: github.com/klauspost/compress/zip (exports: FileHeader,File,Reader,ReadCloser; functions: NewReader,OpenReader)

// Package zip is a stub of github.com/klauspost/compress/zip, generated by depstubber.
package zip

import (
	io "io"
	fs "io/fs"
	time "time"
	"os"
)

type Decompressor func(io.Reader) io.ReadCloser

type File struct {
	FileHeader
	zip          *Reader
	zipr         io.ReaderAt
	headerOffset int64 // includes overall ZIP archive baseOffset
	zip64        bool  // zip64 extended information extra field presence
}


func (_ *File) DataOffset() (int64, error) {
	return 0, nil
}

func (_ *File) FileInfo() fs.FileInfo {
	return nil
}

func (_ *File) ModTime() time.Time {
	return time.Time{}
}

func (_ *File) Mode() fs.FileMode {
	return 0
}

func (_ *File) Open() (io.ReadCloser, error) {
	return nil, nil
}

func (_ *File) OpenRaw() (io.Reader, error) {
	return nil, nil
}

func (_ *File) SetModTime(_ time.Time) {}

func (_ *File) SetMode(_ fs.FileMode) {}

type FileHeader struct {
	Name               string
	Comment            string
	NonUTF8            bool
	CreatorVersion     uint16
	ReaderVersion      uint16
	Flags              uint16
	Method             uint16
	Modified           time.Time
	ModifiedTime       uint16
	ModifiedDate       uint16
	CRC32              uint32
	CompressedSize     uint32
	UncompressedSize   uint32
	CompressedSize64   uint64
	UncompressedSize64 uint64
	Extra              []byte
	ExternalAttrs      uint32
}

func (_ *FileHeader) FileInfo() fs.FileInfo {
	return nil
}

func (_ *FileHeader) ModTime() time.Time {
	return time.Time{}
}

func (_ *FileHeader) Mode() fs.FileMode {
	return 0
}

func (_ *FileHeader) SetModTime(_ time.Time) {}

func (_ *FileHeader) SetMode(_ fs.FileMode) {}

func NewReader(_ io.ReaderAt, _ int64) (*Reader, error) {
	return nil, nil
}

func OpenReader(_ string) (*ReadCloser, error) {
	return nil, nil
}

type ReadCloser struct {
	f *os.File
	Reader
}

func (_ *ReadCloser) Close() error {
	return nil
}

func (_ *ReadCloser) Open(_ string) (fs.File, error) {
	return nil, nil
}

func (_ *ReadCloser) RegisterDecompressor(_ uint16, _ Decompressor) {}

type Reader struct {
	File    []*File
	Comment string
}

func (_ *Reader) Open(_ string) (fs.File, error) {
	return nil, nil
}

func (_ *Reader) RegisterDecompressor(_ uint16, _ Decompressor) {}

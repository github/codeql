// Code generated by depstubber. DO NOT EDIT.
// This is a simple stub for github.com/gorilla/websocket, strictly for use in testing.

// See the LICENSE file for information about the licensing of the original library.
// Source: github.com/gorilla/websocket (exports: Dialer; functions: ReadJSON,WriteJSON,NewPreparedMessage)

// Package websocket is a stub of github.com/gorilla/websocket, generated by depstubber.
package websocket

import (
	context "context"
	tls "crypto/tls"
	io "io"
	net "net"
	http "net/http"
	url "net/url"
	time "time"
)

type BufferPool interface {
	Get() interface{}
	Put(_ interface{})
}

type Conn struct{}

func (_ *Conn) Close() error {
	return nil
}

func (_ *Conn) CloseHandler() func(int, string) error {
	return nil
}

func (_ *Conn) EnableWriteCompression(_ bool) {}

func (_ *Conn) LocalAddr() net.Addr {
	return nil
}

func (_ *Conn) NextReader() (int, io.Reader, error) {
	return 0, nil, nil
}

func (_ *Conn) NextWriter(_ int) (io.WriteCloser, error) {
	return nil, nil
}

func (_ *Conn) PingHandler() func(string) error {
	return nil
}

func (_ *Conn) PongHandler() func(string) error {
	return nil
}

func (_ *Conn) ReadJSON(_ interface{}) error {
	return nil
}

func (_ *Conn) ReadMessage() (int, []byte, error) {
	return 0, nil, nil
}

func (_ *Conn) RemoteAddr() net.Addr {
	return nil
}

func (_ *Conn) SetCloseHandler(_ func(int, string) error) {}

func (_ *Conn) SetCompressionLevel(_ int) error {
	return nil
}

func (_ *Conn) SetPingHandler(_ func(string) error) {}

func (_ *Conn) SetPongHandler(_ func(string) error) {}

func (_ *Conn) SetReadDeadline(_ time.Time) error {
	return nil
}

func (_ *Conn) SetReadLimit(_ int64) {}

func (_ *Conn) SetWriteDeadline(_ time.Time) error {
	return nil
}

func (_ *Conn) Subprotocol() string {
	return ""
}

func (_ *Conn) UnderlyingConn() net.Conn {
	return nil
}

func (_ *Conn) WriteControl(_ int, _ []byte, _ time.Time) error {
	return nil
}

func (_ *Conn) WriteJSON(_ interface{}) error {
	return nil
}

func (_ *Conn) WriteMessage(_ int, _ []byte) error {
	return nil
}

func (_ *Conn) WritePreparedMessage(_ *PreparedMessage) error {
	return nil
}

type Dialer struct {
	NetDial           func(string, string) (net.Conn, error)
	NetDialContext    func(context.Context, string, string) (net.Conn, error)
	Proxy             func(*http.Request) (*url.URL, error)
	TLSClientConfig   *tls.Config
	HandshakeTimeout  time.Duration
	ReadBufferSize    int
	WriteBufferSize   int
	WriteBufferPool   BufferPool
	Subprotocols      []string
	EnableCompression bool
	Jar               http.CookieJar
}

func (_ *Dialer) Dial(_ string, _ http.Header) (*Conn, *http.Response, error) {
	return nil, nil, nil
}

func (_ *Dialer) DialContext(_ context.Context, _ string, _ http.Header) (*Conn, *http.Response, error) {
	return nil, nil, nil
}

func NewPreparedMessage(_ int, _ []byte) (*PreparedMessage, error) {
	return nil, nil
}

type PreparedMessage struct{}

func ReadJSON(_ *Conn, _ interface{}) error {
	return nil
}

func WriteJSON(_ *Conn, _ interface{}) error {
	return nil
}

// Code generated by depstubber. DO NOT EDIT.
// This is a simple stub for github.com/sirupsen/logrus, strictly for use in testing.

// See the LICENSE file for information about the licensing of the original library.
// Source: github.com/sirupsen/logrus (exports: Fields,Entry; functions: Warning,WithFields,WithField)

// Package logrus is a stub of github.com/sirupsen/logrus, generated by depstubber.
package logrus

import (
	bytes "bytes"
	context "context"
	io "io"
	runtime "runtime"
	time "time"
)

type Entry struct {
	Logger  *Logger
	Data    Fields
	Time    time.Time
	Level   Level
	Caller  *runtime.Frame
	Message string
	Buffer  *bytes.Buffer
	Context context.Context
}

func (_ Entry) HasCaller() bool {
	return false
}

func (_ *Entry) Bytes() ([]byte, error) {
	return nil, nil
}

func (_ *Entry) Debug(_ ...interface{}) {}

func (_ *Entry) Debugf(_ string, _ ...interface{}) {}

func (_ *Entry) Debugln(_ ...interface{}) {}

func (_ *Entry) Error(_ ...interface{}) {}

func (_ *Entry) Errorf(_ string, _ ...interface{}) {}

func (_ *Entry) Errorln(_ ...interface{}) {}

func (_ *Entry) Fatal(_ ...interface{}) {}

func (_ *Entry) Fatalf(_ string, _ ...interface{}) {}

func (_ *Entry) Fatalln(_ ...interface{}) {}

func (_ *Entry) Info(_ ...interface{}) {}

func (_ *Entry) Infof(_ string, _ ...interface{}) {}

func (_ *Entry) Infoln(_ ...interface{}) {}

func (_ *Entry) Log(_ Level, _ ...interface{}) {}

func (_ *Entry) Logf(_ Level, _ string, _ ...interface{}) {}

func (_ *Entry) Logln(_ Level, _ ...interface{}) {}

func (_ *Entry) Panic(_ ...interface{}) {}

func (_ *Entry) Panicf(_ string, _ ...interface{}) {}

func (_ *Entry) Panicln(_ ...interface{}) {}

func (_ *Entry) Print(_ ...interface{}) {}

func (_ *Entry) Printf(_ string, _ ...interface{}) {}

func (_ *Entry) Println(_ ...interface{}) {}

func (_ *Entry) String() (string, error) {
	return "", nil
}

func (_ *Entry) Trace(_ ...interface{}) {}

func (_ *Entry) Tracef(_ string, _ ...interface{}) {}

func (_ *Entry) Traceln(_ ...interface{}) {}

func (_ *Entry) Warn(_ ...interface{}) {}

func (_ *Entry) Warnf(_ string, _ ...interface{}) {}

func (_ *Entry) Warning(_ ...interface{}) {}

func (_ *Entry) Warningf(_ string, _ ...interface{}) {}

func (_ *Entry) Warningln(_ ...interface{}) {}

func (_ *Entry) Warnln(_ ...interface{}) {}

func (_ *Entry) WithContext(_ context.Context) *Entry {
	return nil
}

func (_ *Entry) WithError(_ error) *Entry {
	return nil
}

func (_ *Entry) WithField(_ string, _ interface{}) *Entry {
	return nil
}

func (_ *Entry) WithFields(_ Fields) *Entry {
	return nil
}

func (_ *Entry) WithTime(_ time.Time) *Entry {
	return nil
}

func (_ *Entry) Writer() *io.PipeWriter {
	return nil
}

func (_ *Entry) WriterLevel(_ Level) *io.PipeWriter {
	return nil
}

type Fields map[string]interface{}

type Formatter interface {
	Format(_ *Entry) ([]byte, error)
}

type Hook interface {
	Fire(_ *Entry) error
	Levels() []Level
}

type Level uint32

func (_ Level) MarshalText() ([]byte, error) {
	return nil, nil
}

func (_ Level) String() string {
	return ""
}

func (_ *Level) UnmarshalText(_ []byte) error {
	return nil
}

type LevelHooks map[Level][]Hook

func (_ LevelHooks) Add(_ Hook) {}

func (_ LevelHooks) Fire(_ Level, _ *Entry) error {
	return nil
}

type Logger struct {
	Out          io.Writer
	Hooks        LevelHooks
	Formatter    Formatter
	ReportCaller bool
	Level        Level
	ExitFunc     interface{}
}

func (_ *Logger) AddHook(_ Hook) {}

func (_ *Logger) Debug(_ ...interface{}) {}

func (_ *Logger) Debugf(_ string, _ ...interface{}) {}

func (_ *Logger) Debugln(_ ...interface{}) {}

func (_ *Logger) Error(_ ...interface{}) {}

func (_ *Logger) Errorf(_ string, _ ...interface{}) {}

func (_ *Logger) Errorln(_ ...interface{}) {}

func (_ *Logger) Exit(_ int) {}

func (_ *Logger) Fatal(_ ...interface{}) {}

func (_ *Logger) Fatalf(_ string, _ ...interface{}) {}

func (_ *Logger) Fatalln(_ ...interface{}) {}

func (_ *Logger) GetLevel() Level {
	return 0
}

func (_ *Logger) Info(_ ...interface{}) {}

func (_ *Logger) Infof(_ string, _ ...interface{}) {}

func (_ *Logger) Infoln(_ ...interface{}) {}

func (_ *Logger) IsLevelEnabled(_ Level) bool {
	return false
}

func (_ *Logger) Log(_ Level, _ ...interface{}) {}

func (_ *Logger) Logf(_ Level, _ string, _ ...interface{}) {}

func (_ *Logger) Logln(_ Level, _ ...interface{}) {}

func (_ *Logger) Panic(_ ...interface{}) {}

func (_ *Logger) Panicf(_ string, _ ...interface{}) {}

func (_ *Logger) Panicln(_ ...interface{}) {}

func (_ *Logger) Print(_ ...interface{}) {}

func (_ *Logger) Printf(_ string, _ ...interface{}) {}

func (_ *Logger) Println(_ ...interface{}) {}

func (_ *Logger) ReplaceHooks(_ LevelHooks) LevelHooks {
	return nil
}

func (_ *Logger) SetFormatter(_ Formatter) {}

func (_ *Logger) SetLevel(_ Level) {}

func (_ *Logger) SetNoLock() {}

func (_ *Logger) SetOutput(_ io.Writer) {}

func (_ *Logger) SetReportCaller(_ bool) {}

func (_ *Logger) Trace(_ ...interface{}) {}

func (_ *Logger) Tracef(_ string, _ ...interface{}) {}

func (_ *Logger) Traceln(_ ...interface{}) {}

func (_ *Logger) Warn(_ ...interface{}) {}

func (_ *Logger) Warnf(_ string, _ ...interface{}) {}

func (_ *Logger) Warning(_ ...interface{}) {}

func (_ *Logger) Warningf(_ string, _ ...interface{}) {}

func (_ *Logger) Warningln(_ ...interface{}) {}

func (_ *Logger) Warnln(_ ...interface{}) {}

func (_ *Logger) WithContext(_ context.Context) *Entry {
	return nil
}

func (_ *Logger) WithError(_ error) *Entry {
	return nil
}

func (_ *Logger) WithField(_ string, _ interface{}) *Entry {
	return nil
}

func (_ *Logger) WithFields(_ Fields) *Entry {
	return nil
}

func (_ *Logger) WithTime(_ time.Time) *Entry {
	return nil
}

func (_ *Logger) Writer() *io.PipeWriter {
	return nil
}

func (_ *Logger) WriterLevel(_ Level) *io.PipeWriter {
	return nil
}

func Warning(_ ...interface{}) {}

func WithField(_ string, _ interface{}) *Entry {
	return nil
}

func WithFields(_ Fields) *Entry {
	return nil
}

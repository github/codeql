// CodeQL database schema for QL
// Automatically generated from the tree-sitter grammar; do not edit

@location = @location_default

locations_default(
  unique int id: @location_default,
  int file: @file ref,
  int start_line: int ref,
  int start_column: int ref,
  int end_line: int ref,
  int end_column: int ref
);

files(
  unique int id: @file,
  string name: string ref
);

folders(
  unique int id: @folder,
  string name: string ref
);

@container = @file | @folder

containerparent(
  int parent: @container ref,
  unique int child: @container ref
);

sourceLocationPrefix(
  string prefix: string ref
);

diagnostics(
  unique int id: @diagnostic,
  int severity: int ref,
  string error_tag: string ref,
  string error_message: string ref,
  string full_error_message: string ref,
  int location: @location_default ref
);

case @diagnostic.severity of
  10 = @diagnostic_debug
| 20 = @diagnostic_info
| 30 = @diagnostic_warning
| 40 = @diagnostic_error
;


@ql_add_expr_left_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_unary_expr | @ql_variable

@ql_add_expr_right_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_unary_expr | @ql_variable

ql_add_expr_def(
  unique int id: @ql_add_expr,
  int left: @ql_add_expr_left_type ref,
  int right: @ql_add_expr_right_type ref,
  int child: @ql_token_addop ref
);

@ql_aggregate_child_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_aggregate_body | @ql_expr_annotation | @ql_full_aggregate_body | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_token_agg_id | @ql_unary_expr | @ql_variable

#keyset[ql_aggregate, index]
ql_aggregate_child(
  int ql_aggregate: @ql_aggregate ref,
  int index: int ref,
  unique int child: @ql_aggregate_child_type ref
);

ql_aggregate_def(
  unique int id: @ql_aggregate
);

@ql_annotArg_child_type = @ql_token_result | @ql_token_simple_id | @ql_token_this

ql_annot_arg_def(
  unique int id: @ql_annot_arg,
  int child: @ql_annotArg_child_type ref
);

@ql_annotation_args_type = @ql_annot_arg | @ql_reserved_word

#keyset[ql_annotation, index]
ql_annotation_args(
  int ql_annotation: @ql_annotation ref,
  int index: int ref,
  unique int args: @ql_annotation_args_type ref
);

ql_annotation_def(
  unique int id: @ql_annotation,
  int name: @ql_token_annot_name ref
);

ql_arityless_predicate_expr_child(
  unique int ql_arityless_predicate_expr: @ql_arityless_predicate_expr ref,
  unique int child: @ql_module_expr ref
);

ql_arityless_predicate_expr_def(
  unique int id: @ql_arityless_predicate_expr,
  int name: @ql_token_literal_id ref
);

@ql_asExpr_child_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_unary_expr | @ql_var_name | @ql_variable

#keyset[ql_as_expr, index]
ql_as_expr_child(
  int ql_as_expr: @ql_as_expr ref,
  int index: int ref,
  unique int child: @ql_asExpr_child_type ref
);

ql_as_expr_def(
  unique int id: @ql_as_expr
);

#keyset[ql_as_exprs, index]
ql_as_exprs_child(
  int ql_as_exprs: @ql_as_exprs ref,
  int index: int ref,
  unique int child: @ql_as_expr ref
);

ql_as_exprs_def(
  unique int id: @ql_as_exprs
);

@ql_body_child_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_unary_expr | @ql_variable

ql_body_def(
  unique int id: @ql_body,
  int child: @ql_body_child_type ref
);

@ql_bool_child_type = @ql_token_false | @ql_token_true

ql_bool_def(
  unique int id: @ql_bool,
  int child: @ql_bool_child_type ref
);

@ql_call_body_child_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_token_underscore | @ql_unary_expr | @ql_variable

#keyset[ql_call_body, index]
ql_call_body_child(
  int ql_call_body: @ql_call_body ref,
  int index: int ref,
  unique int child: @ql_call_body_child_type ref
);

ql_call_body_def(
  unique int id: @ql_call_body
);

@ql_call_or_unqual_agg_expr_child_type = @ql_arityless_predicate_expr | @ql_call_body | @ql_token_closure | @ql_unqual_agg_body

#keyset[ql_call_or_unqual_agg_expr, index]
ql_call_or_unqual_agg_expr_child(
  int ql_call_or_unqual_agg_expr: @ql_call_or_unqual_agg_expr ref,
  int index: int ref,
  unique int child: @ql_call_or_unqual_agg_expr_child_type ref
);

ql_call_or_unqual_agg_expr_def(
  unique int id: @ql_call_or_unqual_agg_expr
);

@ql_charpred_body_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_unary_expr | @ql_variable

ql_charpred_def(
  unique int id: @ql_charpred,
  int body: @ql_charpred_body_type ref,
  int child: @ql_token_class_name ref
);

@ql_classMember_child_type = @ql_annotation | @ql_charpred | @ql_field | @ql_member_predicate | @ql_token_qldoc

#keyset[ql_class_member, index]
ql_class_member_child(
  int ql_class_member: @ql_class_member ref,
  int index: int ref,
  unique int child: @ql_classMember_child_type ref
);

ql_class_member_def(
  unique int id: @ql_class_member
);

@ql_classlessPredicate_returnType_type = @ql_token_predicate | @ql_type_expr

@ql_classlessPredicate_child_type = @ql_body | @ql_higher_order_term | @ql_predicate_alias_body | @ql_token_empty | @ql_var_decl

#keyset[ql_classless_predicate, index]
ql_classless_predicate_child(
  int ql_classless_predicate: @ql_classless_predicate ref,
  int index: int ref,
  unique int child: @ql_classlessPredicate_child_type ref
);

ql_classless_predicate_def(
  unique int id: @ql_classless_predicate,
  int name: @ql_token_predicate_name ref,
  int return_type: @ql_classlessPredicate_returnType_type ref
);

@ql_comp_term_left_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_unary_expr | @ql_variable

@ql_comp_term_right_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_unary_expr | @ql_variable

ql_comp_term_def(
  unique int id: @ql_comp_term,
  int left: @ql_comp_term_left_type ref,
  int right: @ql_comp_term_right_type ref,
  int child: @ql_token_compop ref
);

@ql_conjunction_left_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_unary_expr | @ql_variable

@ql_conjunction_right_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_unary_expr | @ql_variable

ql_conjunction_def(
  unique int id: @ql_conjunction,
  int left: @ql_conjunction_left_type ref,
  int right: @ql_conjunction_right_type ref
);

@ql_dataclass_extends_type = @ql_reserved_word | @ql_type_expr

#keyset[ql_dataclass, index]
ql_dataclass_extends(
  int ql_dataclass: @ql_dataclass ref,
  int index: int ref,
  unique int extends: @ql_dataclass_extends_type ref
);

@ql_dataclass_instanceof_type = @ql_reserved_word | @ql_type_expr

#keyset[ql_dataclass, index]
ql_dataclass_instanceof(
  int ql_dataclass: @ql_dataclass ref,
  int index: int ref,
  unique int instanceof: @ql_dataclass_instanceof_type ref
);

@ql_dataclass_child_type = @ql_class_member | @ql_type_alias_body | @ql_type_union_body

#keyset[ql_dataclass, index]
ql_dataclass_child(
  int ql_dataclass: @ql_dataclass ref,
  int index: int ref,
  unique int child: @ql_dataclass_child_type ref
);

ql_dataclass_def(
  unique int id: @ql_dataclass,
  int name: @ql_token_class_name ref
);

ql_datatype_def(
  unique int id: @ql_datatype,
  int name: @ql_token_class_name ref,
  int child: @ql_datatype_branches ref
);

@ql_datatypeBranch_child_type = @ql_annotation | @ql_body | @ql_token_qldoc | @ql_var_decl

#keyset[ql_datatype_branch, index]
ql_datatype_branch_child(
  int ql_datatype_branch: @ql_datatype_branch ref,
  int index: int ref,
  unique int child: @ql_datatypeBranch_child_type ref
);

ql_datatype_branch_def(
  unique int id: @ql_datatype_branch,
  int name: @ql_token_class_name ref
);

#keyset[ql_datatype_branches, index]
ql_datatype_branches_child(
  int ql_datatype_branches: @ql_datatype_branches ref,
  int index: int ref,
  unique int child: @ql_datatype_branch ref
);

ql_datatype_branches_def(
  unique int id: @ql_datatype_branches
);

ql_db_annotation_args_annotation(
  unique int ql_db_annotation: @ql_db_annotation ref,
  unique int args_annotation: @ql_db_args_annotation ref
);

ql_db_annotation_simple_annotation(
  unique int ql_db_annotation: @ql_db_annotation ref,
  unique int simple_annotation: @ql_token_annot_name ref
);

ql_db_annotation_def(
  unique int id: @ql_db_annotation
);

#keyset[ql_db_args_annotation, index]
ql_db_args_annotation_child(
  int ql_db_args_annotation: @ql_db_args_annotation ref,
  int index: int ref,
  unique int child: @ql_token_simple_id ref
);

ql_db_args_annotation_def(
  unique int id: @ql_db_args_annotation,
  int name: @ql_token_annot_name ref
);

ql_db_branch_qldoc(
  unique int ql_db_branch: @ql_db_branch ref,
  unique int qldoc: @ql_token_qldoc ref
);

@ql_db_branch_child_type = @ql_token_dbtype | @ql_token_integer

#keyset[ql_db_branch, index]
ql_db_branch_child(
  int ql_db_branch: @ql_db_branch ref,
  int index: int ref,
  unique int child: @ql_db_branch_child_type ref
);

ql_db_branch_def(
  unique int id: @ql_db_branch
);

@ql_db_caseDecl_child_type = @ql_db_branch | @ql_token_db_case

#keyset[ql_db_case_decl, index]
ql_db_case_decl_child(
  int ql_db_case_decl: @ql_db_case_decl ref,
  int index: int ref,
  unique int child: @ql_db_caseDecl_child_type ref
);

ql_db_case_decl_def(
  unique int id: @ql_db_case_decl,
  int base: @ql_token_dbtype ref,
  int discriminator: @ql_token_simple_id ref
);

@ql_db_colType_child_type = @ql_token_db_boolean | @ql_token_db_date | @ql_token_db_float | @ql_token_db_int | @ql_token_db_string | @ql_token_dbtype

ql_db_col_type_def(
  unique int id: @ql_db_col_type,
  int child: @ql_db_colType_child_type ref
);

ql_db_column_is_ref(
  unique int ql_db_column: @ql_db_column ref,
  unique int is_ref: @ql_token_db_ref ref
);

ql_db_column_is_unique(
  unique int ql_db_column: @ql_db_column ref,
  unique int is_unique: @ql_token_db_unique ref
);

ql_db_column_qldoc(
  unique int ql_db_column: @ql_db_column ref,
  unique int qldoc: @ql_token_qldoc ref
);

ql_db_column_def(
  unique int id: @ql_db_column,
  int col_name: @ql_token_simple_id ref,
  int col_type: @ql_db_col_type ref,
  int repr_type: @ql_db_repr_type ref
);

@ql_db_entry_child_type = @ql_db_case_decl | @ql_db_table | @ql_db_union_decl | @ql_token_qldoc

ql_db_entry_def(
  unique int id: @ql_db_entry,
  int child: @ql_db_entry_child_type ref
);

@ql_db_reprType_child_type = @ql_token_db_boolean | @ql_token_db_date | @ql_token_db_float | @ql_token_db_int | @ql_token_db_string | @ql_token_db_varchar | @ql_token_integer

#keyset[ql_db_repr_type, index]
ql_db_repr_type_child(
  int ql_db_repr_type: @ql_db_repr_type ref,
  int index: int ref,
  unique int child: @ql_db_reprType_child_type ref
);

ql_db_repr_type_def(
  unique int id: @ql_db_repr_type
);

@ql_db_table_child_type = @ql_db_annotation | @ql_db_column

#keyset[ql_db_table, index]
ql_db_table_child(
  int ql_db_table: @ql_db_table ref,
  int index: int ref,
  unique int child: @ql_db_table_child_type ref
);

ql_db_table_def(
  unique int id: @ql_db_table,
  int table_name: @ql_db_table_name ref
);

ql_db_table_name_def(
  unique int id: @ql_db_table_name,
  int child: @ql_token_simple_id ref
);

#keyset[ql_db_union_decl, index]
ql_db_union_decl_child(
  int ql_db_union_decl: @ql_db_union_decl ref,
  int index: int ref,
  unique int child: @ql_token_dbtype ref
);

ql_db_union_decl_def(
  unique int id: @ql_db_union_decl,
  int base: @ql_token_dbtype ref
);

@ql_disjunction_left_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_unary_expr | @ql_variable

@ql_disjunction_right_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_unary_expr | @ql_variable

ql_disjunction_def(
  unique int id: @ql_disjunction,
  int left: @ql_disjunction_left_type ref,
  int right: @ql_disjunction_right_type ref
);

ql_expr_aggregate_body_order_bys(
  unique int ql_expr_aggregate_body: @ql_expr_aggregate_body ref,
  unique int order_bys: @ql_order_bys ref
);

ql_expr_aggregate_body_def(
  unique int id: @ql_expr_aggregate_body,
  int as_exprs: @ql_as_exprs ref
);

@ql_expr_annotation_child_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_unary_expr | @ql_variable

ql_expr_annotation_def(
  unique int id: @ql_expr_annotation,
  int annot_arg: @ql_token_annot_name ref,
  int name: @ql_token_annot_name ref,
  int child: @ql_expr_annotation_child_type ref
);

ql_field_def(
  unique int id: @ql_field,
  int child: @ql_var_decl ref
);

ql_full_aggregate_body_as_exprs(
  unique int ql_full_aggregate_body: @ql_full_aggregate_body ref,
  unique int as_exprs: @ql_as_exprs ref
);

@ql_full_aggregate_body_guard_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_unary_expr | @ql_variable

ql_full_aggregate_body_guard(
  unique int ql_full_aggregate_body: @ql_full_aggregate_body ref,
  unique int guard: @ql_full_aggregate_body_guard_type ref
);

ql_full_aggregate_body_order_bys(
  unique int ql_full_aggregate_body: @ql_full_aggregate_body ref,
  unique int order_bys: @ql_order_bys ref
);

#keyset[ql_full_aggregate_body, index]
ql_full_aggregate_body_child(
  int ql_full_aggregate_body: @ql_full_aggregate_body ref,
  int index: int ref,
  unique int child: @ql_var_decl ref
);

ql_full_aggregate_body_def(
  unique int id: @ql_full_aggregate_body
);

@ql_higherOrderTerm_child_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_predicate_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_token_underscore | @ql_unary_expr | @ql_variable

#keyset[ql_higher_order_term, index]
ql_higher_order_term_child(
  int ql_higher_order_term: @ql_higher_order_term ref,
  int index: int ref,
  unique int child: @ql_higherOrderTerm_child_type ref
);

ql_higher_order_term_def(
  unique int id: @ql_higher_order_term,
  int name: @ql_token_literal_id ref
);

@ql_if_term_cond_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_unary_expr | @ql_variable

@ql_if_term_first_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_unary_expr | @ql_variable

@ql_if_term_second_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_unary_expr | @ql_variable

ql_if_term_def(
  unique int id: @ql_if_term,
  int cond: @ql_if_term_cond_type ref,
  int first: @ql_if_term_first_type ref,
  int second: @ql_if_term_second_type ref
);

@ql_implication_left_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_unary_expr | @ql_variable

@ql_implication_right_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_unary_expr | @ql_variable

ql_implication_def(
  unique int id: @ql_implication,
  int left: @ql_implication_left_type ref,
  int right: @ql_implication_right_type ref
);

@ql_importDirective_child_type = @ql_import_module_expr | @ql_module_name

#keyset[ql_import_directive, index]
ql_import_directive_child(
  int ql_import_directive: @ql_import_directive ref,
  int index: int ref,
  unique int child: @ql_importDirective_child_type ref
);

ql_import_directive_def(
  unique int id: @ql_import_directive
);

#keyset[ql_import_module_expr, index]
ql_import_module_expr_name(
  int ql_import_module_expr: @ql_import_module_expr ref,
  int index: int ref,
  unique int name: @ql_token_simple_id ref
);

ql_import_module_expr_def(
  unique int id: @ql_import_module_expr,
  int child: @ql_qual_module_expr ref
);

@ql_in_expr_left_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_unary_expr | @ql_variable

@ql_in_expr_right_type = @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_expr_annotation | @ql_literal | @ql_par_expr | @ql_qualified_expr | @ql_range | @ql_set_literal | @ql_super_ref | @ql_variable

ql_in_expr_def(
  unique int id: @ql_in_expr,
  int left: @ql_in_expr_left_type ref,
  int right: @ql_in_expr_right_type ref
);

@ql_instance_of_child_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_type_expr | @ql_unary_expr | @ql_variable

#keyset[ql_instance_of, index]
ql_instance_of_child(
  int ql_instance_of: @ql_instance_of ref,
  int index: int ref,
  unique int child: @ql_instance_of_child_type ref
);

ql_instance_of_def(
  unique int id: @ql_instance_of
);

@ql_literal_child_type = @ql_bool | @ql_token_float | @ql_token_integer | @ql_token_string

ql_literal_def(
  unique int id: @ql_literal,
  int child: @ql_literal_child_type ref
);

@ql_memberPredicate_returnType_type = @ql_token_predicate | @ql_type_expr

@ql_memberPredicate_child_type = @ql_body | @ql_higher_order_term | @ql_token_empty | @ql_var_decl

#keyset[ql_member_predicate, index]
ql_member_predicate_child(
  int ql_member_predicate: @ql_member_predicate ref,
  int index: int ref,
  unique int child: @ql_memberPredicate_child_type ref
);

ql_member_predicate_def(
  unique int id: @ql_member_predicate,
  int name: @ql_token_predicate_name ref,
  int return_type: @ql_memberPredicate_returnType_type ref
);

@ql_module_child_type = @ql_module_alias_body | @ql_module_member

#keyset[ql_module, index]
ql_module_child(
  int ql_module: @ql_module ref,
  int index: int ref,
  unique int child: @ql_module_child_type ref
);

ql_module_def(
  unique int id: @ql_module,
  int name: @ql_module_name ref
);

ql_module_alias_body_def(
  unique int id: @ql_module_alias_body,
  int child: @ql_module_expr ref
);

ql_module_expr_name(
  unique int ql_module_expr: @ql_module_expr ref,
  unique int name: @ql_token_simple_id ref
);

@ql_moduleExpr_child_type = @ql_module_expr | @ql_token_simple_id

ql_module_expr_def(
  unique int id: @ql_module_expr,
  int child: @ql_moduleExpr_child_type ref
);

@ql_moduleMember_child_type = @ql_annotation | @ql_classless_predicate | @ql_dataclass | @ql_datatype | @ql_import_directive | @ql_module | @ql_select | @ql_token_qldoc

#keyset[ql_module_member, index]
ql_module_member_child(
  int ql_module_member: @ql_module_member ref,
  int index: int ref,
  unique int child: @ql_moduleMember_child_type ref
);

ql_module_member_def(
  unique int id: @ql_module_member
);

ql_module_name_def(
  unique int id: @ql_module_name,
  int child: @ql_token_simple_id ref
);

@ql_mul_expr_left_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_unary_expr | @ql_variable

@ql_mul_expr_right_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_unary_expr | @ql_variable

ql_mul_expr_def(
  unique int id: @ql_mul_expr,
  int left: @ql_mul_expr_left_type ref,
  int right: @ql_mul_expr_right_type ref,
  int child: @ql_token_mulop ref
);

@ql_negation_child_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_unary_expr | @ql_variable

ql_negation_def(
  unique int id: @ql_negation,
  int child: @ql_negation_child_type ref
);

@ql_orderBy_child_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_token_direction | @ql_unary_expr | @ql_variable

#keyset[ql_order_by, index]
ql_order_by_child(
  int ql_order_by: @ql_order_by ref,
  int index: int ref,
  unique int child: @ql_orderBy_child_type ref
);

ql_order_by_def(
  unique int id: @ql_order_by
);

#keyset[ql_order_bys, index]
ql_order_bys_child(
  int ql_order_bys: @ql_order_bys ref,
  int index: int ref,
  unique int child: @ql_order_by ref
);

ql_order_bys_def(
  unique int id: @ql_order_bys
);

@ql_par_expr_child_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_unary_expr | @ql_variable

ql_par_expr_def(
  unique int id: @ql_par_expr,
  int child: @ql_par_expr_child_type ref
);

ql_predicate_alias_body_def(
  unique int id: @ql_predicate_alias_body,
  int child: @ql_predicate_expr ref
);

@ql_predicateExpr_child_type = @ql_arityless_predicate_expr | @ql_token_integer

#keyset[ql_predicate_expr, index]
ql_predicate_expr_child(
  int ql_predicate_expr: @ql_predicate_expr ref,
  int index: int ref,
  unique int child: @ql_predicateExpr_child_type ref
);

ql_predicate_expr_def(
  unique int id: @ql_predicate_expr
);

@ql_prefix_cast_child_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_type_expr | @ql_unary_expr | @ql_variable

#keyset[ql_prefix_cast, index]
ql_prefix_cast_child(
  int ql_prefix_cast: @ql_prefix_cast ref,
  int index: int ref,
  unique int child: @ql_prefix_cast_child_type ref
);

ql_prefix_cast_def(
  unique int id: @ql_prefix_cast
);

@ql_ql_child_type = @ql_db_entry | @ql_module_member | @ql_yaml_entry

#keyset[ql_ql, index]
ql_ql_child(
  int ql_ql: @ql_ql ref,
  int index: int ref,
  unique int child: @ql_ql_child_type ref
);

ql_ql_def(
  unique int id: @ql_ql
);

#keyset[ql_qual_module_expr, index]
ql_qual_module_expr_name(
  int ql_qual_module_expr: @ql_qual_module_expr ref,
  int index: int ref,
  unique int name: @ql_token_simple_id ref
);

ql_qual_module_expr_def(
  unique int id: @ql_qual_module_expr
);

ql_qualified_rhs_name(
  unique int ql_qualified_rhs: @ql_qualified_rhs ref,
  unique int name: @ql_token_predicate_name ref
);

@ql_qualifiedRhs_child_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_token_closure | @ql_token_underscore | @ql_type_expr | @ql_unary_expr | @ql_variable

#keyset[ql_qualified_rhs, index]
ql_qualified_rhs_child(
  int ql_qualified_rhs: @ql_qualified_rhs ref,
  int index: int ref,
  unique int child: @ql_qualifiedRhs_child_type ref
);

ql_qualified_rhs_def(
  unique int id: @ql_qualified_rhs
);

@ql_qualified_expr_child_type = @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_expr_annotation | @ql_literal | @ql_par_expr | @ql_qualified_expr | @ql_qualified_rhs | @ql_range | @ql_set_literal | @ql_super_ref | @ql_variable

#keyset[ql_qualified_expr, index]
ql_qualified_expr_child(
  int ql_qualified_expr: @ql_qualified_expr ref,
  int index: int ref,
  unique int child: @ql_qualified_expr_child_type ref
);

ql_qualified_expr_def(
  unique int id: @ql_qualified_expr
);

@ql_quantified_expr_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_unary_expr | @ql_variable

ql_quantified_expr(
  unique int ql_quantified: @ql_quantified ref,
  unique int expr: @ql_quantified_expr_type ref
);

@ql_quantified_formula_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_unary_expr | @ql_variable

ql_quantified_formula(
  unique int ql_quantified: @ql_quantified ref,
  unique int formula: @ql_quantified_formula_type ref
);

@ql_quantified_range_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_unary_expr | @ql_variable

ql_quantified_range(
  unique int ql_quantified: @ql_quantified ref,
  unique int range: @ql_quantified_range_type ref
);

@ql_quantified_child_type = @ql_token_quantifier | @ql_var_decl

#keyset[ql_quantified, index]
ql_quantified_child(
  int ql_quantified: @ql_quantified ref,
  int index: int ref,
  unique int child: @ql_quantified_child_type ref
);

ql_quantified_def(
  unique int id: @ql_quantified
);

@ql_range_lower_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_unary_expr | @ql_variable

@ql_range_upper_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_unary_expr | @ql_variable

ql_range_def(
  unique int id: @ql_range,
  int lower: @ql_range_lower_type ref,
  int upper: @ql_range_upper_type ref
);

@ql_select_child_type = @ql_add_expr | @ql_aggregate | @ql_as_exprs | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_order_bys | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_unary_expr | @ql_var_decl | @ql_variable

#keyset[ql_select, index]
ql_select_child(
  int ql_select: @ql_select ref,
  int index: int ref,
  unique int child: @ql_select_child_type ref
);

ql_select_def(
  unique int id: @ql_select
);

@ql_set_literal_child_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_unary_expr | @ql_variable

#keyset[ql_set_literal, index]
ql_set_literal_child(
  int ql_set_literal: @ql_set_literal ref,
  int index: int ref,
  unique int child: @ql_set_literal_child_type ref
);

ql_set_literal_def(
  unique int id: @ql_set_literal
);

ql_special_call_def(
  unique int id: @ql_special_call,
  int child: @ql_token_special_id ref
);

@ql_super_ref_child_type = @ql_token_super | @ql_type_expr

#keyset[ql_super_ref, index]
ql_super_ref_child(
  int ql_super_ref: @ql_super_ref ref,
  int index: int ref,
  unique int child: @ql_super_ref_child_type ref
);

ql_super_ref_def(
  unique int id: @ql_super_ref
);

ql_type_alias_body_def(
  unique int id: @ql_type_alias_body,
  int child: @ql_type_expr ref
);

ql_type_expr_name(
  unique int ql_type_expr: @ql_type_expr ref,
  unique int name: @ql_token_class_name ref
);

@ql_typeExpr_child_type = @ql_module_expr | @ql_token_dbtype | @ql_token_primitive_type

ql_type_expr_child(
  unique int ql_type_expr: @ql_type_expr ref,
  unique int child: @ql_typeExpr_child_type ref
);

ql_type_expr_def(
  unique int id: @ql_type_expr
);

#keyset[ql_type_union_body, index]
ql_type_union_body_child(
  int ql_type_union_body: @ql_type_union_body ref,
  int index: int ref,
  unique int child: @ql_type_expr ref
);

ql_type_union_body_def(
  unique int id: @ql_type_union_body
);

@ql_unary_expr_child_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_token_unop | @ql_unary_expr | @ql_variable

#keyset[ql_unary_expr, index]
ql_unary_expr_child(
  int ql_unary_expr: @ql_unary_expr ref,
  int index: int ref,
  unique int child: @ql_unary_expr_child_type ref
);

ql_unary_expr_def(
  unique int id: @ql_unary_expr
);

@ql_unqual_agg_body_asExprs_type = @ql_as_exprs | @ql_reserved_word

#keyset[ql_unqual_agg_body, index]
ql_unqual_agg_body_as_exprs(
  int ql_unqual_agg_body: @ql_unqual_agg_body ref,
  int index: int ref,
  unique int as_exprs: @ql_unqual_agg_body_asExprs_type ref
);

@ql_unqual_agg_body_guard_type = @ql_add_expr | @ql_aggregate | @ql_call_or_unqual_agg_expr | @ql_comp_term | @ql_conjunction | @ql_disjunction | @ql_expr_annotation | @ql_if_term | @ql_implication | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_mul_expr | @ql_negation | @ql_par_expr | @ql_prefix_cast | @ql_qualified_expr | @ql_quantified | @ql_range | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_unary_expr | @ql_variable

ql_unqual_agg_body_guard(
  unique int ql_unqual_agg_body: @ql_unqual_agg_body ref,
  unique int guard: @ql_unqual_agg_body_guard_type ref
);

#keyset[ql_unqual_agg_body, index]
ql_unqual_agg_body_child(
  int ql_unqual_agg_body: @ql_unqual_agg_body ref,
  int index: int ref,
  unique int child: @ql_var_decl ref
);

ql_unqual_agg_body_def(
  unique int id: @ql_unqual_agg_body
);

@ql_varDecl_child_type = @ql_type_expr | @ql_var_name

#keyset[ql_var_decl, index]
ql_var_decl_child(
  int ql_var_decl: @ql_var_decl ref,
  int index: int ref,
  unique int child: @ql_varDecl_child_type ref
);

ql_var_decl_def(
  unique int id: @ql_var_decl
);

ql_var_name_def(
  unique int id: @ql_var_name,
  int child: @ql_token_simple_id ref
);

@ql_variable_child_type = @ql_token_result | @ql_token_this | @ql_var_name

ql_variable_def(
  unique int id: @ql_variable,
  int child: @ql_variable_child_type ref
);

ql_yaml_comment_def(
  unique int id: @ql_yaml_comment,
  int child: @ql_token_yaml_value ref
);

@ql_yaml_entry_child_type = @ql_yaml_comment | @ql_yaml_keyvaluepair | @ql_yaml_listitem

ql_yaml_entry_def(
  unique int id: @ql_yaml_entry,
  int child: @ql_yaml_entry_child_type ref
);

@ql_yaml_key_child_type = @ql_token_simple_id | @ql_yaml_key

#keyset[ql_yaml_key, index]
ql_yaml_key_child(
  int ql_yaml_key: @ql_yaml_key ref,
  int index: int ref,
  unique int child: @ql_yaml_key_child_type ref
);

ql_yaml_key_def(
  unique int id: @ql_yaml_key
);

ql_yaml_keyvaluepair_def(
  unique int id: @ql_yaml_keyvaluepair,
  int key__: @ql_yaml_key ref,
  int value: @ql_token_yaml_value ref
);

ql_yaml_listitem_def(
  unique int id: @ql_yaml_listitem,
  int child: @ql_token_yaml_value ref
);

ql_tokeninfo(
  unique int id: @ql_token,
  int kind: int ref,
  string value: string ref
);

case @ql_token.kind of
  0 = @ql_reserved_word
| 1 = @ql_token_addop
| 2 = @ql_token_agg_id
| 3 = @ql_token_annot_name
| 4 = @ql_token_block_comment
| 5 = @ql_token_class_name
| 6 = @ql_token_closure
| 7 = @ql_token_compop
| 8 = @ql_token_db_boolean
| 9 = @ql_token_db_case
| 10 = @ql_token_db_date
| 11 = @ql_token_db_float
| 12 = @ql_token_db_int
| 13 = @ql_token_db_ref
| 14 = @ql_token_db_string
| 15 = @ql_token_db_unique
| 16 = @ql_token_db_varchar
| 17 = @ql_token_dbtype
| 18 = @ql_token_direction
| 19 = @ql_token_empty
| 20 = @ql_token_false
| 21 = @ql_token_float
| 22 = @ql_token_integer
| 23 = @ql_token_line_comment
| 24 = @ql_token_literal_id
| 25 = @ql_token_mulop
| 26 = @ql_token_predicate
| 27 = @ql_token_predicate_name
| 28 = @ql_token_primitive_type
| 29 = @ql_token_qldoc
| 30 = @ql_token_quantifier
| 31 = @ql_token_result
| 32 = @ql_token_simple_id
| 33 = @ql_token_special_id
| 34 = @ql_token_string
| 35 = @ql_token_super
| 36 = @ql_token_this
| 37 = @ql_token_true
| 38 = @ql_token_underscore
| 39 = @ql_token_unop
| 40 = @ql_token_yaml_value
;


@ql_ast_node = @ql_add_expr | @ql_aggregate | @ql_annot_arg | @ql_annotation | @ql_arityless_predicate_expr | @ql_as_expr | @ql_as_exprs | @ql_body | @ql_bool | @ql_call_body | @ql_call_or_unqual_agg_expr | @ql_charpred | @ql_class_member | @ql_classless_predicate | @ql_comp_term | @ql_conjunction | @ql_dataclass | @ql_datatype | @ql_datatype_branch | @ql_datatype_branches | @ql_db_annotation | @ql_db_args_annotation | @ql_db_branch | @ql_db_case_decl | @ql_db_col_type | @ql_db_column | @ql_db_entry | @ql_db_repr_type | @ql_db_table | @ql_db_table_name | @ql_db_union_decl | @ql_disjunction | @ql_expr_aggregate_body | @ql_expr_annotation | @ql_field | @ql_full_aggregate_body | @ql_higher_order_term | @ql_if_term | @ql_implication | @ql_import_directive | @ql_import_module_expr | @ql_in_expr | @ql_instance_of | @ql_literal | @ql_member_predicate | @ql_module | @ql_module_alias_body | @ql_module_expr | @ql_module_member | @ql_module_name | @ql_mul_expr | @ql_negation | @ql_order_by | @ql_order_bys | @ql_par_expr | @ql_predicate_alias_body | @ql_predicate_expr | @ql_prefix_cast | @ql_ql | @ql_qual_module_expr | @ql_qualified_expr | @ql_qualified_rhs | @ql_quantified | @ql_range | @ql_select | @ql_set_literal | @ql_special_call | @ql_super_ref | @ql_token | @ql_type_alias_body | @ql_type_expr | @ql_type_union_body | @ql_unary_expr | @ql_unqual_agg_body | @ql_var_decl | @ql_var_name | @ql_variable | @ql_yaml_comment | @ql_yaml_entry | @ql_yaml_key | @ql_yaml_keyvaluepair | @ql_yaml_listitem

@ql_ast_node_parent = @file | @ql_ast_node

#keyset[parent, parent_index]
ql_ast_node_info(
  unique int node: @ql_ast_node ref,
  int parent: @ql_ast_node_parent ref,
  int parent_index: int ref,
  int loc: @location ref
);


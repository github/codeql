// generated by codegen, do not edit
/**
 * This module provides the generated definition of `ArrayType`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.ConstArg
import codeql.rust.elements.TypeRef
import codeql.rust.elements.internal.TypeRefImpl::Impl as TypeRefImpl

/**
 * INTERNAL: This module contains the fully generated definition of `ArrayType` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A ArrayType. For example:
   * ```rust
   * todo!()
   * ```
   * INTERNAL: Do not reference the `Generated::ArrayType` class directly.
   * Use the subclass `ArrayType`, where the following predicates are available.
   */
  class ArrayType extends Synth::TArrayType, TypeRefImpl::TypeRef {
    override string getAPrimaryQlClass() { result = "ArrayType" }

    /**
     * Gets the const argument of this array type, if it exists.
     */
    ConstArg getConstArg() {
      result =
        Synth::convertConstArgFromRaw(Synth::convertArrayTypeToRaw(this)
              .(Raw::ArrayType)
              .getConstArg())
    }

    /**
     * Holds if `getConstArg()` exists.
     */
    final predicate hasConstArg() { exists(this.getConstArg()) }

    /**
     * Gets the ty of this array type, if it exists.
     */
    TypeRef getTy() {
      result =
        Synth::convertTypeRefFromRaw(Synth::convertArrayTypeToRaw(this).(Raw::ArrayType).getTy())
    }

    /**
     * Holds if `getTy()` exists.
     */
    final predicate hasTy() { exists(this.getTy()) }
  }
}

// generated by codegen, do not edit
/**
 * This module provides the generated definition of `FnPtrTypeRepr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Abi
import codeql.rust.elements.ParamList
import codeql.rust.elements.RetTypeRepr
import codeql.rust.elements.internal.TypeReprImpl::Impl as TypeReprImpl

/**
 * INTERNAL: This module contains the fully generated definition of `FnPtrTypeRepr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A FnPtrTypeRepr. For example:
   * ```rust
   * todo!()
   * ```
   * INTERNAL: Do not reference the `Generated::FnPtrTypeRepr` class directly.
   * Use the subclass `FnPtrTypeRepr`, where the following predicates are available.
   */
  class FnPtrTypeRepr extends Synth::TFnPtrTypeRepr, TypeReprImpl::TypeRepr {
    override string getAPrimaryQlClass() { result = "FnPtrTypeRepr" }

    /**
     * Gets the abi of this fn ptr type representation, if it exists.
     */
    Abi getAbi() {
      result =
        Synth::convertAbiFromRaw(Synth::convertFnPtrTypeReprToRaw(this)
              .(Raw::FnPtrTypeRepr)
              .getAbi())
    }

    /**
     * Holds if `getAbi()` exists.
     */
    final predicate hasAbi() { exists(this.getAbi()) }

    /**
     * Holds if this fn ptr type representation is async.
     */
    predicate isAsync() { Synth::convertFnPtrTypeReprToRaw(this).(Raw::FnPtrTypeRepr).isAsync() }

    /**
     * Holds if this fn ptr type representation is const.
     */
    predicate isConst() { Synth::convertFnPtrTypeReprToRaw(this).(Raw::FnPtrTypeRepr).isConst() }

    /**
     * Holds if this fn ptr type representation is unsafe.
     */
    predicate isUnsafe() { Synth::convertFnPtrTypeReprToRaw(this).(Raw::FnPtrTypeRepr).isUnsafe() }

    /**
     * Gets the parameter list of this fn ptr type representation, if it exists.
     */
    ParamList getParamList() {
      result =
        Synth::convertParamListFromRaw(Synth::convertFnPtrTypeReprToRaw(this)
              .(Raw::FnPtrTypeRepr)
              .getParamList())
    }

    /**
     * Holds if `getParamList()` exists.
     */
    final predicate hasParamList() { exists(this.getParamList()) }

    /**
     * Gets the ret type of this fn ptr type representation, if it exists.
     */
    RetTypeRepr getRetType() {
      result =
        Synth::convertRetTypeReprFromRaw(Synth::convertFnPtrTypeReprToRaw(this)
              .(Raw::FnPtrTypeRepr)
              .getRetType())
    }

    /**
     * Holds if `getRetType()` exists.
     */
    final predicate hasRetType() { exists(this.getRetType()) }
  }
}

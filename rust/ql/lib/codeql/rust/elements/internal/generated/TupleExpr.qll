// generated by codegen, do not edit
/**
 * This module provides the generated definition of `TupleExpr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Attr
import codeql.rust.elements.Expr
import codeql.rust.elements.internal.ExprImpl::Impl as ExprImpl

/**
 * INTERNAL: This module contains the fully generated definition of `TupleExpr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A tuple expression. For example:
   * ```rust
   * (1, "one");
   * (2, "two")[0] = 3;
   * ```
   * INTERNAL: Do not reference the `Generated::TupleExpr` class directly.
   * Use the subclass `TupleExpr`, where the following predicates are available.
   */
  class TupleExpr extends Synth::TTupleExpr, ExprImpl::Expr {
    override string getAPrimaryQlClass() { result = "TupleExpr" }

    /**
     * Gets the `index`th attr of this tuple expression (0-based).
     */
    Attr getAttr(int index) {
      result =
        Synth::convertAttrFromRaw(Synth::convertTupleExprToRaw(this).(Raw::TupleExpr).getAttr(index))
    }

    /**
     * Gets any of the attrs of this tuple expression.
     */
    final Attr getAnAttr() { result = this.getAttr(_) }

    /**
     * Gets the number of attrs of this tuple expression.
     */
    final int getNumberOfAttrs() { result = count(int i | exists(this.getAttr(i))) }

    /**
     * Gets the `index`th field of this tuple expression (0-based).
     */
    Expr getField(int index) {
      result =
        Synth::convertExprFromRaw(Synth::convertTupleExprToRaw(this)
              .(Raw::TupleExpr)
              .getField(index))
    }

    /**
     * Gets any of the fields of this tuple expression.
     */
    final Expr getAField() { result = this.getField(_) }

    /**
     * Gets the number of fields of this tuple expression.
     */
    final int getNumberOfFields() { result = count(int i | exists(this.getField(i))) }
  }
}

// generated by codegen, do not edit
/**
 * This module provides the generated definition of `LoopExpr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Attr
import codeql.rust.elements.BlockExpr
import codeql.rust.elements.internal.ExprImpl::Impl as ExprImpl
import codeql.rust.elements.Label

/**
 * INTERNAL: This module contains the fully generated definition of `LoopExpr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A loop expression. For example:
   * ```rust
   * loop {
   *     println!("Hello, world (again)!");
   * };
   * ```
   * ```rust
   * 'label: loop {
   *     println!("Hello, world (once)!");
   *     break 'label;
   * };
   * ```
   * ```rust
   * let mut x = 0;
   * loop {
   *     if x < 10 {
   *         x += 1;
   *     } else {
   *         break;
   *     }
   * };
   * ```
   * INTERNAL: Do not reference the `Generated::LoopExpr` class directly.
   * Use the subclass `LoopExpr`, where the following predicates are available.
   */
  class LoopExpr extends Synth::TLoopExpr, ExprImpl::Expr {
    override string getAPrimaryQlClass() { result = "LoopExpr" }

    /**
     * Gets the `index`th attr of this loop expression (0-based).
     */
    Attr getAttr(int index) {
      result =
        Synth::convertAttrFromRaw(Synth::convertLoopExprToRaw(this).(Raw::LoopExpr).getAttr(index))
    }

    /**
     * Gets any of the attrs of this loop expression.
     */
    final Attr getAnAttr() { result = this.getAttr(_) }

    /**
     * Gets the number of attrs of this loop expression.
     */
    final int getNumberOfAttrs() { result = count(int i | exists(this.getAttr(i))) }

    /**
     * Gets the label of this loop expression, if it exists.
     */
    Label getLabel() {
      result =
        Synth::convertLabelFromRaw(Synth::convertLoopExprToRaw(this).(Raw::LoopExpr).getLabel())
    }

    /**
     * Holds if `getLabel()` exists.
     */
    final predicate hasLabel() { exists(this.getLabel()) }

    /**
     * Gets the loop body of this loop expression, if it exists.
     */
    BlockExpr getLoopBody() {
      result =
        Synth::convertBlockExprFromRaw(Synth::convertLoopExprToRaw(this)
              .(Raw::LoopExpr)
              .getLoopBody())
    }

    /**
     * Holds if `getLoopBody()` exists.
     */
    final predicate hasLoopBody() { exists(this.getLoopBody()) }
  }
}

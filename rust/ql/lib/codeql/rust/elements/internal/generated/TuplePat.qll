// generated by codegen, do not edit
/**
 * This module provides the generated definition of `TuplePat`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Pat
import codeql.rust.elements.internal.PatImpl::Impl as PatImpl

/**
 * INTERNAL: This module contains the fully generated definition of `TuplePat` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A tuple pattern. For example:
   * ```rust
   * let (x, y) = (1, 2);
   * let (a, b, ..,  z) = (1, 2, 3, 4, 5);
   * ```
   * INTERNAL: Do not reference the `Generated::TuplePat` class directly.
   * Use the subclass `TuplePat`, where the following predicates are available.
   */
  class TuplePat extends Synth::TTuplePat, PatImpl::Pat {
    override string getAPrimaryQlClass() { result = "TuplePat" }

    /**
     * Gets the `index`th field of this tuple pat (0-based).
     */
    Pat getField(int index) {
      result =
        Synth::convertPatFromRaw(Synth::convertTuplePatToRaw(this).(Raw::TuplePat).getField(index))
    }

    /**
     * Gets any of the fields of this tuple pat.
     */
    final Pat getAField() { result = this.getField(_) }

    /**
     * Gets the number of fields of this tuple pat.
     */
    final int getNumberOfFields() { result = count(int i | exists(this.getField(i))) }
  }
}

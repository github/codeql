// generated by codegen, do not edit
/**
 * This module provides the generated definition of `LoopingExpr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.BlockExpr
import codeql.rust.elements.internal.LabelableExprImpl::Impl as LabelableExprImpl

/**
 * INTERNAL: This module contains the fully generated definition of `LoopingExpr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * The base class for expressions that loop (`LoopExpr`, `ForExpr` or `WhileExpr`).
   * INTERNAL: Do not reference the `Generated::LoopingExpr` class directly.
   * Use the subclass `LoopingExpr`, where the following predicates are available.
   */
  class LoopingExpr extends Synth::TLoopingExpr, LabelableExprImpl::LabelableExpr {
    /**
     * Gets the loop body of this looping expression, if it exists.
     */
    BlockExpr getLoopBody() {
      result =
        Synth::convertBlockExprFromRaw(Synth::convertLoopingExprToRaw(this)
              .(Raw::LoopingExpr)
              .getLoopBody())
    }

    /**
     * Holds if `getLoopBody()` exists.
     */
    final predicate hasLoopBody() { exists(this.getLoopBody()) }
  }
}

// generated by codegen, do not edit
/**
 * This module provides the generated definition of `RefExpr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Expr
import codeql.rust.elements.internal.ExprImpl::Impl as ExprImpl

/**
 * INTERNAL: This module contains the fully generated definition of `RefExpr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A reference expression. For example:
   * ```rust
   *     let ref_const = &foo;
   *     let ref_mut = &mut foo;
   *     let raw_const: &mut i32 = &raw const foo;
   *     let raw_mut: &mut i32 = &raw mut foo;
   * ```
   * INTERNAL: Do not reference the `Generated::RefExpr` class directly.
   * Use the subclass `RefExpr`, where the following predicates are available.
   */
  class RefExpr extends Synth::TRefExpr, ExprImpl::Expr {
    override string getAPrimaryQlClass() { result = "RefExpr" }

    /**
     * Gets the expression of this reference expression.
     */
    Expr getExpr() {
      result = Synth::convertExprFromRaw(Synth::convertRefExprToRaw(this).(Raw::RefExpr).getExpr())
    }

    /**
     * Holds if this reference expression is raw.
     */
    predicate isRaw() { Synth::convertRefExprToRaw(this).(Raw::RefExpr).isRaw() }

    /**
     * Holds if this reference expression is mut.
     */
    predicate isMut() { Synth::convertRefExprToRaw(this).(Raw::RefExpr).isMut() }
  }
}

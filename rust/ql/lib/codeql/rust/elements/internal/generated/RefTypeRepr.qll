// generated by codegen, do not edit
/**
 * This module provides the generated definition of `RefTypeRepr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Lifetime
import codeql.rust.elements.TypeRepr
import codeql.rust.elements.internal.TypeReprImpl::Impl as TypeReprImpl

/**
 * INTERNAL: This module contains the fully generated definition of `RefTypeRepr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A RefTypeRepr. For example:
   * ```rust
   * todo!()
   * ```
   * INTERNAL: Do not reference the `Generated::RefTypeRepr` class directly.
   * Use the subclass `RefTypeRepr`, where the following predicates are available.
   */
  class RefTypeRepr extends Synth::TRefTypeRepr, TypeReprImpl::TypeRepr {
    override string getAPrimaryQlClass() { result = "RefTypeRepr" }

    /**
     * Holds if this reference type representation is mut.
     */
    predicate isMut() { Synth::convertRefTypeReprToRaw(this).(Raw::RefTypeRepr).isMut() }

    /**
     * Gets the lifetime of this reference type representation, if it exists.
     */
    Lifetime getLifetime() {
      result =
        Synth::convertLifetimeFromRaw(Synth::convertRefTypeReprToRaw(this)
              .(Raw::RefTypeRepr)
              .getLifetime())
    }

    /**
     * Holds if `getLifetime()` exists.
     */
    final predicate hasLifetime() { exists(this.getLifetime()) }

    /**
     * Gets the type representation of this reference type representation, if it exists.
     */
    TypeRepr getTypeRepr() {
      result =
        Synth::convertTypeReprFromRaw(Synth::convertRefTypeReprToRaw(this)
              .(Raw::RefTypeRepr)
              .getTypeRepr())
    }

    /**
     * Holds if `getTypeRepr()` exists.
     */
    final predicate hasTypeRepr() { exists(this.getTypeRepr()) }
  }
}

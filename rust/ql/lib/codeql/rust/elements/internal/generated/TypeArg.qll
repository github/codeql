// generated by codegen, do not edit
/**
 * This module provides the generated definition of `TypeArg`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.GenericArgImpl::Impl as GenericArgImpl
import codeql.rust.elements.TypeRef

/**
 * INTERNAL: This module contains the fully generated definition of `TypeArg` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A TypeArg. For example:
   * ```rust
   * todo!()
   * ```
   * INTERNAL: Do not reference the `Generated::TypeArg` class directly.
   * Use the subclass `TypeArg`, where the following predicates are available.
   */
  class TypeArg extends Synth::TTypeArg, GenericArgImpl::GenericArg {
    override string getAPrimaryQlClass() { result = "TypeArg" }

    /**
     * Gets the ty of this type argument, if it exists.
     */
    TypeRef getTy() {
      result = Synth::convertTypeRefFromRaw(Synth::convertTypeArgToRaw(this).(Raw::TypeArg).getTy())
    }

    /**
     * Holds if `getTy()` exists.
     */
    final predicate hasTy() { exists(this.getTy()) }
  }
}

// generated by codegen, do not edit
/**
 * This module provides the generated definition of `Adt`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.ItemImpl::Impl as ItemImpl
import codeql.rust.elements.MacroItems

/**
 * INTERNAL: This module contains the fully generated definition of `Adt` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * An ADT (Abstract Data Type) definition, such as `Struct`, `Enum`, or `Union`.
   * INTERNAL: Do not reference the `Generated::Adt` class directly.
   * Use the subclass `Adt`, where the following predicates are available.
   */
  class Adt extends Synth::TAdt, ItemImpl::Item {
    /**
     * Gets the `index`th derive macro expansion of this adt (0-based).
     */
    MacroItems getDeriveMacroExpansion(int index) {
      result =
        Synth::convertMacroItemsFromRaw(Synth::convertAdtToRaw(this)
              .(Raw::Adt)
              .getDeriveMacroExpansion(index))
    }

    /**
     * Gets any of the derive macro expansions of this adt.
     */
    final MacroItems getADeriveMacroExpansion() { result = this.getDeriveMacroExpansion(_) }

    /**
     * Gets the number of derive macro expansions of this adt.
     */
    final int getNumberOfDeriveMacroExpansions() {
      result = count(int i | exists(this.getDeriveMacroExpansion(i)))
    }
  }
}

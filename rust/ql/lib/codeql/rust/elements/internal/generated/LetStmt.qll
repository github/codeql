// generated by codegen, do not edit
/**
 * This module provides the generated definition of `LetStmt`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Expr
import codeql.rust.elements.Pat
import codeql.rust.elements.internal.StmtImpl::Impl as StmtImpl
import codeql.rust.elements.TypeRef

/**
 * INTERNAL: This module contains the fully generated definition of `LetStmt` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A let statement. For example:
   * ```rust
   * let x = 42;
   * let x: i32 = 42;
   * let x: i32;
   * let x;
   * let (x, y) = (1, 2);
   * let Some(x) = std::env::var("FOO") else {
   *     return;
   * };
   * ```
   * INTERNAL: Do not reference the `Generated::LetStmt` class directly.
   * Use the subclass `LetStmt`, where the following predicates are available.
   */
  class LetStmt extends Synth::TLetStmt, StmtImpl::Stmt {
    override string getAPrimaryQlClass() { result = "LetStmt" }

    /**
     * Gets the pat of this let statement.
     */
    Pat getPat() {
      result = Synth::convertPatFromRaw(Synth::convertLetStmtToRaw(this).(Raw::LetStmt).getPat())
    }

    /**
     * Gets the type of this let statement, if it exists.
     */
    TypeRef getType() {
      result =
        Synth::convertTypeRefFromRaw(Synth::convertLetStmtToRaw(this).(Raw::LetStmt).getType())
    }

    /**
     * Holds if `getType()` exists.
     */
    final predicate hasType() { exists(this.getType()) }

    /**
     * Gets the initializer of this let statement, if it exists.
     */
    Expr getInitializer() {
      result =
        Synth::convertExprFromRaw(Synth::convertLetStmtToRaw(this).(Raw::LetStmt).getInitializer())
    }

    /**
     * Holds if `getInitializer()` exists.
     */
    final predicate hasInitializer() { exists(this.getInitializer()) }

    /**
     * Gets the else of this let statement, if it exists.
     */
    Expr getElse() {
      result = Synth::convertExprFromRaw(Synth::convertLetStmtToRaw(this).(Raw::LetStmt).getElse())
    }

    /**
     * Holds if `getElse()` exists.
     */
    final predicate hasElse() { exists(this.getElse()) }
  }
}

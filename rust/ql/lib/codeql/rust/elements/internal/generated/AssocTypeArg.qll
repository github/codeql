// generated by codegen, do not edit
/**
 * This module provides the generated definition of `AssocTypeArg`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.ConstArg
import codeql.rust.elements.internal.GenericArgImpl::Impl as GenericArgImpl
import codeql.rust.elements.GenericArgList
import codeql.rust.elements.NameRef
import codeql.rust.elements.ParamList
import codeql.rust.elements.RetType
import codeql.rust.elements.ReturnTypeSyntax
import codeql.rust.elements.TypeBoundList
import codeql.rust.elements.TypeRef

/**
 * INTERNAL: This module contains the fully generated definition of `AssocTypeArg` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A AssocTypeArg. For example:
   * ```rust
   * todo!()
   * ```
   * INTERNAL: Do not reference the `Generated::AssocTypeArg` class directly.
   * Use the subclass `AssocTypeArg`, where the following predicates are available.
   */
  class AssocTypeArg extends Synth::TAssocTypeArg, GenericArgImpl::GenericArg {
    override string getAPrimaryQlClass() { result = "AssocTypeArg" }

    /**
     * Gets the const argument of this assoc type argument, if it exists.
     */
    ConstArg getConstArg() {
      result =
        Synth::convertConstArgFromRaw(Synth::convertAssocTypeArgToRaw(this)
              .(Raw::AssocTypeArg)
              .getConstArg())
    }

    /**
     * Holds if `getConstArg()` exists.
     */
    final predicate hasConstArg() { exists(this.getConstArg()) }

    /**
     * Gets the generic argument list of this assoc type argument, if it exists.
     */
    GenericArgList getGenericArgList() {
      result =
        Synth::convertGenericArgListFromRaw(Synth::convertAssocTypeArgToRaw(this)
              .(Raw::AssocTypeArg)
              .getGenericArgList())
    }

    /**
     * Holds if `getGenericArgList()` exists.
     */
    final predicate hasGenericArgList() { exists(this.getGenericArgList()) }

    /**
     * Gets the name reference of this assoc type argument, if it exists.
     */
    NameRef getNameRef() {
      result =
        Synth::convertNameRefFromRaw(Synth::convertAssocTypeArgToRaw(this)
              .(Raw::AssocTypeArg)
              .getNameRef())
    }

    /**
     * Holds if `getNameRef()` exists.
     */
    final predicate hasNameRef() { exists(this.getNameRef()) }

    /**
     * Gets the parameter list of this assoc type argument, if it exists.
     */
    ParamList getParamList() {
      result =
        Synth::convertParamListFromRaw(Synth::convertAssocTypeArgToRaw(this)
              .(Raw::AssocTypeArg)
              .getParamList())
    }

    /**
     * Holds if `getParamList()` exists.
     */
    final predicate hasParamList() { exists(this.getParamList()) }

    /**
     * Gets the ret type of this assoc type argument, if it exists.
     */
    RetType getRetType() {
      result =
        Synth::convertRetTypeFromRaw(Synth::convertAssocTypeArgToRaw(this)
              .(Raw::AssocTypeArg)
              .getRetType())
    }

    /**
     * Holds if `getRetType()` exists.
     */
    final predicate hasRetType() { exists(this.getRetType()) }

    /**
     * Gets the return type syntax of this assoc type argument, if it exists.
     */
    ReturnTypeSyntax getReturnTypeSyntax() {
      result =
        Synth::convertReturnTypeSyntaxFromRaw(Synth::convertAssocTypeArgToRaw(this)
              .(Raw::AssocTypeArg)
              .getReturnTypeSyntax())
    }

    /**
     * Holds if `getReturnTypeSyntax()` exists.
     */
    final predicate hasReturnTypeSyntax() { exists(this.getReturnTypeSyntax()) }

    /**
     * Gets the ty of this assoc type argument, if it exists.
     */
    TypeRef getTy() {
      result =
        Synth::convertTypeRefFromRaw(Synth::convertAssocTypeArgToRaw(this)
              .(Raw::AssocTypeArg)
              .getTy())
    }

    /**
     * Holds if `getTy()` exists.
     */
    final predicate hasTy() { exists(this.getTy()) }

    /**
     * Gets the type bound list of this assoc type argument, if it exists.
     */
    TypeBoundList getTypeBoundList() {
      result =
        Synth::convertTypeBoundListFromRaw(Synth::convertAssocTypeArgToRaw(this)
              .(Raw::AssocTypeArg)
              .getTypeBoundList())
    }

    /**
     * Holds if `getTypeBoundList()` exists.
     */
    final predicate hasTypeBoundList() { exists(this.getTypeBoundList()) }
  }
}

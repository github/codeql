// generated by codegen, do not edit
/**
 * This module provides the generated definition of `BlockExpr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Attr
import codeql.rust.elements.internal.ExprImpl::Impl as ExprImpl
import codeql.rust.elements.Label
import codeql.rust.elements.StmtList

/**
 * INTERNAL: This module contains the fully generated definition of `BlockExpr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A block expression. For example:
   * ```rust
   * {
   *     let x = 42;
   * }
   * ```
   * ```rust
   * 'label: {
   *     let x = 42;
   *     x
   * }
   * ```
   * INTERNAL: Do not reference the `Generated::BlockExpr` class directly.
   * Use the subclass `BlockExpr`, where the following predicates are available.
   */
  class BlockExpr extends Synth::TBlockExpr, ExprImpl::Expr {
    override string getAPrimaryQlClass() { result = "BlockExpr" }

    /**
     * Gets the `index`th attr of this block expression (0-based).
     */
    Attr getAttr(int index) {
      result =
        Synth::convertAttrFromRaw(Synth::convertBlockExprToRaw(this).(Raw::BlockExpr).getAttr(index))
    }

    /**
     * Gets any of the attrs of this block expression.
     */
    final Attr getAnAttr() { result = this.getAttr(_) }

    /**
     * Gets the number of attrs of this block expression.
     */
    final int getNumberOfAttrs() { result = count(int i | exists(this.getAttr(i))) }

    /**
     * Gets the label of this block expression, if it exists.
     */
    Label getLabel() {
      result =
        Synth::convertLabelFromRaw(Synth::convertBlockExprToRaw(this).(Raw::BlockExpr).getLabel())
    }

    /**
     * Holds if `getLabel()` exists.
     */
    final predicate hasLabel() { exists(this.getLabel()) }

    /**
     * Gets the statement list of this block expression, if it exists.
     */
    StmtList getStmtList() {
      result =
        Synth::convertStmtListFromRaw(Synth::convertBlockExprToRaw(this)
              .(Raw::BlockExpr)
              .getStmtList())
    }

    /**
     * Holds if `getStmtList()` exists.
     */
    final predicate hasStmtList() { exists(this.getStmtList()) }
  }
}

// generated by codegen, do not edit
/**
 * This module provides the generated definition of `RangePat`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Pat
import codeql.rust.elements.internal.PatImpl::Impl as PatImpl

/**
 * INTERNAL: This module contains the fully generated definition of `RangePat` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A range pattern. For example:
   * ```rust
   * match x {
   *     ..15 => "too cold",
   *     16..=25 => "just right",
   *     26.. => "too hot",
   * }
   * ```
   * INTERNAL: Do not reference the `Generated::RangePat` class directly.
   * Use the subclass `RangePat`, where the following predicates are available.
   */
  class RangePat extends Synth::TRangePat, PatImpl::Pat {
    override string getAPrimaryQlClass() { result = "RangePat" }

    /**
     * Gets the end of this range pat, if it exists.
     */
    Pat getEnd() {
      result = Synth::convertPatFromRaw(Synth::convertRangePatToRaw(this).(Raw::RangePat).getEnd())
    }

    /**
     * Holds if `getEnd()` exists.
     */
    final predicate hasEnd() { exists(this.getEnd()) }

    /**
     * Gets the operator name of this range pat, if it exists.
     */
    string getOperatorName() {
      result = Synth::convertRangePatToRaw(this).(Raw::RangePat).getOperatorName()
    }

    /**
     * Holds if `getOperatorName()` exists.
     */
    final predicate hasOperatorName() { exists(this.getOperatorName()) }

    /**
     * Gets the start of this range pat, if it exists.
     */
    Pat getStart() {
      result =
        Synth::convertPatFromRaw(Synth::convertRangePatToRaw(this).(Raw::RangePat).getStart())
    }

    /**
     * Holds if `getStart()` exists.
     */
    final predicate hasStart() { exists(this.getStart()) }
  }
}

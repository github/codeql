// generated by codegen, do not edit
/**
 * This module provides the generated definition of `ForBinder`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.AstNodeImpl::Impl as AstNodeImpl
import codeql.rust.elements.GenericParamList

/**
 * INTERNAL: This module contains the fully generated definition of `ForBinder` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A for binder, specifying lifetime or type parameters for a closure or a type.
   *
   * For example:
   * ```rust
   * let print_any = for<T: std::fmt::Debug> |x: T| {
   * //              ^^^^^^^^^^^^^^^^^^^^^^^
   *     println!("{:?}", x);
   * };
   *
   * print_any(42);
   * print_any("hello");
   * ```
   * INTERNAL: Do not reference the `Generated::ForBinder` class directly.
   * Use the subclass `ForBinder`, where the following predicates are available.
   */
  class ForBinder extends Synth::TForBinder, AstNodeImpl::AstNode {
    override string getAPrimaryQlClass() { result = "ForBinder" }

    /**
     * Gets the generic parameter list of this for binder, if it exists.
     */
    GenericParamList getGenericParamList() {
      result =
        Synth::convertGenericParamListFromRaw(Synth::convertForBinderToRaw(this)
              .(Raw::ForBinder)
              .getGenericParamList())
    }

    /**
     * Holds if `getGenericParamList()` exists.
     */
    final predicate hasGenericParamList() { exists(this.getGenericParamList()) }
  }
}

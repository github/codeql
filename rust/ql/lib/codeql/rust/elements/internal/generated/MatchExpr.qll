// generated by codegen, do not edit
/**
 * This module provides the generated definition of `MatchExpr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Expr
import codeql.rust.elements.internal.ExprImpl::Impl as ExprImpl
import codeql.rust.elements.MatchArm

/**
 * INTERNAL: This module contains the fully generated definition of `MatchExpr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A match expression. For example:
   * ```rust
   * match x {
   *     Option::Some(y) => y,
   *     Option::None => 0,
   * }
   * ```
   * ```rust
   * match x {
   *     Some(y) if y != 0 => 1 / y,
   *     _ => 0,
   * }
   * ```
   * INTERNAL: Do not reference the `Generated::MatchExpr` class directly.
   * Use the subclass `MatchExpr`, where the following predicates are available.
   */
  class MatchExpr extends Synth::TMatchExpr, ExprImpl::Expr {
    override string getAPrimaryQlClass() { result = "MatchExpr" }

    /**
     * Gets the expression of this match expression.
     */
    Expr getExpr() {
      result =
        Synth::convertExprFromRaw(Synth::convertMatchExprToRaw(this).(Raw::MatchExpr).getExpr())
    }

    /**
     * Gets the `index`th branch of this match expression (0-based).
     */
    MatchArm getBranch(int index) {
      result =
        Synth::convertMatchArmFromRaw(Synth::convertMatchExprToRaw(this)
              .(Raw::MatchExpr)
              .getBranch(index))
    }

    /**
     * Gets any of the branches of this match expression.
     */
    final MatchArm getABranch() { result = this.getBranch(_) }

    /**
     * Gets the number of branches of this match expression.
     */
    final int getNumberOfBranches() { result = count(int i | exists(this.getBranch(i))) }
  }
}

// generated by codegen, do not edit
/**
 * This module provides the generated definition of `AsmOperandNamed`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.AsmOperand
import codeql.rust.elements.internal.AsmPieceImpl::Impl as AsmPieceImpl
import codeql.rust.elements.Name

/**
 * INTERNAL: This module contains the fully generated definition of `AsmOperandNamed` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::AsmOperandNamed` class directly.
   * Use the subclass `AsmOperandNamed`, where the following predicates are available.
   */
  class AsmOperandNamed extends Synth::TAsmOperandNamed, AsmPieceImpl::AsmPiece {
    override string getAPrimaryQlClass() { result = "AsmOperandNamed" }

    /**
     * Gets the asm operand of this asm operand named, if it exists.
     */
    AsmOperand getAsmOperand() {
      result =
        Synth::convertAsmOperandFromRaw(Synth::convertAsmOperandNamedToRaw(this)
              .(Raw::AsmOperandNamed)
              .getAsmOperand())
    }

    /**
     * Holds if `getAsmOperand()` exists.
     */
    final predicate hasAsmOperand() { exists(this.getAsmOperand()) }

    /**
     * Gets the name of this asm operand named, if it exists.
     */
    Name getName() {
      result =
        Synth::convertNameFromRaw(Synth::convertAsmOperandNamedToRaw(this)
              .(Raw::AsmOperandNamed)
              .getName())
    }

    /**
     * Holds if `getName()` exists.
     */
    final predicate hasName() { exists(this.getName()) }
  }
}

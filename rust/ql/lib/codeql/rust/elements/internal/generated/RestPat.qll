// generated by codegen, do not edit
/**
 * This module provides the generated definition of `RestPat`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Attr
import codeql.rust.elements.internal.PatImpl::Impl as PatImpl

/**
 * INTERNAL: This module contains the fully generated definition of `RestPat` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A RestPat. For example:
   * ```rust
   * todo!()
   * ```
   * INTERNAL: Do not reference the `Generated::RestPat` class directly.
   * Use the subclass `RestPat`, where the following predicates are available.
   */
  class RestPat extends Synth::TRestPat, PatImpl::Pat {
    override string getAPrimaryQlClass() { result = "RestPat" }

    /**
     * Gets the `index`th attr of this rest pat (0-based).
     */
    Attr getAttr(int index) {
      result =
        Synth::convertAttrFromRaw(Synth::convertRestPatToRaw(this).(Raw::RestPat).getAttr(index))
    }

    /**
     * Gets any of the attrs of this rest pat.
     */
    final Attr getAnAttr() { result = this.getAttr(_) }

    /**
     * Gets the number of attrs of this rest pat.
     */
    final int getNumberOfAttrs() { result = count(int i | exists(this.getAttr(i))) }
  }
}

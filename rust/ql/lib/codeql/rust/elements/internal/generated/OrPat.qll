// generated by codegen, do not edit
/**
 * This module provides the generated definition of `OrPat`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Pat
import codeql.rust.elements.internal.PatImpl::Impl as PatImpl

/**
 * INTERNAL: This module contains the fully generated definition of `OrPat` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * An or pattern. For example:
   * ```rust
   * match x {
   *     Option::Some(y) | Option::None => 0,
   * }
   * ```
   * INTERNAL: Do not reference the `Generated::OrPat` class directly.
   * Use the subclass `OrPat`, where the following predicates are available.
   */
  class OrPat extends Synth::TOrPat, PatImpl::Pat {
    override string getAPrimaryQlClass() { result = "OrPat" }

    /**
     * Gets the `index`th pat of this or pat (0-based).
     */
    Pat getPat(int index) {
      result = Synth::convertPatFromRaw(Synth::convertOrPatToRaw(this).(Raw::OrPat).getPat(index))
    }

    /**
     * Gets any of the pats of this or pat.
     */
    final Pat getAPat() { result = this.getPat(_) }

    /**
     * Gets the number of pats of this or pat.
     */
    final int getNumberOfPats() { result = count(int i | exists(this.getPat(i))) }
  }
}

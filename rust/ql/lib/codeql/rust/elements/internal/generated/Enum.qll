// generated by codegen, do not edit
/**
 * This module provides the generated definition of `Enum`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Attr
import codeql.rust.elements.GenericParamList
import codeql.rust.elements.internal.ItemImpl::Impl as ItemImpl
import codeql.rust.elements.Name
import codeql.rust.elements.VariantList
import codeql.rust.elements.Visibility
import codeql.rust.elements.WhereClause

/**
 * INTERNAL: This module contains the fully generated definition of `Enum` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A Enum. For example:
   * ```rust
   * todo!()
   * ```
   * INTERNAL: Do not reference the `Generated::Enum` class directly.
   * Use the subclass `Enum`, where the following predicates are available.
   */
  class Enum extends Synth::TEnum, ItemImpl::Item {
    override string getAPrimaryQlClass() { result = "Enum" }

    /**
     * Gets the `index`th attr of this enum (0-based).
     */
    Attr getAttr(int index) {
      result = Synth::convertAttrFromRaw(Synth::convertEnumToRaw(this).(Raw::Enum).getAttr(index))
    }

    /**
     * Gets any of the attrs of this enum.
     */
    final Attr getAnAttr() { result = this.getAttr(_) }

    /**
     * Gets the number of attrs of this enum.
     */
    final int getNumberOfAttrs() { result = count(int i | exists(this.getAttr(i))) }

    /**
     * Gets the generic parameter list of this enum, if it exists.
     */
    GenericParamList getGenericParamList() {
      result =
        Synth::convertGenericParamListFromRaw(Synth::convertEnumToRaw(this)
              .(Raw::Enum)
              .getGenericParamList())
    }

    /**
     * Holds if `getGenericParamList()` exists.
     */
    final predicate hasGenericParamList() { exists(this.getGenericParamList()) }

    /**
     * Gets the name of this enum, if it exists.
     */
    Name getName() {
      result = Synth::convertNameFromRaw(Synth::convertEnumToRaw(this).(Raw::Enum).getName())
    }

    /**
     * Holds if `getName()` exists.
     */
    final predicate hasName() { exists(this.getName()) }

    /**
     * Gets the variant list of this enum, if it exists.
     */
    VariantList getVariantList() {
      result =
        Synth::convertVariantListFromRaw(Synth::convertEnumToRaw(this).(Raw::Enum).getVariantList())
    }

    /**
     * Holds if `getVariantList()` exists.
     */
    final predicate hasVariantList() { exists(this.getVariantList()) }

    /**
     * Gets the visibility of this enum, if it exists.
     */
    Visibility getVisibility() {
      result =
        Synth::convertVisibilityFromRaw(Synth::convertEnumToRaw(this).(Raw::Enum).getVisibility())
    }

    /**
     * Holds if `getVisibility()` exists.
     */
    final predicate hasVisibility() { exists(this.getVisibility()) }

    /**
     * Gets the where clause of this enum, if it exists.
     */
    WhereClause getWhereClause() {
      result =
        Synth::convertWhereClauseFromRaw(Synth::convertEnumToRaw(this).(Raw::Enum).getWhereClause())
    }

    /**
     * Holds if `getWhereClause()` exists.
     */
    final predicate hasWhereClause() { exists(this.getWhereClause()) }
  }
}

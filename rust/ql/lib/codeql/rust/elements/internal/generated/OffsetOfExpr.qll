// generated by codegen, do not edit
/**
 * This module provides the generated definition of `OffsetOfExpr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.ExprImpl::Impl as ExprImpl
import codeql.rust.elements.TypeRef

/**
 * INTERNAL: This module contains the fully generated definition of `OffsetOfExpr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   *  An `offset_of` expression. For example:
   * ```rust
   * builtin # offset_of(Struct, field);
   * ```
   * INTERNAL: Do not reference the `Generated::OffsetOfExpr` class directly.
   * Use the subclass `OffsetOfExpr`, where the following predicates are available.
   */
  class OffsetOfExpr extends Synth::TOffsetOfExpr, ExprImpl::Expr {
    override string getAPrimaryQlClass() { result = "OffsetOfExpr" }

    /**
     * Gets the container of this offset of expression.
     */
    TypeRef getContainer() {
      result =
        Synth::convertTypeRefFromRaw(Synth::convertOffsetOfExprToRaw(this)
              .(Raw::OffsetOfExpr)
              .getContainer())
    }

    /**
     * Gets the `index`th field of this offset of expression (0-based).
     */
    string getField(int index) {
      result = Synth::convertOffsetOfExprToRaw(this).(Raw::OffsetOfExpr).getField(index)
    }

    /**
     * Gets any of the fields of this offset of expression.
     */
    final string getAField() { result = this.getField(_) }

    /**
     * Gets the number of fields of this offset of expression.
     */
    final int getNumberOfFields() { result = count(int i | exists(this.getField(i))) }
  }
}

// generated by codegen, do not edit
/**
 * This module provides the generated definition of `TupleStructPat`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Pat
import codeql.rust.elements.internal.PatImpl::Impl as PatImpl
import codeql.rust.elements.internal.PathAstNodeImpl::Impl as PathAstNodeImpl

/**
 * INTERNAL: This module contains the fully generated definition of `TupleStructPat` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A tuple struct pattern. For example:
   * ```rust
   * match x {
   *     Tuple("a", 1, 2, 3) => "great",
   *     Tuple(.., 3) => "fine",
   *     Tuple(..) => "fail",
   * };
   * ```
   * INTERNAL: Do not reference the `Generated::TupleStructPat` class directly.
   * Use the subclass `TupleStructPat`, where the following predicates are available.
   */
  class TupleStructPat extends Synth::TTupleStructPat, PatImpl::Pat, PathAstNodeImpl::PathAstNode {
    override string getAPrimaryQlClass() { result = "TupleStructPat" }

    /**
     * Gets the `index`th field of this tuple struct pattern (0-based).
     */
    Pat getField(int index) {
      result =
        Synth::convertPatFromRaw(Synth::convertTupleStructPatToRaw(this)
              .(Raw::TupleStructPat)
              .getField(index))
    }

    /**
     * Gets any of the fields of this tuple struct pattern.
     */
    final Pat getAField() { result = this.getField(_) }

    /**
     * Gets the number of fields of this tuple struct pattern.
     */
    final int getNumberOfFields() { result = count(int i | exists(this.getField(i))) }
  }
}

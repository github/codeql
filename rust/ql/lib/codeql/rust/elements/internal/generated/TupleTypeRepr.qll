// generated by codegen, do not edit
/**
 * This module provides the generated definition of `TupleTypeRepr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.TypeRepr
import codeql.rust.elements.internal.TypeReprImpl::Impl as TypeReprImpl

/**
 * INTERNAL: This module contains the fully generated definition of `TupleTypeRepr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A TupleTypeRepr. For example:
   * ```rust
   * todo!()
   * ```
   * INTERNAL: Do not reference the `Generated::TupleTypeRepr` class directly.
   * Use the subclass `TupleTypeRepr`, where the following predicates are available.
   */
  class TupleTypeRepr extends Synth::TTupleTypeRepr, TypeReprImpl::TypeRepr {
    override string getAPrimaryQlClass() { result = "TupleTypeRepr" }

    /**
     * Gets the `index`th field of this tuple type representation (0-based).
     */
    TypeRepr getField(int index) {
      result =
        Synth::convertTypeReprFromRaw(Synth::convertTupleTypeReprToRaw(this)
              .(Raw::TupleTypeRepr)
              .getField(index))
    }

    /**
     * Gets any of the fields of this tuple type representation.
     */
    final TypeRepr getAField() { result = this.getField(_) }

    /**
     * Gets the number of fields of this tuple type representation.
     */
    final int getNumberOfFields() { result = count(int i | exists(this.getField(i))) }
  }
}

// generated by codegen, do not edit
/**
 * This module provides the generated definition of `ArrayTypeRepr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.ConstArg
import codeql.rust.elements.TypeRepr
import codeql.rust.elements.internal.TypeReprImpl::Impl as TypeReprImpl

/**
 * INTERNAL: This module contains the fully generated definition of `ArrayTypeRepr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A ArrayTypeRepr. For example:
   * ```rust
   * todo!()
   * ```
   * INTERNAL: Do not reference the `Generated::ArrayTypeRepr` class directly.
   * Use the subclass `ArrayTypeRepr`, where the following predicates are available.
   */
  class ArrayTypeRepr extends Synth::TArrayTypeRepr, TypeReprImpl::TypeRepr {
    override string getAPrimaryQlClass() { result = "ArrayTypeRepr" }

    /**
     * Gets the const argument of this array type representation, if it exists.
     */
    ConstArg getConstArg() {
      result =
        Synth::convertConstArgFromRaw(Synth::convertArrayTypeReprToRaw(this)
              .(Raw::ArrayTypeRepr)
              .getConstArg())
    }

    /**
     * Holds if `getConstArg()` exists.
     */
    final predicate hasConstArg() { exists(this.getConstArg()) }

    /**
     * Gets the element type representation of this array type representation, if it exists.
     */
    TypeRepr getElementTypeRepr() {
      result =
        Synth::convertTypeReprFromRaw(Synth::convertArrayTypeReprToRaw(this)
              .(Raw::ArrayTypeRepr)
              .getElementTypeRepr())
    }

    /**
     * Holds if `getElementTypeRepr()` exists.
     */
    final predicate hasElementTypeRepr() { exists(this.getElementTypeRepr()) }
  }
}

// generated by codegen, do not edit
/**
 * This module provides the generated definition of `StructExpr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.ExprImpl::Impl as ExprImpl
import codeql.rust.elements.internal.PathAstNodeImpl::Impl as PathAstNodeImpl
import codeql.rust.elements.StructExprFieldList

/**
 * INTERNAL: This module contains the fully generated definition of `StructExpr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A struct expression. For example:
   * ```rust
   * let first = Foo { a: 1, b: 2 };
   * let second = Foo { a: 2, ..first };
   * Foo { a: 1, b: 2 }[2] = 10;
   * Foo { .. } = second;
   * ```
   * INTERNAL: Do not reference the `Generated::StructExpr` class directly.
   * Use the subclass `StructExpr`, where the following predicates are available.
   */
  class StructExpr extends Synth::TStructExpr, ExprImpl::Expr, PathAstNodeImpl::PathAstNode {
    override string getAPrimaryQlClass() { result = "StructExpr" }

    /**
     * Gets the struct expression field list of this struct expression, if it exists.
     */
    StructExprFieldList getStructExprFieldList() {
      result =
        Synth::convertStructExprFieldListFromRaw(Synth::convertStructExprToRaw(this)
              .(Raw::StructExpr)
              .getStructExprFieldList())
    }

    /**
     * Holds if `getStructExprFieldList()` exists.
     */
    final predicate hasStructExprFieldList() { exists(this.getStructExprFieldList()) }
  }
}

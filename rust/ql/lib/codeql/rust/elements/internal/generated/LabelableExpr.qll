// generated by codegen, do not edit
/**
 * This module provides the generated definition of `LabelableExpr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.ExprImpl::Impl as ExprImpl
import codeql.rust.elements.Label

/**
 * INTERNAL: This module contains the fully generated definition of `LabelableExpr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * The base class for expressions that can be labeled (`LoopExpr`, `ForExpr`, `WhileExpr` or `BlockExpr`).
   * INTERNAL: Do not reference the `Generated::LabelableExpr` class directly.
   * Use the subclass `LabelableExpr`, where the following predicates are available.
   */
  class LabelableExpr extends Synth::TLabelableExpr, ExprImpl::Expr {
    /**
     * Gets the label of this labelable expression, if it exists.
     */
    Label getLabel() {
      result =
        Synth::convertLabelFromRaw(Synth::convertLabelableExprToRaw(this)
              .(Raw::LabelableExpr)
              .getLabel())
    }

    /**
     * Holds if `getLabel()` exists.
     */
    final predicate hasLabel() { exists(this.getLabel()) }
  }
}

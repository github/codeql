// generated by codegen, do not edit
/**
 * This module provides the generated definition of `MatchGuard`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.AstNodeImpl::Impl as AstNodeImpl
import codeql.rust.elements.Expr

/**
 * INTERNAL: This module contains the fully generated definition of `MatchGuard` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A MatchGuard. For example:
   * ```rust
   * todo!()
   * ```
   * INTERNAL: Do not reference the `Generated::MatchGuard` class directly.
   * Use the subclass `MatchGuard`, where the following predicates are available.
   */
  class MatchGuard extends Synth::TMatchGuard, AstNodeImpl::AstNode {
    override string getAPrimaryQlClass() { result = "MatchGuard" }

    /**
     * Gets the condition of this match guard, if it exists.
     */
    Expr getCondition() {
      result =
        Synth::convertExprFromRaw(Synth::convertMatchGuardToRaw(this)
              .(Raw::MatchGuard)
              .getCondition())
    }

    /**
     * Holds if `getCondition()` exists.
     */
    final predicate hasCondition() { exists(this.getCondition()) }
  }
}

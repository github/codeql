// generated by codegen, do not edit
/**
 * This module provides the generated definition of `PathType`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Path
import codeql.rust.elements.internal.TypeRefImpl::Impl as TypeRefImpl

/**
 * INTERNAL: This module contains the fully generated definition of `PathType` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A PathType. For example:
   * ```rust
   * todo!()
   * ```
   * INTERNAL: Do not reference the `Generated::PathType` class directly.
   * Use the subclass `PathType`, where the following predicates are available.
   */
  class PathType extends Synth::TPathType, TypeRefImpl::TypeRef {
    override string getAPrimaryQlClass() { result = "PathType" }

    /**
     * Gets the path of this path type, if it exists.
     */
    Path getPath() {
      result =
        Synth::convertPathFromRaw(Synth::convertPathTypeToRaw(this).(Raw::PathType).getPath())
    }

    /**
     * Holds if `getPath()` exists.
     */
    final predicate hasPath() { exists(this.getPath()) }
  }
}

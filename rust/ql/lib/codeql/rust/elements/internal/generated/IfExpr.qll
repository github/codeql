// generated by codegen, do not edit
/**
 * This module provides the generated definition of `IfExpr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Expr
import codeql.rust.elements.internal.ExprImpl::Impl as ExprImpl

/**
 * INTERNAL: This module contains the fully generated definition of `IfExpr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * An `if` expression. For example:
   * ```rust
   * if x == 42 {
   *     println!("that's the answer");
   * }
   * ```
   * ```rust
   * let y = if x > 0 {
   *     1
   * } else {
   *     0
   * }
   * ```
   * INTERNAL: Do not reference the `Generated::IfExpr` class directly.
   * Use the subclass `IfExpr`, where the following predicates are available.
   */
  class IfExpr extends Synth::TIfExpr, ExprImpl::Expr {
    override string getAPrimaryQlClass() { result = "IfExpr" }

    /**
     * Gets the condition of this if expression.
     */
    Expr getCondition() {
      result =
        Synth::convertExprFromRaw(Synth::convertIfExprToRaw(this).(Raw::IfExpr).getCondition())
    }

    /**
     * Gets the then of this if expression.
     */
    Expr getThen() {
      result = Synth::convertExprFromRaw(Synth::convertIfExprToRaw(this).(Raw::IfExpr).getThen())
    }

    /**
     * Gets the else of this if expression, if it exists.
     */
    Expr getElse() {
      result = Synth::convertExprFromRaw(Synth::convertIfExprToRaw(this).(Raw::IfExpr).getElse())
    }

    /**
     * Holds if `getElse()` exists.
     */
    final predicate hasElse() { exists(this.getElse()) }
  }
}

// generated by codegen, do not edit
/**
 * This module provides the generated definition of `MacroBlockExpr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Expr
import codeql.rust.elements.internal.ExprImpl::Impl as ExprImpl
import codeql.rust.elements.Stmt

/**
 * INTERNAL: This module contains the fully generated definition of `MacroBlockExpr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A sequence of statements generated by a `MacroCall`. For example:
   * ```rust
   * fn main() {
   *     println!("Hello, world!"); // This macro expands into a list of statements
   * }
   * ```
   * INTERNAL: Do not reference the `Generated::MacroBlockExpr` class directly.
   * Use the subclass `MacroBlockExpr`, where the following predicates are available.
   */
  class MacroBlockExpr extends Synth::TMacroBlockExpr, ExprImpl::Expr {
    override string getAPrimaryQlClass() { result = "MacroBlockExpr" }

    /**
     * Gets the tail expression of this macro block expression, if it exists.
     */
    Expr getTailExpr() {
      result =
        Synth::convertExprFromRaw(Synth::convertMacroBlockExprToRaw(this)
              .(Raw::MacroBlockExpr)
              .getTailExpr())
    }

    /**
     * Holds if `getTailExpr()` exists.
     */
    final predicate hasTailExpr() { exists(this.getTailExpr()) }

    /**
     * Gets the `index`th statement of this macro block expression (0-based).
     */
    Stmt getStatement(int index) {
      result =
        Synth::convertStmtFromRaw(Synth::convertMacroBlockExprToRaw(this)
              .(Raw::MacroBlockExpr)
              .getStatement(index))
    }

    /**
     * Gets any of the statements of this macro block expression.
     */
    final Stmt getAStatement() { result = this.getStatement(_) }

    /**
     * Gets the number of statements of this macro block expression.
     */
    final int getNumberOfStatements() { result = count(int i | exists(this.getStatement(i))) }
  }
}

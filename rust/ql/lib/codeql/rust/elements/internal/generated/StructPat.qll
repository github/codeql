// generated by codegen, do not edit
/**
 * This module provides the generated definition of `StructPat`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.PatImpl::Impl as PatImpl
import codeql.rust.elements.internal.PathAstNodeImpl::Impl as PathAstNodeImpl
import codeql.rust.elements.StructPatFieldList

/**
 * INTERNAL: This module contains the fully generated definition of `StructPat` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A struct pattern. For example:
   * ```rust
   * match x {
   *     Foo { a: 1, b: 2 } => "ok",
   *     Foo { .. } => "fail",
   * }
   * ```
   * INTERNAL: Do not reference the `Generated::StructPat` class directly.
   * Use the subclass `StructPat`, where the following predicates are available.
   */
  class StructPat extends Synth::TStructPat, PatImpl::Pat, PathAstNodeImpl::PathAstNode {
    override string getAPrimaryQlClass() { result = "StructPat" }

    /**
     * Gets the struct pattern field list of this struct pattern, if it exists.
     */
    StructPatFieldList getStructPatFieldList() {
      result =
        Synth::convertStructPatFieldListFromRaw(Synth::convertStructPatToRaw(this)
              .(Raw::StructPat)
              .getStructPatFieldList())
    }

    /**
     * Holds if `getStructPatFieldList()` exists.
     */
    final predicate hasStructPatFieldList() { exists(this.getStructPatFieldList()) }
  }
}

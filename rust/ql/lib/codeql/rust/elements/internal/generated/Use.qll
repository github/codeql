// generated by codegen, do not edit
/**
 * This module provides the generated definition of `Use`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Attr
import codeql.rust.elements.internal.ItemImpl::Impl as ItemImpl
import codeql.rust.elements.UseTree
import codeql.rust.elements.Visibility

/**
 * INTERNAL: This module contains the fully generated definition of `Use` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A Use. For example:
   * ```rust
   * todo!()
   * ```
   * INTERNAL: Do not reference the `Generated::Use` class directly.
   * Use the subclass `Use`, where the following predicates are available.
   */
  class Use extends Synth::TUse, ItemImpl::Item {
    override string getAPrimaryQlClass() { result = "Use" }

    /**
     * Gets the `index`th attr of this use (0-based).
     */
    Attr getAttr(int index) {
      result = Synth::convertAttrFromRaw(Synth::convertUseToRaw(this).(Raw::Use).getAttr(index))
    }

    /**
     * Gets any of the attrs of this use.
     */
    final Attr getAnAttr() { result = this.getAttr(_) }

    /**
     * Gets the number of attrs of this use.
     */
    final int getNumberOfAttrs() { result = count(int i | exists(this.getAttr(i))) }

    /**
     * Gets the use tree of this use, if it exists.
     */
    UseTree getUseTree() {
      result = Synth::convertUseTreeFromRaw(Synth::convertUseToRaw(this).(Raw::Use).getUseTree())
    }

    /**
     * Holds if `getUseTree()` exists.
     */
    final predicate hasUseTree() { exists(this.getUseTree()) }

    /**
     * Gets the visibility of this use, if it exists.
     */
    Visibility getVisibility() {
      result =
        Synth::convertVisibilityFromRaw(Synth::convertUseToRaw(this).(Raw::Use).getVisibility())
    }

    /**
     * Holds if `getVisibility()` exists.
     */
    final predicate hasVisibility() { exists(this.getVisibility()) }
  }
}

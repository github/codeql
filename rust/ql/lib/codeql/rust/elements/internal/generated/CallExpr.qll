// generated by codegen, do not edit
/**
 * This module provides the generated definition of `CallExpr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Expr
import codeql.rust.elements.internal.ExprImpl::Impl as ExprImpl

/**
 * INTERNAL: This module contains the fully generated definition of `CallExpr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A function call expression. For example:
   * ```rust
   * foo(42);
   * foo::<u32, u64>(42);
   * foo[0](42);
   * foo(1) = 4;
   * ```
   * INTERNAL: Do not reference the `Generated::CallExpr` class directly.
   * Use the subclass `CallExpr`, where the following predicates are available.
   */
  class CallExpr extends Synth::TCallExpr, ExprImpl::Expr {
    override string getAPrimaryQlClass() { result = "CallExpr" }

    /**
     * Gets the callee of this call expression.
     */
    Expr getCallee() {
      result =
        Synth::convertExprFromRaw(Synth::convertCallExprToRaw(this).(Raw::CallExpr).getCallee())
    }

    /**
     * Gets the `index`th argument of this call expression (0-based).
     */
    Expr getArg(int index) {
      result =
        Synth::convertExprFromRaw(Synth::convertCallExprToRaw(this).(Raw::CallExpr).getArg(index))
    }

    /**
     * Gets any of the arguments of this call expression.
     */
    final Expr getAnArg() { result = this.getArg(_) }

    /**
     * Gets the number of arguments of this call expression.
     */
    final int getNumberOfArgs() { result = count(int i | exists(this.getArg(i))) }

    /**
     * Holds if this call expression is assignee expression.
     */
    predicate isAssigneeExpr() {
      Synth::convertCallExprToRaw(this).(Raw::CallExpr).isAssigneeExpr()
    }
  }
}

// generated by codegen, do not edit
/**
 * This module provides the generated definition of `Param`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.ParamBaseImpl::Impl as ParamBaseImpl
import codeql.rust.elements.Pat

/**
 * INTERNAL: This module contains the fully generated definition of `Param` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A parameter in a function or method. For example `x` in:
   * ```rust
   * fn new(x: T) -> Foo<T> {
   *   // ...
   * }
   * ```
   * INTERNAL: Do not reference the `Generated::Param` class directly.
   * Use the subclass `Param`, where the following predicates are available.
   */
  class Param extends Synth::TParam, ParamBaseImpl::ParamBase {
    override string getAPrimaryQlClass() { result = "Param" }

    /**
     * Gets the pattern of this parameter, if it exists.
     */
    Pat getPat() {
      result = Synth::convertPatFromRaw(Synth::convertParamToRaw(this).(Raw::Param).getPat())
    }

    /**
     * Holds if `getPat()` exists.
     */
    final predicate hasPat() { exists(this.getPat()) }
  }
}

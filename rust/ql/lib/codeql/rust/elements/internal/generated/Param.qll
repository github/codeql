// generated by codegen, do not edit
/**
 * This module provides the generated definition of `Param`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.AstNodeImpl::Impl as AstNodeImpl
import codeql.rust.elements.Attr
import codeql.rust.elements.Pat
import codeql.rust.elements.TypeRef

/**
 * INTERNAL: This module contains the fully generated definition of `Param` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A Param. For example:
   * ```rust
   * todo!()
   * ```
   * INTERNAL: Do not reference the `Generated::Param` class directly.
   * Use the subclass `Param`, where the following predicates are available.
   */
  class Param extends Synth::TParam, AstNodeImpl::AstNode {
    override string getAPrimaryQlClass() { result = "Param" }

    /**
     * Gets the `index`th attr of this parameter (0-based).
     */
    Attr getAttr(int index) {
      result = Synth::convertAttrFromRaw(Synth::convertParamToRaw(this).(Raw::Param).getAttr(index))
    }

    /**
     * Gets any of the attrs of this parameter.
     */
    final Attr getAnAttr() { result = this.getAttr(_) }

    /**
     * Gets the number of attrs of this parameter.
     */
    final int getNumberOfAttrs() { result = count(int i | exists(this.getAttr(i))) }

    /**
     * Gets the pat of this parameter, if it exists.
     */
    Pat getPat() {
      result = Synth::convertPatFromRaw(Synth::convertParamToRaw(this).(Raw::Param).getPat())
    }

    /**
     * Holds if `getPat()` exists.
     */
    final predicate hasPat() { exists(this.getPat()) }

    /**
     * Gets the ty of this parameter, if it exists.
     */
    TypeRef getTy() {
      result = Synth::convertTypeRefFromRaw(Synth::convertParamToRaw(this).(Raw::Param).getTy())
    }

    /**
     * Holds if `getTy()` exists.
     */
    final predicate hasTy() { exists(this.getTy()) }
  }
}

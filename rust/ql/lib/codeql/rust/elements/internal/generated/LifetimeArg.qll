// generated by codegen, do not edit
/**
 * This module provides the generated definition of `LifetimeArg`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.GenericArgImpl::Impl as GenericArgImpl
import codeql.rust.elements.Lifetime

/**
 * INTERNAL: This module contains the fully generated definition of `LifetimeArg` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A LifetimeArg. For example:
   * ```rust
   * todo!()
   * ```
   * INTERNAL: Do not reference the `Generated::LifetimeArg` class directly.
   * Use the subclass `LifetimeArg`, where the following predicates are available.
   */
  class LifetimeArg extends Synth::TLifetimeArg, GenericArgImpl::GenericArg {
    override string getAPrimaryQlClass() { result = "LifetimeArg" }

    /**
     * Gets the lifetime of this lifetime argument, if it exists.
     */
    Lifetime getLifetime() {
      result =
        Synth::convertLifetimeFromRaw(Synth::convertLifetimeArgToRaw(this)
              .(Raw::LifetimeArg)
              .getLifetime())
    }

    /**
     * Holds if `getLifetime()` exists.
     */
    final predicate hasLifetime() { exists(this.getLifetime()) }
  }
}

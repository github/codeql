// generated by codegen, do not edit
/**
 * This module provides the generated definition of `StructPatFieldList`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.AstNodeImpl::Impl as AstNodeImpl
import codeql.rust.elements.RestPat
import codeql.rust.elements.StructPatField

/**
 * INTERNAL: This module contains the fully generated definition of `StructPatFieldList` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A StructPatFieldList. For example:
   * ```rust
   * todo!()
   * ```
   * INTERNAL: Do not reference the `Generated::StructPatFieldList` class directly.
   * Use the subclass `StructPatFieldList`, where the following predicates are available.
   */
  class StructPatFieldList extends Synth::TStructPatFieldList, AstNodeImpl::AstNode {
    override string getAPrimaryQlClass() { result = "StructPatFieldList" }

    /**
     * Gets the `index`th field of this struct pattern field list (0-based).
     */
    StructPatField getField(int index) {
      result =
        Synth::convertStructPatFieldFromRaw(Synth::convertStructPatFieldListToRaw(this)
              .(Raw::StructPatFieldList)
              .getField(index))
    }

    /**
     * Gets any of the fields of this struct pattern field list.
     */
    final StructPatField getAField() { result = this.getField(_) }

    /**
     * Gets the number of fields of this struct pattern field list.
     */
    final int getNumberOfFields() { result = count(int i | exists(this.getField(i))) }

    /**
     * Gets the rest pattern of this struct pattern field list, if it exists.
     */
    RestPat getRestPat() {
      result =
        Synth::convertRestPatFromRaw(Synth::convertStructPatFieldListToRaw(this)
              .(Raw::StructPatFieldList)
              .getRestPat())
    }

    /**
     * Holds if `getRestPat()` exists.
     */
    final predicate hasRestPat() { exists(this.getRestPat()) }
  }
}

// generated by codegen, do not edit
/**
 * This module provides the generated definition of `ForExpr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Attr
import codeql.rust.elements.BlockExpr
import codeql.rust.elements.Expr
import codeql.rust.elements.internal.ExprImpl::Impl as ExprImpl
import codeql.rust.elements.Label
import codeql.rust.elements.Pat

/**
 * INTERNAL: This module contains the fully generated definition of `ForExpr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A ForExpr. For example:
   * ```rust
   * todo!()
   * ```
   * INTERNAL: Do not reference the `Generated::ForExpr` class directly.
   * Use the subclass `ForExpr`, where the following predicates are available.
   */
  class ForExpr extends Synth::TForExpr, ExprImpl::Expr {
    override string getAPrimaryQlClass() { result = "ForExpr" }

    /**
     * Gets the `index`th attr of this for expression (0-based).
     */
    Attr getAttr(int index) {
      result =
        Synth::convertAttrFromRaw(Synth::convertForExprToRaw(this).(Raw::ForExpr).getAttr(index))
    }

    /**
     * Gets any of the attrs of this for expression.
     */
    final Attr getAnAttr() { result = this.getAttr(_) }

    /**
     * Gets the number of attrs of this for expression.
     */
    final int getNumberOfAttrs() { result = count(int i | exists(this.getAttr(i))) }

    /**
     * Gets the iterable of this for expression, if it exists.
     */
    Expr getIterable() {
      result =
        Synth::convertExprFromRaw(Synth::convertForExprToRaw(this).(Raw::ForExpr).getIterable())
    }

    /**
     * Holds if `getIterable()` exists.
     */
    final predicate hasIterable() { exists(this.getIterable()) }

    /**
     * Gets the label of this for expression, if it exists.
     */
    Label getLabel() {
      result =
        Synth::convertLabelFromRaw(Synth::convertForExprToRaw(this).(Raw::ForExpr).getLabel())
    }

    /**
     * Holds if `getLabel()` exists.
     */
    final predicate hasLabel() { exists(this.getLabel()) }

    /**
     * Gets the loop body of this for expression, if it exists.
     */
    BlockExpr getLoopBody() {
      result =
        Synth::convertBlockExprFromRaw(Synth::convertForExprToRaw(this).(Raw::ForExpr).getLoopBody())
    }

    /**
     * Holds if `getLoopBody()` exists.
     */
    final predicate hasLoopBody() { exists(this.getLoopBody()) }

    /**
     * Gets the pat of this for expression, if it exists.
     */
    Pat getPat() {
      result = Synth::convertPatFromRaw(Synth::convertForExprToRaw(this).(Raw::ForExpr).getPat())
    }

    /**
     * Holds if `getPat()` exists.
     */
    final predicate hasPat() { exists(this.getPat()) }
  }
}

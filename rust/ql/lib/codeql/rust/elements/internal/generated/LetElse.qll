// generated by codegen, do not edit
/**
 * This module provides the generated definition of `LetElse`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.AstNodeImpl::Impl as AstNodeImpl
import codeql.rust.elements.BlockExpr

/**
 * INTERNAL: This module contains the fully generated definition of `LetElse` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A LetElse. For example:
   * ```rust
   * todo!()
   * ```
   * INTERNAL: Do not reference the `Generated::LetElse` class directly.
   * Use the subclass `LetElse`, where the following predicates are available.
   */
  class LetElse extends Synth::TLetElse, AstNodeImpl::AstNode {
    override string getAPrimaryQlClass() { result = "LetElse" }

    /**
     * Gets the block expression of this let else, if it exists.
     */
    BlockExpr getBlockExpr() {
      result =
        Synth::convertBlockExprFromRaw(Synth::convertLetElseToRaw(this)
              .(Raw::LetElse)
              .getBlockExpr())
    }

    /**
     * Holds if `getBlockExpr()` exists.
     */
    final predicate hasBlockExpr() { exists(this.getBlockExpr()) }
  }
}

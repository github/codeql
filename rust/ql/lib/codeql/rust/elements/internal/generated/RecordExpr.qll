// generated by codegen, do not edit
/**
 * This module provides the generated definition of `RecordExpr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.ExprImpl::Impl as ExprImpl
import codeql.rust.elements.Path
import codeql.rust.elements.RecordExprFieldList

/**
 * INTERNAL: This module contains the fully generated definition of `RecordExpr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A record expression. For example:
   * ```rust
   * let first = Foo { a: 1, b: 2 };
   * let second = Foo { a: 2, ..first };
   * Foo { a: 1, b: 2 }[2] = 10;
   * Foo { .. } = second;
   * ```
   * INTERNAL: Do not reference the `Generated::RecordExpr` class directly.
   * Use the subclass `RecordExpr`, where the following predicates are available.
   */
  class RecordExpr extends Synth::TRecordExpr, ExprImpl::Expr {
    override string getAPrimaryQlClass() { result = "RecordExpr" }

    /**
     * Gets the path of this record expression, if it exists.
     */
    Path getPath() {
      result =
        Synth::convertPathFromRaw(Synth::convertRecordExprToRaw(this).(Raw::RecordExpr).getPath())
    }

    /**
     * Holds if `getPath()` exists.
     */
    final predicate hasPath() { exists(this.getPath()) }

    /**
     * Gets the record expression field list of this record expression, if it exists.
     */
    RecordExprFieldList getRecordExprFieldList() {
      result =
        Synth::convertRecordExprFieldListFromRaw(Synth::convertRecordExprToRaw(this)
              .(Raw::RecordExpr)
              .getRecordExprFieldList())
    }

    /**
     * Holds if `getRecordExprFieldList()` exists.
     */
    final predicate hasRecordExprFieldList() { exists(this.getRecordExprFieldList()) }
  }
}

// generated by codegen, do not edit
/**
 * This module provides the generated definition of `RecordExpr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Expr
import codeql.rust.elements.internal.ExprImpl::Impl as ExprImpl
import codeql.rust.elements.Path
import codeql.rust.elements.RecordExprField

/**
 * INTERNAL: This module contains the fully generated definition of `RecordExpr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A record expression. For example:
   * ```rust
   * let first = Foo { a: 1, b: 2 };
   * let second = Foo { a: 2, ..first };
   * Foo { a: 1, b: 2 }[2] = 10;
   * Foo { .. } = second;
   * ```
   * INTERNAL: Do not reference the `Generated::RecordExpr` class directly.
   * Use the subclass `RecordExpr`, where the following predicates are available.
   */
  class RecordExpr extends Synth::TRecordExpr, ExprImpl::Expr {
    override string getAPrimaryQlClass() { result = "RecordExpr" }

    /**
     * Gets the path of this record expression, if it exists.
     */
    Path getPath() {
      result =
        Synth::convertPathFromRaw(Synth::convertRecordExprToRaw(this).(Raw::RecordExpr).getPath())
    }

    /**
     * Holds if `getPath()` exists.
     */
    final predicate hasPath() { exists(this.getPath()) }

    /**
     * Gets the `index`th fld of this record expression (0-based).
     */
    RecordExprField getFld(int index) {
      result =
        Synth::convertRecordExprFieldFromRaw(Synth::convertRecordExprToRaw(this)
              .(Raw::RecordExpr)
              .getFld(index))
    }

    /**
     * Gets any of the flds of this record expression.
     */
    final RecordExprField getAFld() { result = this.getFld(_) }

    /**
     * Gets the number of flds of this record expression.
     */
    final int getNumberOfFlds() { result = count(int i | exists(this.getFld(i))) }

    /**
     * Gets the spread of this record expression, if it exists.
     */
    Expr getSpread() {
      result =
        Synth::convertExprFromRaw(Synth::convertRecordExprToRaw(this).(Raw::RecordExpr).getSpread())
    }

    /**
     * Holds if `getSpread()` exists.
     */
    final predicate hasSpread() { exists(this.getSpread()) }

    /**
     * Holds if this record expression has ellipsis.
     */
    predicate hasEllipsis() { Synth::convertRecordExprToRaw(this).(Raw::RecordExpr).hasEllipsis() }

    /**
     * Holds if this record expression is assignee expression.
     */
    predicate isAssigneeExpr() {
      Synth::convertRecordExprToRaw(this).(Raw::RecordExpr).isAssigneeExpr()
    }
  }
}

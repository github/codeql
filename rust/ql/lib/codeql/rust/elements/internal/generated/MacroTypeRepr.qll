// generated by codegen, do not edit
/**
 * This module provides the generated definition of `MacroTypeRepr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.MacroCall
import codeql.rust.elements.internal.TypeReprImpl::Impl as TypeReprImpl

/**
 * INTERNAL: This module contains the fully generated definition of `MacroTypeRepr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A MacroTypeRepr. For example:
   * ```rust
   * todo!()
   * ```
   * INTERNAL: Do not reference the `Generated::MacroTypeRepr` class directly.
   * Use the subclass `MacroTypeRepr`, where the following predicates are available.
   */
  class MacroTypeRepr extends Synth::TMacroTypeRepr, TypeReprImpl::TypeRepr {
    override string getAPrimaryQlClass() { result = "MacroTypeRepr" }

    /**
     * Gets the macro call of this macro type representation, if it exists.
     */
    MacroCall getMacroCall() {
      result =
        Synth::convertMacroCallFromRaw(Synth::convertMacroTypeReprToRaw(this)
              .(Raw::MacroTypeRepr)
              .getMacroCall())
    }

    /**
     * Holds if `getMacroCall()` exists.
     */
    final predicate hasMacroCall() { exists(this.getMacroCall()) }
  }
}

// generated by codegen, do not edit
/**
 * This module provides the generated definition of `AsmRegSpec`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.AstNodeImpl::Impl as AstNodeImpl
import codeql.rust.elements.NameRef

/**
 * INTERNAL: This module contains the fully generated definition of `AsmRegSpec` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::AsmRegSpec` class directly.
   * Use the subclass `AsmRegSpec`, where the following predicates are available.
   */
  class AsmRegSpec extends Synth::TAsmRegSpec, AstNodeImpl::AstNode {
    override string getAPrimaryQlClass() { result = "AsmRegSpec" }

    /**
     * Gets the name reference of this asm reg spec, if it exists.
     */
    NameRef getNameRef() {
      result =
        Synth::convertNameRefFromRaw(Synth::convertAsmRegSpecToRaw(this)
              .(Raw::AsmRegSpec)
              .getNameRef())
    }

    /**
     * Holds if `getNameRef()` exists.
     */
    final predicate hasNameRef() { exists(this.getNameRef()) }
  }
}

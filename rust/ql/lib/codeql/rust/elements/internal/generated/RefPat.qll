// generated by codegen, do not edit
/**
 * This module provides the generated definition of `RefPat`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Pat
import codeql.rust.elements.internal.PatImpl::Impl as PatImpl

/**
 * INTERNAL: This module contains the fully generated definition of `RefPat` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A reference pattern. For example:
   * ```rust
   * match x {
   *     &mut Option::Some(y) => y,
   *     &Option::None => 0,
   * };
   * ```
   * INTERNAL: Do not reference the `Generated::RefPat` class directly.
   * Use the subclass `RefPat`, where the following predicates are available.
   */
  class RefPat extends Synth::TRefPat, PatImpl::Pat {
    override string getAPrimaryQlClass() { result = "RefPat" }

    /**
     * Gets the pat of this reference pat, if it exists.
     */
    Pat getPat() {
      result = Synth::convertPatFromRaw(Synth::convertRefPatToRaw(this).(Raw::RefPat).getPat())
    }

    /**
     * Holds if `getPat()` exists.
     */
    final predicate hasPat() { exists(this.getPat()) }
  }
}

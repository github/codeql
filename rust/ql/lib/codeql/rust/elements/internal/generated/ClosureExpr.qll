// generated by codegen, do not edit
/**
 * This module provides the generated definition of `ClosureExpr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Attr
import codeql.rust.elements.ClosureBinder
import codeql.rust.elements.Expr
import codeql.rust.elements.internal.ExprImpl::Impl as ExprImpl
import codeql.rust.elements.ParamList
import codeql.rust.elements.RetType

/**
 * INTERNAL: This module contains the fully generated definition of `ClosureExpr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A closure expression. For example:
   * ```rust
   * |x| x + 1;
   * move |x: i32| -> i32 { x + 1 };
   * async |x: i32, y| x + y;
   *  #[coroutine]
   * |x| yield x;
   *  #[coroutine]
   *  static |x| yield x;
   * ```
   * INTERNAL: Do not reference the `Generated::ClosureExpr` class directly.
   * Use the subclass `ClosureExpr`, where the following predicates are available.
   */
  class ClosureExpr extends Synth::TClosureExpr, ExprImpl::Expr {
    override string getAPrimaryQlClass() { result = "ClosureExpr" }

    /**
     * Gets the `index`th attr of this closure expression (0-based).
     */
    Attr getAttr(int index) {
      result =
        Synth::convertAttrFromRaw(Synth::convertClosureExprToRaw(this)
              .(Raw::ClosureExpr)
              .getAttr(index))
    }

    /**
     * Gets any of the attrs of this closure expression.
     */
    final Attr getAnAttr() { result = this.getAttr(_) }

    /**
     * Gets the number of attrs of this closure expression.
     */
    final int getNumberOfAttrs() { result = count(int i | exists(this.getAttr(i))) }

    /**
     * Gets the body of this closure expression, if it exists.
     */
    Expr getBody() {
      result =
        Synth::convertExprFromRaw(Synth::convertClosureExprToRaw(this).(Raw::ClosureExpr).getBody())
    }

    /**
     * Holds if `getBody()` exists.
     */
    final predicate hasBody() { exists(this.getBody()) }

    /**
     * Gets the closure binder of this closure expression, if it exists.
     */
    ClosureBinder getClosureBinder() {
      result =
        Synth::convertClosureBinderFromRaw(Synth::convertClosureExprToRaw(this)
              .(Raw::ClosureExpr)
              .getClosureBinder())
    }

    /**
     * Holds if `getClosureBinder()` exists.
     */
    final predicate hasClosureBinder() { exists(this.getClosureBinder()) }

    /**
     * Gets the parameter list of this closure expression, if it exists.
     */
    ParamList getParamList() {
      result =
        Synth::convertParamListFromRaw(Synth::convertClosureExprToRaw(this)
              .(Raw::ClosureExpr)
              .getParamList())
    }

    /**
     * Holds if `getParamList()` exists.
     */
    final predicate hasParamList() { exists(this.getParamList()) }

    /**
     * Gets the ret type of this closure expression, if it exists.
     */
    RetType getRetType() {
      result =
        Synth::convertRetTypeFromRaw(Synth::convertClosureExprToRaw(this)
              .(Raw::ClosureExpr)
              .getRetType())
    }

    /**
     * Holds if `getRetType()` exists.
     */
    final predicate hasRetType() { exists(this.getRetType()) }
  }
}

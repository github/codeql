// generated by codegen, do not edit
/**
 * This module provides the generated definition of `ClosureExpr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Expr
import codeql.rust.elements.internal.ExprImpl::Impl as ExprImpl
import codeql.rust.elements.Pat
import codeql.rust.elements.TypeRef

/**
 * INTERNAL: This module contains the fully generated definition of `ClosureExpr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A closure expression. For example:
   * ```rust
   * |x| x + 1;
   * move |x: i32| -> i32 { x + 1 };
   * async |x: i32, y| x + y;
   *  #[coroutine]
   * |x| yield x;
   *  #[coroutine]
   *  static |x| yield x;
   * ```
   * INTERNAL: Do not reference the `Generated::ClosureExpr` class directly.
   * Use the subclass `ClosureExpr`, where the following predicates are available.
   */
  class ClosureExpr extends Synth::TClosureExpr, ExprImpl::Expr {
    override string getAPrimaryQlClass() { result = "ClosureExpr" }

    /**
     * Gets the `index`th argument of this closure expression (0-based).
     */
    Pat getArg(int index) {
      result =
        Synth::convertPatFromRaw(Synth::convertClosureExprToRaw(this)
              .(Raw::ClosureExpr)
              .getArg(index))
    }

    /**
     * Gets any of the arguments of this closure expression.
     */
    final Pat getAnArg() { result = this.getArg(_) }

    /**
     * Gets the number of arguments of this closure expression.
     */
    final int getNumberOfArgs() { result = count(int i | exists(this.getArg(i))) }

    /**
     * Gets the `index`th argument type of this closure expression (0-based), if it exists.
     */
    TypeRef getArgType(int index) {
      result =
        Synth::convertTypeRefFromRaw(Synth::convertClosureExprToRaw(this)
              .(Raw::ClosureExpr)
              .getArgType(index))
    }

    /**
     * Holds if `getArgType(index)` exists.
     */
    final predicate hasArgType(int index) { exists(this.getArgType(index)) }

    /**
     * Gets any of the argument types of this closure expression.
     */
    final TypeRef getAnArgType() { result = this.getArgType(_) }

    /**
     * Gets the ret type of this closure expression, if it exists.
     */
    TypeRef getRetType() {
      result =
        Synth::convertTypeRefFromRaw(Synth::convertClosureExprToRaw(this)
              .(Raw::ClosureExpr)
              .getRetType())
    }

    /**
     * Holds if `getRetType()` exists.
     */
    final predicate hasRetType() { exists(this.getRetType()) }

    /**
     * Gets the body of this closure expression.
     */
    Expr getBody() {
      result =
        Synth::convertExprFromRaw(Synth::convertClosureExprToRaw(this).(Raw::ClosureExpr).getBody())
    }

    /**
     * Gets the closure kind of this closure expression.
     */
    string getClosureKind() {
      result = Synth::convertClosureExprToRaw(this).(Raw::ClosureExpr).getClosureKind()
    }

    /**
     * Holds if this closure expression is move.
     */
    predicate isMove() { Synth::convertClosureExprToRaw(this).(Raw::ClosureExpr).isMove() }
  }
}

// generated by codegen, do not edit
/**
 * This module provides the generated definition of `ExprStmt`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Expr
import codeql.rust.elements.internal.StmtImpl::Impl as StmtImpl

/**
 * INTERNAL: This module contains the fully generated definition of `ExprStmt` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * An expression statement. For example:
   * ```rust
   * start();
   * finish()
   * use std::env;
   * ```
   * INTERNAL: Do not reference the `Generated::ExprStmt` class directly.
   * Use the subclass `ExprStmt`, where the following predicates are available.
   */
  class ExprStmt extends Synth::TExprStmt, StmtImpl::Stmt {
    override string getAPrimaryQlClass() { result = "ExprStmt" }

    /**
     * Gets the expression of this expression statement, if it exists.
     */
    Expr getExpr() {
      result =
        Synth::convertExprFromRaw(Synth::convertExprStmtToRaw(this).(Raw::ExprStmt).getExpr())
    }

    /**
     * Holds if `getExpr()` exists.
     */
    final predicate hasExpr() { exists(this.getExpr()) }
  }
}

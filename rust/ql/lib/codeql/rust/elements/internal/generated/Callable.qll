// generated by codegen, do not edit
/**
 * This module provides the generated definition of `Callable`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.AstNodeImpl::Impl as AstNodeImpl
import codeql.rust.elements.Attr
import codeql.rust.elements.ParamList

/**
 * INTERNAL: This module contains the fully generated definition of `Callable` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A callable. Either a `Function` or a `ClosureExpr`.
   * INTERNAL: Do not reference the `Generated::Callable` class directly.
   * Use the subclass `Callable`, where the following predicates are available.
   */
  class Callable extends Synth::TCallable, AstNodeImpl::AstNode {
    /**
     * Gets the parameter list of this callable, if it exists.
     */
    ParamList getParamList() {
      result =
        Synth::convertParamListFromRaw(Synth::convertCallableToRaw(this)
              .(Raw::Callable)
              .getParamList())
    }

    /**
     * Holds if `getParamList()` exists.
     */
    final predicate hasParamList() { exists(this.getParamList()) }

    /**
     * Gets the `index`th attr of this callable (0-based).
     */
    Attr getAttr(int index) {
      result =
        Synth::convertAttrFromRaw(Synth::convertCallableToRaw(this).(Raw::Callable).getAttr(index))
    }

    /**
     * Gets any of the attrs of this callable.
     */
    final Attr getAnAttr() { result = this.getAttr(_) }

    /**
     * Gets the number of attrs of this callable.
     */
    final int getNumberOfAttrs() { result = count(int i | exists(this.getAttr(i))) }
  }
}

// generated by codegen, do not edit
/**
 * This module provides the generated definition of `ExpandableItem`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.AstNodeImpl::Impl as AstNodeImpl
import codeql.rust.elements.MacroItems

/**
 * INTERNAL: This module contains the fully generated definition of `ExpandableItem` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * Something that can be expanded by an attribute macro
   * INTERNAL: Do not reference the `Generated::ExpandableItem` class directly.
   * Use the subclass `ExpandableItem`, where the following predicates are available.
   */
  class ExpandableItem extends Synth::TExpandableItem, AstNodeImpl::AstNode {
    /**
     * Gets the attribute macro expansion of this expandable item, if it exists.
     */
    MacroItems getAttributeMacroExpansion() {
      result =
        Synth::convertMacroItemsFromRaw(Synth::convertExpandableItemToRaw(this)
              .(Raw::ExpandableItem)
              .getAttributeMacroExpansion())
    }

    /**
     * Holds if `getAttributeMacroExpansion()` exists.
     */
    final predicate hasAttributeMacroExpansion() { exists(this.getAttributeMacroExpansion()) }
  }
}

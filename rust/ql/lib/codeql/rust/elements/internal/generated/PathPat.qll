// generated by codegen, do not edit
/**
 * This module provides the generated definition of `PathPat`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.PatImpl::Impl as PatImpl
import codeql.rust.elements.Path

/**
 * INTERNAL: This module contains the fully generated definition of `PathPat` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A path pattern. For example:
   * ```rust
   * match x {
   *     Foo::Bar => "ok",
   *     _ => "fail",
   * }
   * ```
   * INTERNAL: Do not reference the `Generated::PathPat` class directly.
   * Use the subclass `PathPat`, where the following predicates are available.
   */
  class PathPat extends Synth::TPathPat, PatImpl::Pat {
    override string getAPrimaryQlClass() { result = "PathPat" }

    /**
     * Gets the path of this path pat, if it exists.
     */
    Path getPath() {
      result = Synth::convertPathFromRaw(Synth::convertPathPatToRaw(this).(Raw::PathPat).getPath())
    }

    /**
     * Holds if `getPath()` exists.
     */
    final predicate hasPath() { exists(this.getPath()) }
  }
}

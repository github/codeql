// generated by codegen, do not edit
/**
 * This module provides the generated definition of `UseTreeList`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.AstNodeImpl::Impl as AstNodeImpl
import codeql.rust.elements.UseTree

/**
 * INTERNAL: This module contains the fully generated definition of `UseTreeList` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A UseTreeList. For example:
   * ```rust
   * todo!()
   * ```
   * INTERNAL: Do not reference the `Generated::UseTreeList` class directly.
   * Use the subclass `UseTreeList`, where the following predicates are available.
   */
  class UseTreeList extends Synth::TUseTreeList, AstNodeImpl::AstNode {
    override string getAPrimaryQlClass() { result = "UseTreeList" }

    /**
     * Gets the `index`th use tree of this use tree list (0-based).
     */
    UseTree getUseTree(int index) {
      result =
        Synth::convertUseTreeFromRaw(Synth::convertUseTreeListToRaw(this)
              .(Raw::UseTreeList)
              .getUseTree(index))
    }

    /**
     * Gets any of the use trees of this use tree list.
     */
    final UseTree getAUseTree() { result = this.getUseTree(_) }

    /**
     * Gets the number of use trees of this use tree list.
     */
    final int getNumberOfUseTrees() { result = count(int i | exists(this.getUseTree(i))) }
  }
}

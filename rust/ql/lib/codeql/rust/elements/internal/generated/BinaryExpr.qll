// generated by codegen, do not edit
/**
 * This module provides the generated definition of `BinaryExpr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Expr
import codeql.rust.elements.internal.ExprImpl::Impl as ExprImpl

/**
 * INTERNAL: This module contains the fully generated definition of `BinaryExpr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A binary operation expression. For example:
   * ```rust
   * x + y;
   * x && y;
   * x <= y;
   * x = y;
   * x += y;
   * ```
   * INTERNAL: Do not reference the `Generated::BinaryExpr` class directly.
   * Use the subclass `BinaryExpr`, where the following predicates are available.
   */
  class BinaryExpr extends Synth::TBinaryExpr, ExprImpl::Expr {
    override string getAPrimaryQlClass() { result = "BinaryExpr" }

    /**
     * Gets the lhs of this binary expression.
     */
    Expr getLhs() {
      result =
        Synth::convertExprFromRaw(Synth::convertBinaryExprToRaw(this).(Raw::BinaryExpr).getLhs())
    }

    /**
     * Gets the rhs of this binary expression.
     */
    Expr getRhs() {
      result =
        Synth::convertExprFromRaw(Synth::convertBinaryExprToRaw(this).(Raw::BinaryExpr).getRhs())
    }

    /**
     * Gets the op of this binary expression, if it exists.
     */
    string getOp() { result = Synth::convertBinaryExprToRaw(this).(Raw::BinaryExpr).getOp() }

    /**
     * Holds if `getOp()` exists.
     */
    final predicate hasOp() { exists(this.getOp()) }
  }
}

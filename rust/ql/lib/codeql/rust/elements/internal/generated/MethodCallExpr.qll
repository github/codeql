// generated by codegen, do not edit
/**
 * This module provides the generated definition of `MethodCallExpr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Expr
import codeql.rust.elements.internal.ExprImpl::Impl as ExprImpl
import codeql.rust.elements.GenericArgList

/**
 * INTERNAL: This module contains the fully generated definition of `MethodCallExpr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A method call expression. For example:
   * ```rust
   * x.foo(42);
   * x.foo::<u32, u64>(42);
   * ```
   * INTERNAL: Do not reference the `Generated::MethodCallExpr` class directly.
   * Use the subclass `MethodCallExpr`, where the following predicates are available.
   */
  class MethodCallExpr extends Synth::TMethodCallExpr, ExprImpl::Expr {
    override string getAPrimaryQlClass() { result = "MethodCallExpr" }

    /**
     * Gets the receiver of this method call expression.
     */
    Expr getReceiver() {
      result =
        Synth::convertExprFromRaw(Synth::convertMethodCallExprToRaw(this)
              .(Raw::MethodCallExpr)
              .getReceiver())
    }

    /**
     * Gets the method name of this method call expression.
     */
    string getMethodName() {
      result = Synth::convertMethodCallExprToRaw(this).(Raw::MethodCallExpr).getMethodName()
    }

    /**
     * Gets the `index`th argument of this method call expression (0-based).
     */
    Expr getArg(int index) {
      result =
        Synth::convertExprFromRaw(Synth::convertMethodCallExprToRaw(this)
              .(Raw::MethodCallExpr)
              .getArg(index))
    }

    /**
     * Gets any of the arguments of this method call expression.
     */
    final Expr getAnArg() { result = this.getArg(_) }

    /**
     * Gets the number of arguments of this method call expression.
     */
    final int getNumberOfArgs() { result = count(int i | exists(this.getArg(i))) }

    /**
     * Gets the generic arguments of this method call expression, if it exists.
     */
    GenericArgList getGenericArgs() {
      result =
        Synth::convertGenericArgListFromRaw(Synth::convertMethodCallExprToRaw(this)
              .(Raw::MethodCallExpr)
              .getGenericArgs())
    }

    /**
     * Holds if `getGenericArgs()` exists.
     */
    final predicate hasGenericArgs() { exists(this.getGenericArgs()) }
  }
}

// generated by codegen, do not edit
/**
 * This module provides the generated definition of `Addressable`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.AstNodeImpl::Impl as AstNodeImpl

/**
 * INTERNAL: This module contains the fully generated definition of `Addressable` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * Something that can be addressed by a path.
   *
   * TODO: This does not yet include all possible cases.
   * INTERNAL: Do not reference the `Generated::Addressable` class directly.
   * Use the subclass `Addressable`, where the following predicates are available.
   */
  class Addressable extends Synth::TAddressable, AstNodeImpl::AstNode {
    /**
     * Gets the extended canonical path of this addressable, if it exists.
     *
     * Either a canonical path (see https://doc.rust-lang.org/reference/paths.html#canonical-paths),
     * or `{<block id>}::name` for addressable items defined in an anonymous block (and only
     * addressable there-in).
     * INTERNAL: Do not use.
     */
    string getExtendedCanonicalPath() {
      result = Synth::convertAddressableToRaw(this).(Raw::Addressable).getExtendedCanonicalPath()
    }

    /**
     * Holds if `getExtendedCanonicalPath()` exists.
     * INTERNAL: Do not use.
     */
    final predicate hasExtendedCanonicalPath() { exists(this.getExtendedCanonicalPath()) }

    /**
     * Gets the crate origin of this addressable, if it exists.
     *
     * One of `rustc:<name>`, `repo:<repository>:<name>` or `lang:<name>`.
     * INTERNAL: Do not use.
     */
    string getCrateOrigin() {
      result = Synth::convertAddressableToRaw(this).(Raw::Addressable).getCrateOrigin()
    }

    /**
     * Holds if `getCrateOrigin()` exists.
     * INTERNAL: Do not use.
     */
    final predicate hasCrateOrigin() { exists(this.getCrateOrigin()) }
  }
}

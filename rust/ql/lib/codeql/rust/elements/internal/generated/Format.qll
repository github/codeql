// generated by codegen, do not edit
/**
 * This module provides the generated definition of `Format`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.FormatArgsExpr
import codeql.rust.elements.FormatArgument
import codeql.rust.elements.internal.LocatableImpl::Impl as LocatableImpl

/**
 * INTERNAL: This module contains the fully generated definition of `Format` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A format element in a formatting template. For example the `{}` in:
   * ```rust
   * println!("Hello {}", "world");
   * ```
   * or the `{value:#width$.precision$}` in:
   * ```rust
   * println!("Value {value:#width$.precision$}");
   * ```
   * INTERNAL: Do not reference the `Generated::Format` class directly.
   * Use the subclass `Format`, where the following predicates are available.
   */
  class Format extends Synth::TFormat, LocatableImpl::Locatable {
    override string getAPrimaryQlClass() { result = "Format" }

    /**
     * Gets the parent of this format.
     */
    FormatArgsExpr getParent() { none() }

    /**
     * Gets the index of this format.
     */
    int getIndex() { none() }

    /**
     * Gets the argument reference of this format, if it exists.
     *
     * For example `name` and `0` in:
     * ```rust
     * let name = "Alice";
     * println!("{name} in wonderland");
     * println!("{0} in wonderland", name);
     * ```
     */
    FormatArgument getArgumentRef() { none() }

    /**
     * Holds if `getArgumentRef()` exists.
     */
    final predicate hasArgumentRef() { exists(this.getArgumentRef()) }

    /**
     * Gets the width argument of this format, if it exists.
     *
     * For example `width` and `1` in:
     * ```rust
     * let width = 6;
     * println!("{:width$}", PI);
     * println!("{:1$}", PI, width);
     * ```
     */
    FormatArgument getWidthArgument() { none() }

    /**
     * Holds if `getWidthArgument()` exists.
     */
    final predicate hasWidthArgument() { exists(this.getWidthArgument()) }

    /**
     * Gets the precision argument of this format, if it exists.
     *
     * For example `prec` and `1` in:
     * ```rust
     * let prec = 6;
     * println!("{:.prec$}", PI);
     * println!("{:.1$}", PI, prec);
     * ```
     */
    FormatArgument getPrecisionArgument() { none() }

    /**
     * Holds if `getPrecisionArgument()` exists.
     */
    final predicate hasPrecisionArgument() { exists(this.getPrecisionArgument()) }
  }
}

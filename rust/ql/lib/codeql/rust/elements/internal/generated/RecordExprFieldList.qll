// generated by codegen, do not edit
/**
 * This module provides the generated definition of `RecordExprFieldList`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.AstNodeImpl::Impl as AstNodeImpl
import codeql.rust.elements.Attr
import codeql.rust.elements.Expr
import codeql.rust.elements.RecordExprField

/**
 * INTERNAL: This module contains the fully generated definition of `RecordExprFieldList` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A RecordExprFieldList. For example:
   * ```rust
   * todo!()
   * ```
   * INTERNAL: Do not reference the `Generated::RecordExprFieldList` class directly.
   * Use the subclass `RecordExprFieldList`, where the following predicates are available.
   */
  class RecordExprFieldList extends Synth::TRecordExprFieldList, AstNodeImpl::AstNode {
    override string getAPrimaryQlClass() { result = "RecordExprFieldList" }

    /**
     * Gets the `index`th attr of this record expression field list (0-based).
     */
    Attr getAttr(int index) {
      result =
        Synth::convertAttrFromRaw(Synth::convertRecordExprFieldListToRaw(this)
              .(Raw::RecordExprFieldList)
              .getAttr(index))
    }

    /**
     * Gets any of the attrs of this record expression field list.
     */
    final Attr getAnAttr() { result = this.getAttr(_) }

    /**
     * Gets the number of attrs of this record expression field list.
     */
    final int getNumberOfAttrs() { result = count(int i | exists(this.getAttr(i))) }

    /**
     * Gets the `index`th field of this record expression field list (0-based).
     */
    RecordExprField getField(int index) {
      result =
        Synth::convertRecordExprFieldFromRaw(Synth::convertRecordExprFieldListToRaw(this)
              .(Raw::RecordExprFieldList)
              .getField(index))
    }

    /**
     * Gets any of the fields of this record expression field list.
     */
    final RecordExprField getAField() { result = this.getField(_) }

    /**
     * Gets the number of fields of this record expression field list.
     */
    final int getNumberOfFields() { result = count(int i | exists(this.getField(i))) }

    /**
     * Gets the spread of this record expression field list, if it exists.
     */
    Expr getSpread() {
      result =
        Synth::convertExprFromRaw(Synth::convertRecordExprFieldListToRaw(this)
              .(Raw::RecordExprFieldList)
              .getSpread())
    }

    /**
     * Holds if `getSpread()` exists.
     */
    final predicate hasSpread() { exists(this.getSpread()) }
  }
}

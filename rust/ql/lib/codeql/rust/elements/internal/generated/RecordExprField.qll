// generated by codegen, do not edit
/**
 * This module provides the generated definition of `RecordExprField`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.AstNodeImpl::Impl as AstNodeImpl
import codeql.rust.elements.Expr

/**
 * INTERNAL: This module contains the fully generated definition of `RecordExprField` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A field in a record expression. For example `a: 1` in:
   * ```rust
   * Foo { a: 1, b: 2 };
   * ```
   * INTERNAL: Do not reference the `Generated::RecordExprField` class directly.
   * Use the subclass `RecordExprField`, where the following predicates are available.
   */
  class RecordExprField extends Synth::TRecordExprField, AstNodeImpl::AstNode {
    override string getAPrimaryQlClass() { result = "RecordExprField" }

    /**
     * Gets the name of this record expression field.
     */
    string getName() {
      result = Synth::convertRecordExprFieldToRaw(this).(Raw::RecordExprField).getName()
    }

    /**
     * Gets the expression of this record expression field.
     */
    Expr getExpr() {
      result =
        Synth::convertExprFromRaw(Synth::convertRecordExprFieldToRaw(this)
              .(Raw::RecordExprField)
              .getExpr())
    }
  }
}

// generated by codegen, do not edit
/**
 * This module provides the generated definition of `SlicePat`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Pat
import codeql.rust.elements.internal.PatImpl::Impl as PatImpl

/**
 * INTERNAL: This module contains the fully generated definition of `SlicePat` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A slice pattern. For example:
   * ```rust
   * match x {
   *     [1, 2, 3, 4, 5] => "ok",
   *     [1, 2, ..] => "fail",
   *     [x, y, .., z, 7] => "fail",
   * }
   * ```
   * INTERNAL: Do not reference the `Generated::SlicePat` class directly.
   * Use the subclass `SlicePat`, where the following predicates are available.
   */
  class SlicePat extends Synth::TSlicePat, PatImpl::Pat {
    override string getAPrimaryQlClass() { result = "SlicePat" }

    /**
     * Gets the `index`th pat of this slice pat (0-based).
     */
    Pat getPat(int index) {
      result =
        Synth::convertPatFromRaw(Synth::convertSlicePatToRaw(this).(Raw::SlicePat).getPat(index))
    }

    /**
     * Gets any of the pats of this slice pat.
     */
    final Pat getAPat() { result = this.getPat(_) }

    /**
     * Gets the number of pats of this slice pat.
     */
    final int getNumberOfPats() { result = count(int i | exists(this.getPat(i))) }
  }
}

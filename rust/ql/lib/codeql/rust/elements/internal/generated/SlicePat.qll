// generated by codegen, do not edit
/**
 * This module provides the generated definition of `SlicePat`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Pat
import codeql.rust.elements.internal.PatImpl::Impl as PatImpl

/**
 * INTERNAL: This module contains the fully generated definition of `SlicePat` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A slice pattern. For example:
   * ```rust
   * match x {
   *     [1, 2, 3, 4, 5] => "ok",
   *     [1, 2, ..] => "fail",
   *     [x, y, .., z, 7] => "fail",
   * }
   * ```
   * INTERNAL: Do not reference the `Generated::SlicePat` class directly.
   * Use the subclass `SlicePat`, where the following predicates are available.
   */
  class SlicePat extends Synth::TSlicePat, PatImpl::Pat {
    override string getAPrimaryQlClass() { result = "SlicePat" }

    /**
     * Gets the `index`th prefix of this slice pat (0-based).
     */
    Pat getPrefix(int index) {
      result =
        Synth::convertPatFromRaw(Synth::convertSlicePatToRaw(this).(Raw::SlicePat).getPrefix(index))
    }

    /**
     * Gets any of the prefixes of this slice pat.
     */
    final Pat getAPrefix() { result = this.getPrefix(_) }

    /**
     * Gets the number of prefixes of this slice pat.
     */
    final int getNumberOfPrefixes() { result = count(int i | exists(this.getPrefix(i))) }

    /**
     * Gets the slice of this slice pat, if it exists.
     */
    Pat getSlice() {
      result =
        Synth::convertPatFromRaw(Synth::convertSlicePatToRaw(this).(Raw::SlicePat).getSlice())
    }

    /**
     * Holds if `getSlice()` exists.
     */
    final predicate hasSlice() { exists(this.getSlice()) }

    /**
     * Gets the `index`th suffix of this slice pat (0-based).
     */
    Pat getSuffix(int index) {
      result =
        Synth::convertPatFromRaw(Synth::convertSlicePatToRaw(this).(Raw::SlicePat).getSuffix(index))
    }

    /**
     * Gets any of the suffixes of this slice pat.
     */
    final Pat getASuffix() { result = this.getSuffix(_) }

    /**
     * Gets the number of suffixes of this slice pat.
     */
    final int getNumberOfSuffixes() { result = count(int i | exists(this.getSuffix(i))) }
  }
}

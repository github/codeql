// generated by codegen, do not edit
/**
 * This module provides the generated definition of `Attr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.AstNodeImpl::Impl as AstNodeImpl
import codeql.rust.elements.Meta

/**
 * INTERNAL: This module contains the fully generated definition of `Attr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A Attr. For example:
   * ```rust
   * todo!()
   * ```
   * INTERNAL: Do not reference the `Generated::Attr` class directly.
   * Use the subclass `Attr`, where the following predicates are available.
   */
  class Attr extends Synth::TAttr, AstNodeImpl::AstNode {
    override string getAPrimaryQlClass() { result = "Attr" }

    /**
     * Gets the meta of this attr, if it exists.
     */
    Meta getMeta() {
      result = Synth::convertMetaFromRaw(Synth::convertAttrToRaw(this).(Raw::Attr).getMeta())
    }

    /**
     * Holds if `getMeta()` exists.
     */
    final predicate hasMeta() { exists(this.getMeta()) }
  }
}

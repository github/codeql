// generated by codegen, do not edit
/**
 * This module provides the generated definition of `AsmConst`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.AsmOperandImpl::Impl as AsmOperandImpl
import codeql.rust.elements.Expr

/**
 * INTERNAL: This module contains the fully generated definition of `AsmConst` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::AsmConst` class directly.
   * Use the subclass `AsmConst`, where the following predicates are available.
   */
  class AsmConst extends Synth::TAsmConst, AsmOperandImpl::AsmOperand {
    override string getAPrimaryQlClass() { result = "AsmConst" }

    /**
     * Gets the expression of this asm const, if it exists.
     */
    Expr getExpr() {
      result =
        Synth::convertExprFromRaw(Synth::convertAsmConstToRaw(this).(Raw::AsmConst).getExpr())
    }

    /**
     * Holds if `getExpr()` exists.
     */
    final predicate hasExpr() { exists(this.getExpr()) }

    /**
     * Holds if this asm const is const.
     */
    predicate isConst() { Synth::convertAsmConstToRaw(this).(Raw::AsmConst).isConst() }
  }
}

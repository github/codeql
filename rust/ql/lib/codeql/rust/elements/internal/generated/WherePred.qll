// generated by codegen, do not edit
/**
 * This module provides the generated definition of `WherePred`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.AstNodeImpl::Impl as AstNodeImpl
import codeql.rust.elements.ForBinder
import codeql.rust.elements.Lifetime
import codeql.rust.elements.TypeBoundList
import codeql.rust.elements.TypeRepr

/**
 * INTERNAL: This module contains the fully generated definition of `WherePred` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A predicate in a where clause.
   *
   * For example:
   * ```rust
   * fn foo<T, U>(t: T, u: U) where T: Debug, U: Clone {}
   * //                             ^^^^^^^^  ^^^^^^^^
   * fn bar<T>(value: T) where for<'a> T: From<&'a str> {}
   * //                        ^^^^^^^^^^^^^^^^^^^^^^^^
   * ```
   * INTERNAL: Do not reference the `Generated::WherePred` class directly.
   * Use the subclass `WherePred`, where the following predicates are available.
   */
  class WherePred extends Synth::TWherePred, AstNodeImpl::AstNode {
    override string getAPrimaryQlClass() { result = "WherePred" }

    /**
     * Gets the for binder of this where pred, if it exists.
     */
    ForBinder getForBinder() {
      result =
        Synth::convertForBinderFromRaw(Synth::convertWherePredToRaw(this)
              .(Raw::WherePred)
              .getForBinder())
    }

    /**
     * Holds if `getForBinder()` exists.
     */
    final predicate hasForBinder() { exists(this.getForBinder()) }

    /**
     * Gets the lifetime of this where pred, if it exists.
     */
    Lifetime getLifetime() {
      result =
        Synth::convertLifetimeFromRaw(Synth::convertWherePredToRaw(this)
              .(Raw::WherePred)
              .getLifetime())
    }

    /**
     * Holds if `getLifetime()` exists.
     */
    final predicate hasLifetime() { exists(this.getLifetime()) }

    /**
     * Gets the type representation of this where pred, if it exists.
     */
    TypeRepr getTypeRepr() {
      result =
        Synth::convertTypeReprFromRaw(Synth::convertWherePredToRaw(this)
              .(Raw::WherePred)
              .getTypeRepr())
    }

    /**
     * Holds if `getTypeRepr()` exists.
     */
    final predicate hasTypeRepr() { exists(this.getTypeRepr()) }

    /**
     * Gets the type bound list of this where pred, if it exists.
     */
    TypeBoundList getTypeBoundList() {
      result =
        Synth::convertTypeBoundListFromRaw(Synth::convertWherePredToRaw(this)
              .(Raw::WherePred)
              .getTypeBoundList())
    }

    /**
     * Holds if `getTypeBoundList()` exists.
     */
    final predicate hasTypeBoundList() { exists(this.getTypeBoundList()) }
  }
}

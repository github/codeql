// generated by codegen, do not edit
/**
 * This module provides the generated definition of `WherePred`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.AstNodeImpl::Impl as AstNodeImpl
import codeql.rust.elements.GenericParamList
import codeql.rust.elements.Lifetime
import codeql.rust.elements.TypeBoundList
import codeql.rust.elements.TypeRef

/**
 * INTERNAL: This module contains the fully generated definition of `WherePred` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A WherePred. For example:
   * ```rust
   * todo!()
   * ```
   * INTERNAL: Do not reference the `Generated::WherePred` class directly.
   * Use the subclass `WherePred`, where the following predicates are available.
   */
  class WherePred extends Synth::TWherePred, AstNodeImpl::AstNode {
    override string getAPrimaryQlClass() { result = "WherePred" }

    /**
     * Gets the generic parameter list of this where pred, if it exists.
     */
    GenericParamList getGenericParamList() {
      result =
        Synth::convertGenericParamListFromRaw(Synth::convertWherePredToRaw(this)
              .(Raw::WherePred)
              .getGenericParamList())
    }

    /**
     * Holds if `getGenericParamList()` exists.
     */
    final predicate hasGenericParamList() { exists(this.getGenericParamList()) }

    /**
     * Gets the lifetime of this where pred, if it exists.
     */
    Lifetime getLifetime() {
      result =
        Synth::convertLifetimeFromRaw(Synth::convertWherePredToRaw(this)
              .(Raw::WherePred)
              .getLifetime())
    }

    /**
     * Holds if `getLifetime()` exists.
     */
    final predicate hasLifetime() { exists(this.getLifetime()) }

    /**
     * Gets the ty of this where pred, if it exists.
     */
    TypeRef getTy() {
      result =
        Synth::convertTypeRefFromRaw(Synth::convertWherePredToRaw(this).(Raw::WherePred).getTy())
    }

    /**
     * Holds if `getTy()` exists.
     */
    final predicate hasTy() { exists(this.getTy()) }

    /**
     * Gets the type bound list of this where pred, if it exists.
     */
    TypeBoundList getTypeBoundList() {
      result =
        Synth::convertTypeBoundListFromRaw(Synth::convertWherePredToRaw(this)
              .(Raw::WherePred)
              .getTypeBoundList())
    }

    /**
     * Holds if `getTypeBoundList()` exists.
     */
    final predicate hasTypeBoundList() { exists(this.getTypeBoundList()) }
  }
}

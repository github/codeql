// generated by codegen, do not edit
/**
 * This module provides the generated definition of `TypeBound`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.AstNodeImpl::Impl as AstNodeImpl
import codeql.rust.elements.GenericParamList
import codeql.rust.elements.Lifetime
import codeql.rust.elements.TypeRef

/**
 * INTERNAL: This module contains the fully generated definition of `TypeBound` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A TypeBound. For example:
   * ```rust
   * todo!()
   * ```
   * INTERNAL: Do not reference the `Generated::TypeBound` class directly.
   * Use the subclass `TypeBound`, where the following predicates are available.
   */
  class TypeBound extends Synth::TTypeBound, AstNodeImpl::AstNode {
    override string getAPrimaryQlClass() { result = "TypeBound" }

    /**
     * Gets the generic parameter list of this type bound, if it exists.
     */
    GenericParamList getGenericParamList() {
      result =
        Synth::convertGenericParamListFromRaw(Synth::convertTypeBoundToRaw(this)
              .(Raw::TypeBound)
              .getGenericParamList())
    }

    /**
     * Holds if `getGenericParamList()` exists.
     */
    final predicate hasGenericParamList() { exists(this.getGenericParamList()) }

    /**
     * Gets the lifetime of this type bound, if it exists.
     */
    Lifetime getLifetime() {
      result =
        Synth::convertLifetimeFromRaw(Synth::convertTypeBoundToRaw(this)
              .(Raw::TypeBound)
              .getLifetime())
    }

    /**
     * Holds if `getLifetime()` exists.
     */
    final predicate hasLifetime() { exists(this.getLifetime()) }

    /**
     * Gets the ty of this type bound, if it exists.
     */
    TypeRef getTy() {
      result =
        Synth::convertTypeRefFromRaw(Synth::convertTypeBoundToRaw(this).(Raw::TypeBound).getTy())
    }

    /**
     * Holds if `getTy()` exists.
     */
    final predicate hasTy() { exists(this.getTy()) }
  }
}

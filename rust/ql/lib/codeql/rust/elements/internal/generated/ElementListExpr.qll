// generated by codegen, do not edit
/**
 * This module provides the generated definition of `ElementListExpr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.ArrayExprImpl::Impl as ArrayExprImpl
import codeql.rust.elements.Expr

/**
 * INTERNAL: This module contains the fully generated definition of `ElementListExpr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * An element list expression. For example:
   * ```rust
   * [1, 2, 3, 4, 5];
   * [1, 2, 3, 4, 5][0] = 6;
   * ```
   * INTERNAL: Do not reference the `Generated::ElementListExpr` class directly.
   * Use the subclass `ElementListExpr`, where the following predicates are available.
   */
  class ElementListExpr extends Synth::TElementListExpr, ArrayExprImpl::ArrayExpr {
    override string getAPrimaryQlClass() { result = "ElementListExpr" }

    /**
     * Gets the `index`th element of this element list expression (0-based).
     */
    Expr getElement(int index) {
      result =
        Synth::convertExprFromRaw(Synth::convertElementListExprToRaw(this)
              .(Raw::ElementListExpr)
              .getElement(index))
    }

    /**
     * Gets any of the elements of this element list expression.
     */
    final Expr getAnElement() { result = this.getElement(_) }

    /**
     * Gets the number of elements of this element list expression.
     */
    final int getNumberOfElements() { result = count(int i | exists(this.getElement(i))) }

    /**
     * Holds if this element list expression is assignee expression.
     */
    predicate isAssigneeExpr() {
      Synth::convertElementListExprToRaw(this).(Raw::ElementListExpr).isAssigneeExpr()
    }
  }
}

// generated by codegen, do not edit
/**
 * This module provides the generated definition of `Module`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Declaration
import codeql.rust.elements.internal.DeclarationImpl::Impl as DeclarationImpl

/**
 * INTERNAL: This module contains the fully generated definition of `Module` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A module declaration. For example:
   * ```rust
   * mod foo;
   * ```
   * ```rust
   * mod bar {
   *     pub fn baz() {}
   * }
   * ```
   * INTERNAL: Do not reference the `Generated::Module` class directly.
   * Use the subclass `Module`, where the following predicates are available.
   */
  class Module extends Synth::TModule, DeclarationImpl::Declaration {
    override string getAPrimaryQlClass() { result = "Module" }

    /**
     * Gets the `index`th declaration of this module (0-based).
     */
    Declaration getDeclaration(int index) {
      result =
        Synth::convertDeclarationFromRaw(Synth::convertModuleToRaw(this)
              .(Raw::Module)
              .getDeclaration(index))
    }

    /**
     * Gets any of the declarations of this module.
     */
    final Declaration getADeclaration() { result = this.getDeclaration(_) }

    /**
     * Gets the number of declarations of this module.
     */
    final int getNumberOfDeclarations() { result = count(int i | exists(this.getDeclaration(i))) }
  }
}

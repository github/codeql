// generated by codegen, do not edit
/**
 * This module provides the generated definition of `Module`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Attr
import codeql.rust.elements.internal.ItemImpl::Impl as ItemImpl
import codeql.rust.elements.ItemList
import codeql.rust.elements.Name
import codeql.rust.elements.Visibility

/**
 * INTERNAL: This module contains the fully generated definition of `Module` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A module declaration. For example:
   * ```rust
   * mod foo;
   * ```
   * ```rust
   * mod bar {
   *     pub fn baz() {}
   * }
   * ```
   * INTERNAL: Do not reference the `Generated::Module` class directly.
   * Use the subclass `Module`, where the following predicates are available.
   */
  class Module extends Synth::TModule, ItemImpl::Item {
    override string getAPrimaryQlClass() { result = "Module" }

    /**
     * Gets the `index`th attr of this module (0-based).
     */
    Attr getAttr(int index) {
      result =
        Synth::convertAttrFromRaw(Synth::convertModuleToRaw(this).(Raw::Module).getAttr(index))
    }

    /**
     * Gets any of the attrs of this module.
     */
    final Attr getAnAttr() { result = this.getAttr(_) }

    /**
     * Gets the number of attrs of this module.
     */
    final int getNumberOfAttrs() { result = count(int i | exists(this.getAttr(i))) }

    /**
     * Gets the item list of this module, if it exists.
     */
    ItemList getItemList() {
      result =
        Synth::convertItemListFromRaw(Synth::convertModuleToRaw(this).(Raw::Module).getItemList())
    }

    /**
     * Holds if `getItemList()` exists.
     */
    final predicate hasItemList() { exists(this.getItemList()) }

    /**
     * Gets the name of this module, if it exists.
     */
    Name getName() {
      result = Synth::convertNameFromRaw(Synth::convertModuleToRaw(this).(Raw::Module).getName())
    }

    /**
     * Holds if `getName()` exists.
     */
    final predicate hasName() { exists(this.getName()) }

    /**
     * Gets the visibility of this module, if it exists.
     */
    Visibility getVisibility() {
      result =
        Synth::convertVisibilityFromRaw(Synth::convertModuleToRaw(this)
              .(Raw::Module)
              .getVisibility())
    }

    /**
     * Holds if `getVisibility()` exists.
     */
    final predicate hasVisibility() { exists(this.getVisibility()) }
  }
}

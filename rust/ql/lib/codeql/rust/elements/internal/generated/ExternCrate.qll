// generated by codegen, do not edit
/**
 * This module provides the generated definition of `ExternCrate`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Attr
import codeql.rust.elements.internal.ItemImpl::Impl as ItemImpl
import codeql.rust.elements.NameRef
import codeql.rust.elements.Rename
import codeql.rust.elements.Visibility

/**
 * INTERNAL: This module contains the fully generated definition of `ExternCrate` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A ExternCrate. For example:
   * ```rust
   * todo!()
   * ```
   * INTERNAL: Do not reference the `Generated::ExternCrate` class directly.
   * Use the subclass `ExternCrate`, where the following predicates are available.
   */
  class ExternCrate extends Synth::TExternCrate, ItemImpl::Item {
    override string getAPrimaryQlClass() { result = "ExternCrate" }

    /**
     * Gets the `index`th attr of this extern crate (0-based).
     */
    Attr getAttr(int index) {
      result =
        Synth::convertAttrFromRaw(Synth::convertExternCrateToRaw(this)
              .(Raw::ExternCrate)
              .getAttr(index))
    }

    /**
     * Gets any of the attrs of this extern crate.
     */
    final Attr getAnAttr() { result = this.getAttr(_) }

    /**
     * Gets the number of attrs of this extern crate.
     */
    final int getNumberOfAttrs() { result = count(int i | exists(this.getAttr(i))) }

    /**
     * Gets the name reference of this extern crate, if it exists.
     */
    NameRef getNameRef() {
      result =
        Synth::convertNameRefFromRaw(Synth::convertExternCrateToRaw(this)
              .(Raw::ExternCrate)
              .getNameRef())
    }

    /**
     * Holds if `getNameRef()` exists.
     */
    final predicate hasNameRef() { exists(this.getNameRef()) }

    /**
     * Gets the rename of this extern crate, if it exists.
     */
    Rename getRename() {
      result =
        Synth::convertRenameFromRaw(Synth::convertExternCrateToRaw(this)
              .(Raw::ExternCrate)
              .getRename())
    }

    /**
     * Holds if `getRename()` exists.
     */
    final predicate hasRename() { exists(this.getRename()) }

    /**
     * Gets the visibility of this extern crate, if it exists.
     */
    Visibility getVisibility() {
      result =
        Synth::convertVisibilityFromRaw(Synth::convertExternCrateToRaw(this)
              .(Raw::ExternCrate)
              .getVisibility())
    }

    /**
     * Holds if `getVisibility()` exists.
     */
    final predicate hasVisibility() { exists(this.getVisibility()) }
  }
}

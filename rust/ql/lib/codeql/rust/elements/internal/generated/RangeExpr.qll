// generated by codegen, do not edit
/**
 * This module provides the generated definition of `RangeExpr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Expr
import codeql.rust.elements.internal.ExprImpl::Impl as ExprImpl

/**
 * INTERNAL: This module contains the fully generated definition of `RangeExpr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A range expression. For example:
   * ```rust
   * let x = 1..=10;
   * let x = 1..10;
   * let x = 10..;
   * let x = ..10;
   * let x = ..=10;
   * let x = ..;
   * ```
   * INTERNAL: Do not reference the `Generated::RangeExpr` class directly.
   * Use the subclass `RangeExpr`, where the following predicates are available.
   */
  class RangeExpr extends Synth::TRangeExpr, ExprImpl::Expr {
    override string getAPrimaryQlClass() { result = "RangeExpr" }

    /**
     * Gets the lhs of this range expression, if it exists.
     */
    Expr getLhs() {
      result =
        Synth::convertExprFromRaw(Synth::convertRangeExprToRaw(this).(Raw::RangeExpr).getLhs())
    }

    /**
     * Holds if `getLhs()` exists.
     */
    final predicate hasLhs() { exists(this.getLhs()) }

    /**
     * Gets the rhs of this range expression, if it exists.
     */
    Expr getRhs() {
      result =
        Synth::convertExprFromRaw(Synth::convertRangeExprToRaw(this).(Raw::RangeExpr).getRhs())
    }

    /**
     * Holds if `getRhs()` exists.
     */
    final predicate hasRhs() { exists(this.getRhs()) }

    /**
     * Holds if this range expression is inclusive.
     */
    predicate isInclusive() { Synth::convertRangeExprToRaw(this).(Raw::RangeExpr).isInclusive() }
  }
}

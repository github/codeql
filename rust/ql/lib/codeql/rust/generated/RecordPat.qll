// generated by codegen
/**
 * This module provides the generated definition of `RecordPat`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.generated.Synth
private import codeql.rust.generated.Raw
import codeql.rust.generated.Pat::Generated as Pat_Gen
import codeql.rust.generated.RecordFieldPat::Generated as RecordFieldPat_Gen
import codeql.rust.generated.Unimplemented::Generated as Unimplemented_Gen
import codeql.rust.elements.Pat
import codeql.rust.elements.RecordFieldPat
import codeql.rust.elements.Unimplemented

/**
 * INTERNAL: This module contains the fully generated definition of `RecordPat` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::RecordPatImpl` class directly.
   * Use the subclass `RecordPat`, where the following predicates are available.
   */
  class RecordPatImpl extends Synth::TRecordPat, PatImpl {
    override string getAPrimaryQlClass() { result = "RecordPat" }

    /**
     * Gets the path of this record pat, if it exists.
     */
    Unimplemented getPath() {
      result =
        Synth::convertUnimplementedFromRaw(Synth::convertRecordPatToRaw(this)
              .(Raw::RecordPat)
              .getPath())
    }

    /**
     * Holds if `getPath()` exists.
     */
    final predicate hasPath() { exists(this.getPath()) }

    /**
     * Gets the `index`th argument of this record pat (0-based).
     */
    RecordFieldPat getArg(int index) {
      result =
        Synth::convertRecordFieldPatFromRaw(Synth::convertRecordPatToRaw(this)
              .(Raw::RecordPat)
              .getArg(index))
    }

    /**
     * Gets any of the arguments of this record pat.
     */
    final RecordFieldPat getAnArg() { result = this.getArg(_) }

    /**
     * Gets the number of arguments of this record pat.
     */
    final int getNumberOfArgs() { result = count(int i | exists(this.getArg(i))) }

    /**
     * Holds if this record pat has ellipsis.
     */
    predicate hasEllipsis() { Synth::convertRecordPatToRaw(this).(Raw::RecordPat).hasEllipsis() }
  }

  /**
   * INTERNAL: Do not reference the `Generated::RecordPat` class directly.
   * Use the subclass `RecordPat`, where the following predicates are available.
   */
  final class RecordPat extends PatImpl { }
}

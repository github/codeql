// generated by codegen
/**
 * This module provides the generated definition of `TupleExpr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.generated.Synth
private import codeql.rust.generated.Raw
import codeql.rust.generated.Expr::Generated as Expr_Gen
import codeql.rust.elements.Expr

/**
 * INTERNAL: This module contains the fully generated definition of `TupleExpr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::TupleExprImpl` class directly.
   * Use the subclass `TupleExpr`, where the following predicates are available.
   */
  class TupleExprImpl extends Synth::TTupleExpr, ExprImpl {
    override string getAPrimaryQlClass() { result = "TupleExpr" }

    /**
     * Gets the `index`th expression of this tuple expression (0-based).
     */
    Expr getExpr(int index) {
      result =
        Synth::convertExprFromRaw(Synth::convertTupleExprToRaw(this).(Raw::TupleExpr).getExpr(index))
    }

    /**
     * Gets any of the expressions of this tuple expression.
     */
    final Expr getAnExpr() { result = this.getExpr(_) }

    /**
     * Gets the number of expressions of this tuple expression.
     */
    final int getNumberOfExprs() { result = count(int i | exists(this.getExpr(i))) }

    /**
     * Holds if this tuple expression is assignee expression.
     */
    predicate isAssigneeExpr() {
      Synth::convertTupleExprToRaw(this).(Raw::TupleExpr).isAssigneeExpr()
    }
  }

  /**
   * INTERNAL: Do not reference the `Generated::TupleExpr` class directly.
   * Use the subclass `TupleExpr`, where the following predicates are available.
   */
  final class TupleExpr extends ExprImpl { }
}

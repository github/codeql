// generated by codegen
/**
 * This module provides the generated definition of `LoopExpr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.generated.Synth
private import codeql.rust.generated.Raw
import codeql.rust.elements.Expr
import codeql.rust.elements.Label
import codeql.rust.elements.ExprImpl
import codeql.rust.elements.LabelImpl

/**
 * INTERNAL: This module contains the fully generated definition of `LoopExpr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::LoopExprImpl` class directly.
   * Use the subclass `LoopExpr`, where the following predicates are available.
   */
  class LoopExprImpl extends Synth::TLoopExpr, ExprImpl {
    override string getAPrimaryQlClass() { result = "LoopExpr" }

    /**
     * Gets the body of this loop expression.
     */
    Expr getBody() {
      result =
        Synth::convertExprFromRaw(Synth::convertLoopExprToRaw(this).(Raw::LoopExpr).getBody())
    }

    /**
     * Gets the label of this loop expression, if it exists.
     */
    Label getLabel() {
      result =
        Synth::convertLabelFromRaw(Synth::convertLoopExprToRaw(this).(Raw::LoopExpr).getLabel())
    }

    /**
     * Holds if `getLabel()` exists.
     */
    final predicate hasLabel() { exists(this.getLabel()) }
  }

  /**
   * INTERNAL: Do not reference the `Generated::LoopExpr` class directly.
   * Use the subclass `LoopExpr`, where the following predicates are available.
   */
  final class LoopExpr extends ExprImpl { }
}

// generated by codegen
/**
 * This module provides the generated definition of `BinaryOpExpr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.generated.Synth
private import codeql.rust.generated.Raw
import codeql.rust.elements.Expr
import codeql.rust.elements.ExprImpl

/**
 * INTERNAL: This module contains the fully generated definition of `BinaryOpExpr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::BinaryOpExprImpl` class directly.
   * Use the subclass `BinaryOpExpr`, where the following predicates are available.
   */
  class BinaryOpExprImpl extends Synth::TBinaryOpExpr, ExprImpl {
    override string getAPrimaryQlClass() { result = "BinaryOpExpr" }

    /**
     * Gets the lhs of this binary op expression.
     */
    Expr getLhs() {
      result =
        Synth::convertExprFromRaw(Synth::convertBinaryOpExprToRaw(this).(Raw::BinaryOpExpr).getLhs())
    }

    /**
     * Gets the rhs of this binary op expression.
     */
    Expr getRhs() {
      result =
        Synth::convertExprFromRaw(Synth::convertBinaryOpExprToRaw(this).(Raw::BinaryOpExpr).getRhs())
    }

    /**
     * Gets the op of this binary op expression, if it exists.
     */
    string getOp() { result = Synth::convertBinaryOpExprToRaw(this).(Raw::BinaryOpExpr).getOp() }

    /**
     * Holds if `getOp()` exists.
     */
    final predicate hasOp() { exists(this.getOp()) }
  }

  /**
   * INTERNAL: Do not reference the `Generated::BinaryOpExpr` class directly.
   * Use the subclass `BinaryOpExpr`, where the following predicates are available.
   */
  final class BinaryOpExpr extends ExprImpl { }
}

// generated by codegen
/**
 * This module provides the generated definition of `LetExpr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.generated.Synth
private import codeql.rust.generated.Raw
import codeql.rust.elements.Expr
import codeql.rust.elements.Pat
import codeql.rust.elements.ExprImpl
import codeql.rust.elements.PatImpl

/**
 * INTERNAL: This module contains the fully generated definition of `LetExpr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::LetExprImpl` class directly.
   * Use the subclass `LetExpr`, where the following predicates are available.
   */
  class LetExprImpl extends Synth::TLetExpr, ExprImpl {
    override string getAPrimaryQlClass() { result = "LetExpr" }

    /**
     * Gets the pat of this let expression.
     */
    Pat getPat() {
      result = Synth::convertPatFromRaw(Synth::convertLetExprToRaw(this).(Raw::LetExpr).getPat())
    }

    /**
     * Gets the expression of this let expression.
     */
    Expr getExpr() {
      result = Synth::convertExprFromRaw(Synth::convertLetExprToRaw(this).(Raw::LetExpr).getExpr())
    }
  }

  /**
   * INTERNAL: Do not reference the `Generated::LetExpr` class directly.
   * Use the subclass `LetExpr`, where the following predicates are available.
   */
  final class LetExpr extends ExprImpl { }
}

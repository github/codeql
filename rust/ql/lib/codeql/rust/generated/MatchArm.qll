// generated by codegen
/**
 * This module provides the generated definition of `MatchArm`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.generated.Synth
private import codeql.rust.generated.Raw
import codeql.rust.elements.AstNode
import codeql.rust.elements.Expr
import codeql.rust.elements.Pat

/**
 * INTERNAL: This module contains the fully generated definition of `MatchArm` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::MatchArm` class directly.
   * Use the subclass `MatchArm`, where the following predicates are available.
   */
  class MatchArm extends Synth::TMatchArm, AstNode {
    override string getAPrimaryQlClass() { result = "MatchArm" }

    /**
     * Gets the pat of this match arm.
     */
    Pat getPat() {
      result = Synth::convertPatFromRaw(Synth::convertMatchArmToRaw(this).(Raw::MatchArm).getPat())
    }

    /**
     * Gets the guard of this match arm, if it exists.
     */
    Expr getGuard() {
      result =
        Synth::convertExprFromRaw(Synth::convertMatchArmToRaw(this).(Raw::MatchArm).getGuard())
    }

    /**
     * Holds if `getGuard()` exists.
     */
    final predicate hasGuard() { exists(this.getGuard()) }

    /**
     * Gets the expression of this match arm.
     */
    Expr getExpr() {
      result =
        Synth::convertExprFromRaw(Synth::convertMatchArmToRaw(this).(Raw::MatchArm).getExpr())
    }
  }
}

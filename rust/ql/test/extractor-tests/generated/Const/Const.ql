// generated by codegen, do not edit
import codeql.rust.elements
import TestUtils

query predicate instances(
  Const x, string isConst__label, string isConst, string isDefault__label, string isDefault,
  string hasImplementation__label, string hasImplementation
) {
  toBeTested(x) and
  not x.isUnknown() and
  isConst__label = "isConst:" and
  (if x.isConst() then isConst = "yes" else isConst = "no") and
  isDefault__label = "isDefault:" and
  (if x.isDefault() then isDefault = "yes" else isDefault = "no") and
  hasImplementation__label = "hasImplementation:" and
  if x.hasImplementation() then hasImplementation = "yes" else hasImplementation = "no"
}

query predicate getExtendedCanonicalPath(Const x, string getExtendedCanonicalPath) {
  toBeTested(x) and not x.isUnknown() and getExtendedCanonicalPath = x.getExtendedCanonicalPath()
}

query predicate getCrateOrigin(Const x, string getCrateOrigin) {
  toBeTested(x) and not x.isUnknown() and getCrateOrigin = x.getCrateOrigin()
}

query predicate getAttributeMacroExpansion(Const x, MacroItems getAttributeMacroExpansion) {
  toBeTested(x) and
  not x.isUnknown() and
  getAttributeMacroExpansion = x.getAttributeMacroExpansion()
}

query predicate getAttr(Const x, int index, Attr getAttr) {
  toBeTested(x) and not x.isUnknown() and getAttr = x.getAttr(index)
}

query predicate getBody(Const x, Expr getBody) {
  toBeTested(x) and not x.isUnknown() and getBody = x.getBody()
}

query predicate getGenericParamList(Const x, GenericParamList getGenericParamList) {
  toBeTested(x) and not x.isUnknown() and getGenericParamList = x.getGenericParamList()
}

query predicate getName(Const x, Name getName) {
  toBeTested(x) and not x.isUnknown() and getName = x.getName()
}

query predicate getTypeRepr(Const x, TypeRepr getTypeRepr) {
  toBeTested(x) and not x.isUnknown() and getTypeRepr = x.getTypeRepr()
}

query predicate getVisibility(Const x, Visibility getVisibility) {
  toBeTested(x) and not x.isUnknown() and getVisibility = x.getVisibility()
}

query predicate getWhereClause(Const x, WhereClause getWhereClause) {
  toBeTested(x) and not x.isUnknown() and getWhereClause = x.getWhereClause()
}

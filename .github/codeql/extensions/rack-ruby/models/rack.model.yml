extensions:
  - addsTo:
      pack: codeql/ruby-all
      extensible: sourceModel
    data:
      - ["Rack::Auth::Basic","Method[call].Argument[0]","remote"]
      - ["Rack::Builder","Method[call].Argument[0]","remote"]
      - ["Rack::Cascade","Method[call].ReturnValue","remote"]
      - ["Rack::CommonLogger","Method[call].Argument[0]","remote"]
      - ["Rack::ConditionalGet","Method[call].Argument[0]","remote"]
      - ["Rack::Config","Method[call].Argument[0]","remote"]
      - ["Rack::ContentLength","Method[call].Argument[0]","remote"]
      - ["Rack::ContentType","Method[call].Argument[0]","remote"]
      - ["Rack::Deflater","Method[call].Argument[0]","remote"]
      - ["Rack::Directory","Method[call].Argument[0]","remote"]
      - ["Rack::Events","Method[call].Argument[0]","remote"]
      - ["Rack::Files","Method[call].Argument[0]","remote"]
      - ["Rack::Files","Method[get].Argument[0]","remote"]
      - ["Rack::Head","Method[call].Argument[0]","remote"]

  - addsTo:
      pack: codeql/ruby-all
      extensible: sinkModel
    data:
      - ["Rack::Builder","Method[parse_file].Argument[0]","code-injection"]
      - ["Rack::Builder","Method[load_file].Argument[0]","code-injection"]
      - ["Rack::Builder","Method[new_from_string].Argument[0]","code-injection"]
      - ["Rack::Files","Method[initialize].Argument[0]","path-injection"]
      - ["Rack::ForwardRequest","Method[initialize].Argument[0]","url-redirection"]

  - addsTo:
      pack: codeql/ruby-all
      extensible: summaryModel
    data:
      - ["Rack::Builder","Method[run]","Argument[0]","ReturnValue","value"]
      - ["Rack::Builder","Method[run]","Argument[1]","ReturnValue","value"]
      - ["Rack::Builder","Method[run]","Argument[block]","ReturnValue","value"]
      - ["Rack::Builder","Method[warmup]","Argument[0]","ReturnValue","value"]
      - ["Rack::Builder","Method[warmup]","Argument[1]","ReturnValue","value"]
      - ["Rack::Builder","Method[warmup]","Argument[block]","ReturnValue","value"]
      - ["Rack::Builder","Method[map]","Argument[1]","ReturnValue","value"]
      - ["Rack::Builder","Method[map]","Argument[block]","ReturnValue","value"]
      - ["Rack::Cascade","Method[add]","Argument[0]","ReturnValue","taint"]
      - ["Rack::Directory","Method[list_path]","Argument[2]","ReturnValue","taint"]
      - ["Rack::Headers","Method[merge]","Argument[0]","ReturnValue","taint"]
      - ["Rack::Headers","Method[reject]","Argument[self]","ReturnValue","value"]
      - ["Rack::Headers","Method[replace]","Argument[self]","ReturnValue","value"]
      - ["Rack::Headers","Method[replace]","Argument[0]","ReturnValue","taint"]
      - ["Rack::Headers","Method[select]","Argument[self]","ReturnValue","value"]
      - ["Rack::Headers","Method[update]","Argument[self]","ReturnValue","value"]
      - ["Rack::Headers","Method[values_at]","Argument[self]","ReturnValue","taint"]
      - ["Rack::Headers","Method[slice]","Argument[self]","ReturnValue","value"]
      - ["Rack::Headers","Method[transform_keys]","Argument[self]","ReturnValue","value"]
      - ["Rack::Headers","Method[transform_keys!]","Argument[self]","ReturnValue","value"]
      - ["Rack::Headers","Method[except]","Argument[self]","ReturnValue","value"]
      - ["Rack::MethodOverride","Method[method_override]","Argument[0]","ReturnValue","taint"]
      - ["Rack::Mime","Method[mime_type]","Argument[1]","ReturnValue","value"]
      - ["Rack::Mime","Method[match?]","Argument[0]","ReturnValue","taint"]
      - ["Rack::Mime","Method[match?]","Argument[1]","ReturnValue","taint"]
      - ["Rack::Multipart::Parser::Collector","Method[on_mime_body]","Argument[1]","ReturnValue","taint"]
      - ["Rack::Multipart::ParamList","Method[<<]","Argument[0]","ReturnValue","taint"]
      - ["Rack::QueryParser","Method[normalize_params]","Argument[0]","ReturnValue","value"]
      - ["Rack::QueryParser","Method[normalize_params]","Argument[2]","ReturnValue","taint"]
      - ["Rack::Request::Env","Method[set_header]","Argument[1]","ReturnValue","value"]
      - ["Rack::Request::Env","Method[add_header]","Argument[1]","ReturnValue","value"]
      - ["Rack::Request::Helpers","Method[script_name=]","Argument[0]","ReturnValue","taint"]
      - ["Rack::Request::Helpers","Method[path_info=]","Argument[0]","ReturnValue","taint"]
      - ["Rack::Request::Helpers","Method[host_with_port]","Argument[0]","ReturnValue","value"]
      - ["Rack::Request::Helpers","Method[update_param]","Argument[1]","ReturnValue","value"]
      - ["Rack::Response","Method[redirect]","Argument[0]","ReturnValue","value"]
      - ["Rack::Response","Method[set_header]","Argument[1]","ReturnValue","value"]
      - ["Rack::Response::Helpers","Method[add_header]","Argument[1]","ReturnValue","taint"]
      - ["Rack::Response::Helpers","Method[location=]","Argument[0]","ReturnValue","value"]
      - ["Rack::Response::Raw","Method[set_header]","Argument[1]","ReturnValue","value"]
      - ["Rack::URLMap","Method[remap]","Argument[0]","ReturnValue","taint"]
      - ["Rack::Utils","Method[q_values]","Argument[0]","ReturnValue","taint"]
      - ["Rack::Utils","Method[best_q_match]","Argument[1]","ReturnValue","taint"]
      - ["Rack::Utils","Method[select_best_encoding]","Argument[0]","ReturnValue","taint"]
      - ["Rack::Utils","Method[set_cookie_header!]","Argument[0]","ReturnValue","taint"]
      - ["Rack::Utils","Method[delete_set_cookie_header!]","Argument[0]","ReturnValue","taint"]

  - addsTo:
      pack: codeql/ruby-all
      extensible: neutralModel
    data:
      - ["Rack::Auth::AbstractHandler","Method[initialize]","summary"]
      - ["Rack::Auth::AbstractRequest","Method[provided?]","summary"]
      - ["Rack::Auth::AbstractRequest","Method[valid?]","summary"]
      - ["Rack::Auth::Basic::Request","Method[basic?]","summary"]
      - ["Rack::BodyProxy","Method[initialize]","summary"]
      - ["Rack::BodyProxy","Method[respond_to_missing?]","summary"]
      - ["Rack::BodyProxy","Method[close]","summary"]
      - ["Rack::BodyProxy","Method[closed?]","summary"]
      - ["Rack::BodyProxy","Method[method_missing]","summary"]
      - ["Rack::Builder","Method[app]","summary"]
      - ["Rack::Builder","Method[initialize]","summary"]
      - ["Rack::Builder","Method[use]","summary"]
      - ["Rack::Builder","Method[freeze_app]","summary"]
      - ["Rack::Builder","Method[to_app]","summary"]
      - ["Rack::Cascade","Method[initialize]","summary"]
      - ["Rack::Cascade","Method[include?]","summary"]
      - ["Rack::CommonLogger","Method[initialize]","summary"]
      - ["Rack::ConditionalGet","Method[initialize]","summary"]
      - ["Rack::Config","Method[initialize]","summary"]
      - ["Rack::ContentLength","Method[initialize]","summary"]
      - ["Rack::ContentType","Method[initialize]","summary"]
      - ["Rack::Deflater","Method[initialize]","summary"]
      - ["Rack::Deflater::GzipStream","Method[initialize]","summary"]
      - ["Rack::Deflater::GzipStream","Method[each]","summary"]
      - ["Rack::Deflater::GzipStream","Method[write]","summary"]
      - ["Rack::Deflater::GzipStream","Method[close]","summary"]
      - ["Rack::Directory::DirectoryBody","Method[each]","summary"]
      - ["Rack::Directory","Method[initialize]","summary"]
      - ["Rack::Directory","Method[check_bad_request]","summary"]
      - ["Rack::Directory","Method[check_forbidden]","summary"]
      - ["Rack::Directory","Method[stat]","summary"]
      - ["Rack::Directory","Method[entity_not_found]","summary"]
      - ["Rack::Directory","Method[filesize_format]","summary"]
      - ["Rack::ETag","Method[initialize]","summary"]
      - ["Rack::ETag","Method[call]","summary"]
      - ["Rack::Events::Abstract","Method[on_start]","summary"]
      - ["Rack::Events::Abstract","Method[on_commit]","summary"]
      - ["Rack::Events::Abstract","Method[on_send]","summary"]
      - ["Rack::Events::Abstract","Method[on_finish]","summary"]
      - ["Rack::Events::Abstract","Method[on_error]","summary"]
      - ["Rack::Events::EventedBodyProxy","Method[initialize]","summary"]
      - ["Rack::Events::EventedBodyProxy","Method[each]","summary"]
      - ["Rack::Events::BufferedResponse","Method[initialize]","summary"]
      - ["Rack::Events::BufferedResponse","Method[to_a]","summary"]
      - ["Rack::Events","Method[initialize]","summary"]
      - ["Rack::Files::BaseIterator","Method[initialize]","summary"]
      - ["Rack::Files::BaseIterator","Method[each]","summary"]
      - ["Rack::Files::BaseIterator","Method[bytesize]","summary"]
      - ["Rack::Files::BaseIterator","Method[close]","summary"]
      - ["Rack::Head","Method[initialize]","summary"]
      - ["Rack::Headers","Method[compare_by_identity]","summary"]
      - ["Rack::Headers","Method[delete]","summary"]
      - ["Rack::Lint::Wrapper","Method[initialize]","summary"]
      - ["Rack::Lint::Wrapper","Method[response]","summary"]
      - ["Rack::Lint::Wrapper","Method[check_environment]","summary"]
      - ["Rack::Lint::Wrapper","Method[check_input_stream]","summary"]
      - ["Rack::Lint::Wrapper::InputWrapper","Method[initialize]","summary"]
      - ["Rack::Lint::Wrapper::InputWrapper","Method[gets]","summary"]
      - ["Rack::Lint::Wrapper::InputWrapper","Method[read]","summary"]
      - ["Rack::Lint::Wrapper::InputWrapper","Method[each]","summary"]
      - ["Rack::Lint::Wrapper::InputWrapper","Method[close]","summary"]
      - ["Rack::Lint::Wrapper","Method[check_error_stream]","summary"]
      - ["Rack::Lint::Wrapper::ErrorWrapper","Method[initialize]","summary"]
      - ["Rack::Lint::Wrapper::ErrorWrapper","Method[puts]","summary"]
      - ["Rack::Lint::Wrapper::ErrorWrapper","Method[write]","summary"]
      - ["Rack::Lint::Wrapper::ErrorWrapper","Method[flush]","summary"]
      - ["Rack::Lint::Wrapper::ErrorWrapper","Method[close]","summary"]
      - ["Rack::Lint::Wrapper","Method[check_hijack]","summary"]
      - ["Rack::Lint::Wrapper","Method[check_status]","summary"]
      - ["Rack::Lint::Wrapper","Method[check_headers]","summary"]
      - ["Rack::Lint::Wrapper","Method[check_header_value]","summary"]
      - ["Rack::Lint::Wrapper","Method[check_content_type]","summary"]
      - ["Rack::Lint::Wrapper","Method[check_content_length]","summary"]
      - ["Rack::Lint::Wrapper","Method[verify_content_length]","summary"]
      - ["Rack::Lint::Wrapper","Method[close]","summary"]
      - ["Rack::Lint::Wrapper","Method[verify_to_path]","summary"]
      - ["Rack::Lint::Wrapper","Method[each]","summary"]
      - ["Rack::Lint::Wrapper","Method[to_path]","summary"]
      - ["Rack::Lint::Wrapper","Method[respond_to?]","summary"]
      - ["Rack::Lint::Wrapper","Method[to_ary]","summary"]
      - ["Rack::Lint::Wrapper","Method[call]","summary"]
      - ["Rack::Lint::Wrapper::StreamWrapper","Method[initialize]","summary"]
      - ["Rack::MockRequest","Method[parse_uri_rfc2396]","summary"]
      - ["Rack::MockRequest","Method[env_for]","summary"]
      - ["Rack::MockRequest::FatalWarner","Method[puts]","summary"]
      - ["Rack::MockRequest::FatalWarner","Method[write]","summary"]
      - ["Rack::MockRequest::FatalWarner","Method[flush]","summary"]
      - ["Rack::MockRequest::FatalWarner","Method[string]","summary"]
      - ["Rack::MockRequest","Method[initialize]","summary"]
      - ["Rack::MockRequest","Method[get]","summary"]
      - ["Rack::MockRequest","Method[post]","summary"]
      - ["Rack::MockRequest","Method[put]","summary"]
      - ["Rack::MockRequest","Method[patch]","summary"]
      - ["Rack::MockRequest","Method[delete]","summary"]
      - ["Rack::MockRequest","Method[head]","summary"]
      - ["Rack::MockRequest","Method[options]","summary"]
      - ["Rack::MockRequest","Method[request]","summary"]
      - ["Rack::MockResponse","Method[=~]","summary"]
      - ["Rack::MockResponse","Method[match]","summary"]
      - ["Rack::MockResponse","Method[empty?]","summary"]
      - ["Rack::MockResponse","Method[cookie]","summary"]
      - ["Rack::Multipart::Generator","Method[initialize]","summary"]
      - ["Rack::Multipart::Generator","Method[dump]","summary"]
      - ["Rack::Multipart::Parser","Method[parse]","summary"]
      - ["Rack::Multipart::Parser::BoundedIO","Method[initialize]","summary"]
      - ["Rack::Multipart::ParamList","Method[make_params]","summary"]
      - ["Rack::Multipart::ParamList","Method[normalize_params]","summary"]
      - ["Rack::Multipart::ParamList","Method[initialize]","summary"]
      - ["Rack::Multipart::ParamList","Method[to_params_hash]","summary"]
      - ["Rack::Utils","Method[clock_time]","summary"]
      - ["Rack::Utils","Method[secure_compare]","summary"]
      - ["Rack::Multipart::Parser::BoundedIO","Method[read]","summary"]
      - ["Rack::Multipart::Parser::Collector::MimePart","Method[get_data]","summary"]
      - ["Rack::Multipart::Parser::Collector::BufferPart","Method[file?]","summary"]
      - ["Rack::Multipart::Parser::Collector::BufferPart","Method[close]","summary"]
      - ["Rack::Multipart::Parser::Collector::TempfilePart","Method[file?]","summary"]
      - ["Rack::Multipart::Parser::Collector::TempfilePart","Method[close]","summary"]
      - ["Rack::Multipart::Parser::Collector","Method[each]","summary"]

  - addsTo:
      pack: codeql/ruby-all
      extensible: typeModel
    data:
      - ["Rack::BodyProxy","Rack::CommonLogger","Method[call].ReturnValue.Element"]
      - ["Rack::NullLogger","Rack::CommonLogger","Method[call].Argument[0].Element.Parameter[0].Element"]
      - ["Rack::BodyProxy","Rack::ConditionalGet","Method[call].ReturnValue.Element"]
      - ["Rack::BodyProxy","Rack::Deflater","Method[call].ReturnValue.Element"]
      - ["Rack::Deflater::GzipStream","Rack::Deflater","Method[call].ReturnValue.Element"]
      - ["Rack::BodyProxy","Rack::Directory","Method[call].ReturnValue.Element"]
      - ["Rack::Events::EventedBodyProxy","Rack::Events","Method[call].ReturnValue.Element"]
      - ["Rack::BodyProxy","Rack::Files","Method[call].ReturnValue.Element"]
      - ["Rack::Files::BaseIterator","Rack::Files","Method[get].ReturnValue.Element"]
      - ["Rack::Files::Iterator","Rack::Files","Method[get].ReturnValue.Element"]
      - ["Rack::BodyProxy","Rack::Head","Method[call].ReturnValue.Element"]
      - ["Rack::BodyProxy","Rack::Cascade","Method[add].ReturnValue.Element.ReturnValue.Element"]
      - ["Rack::BodyProxy","Rack::Directory","Method[list_path].ReturnValue.Element"]
      - ["Rack::Directory::DirectoryBody","Rack::Directory","Method[list_path].ReturnValue.Element"]
      - ["Rack::Headers","Rack::Headers","Method[reject].ReturnValue"]
      - ["Rack::Headers","Rack::Headers","Method[replace].ReturnValue"]
      - ["Rack::Headers","Rack::Headers","Method[select].ReturnValue"]
      - ["Rack::Headers","Rack::Headers","Method[update].ReturnValue"]
      - ["Rack::Headers","Rack::Headers","Method[transform_keys].ReturnValue"]
      - ["Rack::Headers","Rack::Headers","Method[transform_keys!].ReturnValue"]
      - ["Rack::Multipart::ParamList","Rack::QueryParser","Method[normalize_params].ReturnValue"]
      - ["Rack::Request","Rack::Auth::AbstractRequest","Method[request].ReturnValue"]
      - ["Rack::BodyProxy","Rack::Directory","Method[get].ReturnValue.Element"]
      - ["Rack::Directory::DirectoryBody","Rack::Directory","Method[get].ReturnValue.Element"]
      - ["Rack::Directory::DirectoryBody","Rack::Directory","Method[list_directory].ReturnValue.Element"]
      - ["Rack::Files::BaseIterator","Rack::Files","Method[serving].ReturnValue.Element"]
      - ["Rack::Files::Iterator","Rack::Files","Method[serving].ReturnValue.Element"]
      - ["Rack::NullLogger","Rack::Lint","Method[call].Argument[0].Element.Parameter[0].Element"]
      - ["Rack::Lint::Wrapper::StreamWrapper","Rack::Lint::Wrapper","Method[check_hijack_response].Argument[0].Element.Parameter[0]"]
      - ["String","Rack::MockResponse","Method[body].ReturnValue"]
      - ["Rack::NullLogger","Rack::NullLogger","Method[call].Argument[0].Element.Parameter[0].Element"]
      - ["Rack::Response","Rack::Response","Method[finish].Argument[0].Parameter[0]"]
      - ["Rack::Response","Rack::Response","Method[finish].Argument[block].Parameter[0]"]
      - ["Rack::BodyProxy","Rack::Sendfile","Method[call].ReturnValue.Element"]
      - ["ERB","Rack::ShowExceptions","Method[template].ReturnValue"]
      - ["Rack::BodyProxy","Rack::ShowStatus","Method[call].ReturnValue.Element"]
      - ["Rack::BodyProxy","Rack::Static","Method[call].ReturnValue.Element"]
      - ["Rack::BodyProxy","Rack::TempfileReaper","Method[call].ReturnValue.Element"]

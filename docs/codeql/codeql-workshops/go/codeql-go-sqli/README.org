* Overview
  This repository contains a trivial Go program to serve as introduction to
  CodeQL.  The focus is on treating the Go program as /data/ to be examined via
  CodeQL, so it's kept as simple as possible.
  
  Start with the [[#Setup-Instructions][Setup Instructions]] for CodeQL, then follow the [[#SQL-injection-example][SQL injection
  example]].  There is a short [[#Codeql-Recap][Codeql Recap]], but for details follow the
  [[#documentation-links][Documentation Links]]

* Setup Instructions
  :PROPERTIES:
  :CUSTOM_ID: Setup-Instructions
  :END:
  To write and run CodeQL queries, follow these steps:

  1. Install the Visual Studio Code IDE.

  2. Download and install the
     [[https://codeql.github.com/docs/codeql-for-visual-studio-code/setting-up-codeql-in-visual-studio-code/#installing-the-extension][CodeQL extension for Visual Studio Code]].

  3. [[https://codeql.github.com/docs/codeql-for-visual-studio-code/setting-up-codeql-in-visual-studio-code/#using-the-starter-workspace][Set up the starter workspace]].
     - Basically,
       =git clone --recursive https://github.com/github/vscode-codeql-starter.git=
     - *Important*: Don't forget to =git clone --recursive= or
       =git submodule update --init --remote=, so that you obtain the
       standard query libraries.

  4. Open the starter workspace: File > Open Workspace > Browse to
     =vscode-codeql-starter/vscode-codeql-starter.code-workspace=.

  5. Download the sample database [[https://drive.google.com/file/d/1jxLWHAzQb6SUfgAx3QyVkFTDYQU1woqV/view?usp=sharing][=go-sqli-ba5819d.db.zip=]]

  6. Unzip the database.

  7. Import the unzipped database into Visual Studio Code:
     - Click the *CodeQL* icon in the left sidebar.
     - Place your mouse over *Databases*, and click the + sign that
       appears on the right.
     - Choose the unzipped database directory on your filesystem.

  8. Create a new file, name it =SqlInjection.ql=, save it under
     =vscode-codeql-starter/codeql-custom-queries-go/=.

* SQL injection example
  :PROPERTIES:
  :CUSTOM_ID: SQL-injection-example
  :END:

** Setup and sample run
   With Go installed, install prerequisites via 
   : make init
   
   Then try the following sequence to see the problem:
   
   #+BEGIN_SRC sh
     # Build
     ./build.sh

     # Prepare db
     ./admin -r
     ./admin -c
     ./admin -s 

     # Add regular user interactively
     ./add-user 2>> users.log
     First User

     
     # Regular user via "external" process
     echo "User Outside" | ./add-user 2>> users.log

     # Check
     ./admin -s

     # Add Johnny Droptable 
     ./add-user 2>> users.log
     Johnny'); DROP TABLE users; --

     # And the problem:
     ./admin -s

     # Check the log
     tail users.log
   #+END_SRC

** Identify the problem
   =./add-user= is reading from =STDIN=, and writing to a database; looking at the code in
   [[./add-user.go]] leads to
   : count, err := os.Stdin.Read(buf)
   for the read and 
   : _, err = db.Exec(query)
   for the write.

   This problem is thus a dataflow problem; in codeql terminology we have
   - a /source/ at the =os.Stdin.Read(buf)=
   - a /sink/ at the =db.Exec(query)=

   We write codeql to identify these two, and then connect them via
   a  /taintflow configuration/, the general form of a /dataflow configuration/.
   
** Build codeql database
   To get started, build the codeql database (adjust paths to your setup):
   #+BEGIN_SRC sh
     # Choose consistent codeql and ql library versions
     ~/local/vmsync/codeql263/codeql --version
     : CodeQL command-line toolchain release 2.6.3.

     cd ~/local/vmsync/codeql-go
     git checkout codeql-cli/v2.6.3

     # Build the db with source commit id.
     export PATH=$HOME/local/vmsync/codeql263:"$PATH"
     SRCDIR=$HOME/local/codeql-training-material/go/codeql-go-sqli
     DB=$SRCDIR/go-sqli-$(cd $SRCDIR && git rev-parse --short HEAD)

     echo $DB
     test -d "$DB" && rm -fR "$DB"
     mkdir -p "$DB"

     cd $SRCDIR && codeql database create --language=go -s . -j 8 -v $DB
   #+END_SRC

   Then add this database directory to your VS Code =DATABASES= tab.

** Develop the query bottom-up
   1. Identify the /source/ part of the 
      : count, err := os.Stdin.Read(buf)
      expression, the =buf= argument.  
      Start from a =from..where..select=, then convert to a predicate.

   2. Identify the /sink/ part of the
      : _, err = db.Exec(query)
      expression, the =query= argument.  Again start from =from..where..select=,
      then convert to a predicate.

   3. Fill in the /taintflow configuration/ boilerplate
      #+BEGIN_SRC java
        class SqliFlowConfig extends TaintTracking::Configuration {
            SqliFlowConfig() { this = "SqliFlowConfig" }

            override predicate isSource(DataFlow::Node node) {
                none()
                    }

            override predicate isSink(DataFlow::Node node) {
                none()
                    }
        }
      #+END_SRC

      Note that an inout-argument in Go (the =buf= slice is passed to =read=
      and points to updated data after the return) is accessed as a codeql source
      via
      : source.(DataFlow::PostUpdateNode).getPreUpdateNode().asExpr()
      instead of the usual
      : source.asExpr()

   The final query is in [[./SqlInjection.ql]]

** Optional: sarif file review of the results
   Query results are available in several output formats using the cli.  The
   following produces the sarif format, a json-based result description.

   #+BEGIN_SRC sh
     # The setup information from before
     export PATH=$HOME/local/vmsync/codeql263:"$PATH"
     SRCDIR=$HOME/local/codeql-training-material/go/codeql-go-sqli
     DB=$SRCDIR/go-sqli-$(cd $SRCDIR && git rev-parse --short HEAD)

     # Check paths
     test -d "$DB" && echo "db: $DB"
     test -d "$SRCDIR" && echo "source: $SRCDIR"

     # To see the help
     codeql database analyze -h

     # Run a query
     codeql database analyze                         \
            -v                                       \
            --ram=14000                              \
            -j12                                     \
            --rerun                                  \
            --search-path ~/local/vmsync/codeql-go   \
            --format=sarif-latest                    \
            --output go-sqli.sarif                   \
            --                                       \
            $DB                                      \
            $SRCDIR/SqlInjection.ql

     # Examine the file in an editor
     edit go-sqli.sarif
   #+END_SRC

   An example of using the sarif data is in the the jq script [[./sarif-summary.jq]].
   When run against the sarif input via 
   #+BEGIN_SRC sh
     jq --raw-output --join-output  -f sarif-summary.jq < go-sqli.sarif > go-sqli.txt
   #+END_SRC
   it produces output in a form close to that of compiler error messages:
   #+BEGIN_SRC text
     query-id: message line 
         Path
            ...
         Path
            ...
   #+END_SRC

* Documentation Links
  :PROPERTIES:
  :CUSTOM_ID: documentation-links
  :END:
If you get stuck, try searching our documentation and blog posts for
help and ideas. Below are a few links to help you get started:

- [[https://codeql.github.com/docs/writing-codeql-queries/ql-tutorials/][CodeQL Tutorials]]
- [[https://codeql.github.com/docs/codeql-language-guides/codeql-for-go/][Learning CodeQL for Go]]
- [[https://codeql.github.com/docs/codeql-for-visual-studio-code/][Using the CodeQL extension for VS Code]]

* Codeql Recap
  :PROPERTIES:
  :CUSTOM_ID: Codeql-Recap
  :END:
This is a brief review of CodeQL. For more details, see the
[[#documentation-links][documentation links]].

** from, where, select
   :PROPERTIES:
   :CUSTOM_ID: from-where-select
   :END:
CodeQL is a declarative language and a basic query is defined by a
/select/ clause, which specifies what the result of the query should be.
For example:

#+begin_example
  import go
  select "hello world"
#+end_example

More complicated queries look like this:

#+begin_example
  from /* ... variable declarations ... */
  where /* ... logical formulas ... */
  select /* ... expressions ... */
#+end_example

The =from= clause specifies some variables that will be used in the
query. The =where= clause specifies some conditions on those variables
in the form of logical formulas. The =select= clauses specifies what the
results should be, and can refer to variables defined in the =from=
clause.

The =from= clause is defined as a series of variable declarations, where
each declaration has a /type/ and a /name/. For example:

#+begin_example
  from IfStmt ifStmt
  select ifStmt
#+end_example

We are declaring a variable with the name =ifStmt= and the type =IfStmt=
(from the CodeQL standard library for analyzing Go). Variables represent
a *set of values*, initially constrained by the type of the variable.
Here, the variable =ifStmt= represents the set of all =if= statements in
the Go program, as we can see if we run the query.

A query using all three clauses to find empty blocks:

#+begin_example
  import go

  from IfStmt ifStmt, BlockStmt block
  where
    ifStmt.getThen() = block and
    block.getNumStmt() = 0
  select ifStmt, "Empty if statement"
#+end_example

** Predicates
   :PROPERTIES:
   :CUSTOM_ID: predicates
   :END:
The other feature we will use are /predicates/. These provide a way to
encapsulate portions of logic in the program so that they can be reused.
You can think of them as a mini =from=-=where=-=select= query clause.
Like a select clause they also produce a set of "tuples" or rows in a
result table.

We can introduce a new predicate in our query that identifies the set of
empty blocks in the program (for example, to reuse this feature in
another query):

#+begin_example
  import go

  predicate isEmptyBlock(BlockStmt block) { block.getNumStmt() = 0 }

  from IfStmt ifStmt
  where isEmptyBlock(ifStmt.getThen())
  select ifStmt, "Empty if statement"
#+end_example

** Existential quantifiers (local variables in queries)
   :PROPERTIES:
   :CUSTOM_ID: existential-quantifiers-local-variables-in-queries
   :END:
Although the terminology may sound scary if you are not familiar with
logic and logic programming, /existential quantifiers/ are simply ways
to introduce temporary variables with some associated conditions. The
syntax for them is:

#+begin_example
  exists(<variable declarations> | <formula>)
#+end_example

They have a similar structure to the =from= and =where= clauses, where
the first part allows you to declare one or more variables, and the
second formula ("conditions") that can be applied to those variables.

For example, we can use this to refactor the query

#+begin_example
  import go
  from IfStmt ifStmt, BlockStmt block
  where
    ifStmt.getThen() = block and
    block.getNumStmt() = 0
  select ifStmt, "Empty if statement"
#+end_example

to use a temporary variable for the empty block:

#+begin_example
  import go
  from IfStmt ifStmt
  where
    exists(BlockStmt block |
      ifStmt.getThen() = block and
      block.getNumStmt() = 0
    )
  select ifStmt, "Empty if statement"
#+end_example

This is frequently used to convert a query into a predicate.

** Classes
   :PROPERTIES:
   :CUSTOM_ID: classes
   :END:
Classes are a way in which you can define new types within CodeQL, as
well as providing an easy way to reuse and structure code.

Like all types in CodeQL, classes represent a set of values. For
example, the =Block= type is, in fact, a class, and it represents the
set of all blocks in the program. You can also think of a class as
defining a set of logical conditions that specifies the set of values
for that class.

For example, we can define a new CodeQL class to represent empty blocks:

#+begin_example
  import go

  class EmptyBlock extends BlockStmt {
      EmptyBlock() { this.getNumStmt() = 0 }
  }
#+end_example

and use it in a query:

#+begin_example
  from IfStmt ifStmt, EmptyBlock block
  where ifStmt.getThen() = block
  select ifStmt, "Empty if statement"
#+end_example


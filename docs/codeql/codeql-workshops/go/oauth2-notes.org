* overview
  These are some lecture notes for the [[./codeql-workshop-go-bad-redirect-check.md]]
  workshop.  They may be useful for other presenters.

  The gist https://gist.github.com/hohn/b4c32ce35b6bdc2ade04c911985c7d46

  * fix: Get("X-Redirect") is "X-Auth-Request-Redirect"

  Our main goals:

  1. a data source with the structure
     redirect = req.Header.Get("X-Auth-Request-Redirect")

  2. a data sink with the structure
     strings.HasPrefix(redirect, "/") && !strings.HasPrefix(redirect, "//")

  3. a taint flow configuration to connect the source and sink

* Getting started
  from..select

  introduce Function

  introduce member predicates, f.getBody() -- use select to find them and their types

  completion

  jump to source 

  difference between completion and class content

  cartesian product in the select

* Source
  Our source is
  1. a data source with the structure
     : redirect = req.Header.Get("X-Auth-Request-Redirect")

  mapping from ast to Go and back
  
  - look at the documentation on ast classes:
    https://codeql.github.com/docs/codeql-language-guides/abstract-syntax-tree-classes-for-working-with-go-programs/

  - In that, find the CallExpr

    #+BEGIN_SRC java
      from CallExpr c 
      select c.getCalleeName()
    #+END_SRC

  show the table sort, find "Get" to make sure it exists.

  pick up the type from the select and then...

  #+BEGIN_SRC java
  from CallExpr c, string funcName
  where funcName = c.getCalleeName()
      and funcName = "Get"
  select funcName
  #+END_SRC

  Narrow some
  #+BEGIN_SRC java
  from CallExpr c, string funcName
  where funcName = c.getCalleeName()
    and funcName = "Get" 
  select funcName, c, c.getAnArgument()
  #+END_SRC
    
  Point out the AST parts we now get in the query; at the above url, find
  | Ident.Ident | QualifiedName | SelectorExpr |

  Given this: _.Get(_)
  choices are: 
  1. don't narrow
  2. narrow on argument name
  3. narrow on the callee (the _.Get)

  Let's narrow on the callee first:

  #+BEGIN_SRC java
  from CallExpr c, string funcName, QualifiedName qn, Expr arg
  where funcName = c.getCalleeName()
    and funcName = "Get" 
    and c.getCalleeExpr() = qn
    and arg = c.getAnArgument()
  select funcName, c, qn, arg
  #+END_SRC

  Let's narrow the argument:

  arg has type Expr, view results, see quoted strings, check ast reference for ",
  find 
  | "Hello" | StringLit | BasicLit |
  
  introduce the cast operator, which now gives access to StringLit member
  predicates -- especially .getValue()

  #+BEGIN_SRC java
  from CallExpr c, string funcName, QualifiedName qn, Expr arg
  where funcName = c.getCalleeName()
    and funcName = "Get" 
    and c.getCalleeExpr() = qn
    and arg = c.getAnArgument()
  select funcName, c, qn, arg, arg.(StringLit).getValue()
  #+END_SRC

  Turn into predicate
  
  #+BEGIN_SRC text
    predicate xAuthSource(CallExpr c, string funcName, QualifiedName qn, Expr arg) {
     funcName = c.getCalleeName()
      and funcName = "Get" 
      and c.getCalleeExpr() = qn
      and arg = c.getAnArgument() 
      and arg.(StringLit).getValue() = "X-Auth-Request-Redirect"
    }

    from CallExpr c, string funcName, QualifiedName qn, Expr arg
    where xAuthSource(c, funcName, qn, arg)
    select funcName, c, qn, arg
  #+END_SRC

* Interlude -- general sources  
  The query is done.  Now generalize sources.

  Look under semmle/go/security for general-purpose APIs, see =FlowSources.qll=,
  find =UntrustedFlowSource=.

  Hacky way: look for "Header" in the libraries.

* Sink
  Looking for 
  2. a data sink with the structure
     =strings.HasPrefix(redirect, "/") && !strings.HasPrefix(redirect, "//")=

  you can show that strings.HasPrefix(redirect, "/")  is CallExpr by looking at AST viewer

  add where clause - demo the chaining of the predicates. i.e .getTarget() returns
  Function but we want string "HasPrefix" so we . again and go through member
  predicates and see if there's anything that suits what we're looking for.

  We are matching just =_.HasPrefix(_, _)=

  #+BEGIN_SRC text
    from CallExpr call
    where
    call.getTarget().getName() = "HasPrefix" 
    select call
  #+END_SRC

  Now we extend to =_.HasPrefix(checked, _)=
  #+BEGIN_SRC java
    import go
        from CallExpr call, Expr checked, 
        where
        call.getTarget().getName() = "HasPrefix" and
        call.getArgument(0) = checked and
        select call, checked 
  #+END_SRC

  Now we extend to =_.HasPrefix(checked, prefix)=
  #+BEGIN_SRC java
    import go
    from CallExpr call, Expr checked, string prefix
    where
        call.getTarget().getName() = "HasPrefix" and
        checked = call.getArgument(0) and
        prefix = call.getArgument(1).(StringLit).getStringValue()
    select call, checked, prefix
  #+END_SRC

  Note: 
  - =.getStringValue()= will always work i.e if int it gets changed to string. 
    We dont want this. We want the prefix to be a string so we restrict our result
    set using the "cast". 

  This is the function call part of our data sink
  : strings.HasPrefix(redirect, "/") && !strings.HasPrefix(redirect, "//")

  Let's turn it into a class before we work on the combination
  #+BEGIN_SRC java
    import go

    /* 
       Identify _.HasPrefix(checked, prefix)
    ,*/
        class HasPrefix extends CallExpr {
        Expr checked;
        string prefix;

        HasPrefix() {
            this.getTarget().getName() = "HasPrefix" and
                checked = this.getArgument(0) and
                prefix = this.getArgument(1).(StringLit).getStringValue()
                }
    }
  #+END_SRC

  Notes:
  - Mention that a class is a type
  - "Inheritance" refines the set, it does not widen
  - Characteristic predicate has to initialise field in the class. It produces a
    table with all the fields set
  - the this value is simply one column in a table
  - Replace CallExpr in from to HasPrefix 


  The query still works, but we're accessing "internals":
  #+BEGIN_SRC java
    // strings.HasPrefix(redirect, "/") && //!strings.HasPrefix(redirect, "//")
    from HasPrefix call, Expr checked, string prefix
    where
      call.getArgument(0) = checked and
      call.getArgument(1).getStringValue() = prefix
    select call, checked, prefix
  #+END_SRC

  Add some predicates to the class to expose what we need:

  #+BEGIN_SRC java
    class HasPrefix extends CallExpr {
        Expr checked;
        string prefix;

        HasPrefix() {
            this.getTarget().getName() = "HasPrefix" and
                checked = this.getArgument(0) and
                prefix = this.getArgument(1).(StringLit).getStringValue()
                }

        Expr getBaseString() { result = checked }

        string getSubString() { result = prefix }
    }
    from HasPrefix call, Expr checked, string prefix
        where call.getBaseString() = checked and call.getSubString() = prefix
        select call, checked, prefix
  #+END_SRC

  Notes:
  - we chose those predicate names for later compatibility 
  - Revisit what we are trying to find.  We are looking for cases where the
    variable is checked against some prefixes but not others. This means we will
    have to reuse the logic of the previous query later, but with different string
    prefixes.

  Interlude:
  - We can use predicates or classes
  - A class is for modelling single logical items whilst predicates are good for
    connecting them.
    
  We got the =_.HasPrefix(checked, "prefix string")= part, now we need to build on it
  : strings.HasPrefix(redirect, "/") && !strings.HasPrefix(redirect, "//")

  The connection is via a Variable:
  #+BEGIN_SRC java
    from HasPrefix call, Expr checked, string prefix, Variable var
        where
        call.getBaseString() = checked and
        call.getSubString() = prefix and
        checked = var.getARead().asExpr()
        select call, checked, prefix, var
  #+END_SRC
  Notes:
  - We have Variables and we have read and write accesses to them.
  - For write, a Control Flow node
  - For read, a data flow node

  As mentioned, a class is for modelling single logical items while predicates
  are good for connecting them:

  #+BEGIN_SRC java
    predicate prefixCheck(HasPrefix call, Expr checked, string prefix, Variable var) {
        call.getBaseString() = checked and
            call.getSubString() = prefix and
            checked = var.getARead().asExpr()
            }

    from HasPrefix call, Expr checked, string prefix, Variable var
        where prefixCheck(call, checked, prefix, var)
        select call, checked, prefix, var
  #+END_SRC

  Valid checks include
  : / & // & /\\
  so an incomplete check can be written as
    : / & (not // or not /\\)

  as follows:
  #+BEGIN_SRC java
    from HasPrefix call, Expr checked, Variable var
    where prefixCheck(call, checked, "/", var) and
       ( not prefixCheck(_, _, "//", var) or
         not prefixCheck(_, _, "/\\", var))
    select call, checked, var
  #+END_SRC

  Moving this to a predicate:
  #+BEGIN_SRC java
    predicate insufficientPrefixCheck(HasPrefix call, Expr checked, Variable var) {
        prefixCheck(call, checked, "/", var) and
            (not prefixCheck(_, _, "//", var) or not prefixCheck(_, _, "/\\", var))
    }

    from HasPrefix call, Expr checked, Variable var
    where insufficientPrefixCheck(call, checked, var)
    select call, checked, var
  #+END_SRC

* Global Flow

#+BEGIN_SRC java
import go

class Config extends TaintTracking::Configuration {
  Config() { this = "Config" }

  override predicate isSource(DataFlow::Node source) { xAuthSource(source.asExpr(), _, _, _) }

  override predicate isSink(DataFlow::Node sink) { insufficientPrefixCheck(_, sink.asExpr(), _) }
}

class HasPrefix extends CallExpr {
  Expr checked;
  string prefix;

  HasPrefix() {
    this.getTarget().getName() = "HasPrefix" and
    checked = this.getArgument(0) and
    prefix = this.getArgument(1).(StringLit).getStringValue()
  }

  Expr getBaseString() { result = checked }

  string getSubString() { result = prefix }
}

predicate prefixCheck(HasPrefix call, Expr checked, string prefix, Variable var) {
  call.getBaseString() = checked and
  call.getSubString() = prefix and
  checked = var.getARead().asExpr()
}

predicate insufficientPrefixCheck(HasPrefix call, Expr checked, Variable var) {
  prefixCheck(call, checked, "/", var) and
  (not prefixCheck(_, _, "//", var) or not prefixCheck(_, _, "/\\", var))
}

predicate xAuthSource(CallExpr c, string funcName, QualifiedName qn, Expr arg) {
  funcName = c.getCalleeName() and
  funcName = "Get" and
  c.getCalleeExpr() = qn and
  arg = c.getAnArgument() and
  arg.(StringLit).getValue() = "X-Auth-Request-Redirect"
}

//strings.HasPrefix(redirect, "/") && !strings.HasPrefix(redirect, "//")
// we want / & // & /\\
// so logically / & (not // or not /\\)
// from HasPrefix call, Expr checked, Variable var
// where insufficientPrefixCheck(call, checked, var)
// select call, checked, var
from DataFlow::Node source, DataFlow::Node sink, Config c
where c.hasFlow(source, sink)
select sink, source, sink, "Untrusted value reaches insufficient redirect check"

#+END_SRC

OPTIONAL 
- Mention that there could be other ways of searching for string prefixes in Go. 
- Take strings.HasPrefix(redirect, "/") and search for it in vscode 
- Explain how you don't want to reinvent the wheel, and that it's always good to check the qll libraries to see what's already provided out of the box
- Go through the StringOps.qll and notice how the HasPrefix class extends DataFlow::Node and that the return types of the interesting predicates are also DataFlow::Node
- Change your query and arrive at this

#+BEGIN_SRC
import go

class HasPrefix extends CallExpr {
  HasPrefix() { this.getTarget().getName() = "HasPrefix" }
}

//strings.HasPrefix(redirect, "/") && !strings.HasPrefix(redirect, "//")
from StringOps::HasPrefix call, DataFlow::Node checked, DataFlow::Node prefix
where
  call.getBaseString() = checked and
  call.getSubstring() = prefix
select call, checked, prefix
#+END_SRC

- Notice that the first result is selection of ProxyPrefix which you're not
  interested in, you're interested in String values '/' or '//'

- THIS IS A BIT OF A STRETCH BUT 
find this through exploration   call.getSubstring().asExpr().getStringValue() = prefix
Technically, it can be justified, because you've already shown that it was an Expr you just want the equivalent of the old query

- Run query. Notice the second result. That wouldn't have been there if you didn't use StringOps::HasPrefix. Re-emphasise the need to have exploration mindset when writing queries. Try to leverage the libraries as much as possible 

- Notice that all the checked results correspond to a Variable. Model this. First do checked = v and then .getARead

#+BEGIN_SRC
import go

class HasPrefix extends CallExpr {
  HasPrefix() { this.getTarget().getName() = "HasPrefix" }
}

//strings.HasPrefix(redirect, "/") && !strings.HasPrefix(redirect, "//")
from StringOps::HasPrefix call, DataFlow::Node checked, string prefix, Variable v
where
  call.getBaseString() = checked and
  checked = v.getARead() and 
  call.getSubstring().asExpr().getStringValue() = prefix
select call, checked, prefix
#+END_SRC



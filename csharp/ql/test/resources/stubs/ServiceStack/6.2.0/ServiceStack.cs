// This file contains auto-generated code.

// Generated from `HttpAsyncTaskHandlerUtils` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
public static class HttpAsyncTaskHandlerUtils
{
    public static string GetOperationName(this ServiceStack.Host.Handlers.IServiceStackHandler handler) => throw null;
}

namespace Funq
{
    // Generated from `Funq.Container` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class Container : ServiceStack.Configuration.IResolver, ServiceStack.IContainer, System.IDisposable, System.IServiceProvider
    {
        public ServiceStack.Configuration.IContainerAdapter Adapter { get => throw null; set => throw null; }
        public ServiceStack.IContainer AddSingleton(System.Type type, System.Func<object> factory) => throw null;
        public ServiceStack.IContainer AddTransient(System.Type type, System.Func<object> factory) => throw null;
        public void AutoWire(Funq.Container container, object instance) => throw null;
        public void AutoWire(object instance) => throw null;
        public bool CheckAdapterFirst { get => throw null; set => throw null; }
        public static System.Linq.Expressions.NewExpression ConstructorExpression(System.Reflection.MethodInfo resolveMethodInfo, System.Type type, System.Linq.Expressions.Expression lambdaParam) => throw null;
        public Container() => throw null;
        public Funq.Container CreateChildContainer() => throw null;
        public System.Func<object> CreateFactory(System.Type type) => throw null;
        public Funq.Owner DefaultOwner { get => throw null; set => throw null; }
        public Funq.ReuseScope DefaultReuse { get => throw null; set => throw null; }
        public virtual void Dispose() => throw null;
        public bool Exists(System.Type type) => throw null;
        public bool Exists<TService>() => throw null;
        public bool ExistsNamed<TService>(string name) => throw null;
        public static System.Func<Funq.Container, TService> GenerateAutoWireFn<TService>() => throw null;
        public static System.Reflection.ConstructorInfo GetConstructorWithMostParams(System.Type type) => throw null;
        protected virtual Funq.ServiceEntry<TService, TFunc> GetEntry<TService, TFunc>(string serviceName, bool throwIfMissing) => throw null;
        public object GetLazyResolver(params System.Type[] types) => throw null;
        public object GetService(System.Type serviceType) => throw null;
        public Funq.ServiceEntry<TService, System.Func<Funq.Container, TService>> GetServiceEntry<TService>() => throw null;
        public Funq.ServiceEntry<TService, System.Func<Funq.Container, TService>> GetServiceEntryNamed<TService>(string name) => throw null;
        public static System.Collections.Generic.HashSet<string> IgnorePropertyTypeFullNames;
        protected virtual Funq.Container InstantiateChildContainer() => throw null;
        public Funq.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TService> LazyResolve<TService, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>() => throw null;
        public Funq.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TService> LazyResolve<TService, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(string name) => throw null;
        public Funq.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TService> LazyResolve<TService, TArg1, TArg2, TArg3, TArg4, TArg5>() => throw null;
        public Funq.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TService> LazyResolve<TService, TArg1, TArg2, TArg3, TArg4, TArg5>(string name) => throw null;
        public System.Func<TArg1, TArg2, TArg3, TArg4, TService> LazyResolve<TService, TArg1, TArg2, TArg3, TArg4>() => throw null;
        public System.Func<TArg1, TArg2, TArg3, TArg4, TService> LazyResolve<TService, TArg1, TArg2, TArg3, TArg4>(string name) => throw null;
        public System.Func<TArg1, TArg2, TArg3, TService> LazyResolve<TService, TArg1, TArg2, TArg3>() => throw null;
        public System.Func<TArg1, TArg2, TArg3, TService> LazyResolve<TService, TArg1, TArg2, TArg3>(string name) => throw null;
        public System.Func<TArg1, TArg2, TService> LazyResolve<TService, TArg1, TArg2>() => throw null;
        public System.Func<TArg1, TArg2, TService> LazyResolve<TService, TArg1, TArg2>(string name) => throw null;
        public System.Func<TArg, TService> LazyResolve<TService, TArg>() => throw null;
        public System.Func<TArg, TService> LazyResolve<TService, TArg>(string name) => throw null;
        public System.Func<TService> LazyResolve<TService>() => throw null;
        public System.Func<TService> LazyResolve<TService>(string name) => throw null;
        public Funq.IRegistration<TService> Register<TService, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(Funq.Func<Funq.Container, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TService> factory) => throw null;
        public Funq.IRegistration<TService> Register<TService, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(string name, Funq.Func<Funq.Container, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TService> factory) => throw null;
        public Funq.IRegistration<TService> Register<TService, TArg1, TArg2, TArg3, TArg4, TArg5>(Funq.Func<Funq.Container, TArg1, TArg2, TArg3, TArg4, TArg5, TService> factory) => throw null;
        public Funq.IRegistration<TService> Register<TService, TArg1, TArg2, TArg3, TArg4, TArg5>(string name, Funq.Func<Funq.Container, TArg1, TArg2, TArg3, TArg4, TArg5, TService> factory) => throw null;
        public Funq.IRegistration<TService> Register<TService, TArg1, TArg2, TArg3, TArg4>(Funq.Func<Funq.Container, TArg1, TArg2, TArg3, TArg4, TService> factory) => throw null;
        public Funq.IRegistration<TService> Register<TService, TArg1, TArg2, TArg3, TArg4>(string name, Funq.Func<Funq.Container, TArg1, TArg2, TArg3, TArg4, TService> factory) => throw null;
        public Funq.IRegistration<TService> Register<TService, TArg1, TArg2, TArg3>(System.Func<Funq.Container, TArg1, TArg2, TArg3, TService> factory) => throw null;
        public Funq.IRegistration<TService> Register<TService, TArg1, TArg2, TArg3>(string name, System.Func<Funq.Container, TArg1, TArg2, TArg3, TService> factory) => throw null;
        public Funq.IRegistration<TService> Register<TService, TArg1, TArg2>(System.Func<Funq.Container, TArg1, TArg2, TService> factory) => throw null;
        public Funq.IRegistration<TService> Register<TService, TArg1, TArg2>(string name, System.Func<Funq.Container, TArg1, TArg2, TService> factory) => throw null;
        public Funq.IRegistration<TService> Register<TService, TArg>(System.Func<Funq.Container, TArg, TService> factory) => throw null;
        public Funq.IRegistration<TService> Register<TService, TArg>(string name, System.Func<Funq.Container, TArg, TService> factory) => throw null;
        public Funq.IRegistration<TService> Register<TService>(System.Func<Funq.Container, TService> factory) => throw null;
        public void Register<TService>(TService instance) => throw null;
        public Funq.IRegistration<TService> Register<TService>(string name, System.Func<Funq.Container, TService> factory) => throw null;
        public void Register<TService>(string name, TService instance) => throw null;
        public Funq.IRegistration<TAs> RegisterAs<T, TAs>() where T : TAs => throw null;
        public Funq.IRegistration<TAs> RegisterAs<T, TAs>(string name) where T : TAs => throw null;
        public Funq.IRegistration<T> RegisterAutoWired<T>() => throw null;
        public Funq.IRegistration<T> RegisterAutoWired<T>(string name) => throw null;
        public Funq.IRegistration<TAs> RegisterAutoWiredAs<T, TAs>() where T : TAs => throw null;
        public Funq.IRegistration<TAs> RegisterAutoWiredAs<T, TAs>(string name) where T : TAs => throw null;
        public Funq.IRegistration<TService> RegisterFactory<TService>(System.Func<object> factory) => throw null;
        public object RequiredResolve(System.Type type, System.Type ownerType) => throw null;
        public object Resolve(System.Type type) => throw null;
        public TService Resolve<TService, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6) => throw null;
        public TService Resolve<TService, TArg1, TArg2, TArg3, TArg4, TArg5>(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5) => throw null;
        public TService Resolve<TService, TArg1, TArg2, TArg3, TArg4>(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4) => throw null;
        public TService Resolve<TService, TArg1, TArg2, TArg3>(TArg1 arg1, TArg2 arg2, TArg3 arg3) => throw null;
        public TService Resolve<TService, TArg1, TArg2>(TArg1 arg1, TArg2 arg2) => throw null;
        public TService Resolve<TService, TArg>(TArg arg) => throw null;
        public TService Resolve<TService>() => throw null;
        public TService ResolveNamed<TService, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(string name, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6) => throw null;
        public TService ResolveNamed<TService, TArg1, TArg2, TArg3, TArg4, TArg5>(string name, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5) => throw null;
        public TService ResolveNamed<TService, TArg1, TArg2, TArg3, TArg4>(string name, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4) => throw null;
        public TService ResolveNamed<TService, TArg1, TArg2, TArg3>(string name, TArg1 arg1, TArg2 arg2, TArg3 arg3) => throw null;
        public TService ResolveNamed<TService, TArg1, TArg2>(string name, TArg1 arg1, TArg2 arg2) => throw null;
        public TService ResolveNamed<TService, TArg>(string name, TArg arg) => throw null;
        public TService ResolveNamed<TService>(string name) => throw null;
        public System.Func<TArg, TService> ReverseLazyResolve<TArg, TService>() => throw null;
        public System.Func<TArg1, TArg2, TArg3, TService> ReverseLazyResolve<TArg1, TArg2, TArg3, TService>() => throw null;
        public System.Func<TArg1, TArg2, TService> ReverseLazyResolve<TArg1, TArg2, TService>() => throw null;
        public System.Func<TService> ReverseLazyResolve<TService>() => throw null;
        public object TryResolve(System.Type type) => throw null;
        public TService TryResolve<TService, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6) => throw null;
        public TService TryResolve<TService, TArg1, TArg2, TArg3, TArg4, TArg5>(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5) => throw null;
        public TService TryResolve<TService, TArg1, TArg2, TArg3, TArg4>(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4) => throw null;
        public TService TryResolve<TService, TArg1, TArg2, TArg3>(TArg1 arg1, TArg2 arg2, TArg3 arg3) => throw null;
        public TService TryResolve<TService, TArg1, TArg2>(TArg1 arg1, TArg2 arg2) => throw null;
        public TService TryResolve<TService, TArg>(TArg arg) => throw null;
        public TService TryResolve<TService>() => throw null;
        public TService TryResolveNamed<TService, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(string name, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6) => throw null;
        public TService TryResolveNamed<TService, TArg1, TArg2, TArg3, TArg4, TArg5>(string name, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5) => throw null;
        public TService TryResolveNamed<TService, TArg1, TArg2, TArg3, TArg4>(string name, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4) => throw null;
        public TService TryResolveNamed<TService, TArg1, TArg2, TArg3>(string name, TArg1 arg1, TArg2 arg2, TArg3 arg3) => throw null;
        public TService TryResolveNamed<TService, TArg1, TArg2>(string name, TArg1 arg1, TArg2 arg2) => throw null;
        public TService TryResolveNamed<TService, TArg>(string name, TArg arg) => throw null;
        public TService TryResolveNamed<TService>(string name) => throw null;
        public int disposablesCount { get => throw null; }
    }

    // Generated from `Funq.Func<,,,,,,,>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public delegate TResult Func<T1, T2, T3, T4, T5, T6, T7, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);

    // Generated from `Funq.Func<,,,,,,>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public delegate TResult Func<T1, T2, T3, T4, T5, T6, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);

    // Generated from `Funq.Func<,,,,,>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public delegate TResult Func<T1, T2, T3, T4, T5, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);

    // Generated from `Funq.IContainerModule` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IContainerModule : Funq.IFunqlet
    {
    }

    // Generated from `Funq.IFluentInterface` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IFluentInterface
    {
        bool Equals(object obj);
        int GetHashCode();
        System.Type GetType();
        string ToString();
    }

    // Generated from `Funq.IFunqlet` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IFunqlet
    {
        void Configure(Funq.Container container);
    }

    // Generated from `Funq.IHasContainer` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IHasContainer
    {
        Funq.Container Container { get; }
    }

    // Generated from `Funq.IInitializable<>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IInitializable<TService> : Funq.IFluentInterface
    {
        Funq.IReusedOwned InitializedBy(System.Action<Funq.Container, TService> initializer);
    }

    // Generated from `Funq.IOwned` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IOwned : Funq.IFluentInterface
    {
        void OwnedBy(Funq.Owner owner);
    }

    // Generated from `Funq.IRegistration` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IRegistration : Funq.IFluentInterface, Funq.IOwned, Funq.IReused, Funq.IReusedOwned
    {
    }

    // Generated from `Funq.IRegistration<>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IRegistration<TService> : Funq.IFluentInterface, Funq.IInitializable<TService>, Funq.IOwned, Funq.IRegistration, Funq.IReused, Funq.IReusedOwned
    {
    }

    // Generated from `Funq.IReused` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IReused : Funq.IFluentInterface
    {
        Funq.IOwned ReusedWithin(Funq.ReuseScope scope);
    }

    // Generated from `Funq.IReusedOwned` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IReusedOwned : Funq.IFluentInterface, Funq.IOwned, Funq.IReused
    {
    }

    // Generated from `Funq.Owner` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public enum Owner
    {
        Container,
        Default,
        External,
    }

    // Generated from `Funq.ResolutionException` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ResolutionException : System.Exception
    {
        public ResolutionException(System.Type missingServiceType) => throw null;
        public ResolutionException(System.Type missingServiceType, string missingServiceName) => throw null;
        public ResolutionException(string message) => throw null;
    }

    // Generated from `Funq.ReuseScope` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public enum ReuseScope
    {
        Container,
        Default,
        Hierarchy,
        None,
        Request,
    }

    // Generated from `Funq.ServiceEntry` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ServiceEntry : Funq.IFluentInterface, Funq.IOwned, Funq.IRegistration, Funq.IReused, Funq.IReusedOwned
    {
        public Funq.Container Container;
        public virtual object GetInstance() => throw null;
        System.Type Funq.IFluentInterface.GetType() => throw null;
        public void OwnedBy(Funq.Owner owner) => throw null;
        public Funq.Owner Owner;
        public Funq.ReuseScope Reuse;
        public Funq.IOwned ReusedWithin(Funq.ReuseScope scope) => throw null;
        protected ServiceEntry() => throw null;
    }

    // Generated from `Funq.ServiceEntry<,>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ServiceEntry<TService, TFunc> : Funq.ServiceEntry, Funq.IFluentInterface, Funq.IInitializable<TService>, Funq.IOwned, Funq.IRegistration, Funq.IRegistration<TService>, Funq.IReused, Funq.IReusedOwned
    {
        public System.IDisposable AquireLockIfNeeded() => throw null;
        public Funq.ServiceEntry<TService, TFunc> CloneFor(Funq.Container newContainer) => throw null;
        public TFunc Factory;
        public override object GetInstance() => throw null;
        System.Type Funq.IFluentInterface.GetType() => throw null;
        public Funq.IReusedOwned InitializedBy(System.Action<Funq.Container, TService> initializer) => throw null;
        public ServiceEntry(TFunc factory) => throw null;
    }

}
namespace MarkdownDeep
{
    // Generated from `MarkdownDeep.BlockProcessor` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class BlockProcessor : MarkdownDeep.StringScanner
    {
        public BlockProcessor(MarkdownDeep.Markdown m, bool MarkdownInHtml) => throw null;
    }

    // Generated from `MarkdownDeep.HtmlTag` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class HtmlTag
    {
        public MarkdownDeep.HtmlTagFlags Flags { get => throw null; }
        public HtmlTag(string name) => throw null;
        public bool IsSafe() => throw null;
        public static MarkdownDeep.HtmlTag Parse(MarkdownDeep.StringScanner p) => throw null;
        public static MarkdownDeep.HtmlTag Parse(string str, ref int pos) => throw null;
        public void RenderClosing(System.Text.StringBuilder dest) => throw null;
        public void RenderOpening(System.Text.StringBuilder dest) => throw null;
        public System.Collections.Generic.Dictionary<string, string> attributes { get => throw null; }
        public bool closed { get => throw null; set => throw null; }
        public bool closing { get => throw null; }
        public string name { get => throw null; }
    }

    // Generated from `MarkdownDeep.HtmlTagFlags` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    [System.Flags]
    public enum HtmlTagFlags
    {
        Block,
        ContentAsSpan,
        Inline,
        NoClosing,
    }

    // Generated from `MarkdownDeep.ImageInfo` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ImageInfo
    {
        public ImageInfo() => throw null;
        public int height;
        public bool titled_image;
        public string url;
        public int width;
    }

    // Generated from `MarkdownDeep.LinkDefinition` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class LinkDefinition
    {
        public LinkDefinition(string id) => throw null;
        public LinkDefinition(string id, string url) => throw null;
        public LinkDefinition(string id, string url, string title) => throw null;
        public string id { get => throw null; set => throw null; }
        public string title { get => throw null; set => throw null; }
        public string url { get => throw null; set => throw null; }
    }

    // Generated from `MarkdownDeep.Markdown` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class Markdown
    {
        public bool AutoHeadingIDs { get => throw null; set => throw null; }
        public string DocumentLocation { get => throw null; set => throw null; }
        public string DocumentRoot { get => throw null; set => throw null; }
        public bool ExtraMode { get => throw null; set => throw null; }
        public bool ExtractHeadBlocks { get => throw null; set => throw null; }
        public System.Func<MarkdownDeep.Markdown, string, string> FormatCodeBlock;
        public System.Func<MarkdownDeep.ImageInfo, bool> GetImageSize;
        public MarkdownDeep.LinkDefinition GetLinkDefinition(string id) => throw null;
        public string HeadBlockContent { get => throw null; set => throw null; }
        public string HtmlClassFootnotes { get => throw null; set => throw null; }
        public string HtmlClassTitledImages { get => throw null; set => throw null; }
        public static string JoinSections(System.Collections.Generic.List<string> sections) => throw null;
        public static string JoinUserSections(System.Collections.Generic.List<string> sections) => throw null;
        public Markdown() => throw null;
        public bool MarkdownInHtml { get => throw null; set => throw null; }
        public int MaxImageWidth { get => throw null; set => throw null; }
        public bool NewWindowForExternalLinks { get => throw null; set => throw null; }
        public bool NewWindowForLocalLinks { get => throw null; set => throw null; }
        public bool NoFollowLinks { get => throw null; set => throw null; }
        public virtual bool OnGetImageSize(string url, bool TitledImage, out int width, out int height) => throw null;
        public virtual void OnPrepareImage(MarkdownDeep.HtmlTag tag, bool TitledImage) => throw null;
        public virtual void OnPrepareLink(MarkdownDeep.HtmlTag tag) => throw null;
        public virtual string OnQualifyUrl(string url) => throw null;
        public virtual void OnSectionFooter(System.Text.StringBuilder dest, int Index) => throw null;
        public virtual void OnSectionHeader(System.Text.StringBuilder dest, int Index) => throw null;
        public virtual void OnSectionHeadingSuffix(System.Text.StringBuilder dest, int Index) => throw null;
        public System.Func<MarkdownDeep.HtmlTag, bool, bool> PrepareImage;
        public System.Func<MarkdownDeep.HtmlTag, bool> PrepareLink;
        public System.Func<string, string> QualifyUrl;
        public bool SafeMode { get => throw null; set => throw null; }
        public string SectionFooter { get => throw null; set => throw null; }
        public string SectionHeader { get => throw null; set => throw null; }
        public string SectionHeadingSuffix { get => throw null; set => throw null; }
        public static System.Collections.Generic.List<string> SplitSections(string markdown) => throw null;
        public static System.Collections.Generic.List<string> SplitUserSections(string markdown) => throw null;
        public int SummaryLength { get => throw null; set => throw null; }
        public string Transform(string str) => throw null;
        public string Transform(string str, out System.Collections.Generic.Dictionary<string, MarkdownDeep.LinkDefinition> definitions) => throw null;
        public string UrlBaseLocation { get => throw null; set => throw null; }
        public string UrlRootLocation { get => throw null; set => throw null; }
        public bool UserBreaks { get => throw null; set => throw null; }
    }

    // Generated from `MarkdownDeep.MarkdownDeepTransformer` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class MarkdownDeepTransformer : ServiceStack.IMarkdownTransformer
    {
        public MarkdownDeepTransformer() => throw null;
        public string Transform(string markdown) => throw null;
    }

    // Generated from `MarkdownDeep.StringScanner` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class StringScanner
    {
        public System.Char CharAtOffset(int offset) => throw null;
        public bool DoesMatch(System.Char ch) => throw null;
        public bool DoesMatch(int offset, System.Char ch) => throw null;
        public bool DoesMatch(string str) => throw null;
        public bool DoesMatchAny(System.Char[] chars) => throw null;
        public bool DoesMatchAny(int offset, System.Char[] chars) => throw null;
        public bool DoesMatchI(string str) => throw null;
        public string Extract() => throw null;
        public bool Find(System.Char ch) => throw null;
        public bool Find(string find) => throw null;
        public bool FindAny(System.Char[] chars) => throw null;
        public bool FindI(string find) => throw null;
        public static bool IsLineEnd(System.Char ch) => throw null;
        public static bool IsLineSpace(System.Char ch) => throw null;
        public void Mark() => throw null;
        public void Reset(string str) => throw null;
        public void Reset(string str, int pos) => throw null;
        public void Reset(string str, int pos, int len) => throw null;
        public bool SkipChar(System.Char ch) => throw null;
        public bool SkipEol() => throw null;
        public bool SkipFootnoteID(out string id) => throw null;
        public void SkipForward(int characters) => throw null;
        public bool SkipHtmlEntity(ref string entity) => throw null;
        public bool SkipIdentifier(ref string identifier) => throw null;
        public bool SkipLinespace() => throw null;
        public bool SkipString(string str) => throw null;
        public bool SkipStringI(string str) => throw null;
        public void SkipToEof() => throw null;
        public void SkipToEol() => throw null;
        public void SkipToNextLine() => throw null;
        public bool SkipWhitespace() => throw null;
        public StringScanner() => throw null;
        public StringScanner(string str) => throw null;
        public StringScanner(string str, int pos) => throw null;
        public StringScanner(string str, int pos, int len) => throw null;
        public string Substring(int start) => throw null;
        public string Substring(int start, int len) => throw null;
        public bool bof { get => throw null; }
        public System.Char current { get => throw null; }
        public bool eof { get => throw null; }
        public bool eol { get => throw null; }
        public string input { get => throw null; }
        public int position { get => throw null; set => throw null; }
        public string remainder { get => throw null; }
    }

}
namespace ServiceStack
{
    // Generated from `ServiceStack.AddHeaderAttribute` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class AddHeaderAttribute : ServiceStack.RequestFilterAttribute
    {
        public AddHeaderAttribute() => throw null;
        public AddHeaderAttribute(System.Net.HttpStatusCode status, string statusDescription = default(string)) => throw null;
        public AddHeaderAttribute(string name, string value) => throw null;
        public string CacheControl { get => throw null; set => throw null; }
        public string ContentDisposition { get => throw null; set => throw null; }
        public string ContentEncoding { get => throw null; set => throw null; }
        public string ContentLength { get => throw null; set => throw null; }
        public string ContentType { get => throw null; set => throw null; }
        public string DefaultContentType { get => throw null; set => throw null; }
        public string ETag { get => throw null; set => throw null; }
        public override void Execute(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto) => throw null;
        public string LastModified { get => throw null; set => throw null; }
        public string Location { get => throw null; set => throw null; }
        public string Name { get => throw null; set => throw null; }
        public string SetCookie { get => throw null; set => throw null; }
        public System.Net.HttpStatusCode Status { get => throw null; set => throw null; }
        public int? StatusCode { get => throw null; set => throw null; }
        public string StatusDescription { get => throw null; set => throw null; }
        public string Value { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.AdminDashboard` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class AdminDashboard : ServiceStack.IReturn, ServiceStack.IReturn<ServiceStack.AdminDashboardResponse>
    {
        public AdminDashboard() => throw null;
    }

    // Generated from `ServiceStack.AdminDashboardResponse` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class AdminDashboardResponse : ServiceStack.IHasResponseStatus
    {
        public AdminDashboardResponse() => throw null;
        public ServiceStack.ResponseStatus ResponseStatus { get => throw null; set => throw null; }
        public ServiceStack.ServerStats ServerStats { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.AdminDashboardServices` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class AdminDashboardServices : ServiceStack.Service
    {
        public AdminDashboardServices() => throw null;
        public object Any(ServiceStack.AdminDashboard request) => throw null;
    }

    // Generated from `ServiceStack.AdminProfiling` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class AdminProfiling : ServiceStack.IReturn, ServiceStack.IReturn<ServiceStack.AdminProfilingResponse>
    {
        public AdminProfiling() => throw null;
        public string EventType { get => throw null; set => throw null; }
        public string OrderBy { get => throw null; set => throw null; }
        public bool? Pending { get => throw null; set => throw null; }
        public string SessionId { get => throw null; set => throw null; }
        public int Skip { get => throw null; set => throw null; }
        public string Source { get => throw null; set => throw null; }
        public string Tag { get => throw null; set => throw null; }
        public int? Take { get => throw null; set => throw null; }
        public int? ThreadId { get => throw null; set => throw null; }
        public string TraceId { get => throw null; set => throw null; }
        public string UserAuthId { get => throw null; set => throw null; }
        public bool? WithErrors { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.AdminProfilingResponse` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class AdminProfilingResponse
    {
        public AdminProfilingResponse() => throw null;
        public ServiceStack.ResponseStatus ResponseStatus { get => throw null; set => throw null; }
        public System.Collections.Generic.List<ServiceStack.DiagnosticEntry> Results { get => throw null; set => throw null; }
        public int Total { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.AdminProfilingService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class AdminProfilingService : ServiceStack.Service
    {
        public AdminProfilingService() => throw null;
        public System.Threading.Tasks.Task<object> Any(ServiceStack.AdminProfiling request) => throw null;
    }

    // Generated from `ServiceStack.AdminStatsUtils` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class AdminStatsUtils
    {
        public static System.Collections.Generic.Dictionary<string, System.Int64> ToDictionary(this ServiceStack.Messaging.IMessageHandlerStats stats) => throw null;
    }

    // Generated from `ServiceStack.AdminUi` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null; ServiceStack.Client, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    [System.Flags]
    public enum AdminUi
    {
        All,
        Logging,
        None,
        Users,
        Validation,
    }

    // Generated from `ServiceStack.AlwaysFalseCondition` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class AlwaysFalseCondition : ServiceStack.QueryCondition
    {
        public override string Alias { get => throw null; }
        public AlwaysFalseCondition() => throw null;
        public static ServiceStack.AlwaysFalseCondition Instance;
        public override bool Match(object a, object b) => throw null;
    }

    // Generated from `ServiceStack.AlwaysValidValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class AlwaysValidValidator : ServiceStack.FluentValidation.Validators.NoopPropertyValidator
    {
        public AlwaysValidValidator() => throw null;
        public override System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> Validate(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
    }

    // Generated from `ServiceStack.ApiHandlers` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class ApiHandlers
    {
        public static System.Func<ServiceStack.Web.IHttpRequest, ServiceStack.Host.Handlers.HttpAsyncTaskHandler> Csv(string apiPath) => throw null;
        public static System.Func<ServiceStack.Web.IHttpRequest, ServiceStack.Host.Handlers.HttpAsyncTaskHandler> Generic(string apiPath, string contentType, ServiceStack.RequestAttributes requestAttributes, ServiceStack.Feature feature) => throw null;
        public static System.Func<ServiceStack.Web.IHttpRequest, ServiceStack.Host.Handlers.HttpAsyncTaskHandler> Json(string apiPath) => throw null;
        public static System.Func<ServiceStack.Web.IHttpRequest, ServiceStack.Host.Handlers.HttpAsyncTaskHandler> Jsv(string apiPath) => throw null;
        public static System.Func<ServiceStack.Web.IHttpRequest, ServiceStack.Host.Handlers.HttpAsyncTaskHandler> Xml(string apiPath) => throw null;
    }

    // Generated from `ServiceStack.ApiKeyAuthProviderExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class ApiKeyAuthProviderExtensions
    {
        public static ServiceStack.Auth.IManageApiKeysAsync AssertManageApiKeysAsync(this ServiceStack.ServiceStackHost appHost, ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest)) => throw null;
        public static ServiceStack.Auth.ApiKey GetApiKey(this ServiceStack.Web.IRequest req) => throw null;
    }

    // Generated from `ServiceStack.ApiPages` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ApiPages
    {
        public ApiPages() => throw null;
        public string PageName { get => throw null; set => throw null; }
        public string PathInfo { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.AppHostBase` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public abstract class AppHostBase : ServiceStack.ServiceStackHost, ServiceStack.Configuration.IResolver, ServiceStack.IAppHost, ServiceStack.IAppHostNetCore, ServiceStack.IConfigureServices, ServiceStack.IRequireConfiguration
    {
        public Microsoft.AspNetCore.Builder.IApplicationBuilder App { get => throw null; }
        protected AppHostBase(string serviceName, params System.Reflection.Assembly[] assembliesWithServices) : base(default(string), default(System.Reflection.Assembly[])) => throw null;
        public System.IServiceProvider ApplicationServices { get => throw null; }
        public System.Func<ServiceStack.Host.NetCore.NetCoreRequest, System.Threading.Tasks.Task> BeforeNextMiddleware { get => throw null; set => throw null; }
        public virtual void Bind(Microsoft.AspNetCore.Builder.IApplicationBuilder app) => throw null;
        public static void BindHost(ServiceStack.ServiceStackHost appHost, Microsoft.AspNetCore.Builder.IApplicationBuilder app) => throw null;
        public Microsoft.Extensions.Configuration.IConfiguration Configuration { get => throw null; set => throw null; }
        public virtual void Configure(Microsoft.Extensions.DependencyInjection.IServiceCollection services) => throw null;
        public override void ConfigureLogging() => throw null;
        protected override void Dispose(bool disposing) => throw null;
        public static ServiceStack.Web.IRequest GetOrCreateRequest(Microsoft.AspNetCore.Http.HttpContext httpContext) => throw null;
        public static ServiceStack.Web.IRequest GetOrCreateRequest(Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor) => throw null;
        public override string GetWebRootPath() => throw null;
        public Microsoft.AspNetCore.Hosting.IWebHostEnvironment HostingEnvironment { get => throw null; }
        public bool InjectRequestContext { get => throw null; set => throw null; }
        public override string MapProjectPath(string relativePath) => throw null;
        public System.Func<Microsoft.AspNetCore.Http.HttpContext, System.Threading.Tasks.Task<bool>> NetCoreHandler { get => throw null; set => throw null; }
        public override void OnConfigLoad() => throw null;
        public override string PathBase { get => throw null; set => throw null; }
        public virtual System.Threading.Tasks.Task ProcessRequest(Microsoft.AspNetCore.Http.HttpContext context, System.Func<System.Threading.Tasks.Task> next) => throw null;
        public static void RegisterLicenseFromAppSettings(ServiceStack.Configuration.IAppSettings appSettings) => throw null;
        public override ServiceStack.Web.IRequest TryGetCurrentRequest() => throw null;
    }

    // Generated from `ServiceStack.AppHostExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class AppHostExtensions
    {
        public static System.Collections.Generic.List<ServiceStack.IPlugin> AddIfDebug<T>(this System.Collections.Generic.List<ServiceStack.IPlugin> plugins, T plugin) where T : class, ServiceStack.IPlugin => throw null;
        public static System.Collections.Generic.List<ServiceStack.IPlugin> AddIfNotExists<T>(this System.Collections.Generic.List<ServiceStack.IPlugin> plugins, T plugin) where T : class, ServiceStack.IPlugin => throw null;
        public static System.Collections.Generic.List<ServiceStack.IPlugin> AddIfNotExists<T>(this System.Collections.Generic.List<ServiceStack.IPlugin> plugins, T plugin, System.Action<T> configure) where T : class, ServiceStack.IPlugin => throw null;
        public static void AddPluginsFromAssembly(this ServiceStack.IAppHost appHost, params System.Reflection.Assembly[] assembliesWithPlugins) => throw null;
        public static T AssertPlugin<T>(this ServiceStack.IAppHost appHost) where T : class, ServiceStack.IPlugin => throw null;
        public static void ConfigureOperation<T>(this ServiceStack.IAppHost appHost, System.Action<ServiceStack.Host.Operation> configure) => throw null;
        public static void ConfigureOperations(this ServiceStack.IAppHost appHost, System.Action<ServiceStack.Host.Operation> configure) => throw null;
        public static void ConfigureType<T>(this ServiceStack.IAppHost appHost, System.Action<ServiceStack.MetadataType> configure) => throw null;
        public static void ConfigureTypes(this ServiceStack.IAppHost appHost, System.Action<ServiceStack.MetadataType> configure) => throw null;
        public static void ConfigureTypes(this ServiceStack.IAppHost appHost, System.Action<ServiceStack.MetadataType> configure, System.Predicate<ServiceStack.MetadataType> where) => throw null;
        public static Funq.Container GetContainer(this ServiceStack.IAppHost appHost) => throw null;
        public static T GetPlugin<T>(this ServiceStack.IAppHost appHost) where T : class, ServiceStack.IPlugin => throw null;
        public static bool HasMultiplePlugins<T>(this ServiceStack.IAppHost appHost) where T : class, ServiceStack.IPlugin => throw null;
        public static bool HasPlugin<T>(this ServiceStack.IAppHost appHost) where T : class, ServiceStack.IPlugin => throw null;
        public static string Localize(this string text, ServiceStack.Web.IRequest request = default(ServiceStack.Web.IRequest)) => throw null;
        public static string LocalizeFmt(this string text, ServiceStack.Web.IRequest request, params object[] args) => throw null;
        public static string LocalizeFmt(this string text, params object[] args) => throw null;
        public static bool NotifyStartupException(this ServiceStack.IAppHost appHost, System.Exception ex) => throw null;
        public static bool NotifyStartupException(this ServiceStack.IAppHost appHost, System.Exception ex, string target, string method) => throw null;
        public static void RegisterRequestBinder<TRequest>(this ServiceStack.IAppHost appHost, System.Func<ServiceStack.Web.IRequest, object> binder) => throw null;
        public static void RegisterService<TService>(this ServiceStack.IAppHost appHost, params string[] atRestPaths) => throw null;
        public static void RegisterServices(this ServiceStack.IAppHost appHost, System.Collections.Generic.Dictionary<System.Type, string[]> serviceRoutes) => throw null;
        public static System.Collections.Generic.Dictionary<System.Type, string[]> RemoveService<T>(this System.Collections.Generic.Dictionary<System.Type, string[]> serviceRoutes) => throw null;
        public static string ResolveStaticBaseUrl(this ServiceStack.IAppHost appHost) => throw null;
        public static ServiceStack.IAppHost Start(this ServiceStack.IAppHost appHost, System.Collections.Generic.IEnumerable<string> urlBases) => throw null;
    }

    // Generated from `ServiceStack.AppUtils` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class AppUtils
    {
        public static T DbContextExec<TApplicationDbContext, T>(this System.IServiceProvider services, System.Func<TApplicationDbContext, System.Data.IDbConnection> dbResolver, System.Func<System.Data.IDbConnection, T> fn) => throw null;
        public static System.Collections.Generic.Dictionary<string, object> GetIdentityUserById(this System.Data.IDbConnection db, string userId) => throw null;
        public static System.Collections.Generic.Dictionary<string, object> GetIdentityUserById(this System.Data.IDbConnection db, string userId, string sqlGetUser) => throw null;
        public static T GetIdentityUserById<T>(this System.Data.IDbConnection db, string userId) => throw null;
        public static T GetIdentityUserById<T>(this System.Data.IDbConnection db, string userId, string sqlGetUser) => throw null;
        public static System.Collections.Generic.List<string> GetIdentityUserRolesById(this System.Data.IDbConnection db, string userId) => throw null;
        public static System.Collections.Generic.List<string> GetIdentityUserRolesById(this System.Data.IDbConnection db, string userId, string sqlGetUserRoles) => throw null;
        public static T NewScope<T>(this System.IServiceProvider services, System.Func<Microsoft.Extensions.DependencyInjection.IServiceScope, T> fn) => throw null;
        public static System.Collections.Generic.Dictionary<string, object> ToObjectDictionary(this System.Data.IDataReader reader, System.Func<string, object, object> mapper = default(System.Func<string, object, object>)) => throw null;
    }

    // Generated from `ServiceStack.ApplyToUtils` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class ApplyToUtils
    {
        public static System.Collections.Generic.Dictionary<ServiceStack.ApplyTo, string> ApplyToVerbs;
        public static ServiceStack.ApplyTo HttpMethodAsApplyTo(this ServiceStack.Web.IRequest req) => throw null;
        public static System.Collections.Generic.Dictionary<string, ServiceStack.ApplyTo> VerbsApplyTo;
    }

    // Generated from `ServiceStack.AsyncContext` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class AsyncContext
    {
        public AsyncContext() => throw null;
        public virtual System.Threading.Tasks.Task ContinueWith(System.Threading.Tasks.Task task, System.Action<System.Threading.Tasks.Task> fn) => throw null;
        public virtual System.Threading.Tasks.Task ContinueWith(System.Threading.Tasks.Task task, System.Action<System.Threading.Tasks.Task> fn, System.Threading.Tasks.TaskContinuationOptions continuationOptions) => throw null;
    }

    // Generated from `ServiceStack.AuthFeature` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class AuthFeature : ServiceStack.IPlugin, ServiceStack.IPostInitPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
    {
        public ServiceStack.AuthFeature AddAuthenticateAliasRoutes() => throw null;
        public ServiceStack.MetaAuthProvider AdminAuthSecretInfo { get => throw null; set => throw null; }
        public void AfterPluginsLoaded(ServiceStack.IAppHost appHost) => throw null;
        public static void AllowAllRedirects(ServiceStack.Web.IRequest req, string redirect) => throw null;
        public System.Func<ServiceStack.Web.IRequest, bool> AllowGetAuthenticateRequests { get => throw null; set => throw null; }
        public System.Collections.Generic.List<ServiceStack.Auth.IAuthEvents> AuthEvents { get => throw null; set => throw null; }
        public AuthFeature(System.Action<ServiceStack.AuthFeature> configure) => throw null;
        public AuthFeature(System.Func<ServiceStack.Auth.IAuthSession> sessionFactory, ServiceStack.Auth.IAuthProvider[] authProviders, string htmlRedirect = default(string)) => throw null;
        public AuthFeature(ServiceStack.Auth.IAuthProvider authProvider) => throw null;
        public AuthFeature(System.Collections.Generic.IEnumerable<ServiceStack.Auth.IAuthProvider> authProviders) => throw null;
        public ServiceStack.Auth.IAuthProvider[] AuthProviders { get => throw null; }
        public System.Func<ServiceStack.Auth.AuthFilterContext, object> AuthResponseDecorator { get => throw null; set => throw null; }
        public ServiceStack.Auth.IAuthSession AuthSecretSession { get => throw null; set => throw null; }
        public bool CreateDigestAuthHashes { get => throw null; set => throw null; }
        public static bool DefaultAllowGetAuthenticateRequests(ServiceStack.Web.IRequest req) => throw null;
        public bool DeleteSessionCookiesOnLogout { get => throw null; set => throw null; }
        public System.Collections.Generic.List<ServiceStack.InputInfo> FormLayout { get => throw null; set => throw null; }
        public bool GenerateNewSessionCookiesOnAuthentication { get => throw null; set => throw null; }
        public string HtmlLogoutRedirect { get => throw null; set => throw null; }
        public string HtmlRedirect { get => throw null; set => throw null; }
        public string HtmlRedirectAccessDenied { get => throw null; set => throw null; }
        public string HtmlRedirectLockout { get => throw null; set => throw null; }
        public string HtmlRedirectLoginWith2Fa { get => throw null; set => throw null; }
        public string HtmlRedirectReturnParam { get => throw null; set => throw null; }
        public bool HtmlRedirectReturnPathOnly { get => throw null; set => throw null; }
        public string Id { get => throw null; set => throw null; }
        public bool IncludeAssignRoleServices { set => throw null; }
        public bool IncludeAuthMetadataProvider { get => throw null; set => throw null; }
        public bool IncludeDefaultLogin { get => throw null; set => throw null; }
        public bool IncludeOAuthTokensInAuthenticateResponse { get => throw null; set => throw null; }
        public bool IncludeRegistrationService { set => throw null; }
        public bool IncludeRolesInAuthenticateResponse { get => throw null; set => throw null; }
        public System.Func<string, bool> IsValidUsernameFn { get => throw null; set => throw null; }
        public int? MaxLoginAttempts { get => throw null; set => throw null; }
        public static void NoExternalRedirects(ServiceStack.Web.IRequest req, string redirect) => throw null;
        public System.Collections.Generic.List<System.Action<ServiceStack.AuthFeature>> OnAfterInit { get => throw null; set => throw null; }
        public System.Func<ServiceStack.Web.IRequest, ServiceStack.Web.IHttpResult> OnAuthenticateValidate { get => throw null; set => throw null; }
        public System.Collections.Generic.List<System.Action<ServiceStack.AuthFeature>> OnBeforeInit { get => throw null; set => throw null; }
        public System.TimeSpan? PermanentSessionExpiry { get => throw null; set => throw null; }
        public ServiceStack.ImagesHandler ProfileImages { get => throw null; set => throw null; }
        public void Register(ServiceStack.IAppHost appHost) => throw null;
        public void RegisterAuthProvider(ServiceStack.Auth.IAuthProvider authProvider) => throw null;
        public void RegisterAuthProviders(System.Collections.Generic.IEnumerable<ServiceStack.Auth.IAuthProvider> providers) => throw null;
        public System.Collections.Generic.List<ServiceStack.IPlugin> RegisterPlugins { get => throw null; set => throw null; }
        public System.Func<ServiceStack.Auth.RegisterFilterContext, object> RegisterResponseDecorator { get => throw null; set => throw null; }
        public ServiceStack.AuthFeature RemoveAuthenticateAliasRoutes() => throw null;
        public bool SaveUserNamesInLowerCase { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<System.Type, string[]> ServiceRoutes { get => throw null; set => throw null; }
        public System.TimeSpan? SessionExpiry { get => throw null; set => throw null; }
        public System.Func<ServiceStack.Auth.IAuthSession> SessionFactory { get => throw null; set => throw null; }
        public System.Type SessionType { get => throw null; }
        public System.Text.RegularExpressions.Regex ValidUserNameRegEx;
        public ServiceStack.Auth.ValidateFn ValidateFn { get => throw null; set => throw null; }
        public System.Action<ServiceStack.Web.IRequest, string> ValidateRedirectLinks { get => throw null; set => throw null; }
        public bool ValidateUniqueEmails { get => throw null; set => throw null; }
        public bool ValidateUniqueUserNames { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.AuthFeatureAccessDeniedHttpHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class AuthFeatureAccessDeniedHttpHandler : ServiceStack.Host.Handlers.ForbiddenHttpHandler
    {
        public AuthFeatureAccessDeniedHttpHandler(ServiceStack.AuthFeature feature) => throw null;
        public override System.Threading.Tasks.Task ProcessRequestAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, string operationName) => throw null;
    }

    // Generated from `ServiceStack.AuthFeatureExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class AuthFeatureExtensions
    {
        public static void DoHtmlRedirect(this ServiceStack.AuthFeature feature, string redirectUrl, ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, bool includeRedirectParam) => throw null;
        public static string GetHtmlRedirect(this ServiceStack.AuthFeature feature) => throw null;
        public static string GetHtmlRedirectUrl(this ServiceStack.AuthFeature feature, ServiceStack.Web.IRequest req) => throw null;
        public static string GetHtmlRedirectUrl(this ServiceStack.AuthFeature feature, ServiceStack.Web.IRequest req, string redirectUrl, bool includeRedirectParam) => throw null;
        public static System.Threading.Tasks.Task HandleFailedAuth(this ServiceStack.Auth.IAuthProvider authProvider, ServiceStack.Auth.IAuthSession session, ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes) => throw null;
        public static bool IsValidUsername(this ServiceStack.AuthFeature feature, string userName) => throw null;
        public static ServiceStack.Web.IHttpResult SuccessAuthResult(this ServiceStack.Web.IHttpResult result, ServiceStack.IServiceBase service, ServiceStack.Auth.IAuthSession session) => throw null;
        public static System.Threading.Tasks.Task<ServiceStack.Web.IHttpResult> SuccessAuthResultAsync(this ServiceStack.Web.IHttpResult result, ServiceStack.IServiceBase service, ServiceStack.Auth.IAuthSession session) => throw null;
        public static System.Text.RegularExpressions.Regex ValidUserNameRegEx;
    }

    // Generated from `ServiceStack.AuthFeatureUnauthorizedHttpHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class AuthFeatureUnauthorizedHttpHandler : ServiceStack.Host.Handlers.HttpAsyncTaskHandler
    {
        public AuthFeatureUnauthorizedHttpHandler(ServiceStack.AuthFeature feature) => throw null;
        public override bool IsReusable { get => throw null; }
        public override System.Threading.Tasks.Task ProcessRequestAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, string operationName) => throw null;
        public override bool RunAsAsync() => throw null;
    }

    // Generated from `ServiceStack.AuthSessionExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class AuthSessionExtensions
    {
        public static void AddAuthToken(this ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens) => throw null;
        public static System.Collections.Generic.List<ServiceStack.Auth.IAuthTokens> GetAuthTokens(this ServiceStack.Auth.IAuthSession session) => throw null;
        public static ServiceStack.Auth.IAuthTokens GetAuthTokens(this ServiceStack.Auth.IAuthSession session, string provider) => throw null;
        public static string GetProfileUrl(this ServiceStack.Auth.IAuthSession authSession, string defaultUrl = default(string)) => throw null;
        public static string GetSafeDisplayName(this ServiceStack.Auth.IAuthSession authSession) => throw null;
        public static System.Threading.Tasks.Task<bool> HasAllPermissionsAsync(this ServiceStack.Auth.IAuthSession session, System.Collections.Generic.ICollection<string> requiredPermissions, ServiceStack.Auth.IAuthRepositoryAsync authRepo, ServiceStack.Web.IRequest req, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static System.Threading.Tasks.Task<bool> HasAllRolesAsync(this ServiceStack.Auth.IAuthSession session, System.Collections.Generic.ICollection<string> requiredRoles, ServiceStack.Auth.IAuthRepositoryAsync authRepo, ServiceStack.Web.IRequest req, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static System.Threading.Tasks.Task<bool> HasAnyPermissionsAsync(this ServiceStack.Auth.IAuthSession session, System.Collections.Generic.ICollection<string> permissions, ServiceStack.Auth.IAuthRepositoryAsync authRepo, ServiceStack.Web.IRequest req, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static System.Threading.Tasks.Task<bool> HasAnyRolesAsync(this ServiceStack.Auth.IAuthSession session, System.Collections.Generic.ICollection<string> roles, ServiceStack.Auth.IAuthRepositoryAsync authRepo, ServiceStack.Web.IRequest req, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static void UpdateFromUserAuthRepo(this ServiceStack.Auth.IAuthSession session, ServiceStack.Web.IRequest req, ServiceStack.Auth.IAuthRepository authRepo = default(ServiceStack.Auth.IAuthRepository)) => throw null;
        public static System.Threading.Tasks.Task UpdateFromUserAuthRepoAsync(this ServiceStack.Auth.IAuthSession session, ServiceStack.Web.IRequest req, ServiceStack.Auth.IAuthRepositoryAsync authRepo = default(ServiceStack.Auth.IAuthRepositoryAsync)) => throw null;
    }

    // Generated from `ServiceStack.AuthUserSession` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class AuthUserSession : ServiceStack.Auth.IAuthSession, ServiceStack.Auth.IAuthSessionExtended, ServiceStack.IMeta
    {
        public string Address { get => throw null; set => throw null; }
        public string Address2 { get => throw null; set => throw null; }
        public System.Collections.Generic.List<string> Audiences { get => throw null; set => throw null; }
        public string AuthProvider { get => throw null; set => throw null; }
        public AuthUserSession() => throw null;
        public System.DateTime? BirthDate { get => throw null; set => throw null; }
        public string BirthDateRaw { get => throw null; set => throw null; }
        public string City { get => throw null; set => throw null; }
        public string Company { get => throw null; set => throw null; }
        public string Country { get => throw null; set => throw null; }
        public System.DateTime CreatedAt { get => throw null; set => throw null; }
        public string Culture { get => throw null; set => throw null; }
        public string DisplayName { get => throw null; set => throw null; }
        public string Dns { get => throw null; set => throw null; }
        public string Email { get => throw null; set => throw null; }
        public bool? EmailConfirmed { get => throw null; set => throw null; }
        public string FacebookUserId { get => throw null; set => throw null; }
        public string FacebookUserName { get => throw null; set => throw null; }
        public string FirstName { get => throw null; set => throw null; }
        public bool FromToken { get => throw null; set => throw null; }
        public string FullName { get => throw null; set => throw null; }
        public string Gender { get => throw null; set => throw null; }
        public virtual System.Collections.Generic.ICollection<string> GetPermissions(ServiceStack.Auth.IAuthRepository authRepo) => throw null;
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetPermissionsAsync(ServiceStack.Auth.IAuthRepositoryAsync authRepo, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public virtual System.Collections.Generic.ICollection<string> GetRoles(ServiceStack.Auth.IAuthRepository authRepo) => throw null;
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetRolesAsync(ServiceStack.Auth.IAuthRepositoryAsync authRepo, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public virtual System.Threading.Tasks.Task<bool> HasAllPermissionsAsync(System.Collections.Generic.ICollection<string> requiredPermissions, ServiceStack.Auth.IAuthRepositoryAsync authRepo, ServiceStack.Web.IRequest req, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public virtual System.Threading.Tasks.Task<bool> HasAllRolesAsync(System.Collections.Generic.ICollection<string> requiredRoles, ServiceStack.Auth.IAuthRepositoryAsync authRepo, ServiceStack.Web.IRequest req, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public virtual System.Threading.Tasks.Task<bool> HasAnyPermissionsAsync(System.Collections.Generic.ICollection<string> permissions, ServiceStack.Auth.IAuthRepositoryAsync authRepo, ServiceStack.Web.IRequest req, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public virtual System.Threading.Tasks.Task<bool> HasAnyRolesAsync(System.Collections.Generic.ICollection<string> roles, ServiceStack.Auth.IAuthRepositoryAsync authRepo, ServiceStack.Web.IRequest req, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public virtual bool HasPermission(string permission, ServiceStack.Auth.IAuthRepository authRepo) => throw null;
        public virtual System.Threading.Tasks.Task<bool> HasPermissionAsync(string permission, ServiceStack.Auth.IAuthRepositoryAsync authRepo, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public virtual bool HasRole(string role, ServiceStack.Auth.IAuthRepository authRepo) => throw null;
        public virtual System.Threading.Tasks.Task<bool> HasRoleAsync(string role, ServiceStack.Auth.IAuthRepositoryAsync authRepo, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public string Hash { get => throw null; set => throw null; }
        public string HomePhone { get => throw null; set => throw null; }
        public string Id { get => throw null; set => throw null; }
        public bool IsAuthenticated { get => throw null; set => throw null; }
        public virtual bool IsAuthorized(string provider) => throw null;
        public string Language { get => throw null; set => throw null; }
        public System.DateTime LastModified { get => throw null; set => throw null; }
        public string LastName { get => throw null; set => throw null; }
        public string MailAddress { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<string, string> Meta { get => throw null; set => throw null; }
        public string MobilePhone { get => throw null; set => throw null; }
        public string Nickname { get => throw null; set => throw null; }
        public virtual void OnAuthenticated(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo) => throw null;
        public virtual System.Threading.Tasks.Task OnAuthenticatedAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public virtual void OnCreated(ServiceStack.Web.IRequest httpReq) => throw null;
        public virtual void OnLoad(ServiceStack.Web.IRequest httpReq) => throw null;
        public virtual void OnLogout(ServiceStack.IServiceBase authService) => throw null;
        public virtual System.Threading.Tasks.Task OnLogoutAsync(ServiceStack.IServiceBase authService, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public virtual void OnRegistered(ServiceStack.Web.IRequest httpReq, ServiceStack.Auth.IAuthSession session, ServiceStack.IServiceBase service) => throw null;
        public virtual System.Threading.Tasks.Task OnRegisteredAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Auth.IAuthSession session, ServiceStack.IServiceBase service, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public System.Collections.Generic.List<string> Permissions { get => throw null; set => throw null; }
        public string PhoneNumber { get => throw null; set => throw null; }
        public bool? PhoneNumberConfirmed { get => throw null; set => throw null; }
        public string PostalCode { get => throw null; set => throw null; }
        public string PrimaryEmail { get => throw null; set => throw null; }
        public string ProfileUrl { get => throw null; set => throw null; }
        public System.Collections.Generic.List<ServiceStack.Auth.IAuthTokens> ProviderOAuthAccess { get => throw null; set => throw null; }
        public string ReferrerUrl { get => throw null; set => throw null; }
        public string RequestTokenSecret { get => throw null; set => throw null; }
        public System.Collections.Generic.List<string> Roles { get => throw null; set => throw null; }
        public string Rsa { get => throw null; set => throw null; }
        public System.Collections.Generic.List<string> Scopes { get => throw null; set => throw null; }
        public string SecurityStamp { get => throw null; set => throw null; }
        public string Sequence { get => throw null; set => throw null; }
        public string Sid { get => throw null; set => throw null; }
        public string State { get => throw null; set => throw null; }
        public System.Int64 Tag { get => throw null; set => throw null; }
        public string TimeZone { get => throw null; set => throw null; }
        public string TwitterScreenName { get => throw null; set => throw null; }
        public string TwitterUserId { get => throw null; set => throw null; }
        public bool? TwoFactorEnabled { get => throw null; set => throw null; }
        public string Type { get => throw null; set => throw null; }
        public string UserAuthId { get => throw null; set => throw null; }
        public string UserAuthName { get => throw null; set => throw null; }
        public string UserName { get => throw null; set => throw null; }
        public virtual ServiceStack.Web.IHttpResult Validate(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo) => throw null;
        public virtual System.Threading.Tasks.Task<ServiceStack.Web.IHttpResult> ValidateAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public string Webpage { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.AuthenticateAttribute` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class AuthenticateAttribute : ServiceStack.RequestFilterAsyncAttribute
    {
        public static void AssertAuthenticated(ServiceStack.Web.IRequest req, object requestDto = default(object), ServiceStack.Auth.IAuthSession session = default(ServiceStack.Auth.IAuthSession), ServiceStack.Auth.IAuthProvider[] authProviders = default(ServiceStack.Auth.IAuthProvider[])) => throw null;
        public static System.Threading.Tasks.Task AssertAuthenticatedAsync(ServiceStack.Web.IRequest req, object requestDto = default(object), ServiceStack.Auth.IAuthSession session = default(ServiceStack.Auth.IAuthSession), ServiceStack.Auth.IAuthProvider[] authProviders = default(ServiceStack.Auth.IAuthProvider[])) => throw null;
        public static bool Authenticate(ServiceStack.Web.IRequest req, object requestDto = default(object), ServiceStack.Auth.IAuthSession session = default(ServiceStack.Auth.IAuthSession), ServiceStack.Auth.IAuthProvider[] authProviders = default(ServiceStack.Auth.IAuthProvider[])) => throw null;
        public static System.Threading.Tasks.Task<bool> AuthenticateAsync(ServiceStack.Web.IRequest req, object requestDto = default(object), ServiceStack.Auth.IAuthSession session = default(ServiceStack.Auth.IAuthSession), ServiceStack.Auth.IAuthProvider[] authProviders = default(ServiceStack.Auth.IAuthProvider[])) => throw null;
        public AuthenticateAttribute() => throw null;
        public AuthenticateAttribute(ServiceStack.ApplyTo applyTo) => throw null;
        public AuthenticateAttribute(ServiceStack.ApplyTo applyTo, string provider) => throw null;
        public AuthenticateAttribute(string provider) => throw null;
        protected bool Equals(ServiceStack.AuthenticateAttribute other) => throw null;
        public override bool Equals(object obj) => throw null;
        public override System.Threading.Tasks.Task ExecuteAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto) => throw null;
        public override int GetHashCode() => throw null;
        protected virtual System.Threading.Tasks.Task HandleShortCircuitedErrors(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto, System.Net.HttpStatusCode statusCode, string statusDescription = default(string)) => throw null;
        public string HtmlRedirect { get => throw null; set => throw null; }
        public string Provider { get => throw null; set => throw null; }
        public static void ThrowInvalidPermission(ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest)) => throw null;
        public static void ThrowInvalidRole(ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest)) => throw null;
        public static void ThrowNotAuthenticated(ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest)) => throw null;
    }

    // Generated from `ServiceStack.AuthenticationHeaderType` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public enum AuthenticationHeaderType
    {
        Basic,
        Digest,
    }

    // Generated from `ServiceStack.AutoCrudOperation` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class AutoCrudOperation
    {
        public static System.Collections.Generic.HashSet<string> All { get => throw null; }
        public static System.Collections.Generic.HashSet<string> ApiBaseTypes { get => throw null; }
        public static string[] ApiCrudInterfaces { get => throw null; }
        public static System.Collections.Generic.HashSet<string> ApiInterfaces { get => throw null; }
        public static string[] ApiMarkerInterfaces { get => throw null; }
        public static string[] ApiQueryBaseTypes { get => throw null; }
        public static string[] ApiReturnInterfaces { get => throw null; }
        public static ServiceStack.AutoQueryDtoType AssertAutoCrudDtoType(System.Type requestType) => throw null;
        public const string Create = default;
        public static System.Collections.Generic.List<string> CrudInterfaceMetadataNames(System.Collections.Generic.List<string> operations = default(System.Collections.Generic.List<string>)) => throw null;
        public static string CrudModel(this ServiceStack.MetadataType type) => throw null;
        public static System.Collections.Generic.List<string> Default { get => throw null; }
        public const string Delete = default;
        public static string FirstGenericArg(this ServiceStack.MetadataTypeName type) => throw null;
        public static ServiceStack.AutoQueryDtoType? GetAutoCrudDtoType(System.Type requestType) => throw null;
        public static ServiceStack.AutoQueryDtoType? GetAutoQueryDtoType(System.Type requestType) => throw null;
        public static ServiceStack.AutoQueryDtoType? GetAutoQueryGenericDefTypes(System.Type requestType, System.Type opType) => throw null;
        public static System.Type GetModelType(System.Type requestType) => throw null;
        public static System.Type GetViewModelType(System.Type requestType, System.Type responseType) => throw null;
        public static bool HasNamedConnection(this ServiceStack.MetadataType type, string name) => throw null;
        public static bool IsAutoQuery(this ServiceStack.MetadataType type) => throw null;
        public static bool IsAutoQuery(this ServiceStack.MetadataType type, string model) => throw null;
        public static bool IsAutoQueryData(this ServiceStack.MetadataType type) => throw null;
        public static bool IsCrud(this ServiceStack.MetadataOperationType op) => throw null;
        public static bool IsCrud(this ServiceStack.MetadataType type) => throw null;
        public static bool IsCrud(this ServiceStack.MetadataType type, string model) => throw null;
        public static bool IsCrudCreate(this ServiceStack.MetadataType type) => throw null;
        public static bool IsCrudCreate(this ServiceStack.MetadataType type, string model) => throw null;
        public static bool IsCrudCreateOrUpdate(this ServiceStack.MetadataType type) => throw null;
        public static bool IsCrudCreateOrUpdate(this ServiceStack.MetadataType type, string model) => throw null;
        public static bool IsCrudDelete(this ServiceStack.MetadataType type) => throw null;
        public static bool IsCrudDelete(this ServiceStack.MetadataType type, string model) => throw null;
        public static bool IsCrudRead(this ServiceStack.MetadataOperationType op) => throw null;
        public static bool IsCrudRead(this ServiceStack.MetadataType type) => throw null;
        public static bool IsCrudRead(this ServiceStack.MetadataType type, string model) => throw null;
        public static bool IsCrudUpdate(this ServiceStack.MetadataType type) => throw null;
        public static bool IsCrudUpdate(this ServiceStack.MetadataType type, string model) => throw null;
        public static bool IsCrudWrite(this ServiceStack.MetadataOperationType op) => throw null;
        public static bool IsCrudWrite(this ServiceStack.MetadataType type) => throw null;
        public static bool IsCrudWrite(this ServiceStack.MetadataType type, string model) => throw null;
        public static bool IsOperation(string operation) => throw null;
        public static bool IsRequestDto(this ServiceStack.MetadataType type) => throw null;
        public const string Patch = default;
        public const string Query = default;
        public static System.Collections.Generic.List<string> Read { get => throw null; }
        public static string[] ReadInterfaces { get => throw null; }
        public const string Save = default;
        public static string ToHttpMethod(System.Type requestType) => throw null;
        public static string ToHttpMethod(string operation) => throw null;
        public static string ToOperation(System.Type genericDef) => throw null;
        public const string Update = default;
        public static System.Collections.Generic.List<string> Write { get => throw null; }
        public static string[] WriteInterfaces { get => throw null; }
    }

    // Generated from `ServiceStack.AutoQueryData` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class AutoQueryData : ServiceStack.IAutoQueryData, ServiceStack.IAutoQueryDataOptions
    {
        public AutoQueryData() => throw null;
        public ServiceStack.QueryDataContext CreateContext(ServiceStack.IQueryData requestDto, System.Collections.Generic.Dictionary<string, string> dynamicParams, ServiceStack.Web.IRequest req) => throw null;
        public ServiceStack.IDataQuery CreateQuery(ServiceStack.IQueryData requestDto, System.Collections.Generic.Dictionary<string, string> dynamicParams, ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest), ServiceStack.IQueryDataSource db = default(ServiceStack.IQueryDataSource)) => throw null;
        public ServiceStack.DataQuery<From> CreateQuery<From, Into>(ServiceStack.IQueryData<From, Into> dto, System.Collections.Generic.Dictionary<string, string> dynamicParams, ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest), ServiceStack.IQueryDataSource db = default(ServiceStack.IQueryDataSource)) => throw null;
        public ServiceStack.DataQuery<From> CreateQuery<From>(ServiceStack.IQueryData<From> dto, System.Collections.Generic.Dictionary<string, string> dynamicParams, ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest), ServiceStack.IQueryDataSource db = default(ServiceStack.IQueryDataSource)) => throw null;
        public bool EnableUntypedQueries { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<string, ServiceStack.QueryDataField> EndsWithConventions { get => throw null; set => throw null; }
        public ServiceStack.IQueryResponse Execute(ServiceStack.IQueryData request, ServiceStack.IDataQuery q, ServiceStack.IQueryDataSource db) => throw null;
        public ServiceStack.QueryResponse<Into> Execute<From, Into>(ServiceStack.IQueryData<From, Into> dto, ServiceStack.DataQuery<From> q, ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest), ServiceStack.IQueryDataSource db = default(ServiceStack.IQueryDataSource)) => throw null;
        public ServiceStack.QueryResponse<From> Execute<From>(ServiceStack.IQueryData<From> dto, ServiceStack.DataQuery<From> q, ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest), ServiceStack.IQueryDataSource db = default(ServiceStack.IQueryDataSource)) => throw null;
        public ServiceStack.IDataQuery Filter(ServiceStack.IDataQuery q, ServiceStack.IQueryData dto, ServiceStack.Web.IRequest req) => throw null;
        public ServiceStack.DataQuery<From> Filter<From>(ServiceStack.IDataQuery q, ServiceStack.IQueryData dto, ServiceStack.Web.IRequest req) => throw null;
        public ServiceStack.IQueryDataSource GetDb(ServiceStack.QueryDataContext ctx, System.Type type) => throw null;
        public ServiceStack.IQueryDataSource GetDb<From>(ServiceStack.QueryDataContext ctx) => throw null;
        public System.Type GetFromType(System.Type requestDtoType) => throw null;
        public ServiceStack.ITypedQueryData GetTypedQuery(System.Type requestDtoType, System.Type fromType) => throw null;
        public ServiceStack.QueryDataFilterDelegate GlobalQueryFilter { get => throw null; set => throw null; }
        public System.Collections.Generic.HashSet<string> IgnoreProperties { get => throw null; set => throw null; }
        public bool IncludeTotal { get => throw null; set => throw null; }
        public int? MaxLimit { get => throw null; set => throw null; }
        public bool OrderByPrimaryKeyOnLimitQuery { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<System.Type, ServiceStack.QueryDataFilterDelegate> QueryFilters { get => throw null; set => throw null; }
        public string RequiredRoleForRawSqlFilters { get => throw null; set => throw null; }
        public ServiceStack.QueryResponse<Into> ResponseFilter<From, Into>(ServiceStack.IQueryDataSource db, ServiceStack.QueryResponse<Into> response, ServiceStack.DataQuery<From> expr, ServiceStack.IQueryData dto) => throw null;
        public System.Collections.Generic.List<System.Action<ServiceStack.QueryDataFilterContext>> ResponseFilters { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<string, ServiceStack.QueryDataField> StartsWithConventions { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.AutoQueryDataExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class AutoQueryDataExtensions
    {
        public static void And<T>(this ServiceStack.IDataQuery q, System.Linq.Expressions.Expression<System.Func<T, object>> fieldExpr, ServiceStack.QueryCondition condition, object value) => throw null;
        public static ServiceStack.DataQuery<From> CreateQuery<From, Into>(this ServiceStack.IAutoQueryData autoQuery, ServiceStack.IQueryData<From, Into> model, ServiceStack.Web.IRequest request, ServiceStack.IQueryDataSource db = default(ServiceStack.IQueryDataSource)) => throw null;
        public static ServiceStack.DataQuery<From> CreateQuery<From>(this ServiceStack.IAutoQueryData autoQuery, ServiceStack.IQueryData<From> model, ServiceStack.Web.IRequest request, ServiceStack.IQueryDataSource db = default(ServiceStack.IQueryDataSource)) => throw null;
        public static ServiceStack.IQueryDataSource<T> MemorySource<T>(this ServiceStack.QueryDataContext ctx, System.Func<System.Collections.Generic.IEnumerable<T>> sourceFn, ServiceStack.Caching.ICacheClient cache, System.TimeSpan? expiresIn = default(System.TimeSpan?), string cacheKey = default(string)) => throw null;
        public static ServiceStack.IQueryDataSource<T> MemorySource<T>(this ServiceStack.QueryDataContext ctx, System.Collections.Generic.IEnumerable<T> source) => throw null;
        public static void Or<T>(this ServiceStack.IDataQuery q, System.Linq.Expressions.Expression<System.Func<T, object>> fieldExpr, ServiceStack.QueryCondition condition, object value) => throw null;
        public static ServiceStack.QueryDataField ToField(this ServiceStack.QueryDataFieldAttribute attr, System.Reflection.PropertyInfo pi, ServiceStack.AutoQueryDataFeature feature) => throw null;
        public static T WithAudit<T>(this T row, ServiceStack.Web.IRequest req, System.DateTime? date = default(System.DateTime?)) where T : ServiceStack.AuditBase => throw null;
        public static T WithAudit<T>(this T row, string by, System.DateTime? date = default(System.DateTime?)) where T : ServiceStack.AuditBase => throw null;
    }

    // Generated from `ServiceStack.AutoQueryDataFeature` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class AutoQueryDataFeature : ServiceStack.IPlugin, ServiceStack.IPostInitPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
    {
        public ServiceStack.AutoQueryDataFeature AddDataSource(System.Type type, System.Func<ServiceStack.QueryDataContext, ServiceStack.IQueryDataSource> dataSourceFactory) => throw null;
        public ServiceStack.AutoQueryDataFeature AddDataSource<T>(System.Func<ServiceStack.QueryDataContext, ServiceStack.IQueryDataSource<T>> dataSourceFactory) => throw null;
        public ServiceStack.AutoQueryDataFeature AddDataSource<T>(System.Func<ServiceStack.QueryDataContext, ServiceStack.IQueryDataSource> dataSourceFactory) => throw null;
        public void AfterPluginsLoaded(ServiceStack.IAppHost appHost) => throw null;
        public AutoQueryDataFeature() => throw null;
        public System.Type AutoQueryServiceBaseType { get => throw null; set => throw null; }
        public System.Collections.Generic.List<ServiceStack.QueryCondition> Conditions;
        public System.Collections.Generic.Dictionary<string, ServiceStack.QueryCondition> ConditionsAliases;
        public System.Collections.Concurrent.ConcurrentDictionary<System.Type, System.Func<ServiceStack.QueryDataContext, ServiceStack.IQueryDataSource>> DataSources { get => throw null; set => throw null; }
        public bool EnableAutoQueryViewer { get => throw null; set => throw null; }
        public bool EnableUntypedQueries { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<string, ServiceStack.QueryDataField> EndsWithConventions;
        public System.Action<System.Reflection.Emit.TypeBuilder, System.Reflection.Emit.MethodBuilder, System.Type> GenerateServiceFilter { get => throw null; set => throw null; }
        public System.Func<ServiceStack.QueryDataContext, ServiceStack.IQueryDataSource> GetDataSource(System.Type type) => throw null;
        public ServiceStack.QueryDataFilterDelegate GlobalQueryFilter { get => throw null; set => throw null; }
        public string Id { get => throw null; set => throw null; }
        public System.Collections.Generic.HashSet<string> IgnoreProperties { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<string, string> ImplicitConventions;
        public void IncludeAggregates(ServiceStack.QueryDataFilterContext ctx) => throw null;
        public bool IncludeTotal { get => throw null; set => throw null; }
        public System.Collections.Generic.HashSet<System.Reflection.Assembly> LoadFromAssemblies { get => throw null; set => throw null; }
        public int? MaxLimit { get => throw null; set => throw null; }
        public bool OrderByPrimaryKeyOnPagedQuery { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<System.Type, ServiceStack.QueryDataFilterDelegate> QueryFilters { get => throw null; set => throw null; }
        public void Register(ServiceStack.IAppHost appHost) => throw null;
        public ServiceStack.AutoQueryDataFeature RegisterQueryFilter<Request>(System.Action<ServiceStack.IDataQuery, Request, ServiceStack.Web.IRequest> filterFn) => throw null;
        public System.Collections.Generic.List<System.Action<ServiceStack.QueryDataFilterContext>> ResponseFilters { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<string, ServiceStack.QueryDataField> StartsWithConventions;
    }

    // Generated from `ServiceStack.AutoQueryDataServiceBase` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public abstract class AutoQueryDataServiceBase : ServiceStack.Service
    {
        public ServiceStack.IAutoQueryData AutoQuery { get => throw null; set => throw null; }
        protected AutoQueryDataServiceBase() => throw null;
        public virtual object Exec<From, Into>(ServiceStack.IQueryData<From, Into> dto) => throw null;
        public virtual object Exec<From>(ServiceStack.IQueryData<From> dto) => throw null;
    }

    // Generated from `ServiceStack.AutoQueryDataServiceSource` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class AutoQueryDataServiceSource
    {
        public static System.Collections.Generic.List<object> GetResults(object response) => throw null;
        public static System.Collections.Generic.IEnumerable<T> GetResults<T>(object response) => throw null;
        public static ServiceStack.MemoryDataSource<T> ServiceSource<T>(this ServiceStack.QueryDataContext ctx, object requestDto) => throw null;
        public static ServiceStack.QueryDataSource<T> ServiceSource<T>(this ServiceStack.QueryDataContext ctx, object requestDto, ServiceStack.Caching.ICacheClient cache, System.TimeSpan? expiresIn = default(System.TimeSpan?), string cacheKey = default(string)) => throw null;
    }

    // Generated from `ServiceStack.AutoQueryDtoType` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public struct AutoQueryDtoType
    {
        // Stub generator skipped constructor 
        public AutoQueryDtoType(System.Type genericType, System.Type genericDefType) => throw null;
        public System.Type GenericDefType { get => throw null; }
        public System.Type GenericType { get => throw null; }
        public bool IsRead { get => throw null; }
        public bool IsWrite { get => throw null; }
        public System.Type ModelIntoType { get => throw null; }
        public System.Type ModelType { get => throw null; }
        public string Operation { get => throw null; }
    }

    // Generated from `ServiceStack.AutoQueryMetadata` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class AutoQueryMetadata : ServiceStack.IReturn, ServiceStack.IReturn<ServiceStack.AutoQueryMetadataResponse>
    {
        public AutoQueryMetadata() => throw null;
    }

    // Generated from `ServiceStack.AutoQueryMetadataFeature` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class AutoQueryMetadataFeature : ServiceStack.IPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
    {
        public AutoQueryMetadataFeature() => throw null;
        public ServiceStack.AutoQueryViewerConfig AutoQueryViewerConfig { get => throw null; set => throw null; }
        public System.Collections.Generic.List<System.Type> ExportTypes { get => throw null; set => throw null; }
        public string Id { get => throw null; set => throw null; }
        public int? MaxLimit { get => throw null; set => throw null; }
        public System.Action<ServiceStack.AutoQueryMetadataResponse> MetadataFilter { get => throw null; set => throw null; }
        public void Register(ServiceStack.IAppHost appHost) => throw null;
    }

    // Generated from `ServiceStack.AutoQueryMetadataResponse` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class AutoQueryMetadataResponse : ServiceStack.IMeta
    {
        public AutoQueryMetadataResponse() => throw null;
        public ServiceStack.AutoQueryViewerConfig Config { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<string, string> Meta { get => throw null; set => throw null; }
        public System.Collections.Generic.List<ServiceStack.AutoQueryOperation> Operations { get => throw null; set => throw null; }
        public ServiceStack.ResponseStatus ResponseStatus { get => throw null; set => throw null; }
        public System.Collections.Generic.List<ServiceStack.MetadataType> Types { get => throw null; set => throw null; }
        public ServiceStack.AutoQueryViewerUserInfo UserInfo { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.AutoQueryMetadataService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class AutoQueryMetadataService : ServiceStack.Service
    {
        public System.Threading.Tasks.Task<object> AnyAsync(ServiceStack.AutoQueryMetadata request) => throw null;
        public AutoQueryMetadataService() => throw null;
        public ServiceStack.NativeTypes.INativeTypesMetadata NativeTypesMetadata { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.AutoQueryOperation` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class AutoQueryOperation : ServiceStack.IMeta
    {
        public AutoQueryOperation() => throw null;
        public string From { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<string, string> Meta { get => throw null; set => throw null; }
        public string Request { get => throw null; set => throw null; }
        public System.Collections.Generic.List<ServiceStack.MetadataRoute> Routes { get => throw null; set => throw null; }
        public string To { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.AutoQueryViewerConfig` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class AutoQueryViewerConfig : ServiceStack.AppInfo
    {
        public AutoQueryViewerConfig() => throw null;
        public string DefaultSearchField { get => throw null; set => throw null; }
        public string DefaultSearchText { get => throw null; set => throw null; }
        public string DefaultSearchType { get => throw null; set => throw null; }
        public string[] Formats { get => throw null; set => throw null; }
        public System.Collections.Generic.List<ServiceStack.AutoQueryConvention> ImplicitConventions { get => throw null; set => throw null; }
        public bool IsPublic { get => throw null; set => throw null; }
        public int? MaxLimit { get => throw null; set => throw null; }
        public bool OnlyShowAnnotatedServices { get => throw null; set => throw null; }
        public string ServiceBaseUrl { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.AutoQueryViewerUserInfo` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class AutoQueryViewerUserInfo : ServiceStack.IMeta
    {
        public AutoQueryViewerUserInfo() => throw null;
        public bool IsAuthenticated { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<string, string> Meta { get => throw null; set => throw null; }
        public int QueryCount { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.BootstrapScripts` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class BootstrapScripts : ServiceStack.Script.ScriptMethods
    {
        public BootstrapScripts() => throw null;
        public ServiceStack.IRawString ValidationSuccess(ServiceStack.Script.ScriptScopeContext scope, string message) => throw null;
        public ServiceStack.IRawString ValidationSuccess(ServiceStack.Script.ScriptScopeContext scope, string message, System.Collections.Generic.Dictionary<string, object> divAttrs) => throw null;
        public ServiceStack.IRawString formControl(ServiceStack.Script.ScriptScopeContext scope, object inputAttrs, string tagName, object inputOptions) => throw null;
        public ServiceStack.IRawString formInput(ServiceStack.Script.ScriptScopeContext scope, object args) => throw null;
        public ServiceStack.IRawString formInput(ServiceStack.Script.ScriptScopeContext scope, object inputAttrs, object inputOptions) => throw null;
        public ServiceStack.IRawString formSelect(ServiceStack.Script.ScriptScopeContext scope, object args) => throw null;
        public ServiceStack.IRawString formSelect(ServiceStack.Script.ScriptScopeContext scope, object inputAttrs, object inputOptions) => throw null;
        public ServiceStack.IRawString formTextarea(ServiceStack.Script.ScriptScopeContext scope, object args) => throw null;
        public ServiceStack.IRawString formTextarea(ServiceStack.Script.ScriptScopeContext scope, object inputAttrs, object inputOptions) => throw null;
        public ServiceStack.IRawString nav(ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public ServiceStack.IRawString nav(ServiceStack.Script.ScriptScopeContext scope, System.Collections.Generic.List<ServiceStack.NavItem> navItems) => throw null;
        public ServiceStack.IRawString nav(ServiceStack.Script.ScriptScopeContext scope, System.Collections.Generic.List<ServiceStack.NavItem> navItems, System.Collections.Generic.Dictionary<string, object> options) => throw null;
        public ServiceStack.IRawString navButtonGroup(ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public ServiceStack.IRawString navButtonGroup(ServiceStack.Script.ScriptScopeContext scope, System.Collections.Generic.List<ServiceStack.NavItem> navItems) => throw null;
        public ServiceStack.IRawString navButtonGroup(ServiceStack.Script.ScriptScopeContext scope, System.Collections.Generic.List<ServiceStack.NavItem> navItems, System.Collections.Generic.Dictionary<string, object> options) => throw null;
        public ServiceStack.IRawString navLink(ServiceStack.Script.ScriptScopeContext scope, ServiceStack.NavItem navItem) => throw null;
        public ServiceStack.IRawString navLink(ServiceStack.Script.ScriptScopeContext scope, ServiceStack.NavItem navItem, System.Collections.Generic.Dictionary<string, object> options) => throw null;
        public ServiceStack.IRawString navbar(ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public ServiceStack.IRawString navbar(ServiceStack.Script.ScriptScopeContext scope, System.Collections.Generic.List<ServiceStack.NavItem> navItems) => throw null;
        public ServiceStack.IRawString navbar(ServiceStack.Script.ScriptScopeContext scope, System.Collections.Generic.List<ServiceStack.NavItem> navItems, System.Collections.Generic.Dictionary<string, object> options) => throw null;
        public ServiceStack.IRawString validationSummary(ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public ServiceStack.IRawString validationSummary(ServiceStack.Script.ScriptScopeContext scope, System.Collections.IEnumerable exceptFields) => throw null;
        public ServiceStack.IRawString validationSummary(ServiceStack.Script.ScriptScopeContext scope, System.Collections.IEnumerable exceptFields, object htmlAttrs) => throw null;
    }

    // Generated from `ServiceStack.CacheClientExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class CacheClientExtensions
    {
        // Generated from `ServiceStack.CacheClientExtensions+ValidCache` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public struct ValidCache
        {
            public bool IsValid { get => throw null; }
            public System.DateTime LastModified { get => throw null; }
            public static ServiceStack.CacheClientExtensions.ValidCache NotValid;
            // Stub generator skipped constructor 
            public ValidCache(bool isValid, System.DateTime lastModified) => throw null;
        }


        public static object Cache(this ServiceStack.Caching.ICacheClient cache, string cacheKey, object responseDto, ServiceStack.Web.IRequest req, System.TimeSpan? expireCacheIn = default(System.TimeSpan?)) => throw null;
        public static System.Threading.Tasks.Task<object> CacheAsync(this ServiceStack.Caching.ICacheClientAsync cache, string cacheKey, object responseDto, ServiceStack.Web.IRequest req, System.TimeSpan? expireCacheIn = default(System.TimeSpan?), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static void ClearCaches(this ServiceStack.Caching.ICacheClient cache, params string[] cacheKeys) => throw null;
        public static System.Threading.Tasks.Task ClearCachesAsync(this ServiceStack.Caching.ICacheClientAsync cache, string[] cacheKeys, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static System.Collections.Generic.IEnumerable<string> GetAllKeys(this ServiceStack.Caching.ICacheClient cache) => throw null;
        public static System.Collections.Generic.IAsyncEnumerable<string> GetAllKeysAsync(this ServiceStack.Caching.ICacheClientAsync cache) => throw null;
        public static string GetCacheKeyForCompressed(string cacheKeySerialized, string compressionType) => throw null;
        public static string GetCacheKeyForSerialized(string cacheKey, string mimeType, string modifiers) => throw null;
        public static System.DateTime? GetDate(this ServiceStack.Web.IRequest req) => throw null;
        public static System.DateTime? GetIfModifiedSince(this ServiceStack.Web.IRequest req) => throw null;
        public static System.Collections.Generic.IEnumerable<string> GetKeysByPattern(this ServiceStack.Caching.ICacheClient cache, string pattern) => throw null;
        public static System.Collections.Generic.IAsyncEnumerable<string> GetKeysByPatternAsync(this ServiceStack.Caching.ICacheClientAsync cache, string pattern) => throw null;
        public static System.Collections.Generic.IEnumerable<string> GetKeysStartingWith(this ServiceStack.Caching.ICacheClient cache, string prefix) => throw null;
        public static System.Collections.Generic.IAsyncEnumerable<string> GetKeysStartingWithAsync(this ServiceStack.Caching.ICacheClientAsync cache, string prefix) => throw null;
        public static T GetOrCreate<T>(this ServiceStack.Caching.ICacheClient cache, string key, System.Func<T> createFn) => throw null;
        public static T GetOrCreate<T>(this ServiceStack.Caching.ICacheClient cache, string key, System.TimeSpan expiresIn, System.Func<T> createFn) => throw null;
        public static System.Threading.Tasks.Task<T> GetOrCreateAsync<T>(this ServiceStack.Caching.ICacheClientAsync cache, string key, System.Func<System.Threading.Tasks.Task<T>> createFn) => throw null;
        public static System.Threading.Tasks.Task<T> GetOrCreateAsync<T>(this ServiceStack.Caching.ICacheClientAsync cache, string key, System.TimeSpan expiresIn, System.Func<System.Threading.Tasks.Task<T>> createFn) => throw null;
        public static System.TimeSpan? GetTimeToLive(this ServiceStack.Caching.ICacheClient cache, string key) => throw null;
        public static bool HasValidCache(this ServiceStack.Caching.ICacheClient cache, ServiceStack.Web.IRequest req, string cacheKey, System.DateTime? checkLastModified, out System.DateTime? lastModified) => throw null;
        public static System.Threading.Tasks.Task<ServiceStack.CacheClientExtensions.ValidCache> HasValidCacheAsync(this ServiceStack.Caching.ICacheClientAsync cache, ServiceStack.Web.IRequest req, string cacheKey, System.DateTime? checkLastModified, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static void RemoveByPattern(this ServiceStack.Caching.ICacheClient cacheClient, string pattern) => throw null;
        public static System.Threading.Tasks.Task RemoveByPatternAsync(this ServiceStack.Caching.ICacheClientAsync cacheClient, string pattern, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static void RemoveByRegex(this ServiceStack.Caching.ICacheClient cacheClient, string regex) => throw null;
        public static System.Threading.Tasks.Task RemoveByRegexAsync(this ServiceStack.Caching.ICacheClientAsync cacheClient, string regex) => throw null;
        public static object ResolveFromCache(this ServiceStack.Caching.ICacheClient cache, string cacheKey, ServiceStack.Web.IRequest req) => throw null;
        public static System.Threading.Tasks.Task<object> ResolveFromCacheAsync(this ServiceStack.Caching.ICacheClientAsync cache, string cacheKey, ServiceStack.Web.IRequest req, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static void Set<T>(this ServiceStack.Caching.ICacheClient cache, string cacheKey, T value, System.TimeSpan? expireCacheIn) => throw null;
        public static System.Threading.Tasks.Task SetAsync<T>(this ServiceStack.Caching.ICacheClientAsync cache, string cacheKey, T value, System.TimeSpan? expireCacheIn, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
    }

    // Generated from `ServiceStack.CacheControl` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    [System.Flags]
    public enum CacheControl
    {
        MustRevalidate,
        NoCache,
        NoStore,
        NoTransform,
        None,
        Private,
        ProxyRevalidate,
        Public,
    }

    // Generated from `ServiceStack.CacheInfo` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class CacheInfo
    {
        public System.TimeSpan? Age { get => throw null; set => throw null; }
        public ServiceStack.CacheControl CacheControl { get => throw null; set => throw null; }
        public CacheInfo() => throw null;
        public string CacheKey { get => throw null; }
        public string ETag { get => throw null; set => throw null; }
        public System.TimeSpan? ExpiresIn { get => throw null; set => throw null; }
        public string KeyBase { get => throw null; set => throw null; }
        public string KeyModifiers { get => throw null; set => throw null; }
        public System.DateTime? LastModified { get => throw null; set => throw null; }
        public bool LocalCache { get => throw null; set => throw null; }
        public System.TimeSpan? MaxAge { get => throw null; set => throw null; }
        public bool NoCompression { get => throw null; set => throw null; }
        public bool VaryByUser { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.CacheInfoExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class CacheInfoExtensions
    {
        public static ServiceStack.CacheInfo ToCacheInfo(this ServiceStack.HttpResult httpResult) => throw null;
    }

    // Generated from `ServiceStack.CacheResponseAttribute` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class CacheResponseAttribute : ServiceStack.RequestFilterAsyncAttribute
    {
        public ServiceStack.CacheControl CacheControl { get => throw null; set => throw null; }
        public CacheResponseAttribute() => throw null;
        public int Duration { get => throw null; set => throw null; }
        public override System.Threading.Tasks.Task ExecuteAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto) => throw null;
        public bool LocalCache { get => throw null; set => throw null; }
        public int MaxAge { get => throw null; set => throw null; }
        public bool NoCompression { get => throw null; set => throw null; }
        public string[] VaryByHeaders { get => throw null; set => throw null; }
        public string[] VaryByRoles { get => throw null; set => throw null; }
        public bool VaryByUser { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.CacheResponseExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class CacheResponseExtensions
    {
        public static System.Threading.Tasks.Task<bool> HandleValidCache(this ServiceStack.Web.IRequest req, ServiceStack.CacheInfo cacheInfo, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static string LastModifiedKey(this ServiceStack.CacheInfo cacheInfo) => throw null;
    }

    // Generated from `ServiceStack.CancellableRequestService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class CancellableRequestService : ServiceStack.Service
    {
        public object Any(ServiceStack.CancelRequest request) => throw null;
        public CancellableRequestService() => throw null;
    }

    // Generated from `ServiceStack.CancellableRequestsExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class CancellableRequestsExtensions
    {
        public static ServiceStack.ICancellableRequest CreateCancellableRequest(this ServiceStack.Web.IRequest req) => throw null;
        public static ServiceStack.ICancellableRequest GetCancellableRequest(this ServiceStack.Web.IRequest req, string tag) => throw null;
    }

    // Generated from `ServiceStack.CancellableRequestsFeature` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class CancellableRequestsFeature : ServiceStack.IPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
    {
        public string AtPath { get => throw null; set => throw null; }
        public CancellableRequestsFeature() => throw null;
        public string Id { get => throw null; set => throw null; }
        public void Register(ServiceStack.IAppHost appHost) => throw null;
    }

    // Generated from `ServiceStack.CaseInsensitiveEqualCondition` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class CaseInsensitiveEqualCondition : ServiceStack.QueryCondition
    {
        public override string Alias { get => throw null; }
        public CaseInsensitiveEqualCondition() => throw null;
        public static ServiceStack.CaseInsensitiveEqualCondition Instance;
        public override bool Match(object a, object b) => throw null;
    }

    // Generated from `ServiceStack.CaseInsensitiveInCollectionCondition` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class CaseInsensitiveInCollectionCondition : ServiceStack.QueryCondition, ServiceStack.IQueryMultiple
    {
        public override string Alias { get => throw null; }
        public CaseInsensitiveInCollectionCondition() => throw null;
        public static ServiceStack.CaseInsensitiveInCollectionCondition Instance;
        public override bool Match(object a, object b) => throw null;
    }

    // Generated from `ServiceStack.ClientCanSwapTemplatesAttribute` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ClientCanSwapTemplatesAttribute : ServiceStack.RequestFilterAttribute
    {
        public ClientCanSwapTemplatesAttribute() => throw null;
        public override void Execute(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto) => throw null;
    }

    // Generated from `ServiceStack.CompareTypeUtils` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class CompareTypeUtils
    {
        public static object Add(object a, object b) => throw null;
        public static object Aggregate(System.Collections.IEnumerable source, System.Func<object, object, object> fn, object seed = default(object)) => throw null;
        public static double? CoerceDouble(object o) => throw null;
        public static System.Int64? CoerceLong(object o) => throw null;
        public static string CoerceString(object o) => throw null;
        public static int CompareTo(object a, object b) => throw null;
        public static object Max(object a, object b) => throw null;
        public static object Min(object a, object b) => throw null;
        public static object Sum(System.Collections.IEnumerable values) => throw null;
    }

    // Generated from `ServiceStack.CompressResponseAttribute` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class CompressResponseAttribute : ServiceStack.ResponseFilterAsyncAttribute
    {
        public CompressResponseAttribute() => throw null;
        public override System.Threading.Tasks.Task ExecuteAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object response) => throw null;
    }

    // Generated from `ServiceStack.CompressedFileResult` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class CompressedFileResult : ServiceStack.Web.IHasOptions, ServiceStack.Web.IStreamWriterAsync
    {
        public const int Adler32ChecksumLength = default;
        public CompressedFileResult(string filePath) => throw null;
        public CompressedFileResult(string filePath, string compressionType) => throw null;
        public CompressedFileResult(string filePath, string compressionType, string contentMimeType) => throw null;
        public const string DefaultContentType = default;
        public string FilePath { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<string, string> Headers { get => throw null; set => throw null; }
        public System.Collections.Generic.IDictionary<string, string> Options { get => throw null; }
        public System.Threading.Tasks.Task WriteToAsync(System.IO.Stream responseStream, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
    }

    // Generated from `ServiceStack.CompressedResult` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class CompressedResult : ServiceStack.Web.IHasOptions, ServiceStack.Web.IHttpResult, ServiceStack.Web.IStreamWriterAsync
    {
        public CompressedResult(System.Byte[] contents) => throw null;
        public CompressedResult(System.Byte[] contents, string compressionType) => throw null;
        public CompressedResult(System.Byte[] contents, string compressionType, string contentMimeType) => throw null;
        public string ContentType { get => throw null; set => throw null; }
        public System.Byte[] Contents { get => throw null; }
        public System.Collections.Generic.List<System.Net.Cookie> Cookies { get => throw null; }
        public const string DefaultContentType = default;
        public System.Collections.Generic.Dictionary<string, string> Headers { get => throw null; }
        public System.DateTime? LastModified { set => throw null; }
        public System.Collections.Generic.IDictionary<string, string> Options { get => throw null; }
        public int PaddingLength { get => throw null; set => throw null; }
        public ServiceStack.Web.IRequest RequestContext { get => throw null; set => throw null; }
        public object Response { get => throw null; set => throw null; }
        public ServiceStack.Web.IContentTypeWriter ResponseFilter { get => throw null; set => throw null; }
        public System.Func<System.IDisposable> ResultScope { get => throw null; set => throw null; }
        public int Status { get => throw null; set => throw null; }
        public System.Net.HttpStatusCode StatusCode { get => throw null; set => throw null; }
        public string StatusDescription { get => throw null; set => throw null; }
        public System.Threading.Tasks.Task WriteToAsync(System.IO.Stream responseStream, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
    }

    // Generated from `ServiceStack.ConditionAlias` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class ConditionAlias
    {
        public const string Between = default;
        public const string Contains = default;
        public const string EndsWith = default;
        public const string Equals = default;
        public const string False = default;
        public const string Greater = default;
        public const string GreaterEqual = default;
        public const string In = default;
        public const string Less = default;
        public const string LessEqual = default;
        public const string Like = default;
        public const string NotEqual = default;
        public const string StartsWith = default;
    }

    // Generated from `ServiceStack.ConfigurationErrorsException` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ConfigurationErrorsException : System.Exception
    {
        public ConfigurationErrorsException() => throw null;
        public ConfigurationErrorsException(string message) => throw null;
        public ConfigurationErrorsException(string message, System.Exception innerException) => throw null;
    }

    // Generated from `ServiceStack.ConnectionInfoAttribute` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ConnectionInfoAttribute : ServiceStack.RequestFilterAttribute
    {
        public ConnectionInfoAttribute() => throw null;
        public string ConnectionString { get => throw null; set => throw null; }
        public override void Execute(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto) => throw null;
        public string NamedConnection { get => throw null; set => throw null; }
        public string ProviderName { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.ContainerNetCoreExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class ContainerNetCoreExtensions
    {
        public static Funq.Container AddScoped(this Funq.Container services, System.Type serviceType) => throw null;
        public static Funq.Container AddScoped(this Funq.Container services, System.Type serviceType, System.Type implementationType) => throw null;
        public static Funq.Container AddScoped<TService, TImplementation>(this Funq.Container services) where TImplementation : class, TService where TService : class => throw null;
        public static Funq.Container AddScoped<TService, TImplementation>(this Funq.Container services, System.Func<Funq.Container, TImplementation> implementationFactory) where TImplementation : class, TService where TService : class => throw null;
        public static Funq.Container AddScoped<TService>(this Funq.Container services) where TService : class => throw null;
        public static Funq.Container AddScoped<TService>(this Funq.Container services, System.Func<Funq.Container, TService> implementationFactory) where TService : class => throw null;
        public static Funq.Container AddSingleton(this Funq.Container services, System.Type serviceType) => throw null;
        public static Funq.Container AddSingleton(this Funq.Container services, System.Type serviceType, System.Type implementationType) => throw null;
        public static Funq.Container AddSingleton<TService, TImplementation>(this Funq.Container services) where TImplementation : class, TService where TService : class => throw null;
        public static Funq.Container AddSingleton<TService, TImplementation>(this Funq.Container services, System.Func<Funq.Container, TImplementation> implementationFactory) where TImplementation : class, TService where TService : class => throw null;
        public static Funq.Container AddSingleton<TService>(this Funq.Container services) where TService : class => throw null;
        public static Funq.Container AddSingleton<TService>(this Funq.Container services, System.Func<Funq.Container, TService> implementationFactory) where TService : class => throw null;
        public static Funq.Container AddSingleton<TService>(this Funq.Container services, TService implementationInstance) where TService : class => throw null;
        public static Funq.Container AddTransient(this Funq.Container services, System.Type serviceType) => throw null;
        public static Funq.Container AddTransient(this Funq.Container services, System.Type serviceType, System.Type implementationType) => throw null;
        public static Funq.Container AddTransient<TService, TImplementation>(this Funq.Container services) where TImplementation : class, TService where TService : class => throw null;
        public static Funq.Container AddTransient<TService, TImplementation>(this Funq.Container services, System.Func<Funq.Container, TImplementation> implementationFactory) where TImplementation : class, TService where TService : class => throw null;
        public static Funq.Container AddTransient<TService>(this Funq.Container services) where TService : class => throw null;
        public static Funq.Container AddTransient<TService>(this Funq.Container services, System.Func<Funq.Container, TService> implementationFactory) where TService : class => throw null;
    }

    // Generated from `ServiceStack.ContainerTypeExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class ContainerTypeExtensions
    {
        public static Funq.Container Register(this Funq.Container container, object instance, System.Type asType) => throw null;
        public static void RegisterAutoWiredType(this Funq.Container container, System.Type serviceType, Funq.ReuseScope scope = default(Funq.ReuseScope)) => throw null;
        public static void RegisterAutoWiredType(this Funq.Container container, System.Type serviceType, System.Type inFunqAsType, Funq.ReuseScope scope = default(Funq.ReuseScope)) => throw null;
        public static void RegisterAutoWiredType(this Funq.Container container, string name, System.Type serviceType, Funq.ReuseScope scope = default(Funq.ReuseScope)) => throw null;
        public static void RegisterAutoWiredType(this Funq.Container container, string name, System.Type serviceType, System.Type inFunqAsType, Funq.ReuseScope scope = default(Funq.ReuseScope)) => throw null;
        public static void RegisterAutoWiredTypes(this Funq.Container container, System.Collections.Generic.IEnumerable<System.Type> serviceTypes, Funq.ReuseScope scope = default(Funq.ReuseScope)) => throw null;
    }

    // Generated from `ServiceStack.ContainsCondition` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ContainsCondition : ServiceStack.QueryCondition
    {
        public override string Alias { get => throw null; }
        public ContainsCondition() => throw null;
        public static ServiceStack.ContainsCondition Instance;
        public override bool Match(object a, object b) => throw null;
    }

    // Generated from `ServiceStack.CorsFeature` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class CorsFeature : ServiceStack.IPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
    {
        public System.Collections.Generic.ICollection<string> AllowOriginWhitelist { get => throw null; }
        public bool AutoHandleOptionsRequests { get => throw null; set => throw null; }
        public CorsFeature(System.Collections.Generic.ICollection<string> allowOriginWhitelist, string allowedMethods = default(string), string allowedHeaders = default(string), bool allowCredentials = default(bool), string exposeHeaders = default(string), int? maxAge = default(int?)) => throw null;
        public CorsFeature(string allowedOrigins = default(string), string allowedMethods = default(string), string allowedHeaders = default(string), bool allowCredentials = default(bool), string exposeHeaders = default(string), int? maxAge = default(int?)) => throw null;
        public const string DefaultHeaders = default;
        public const int DefaultMaxAge = default;
        public const string DefaultMethods = default;
        public const string DefaultOrigin = default;
        public string Id { get => throw null; set => throw null; }
        public void Register(ServiceStack.IAppHost appHost) => throw null;
    }

    // Generated from `ServiceStack.CsvOnly` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class CsvOnly : ServiceStack.RequestFilterAttribute
    {
        public CsvOnly() => throw null;
        public override void Execute(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto) => throw null;
    }

    // Generated from `ServiceStack.CsvRequestLogger` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class CsvRequestLogger : ServiceStack.Host.InMemoryRollingRequestLogger
    {
        public CsvRequestLogger(ServiceStack.IO.IVirtualFiles files = default(ServiceStack.IO.IVirtualFiles), string requestLogsPattern = default(string), string errorLogsPattern = default(string), System.TimeSpan? appendEvery = default(System.TimeSpan?)) => throw null;
        public override System.Collections.Generic.List<ServiceStack.RequestLogEntry> GetLatestLogs(int? take) => throw null;
        public string GetLogFilePath(string logFilePattern, System.DateTime forDate) => throw null;
        public override void Log(ServiceStack.Web.IRequest request, object requestDto, object response, System.TimeSpan requestDuration) => throw null;
        protected virtual void OnFlush(object state) => throw null;
        public System.Action<string, System.Exception> OnReadLastEntryError { get => throw null; set => throw null; }
        public System.Action<System.Collections.Generic.List<ServiceStack.RequestLogEntry>, System.Exception> OnWriteLogsError { get => throw null; set => throw null; }
        public virtual void WriteLogs(System.Collections.Generic.List<ServiceStack.RequestLogEntry> logs, string logFile) => throw null;
    }

    // Generated from `ServiceStack.CustomPlugin` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class CustomPlugin : ServiceStack.IPlugin, ServiceStack.IPostInitPlugin, ServiceStack.IPreInitPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
    {
        public void AfterPluginsLoaded(ServiceStack.IAppHost appHost) => throw null;
        public void BeforePluginsLoaded(ServiceStack.IAppHost appHost) => throw null;
        public CustomPlugin() => throw null;
        public CustomPlugin(System.Action<ServiceStack.IAppHost> onRegister) => throw null;
        public CustomPlugin(string id, System.Action<ServiceStack.IAppHost> onRegister) => throw null;
        public string Id { get => throw null; set => throw null; }
        public System.Action<ServiceStack.IAppHost> OnAfterPluginsLoaded { get => throw null; set => throw null; }
        public System.Action<ServiceStack.IAppHost> OnBeforePluginsLoaded { get => throw null; set => throw null; }
        public System.Action<ServiceStack.IAppHost> OnRegister { get => throw null; set => throw null; }
        public void Register(ServiceStack.IAppHost appHost) => throw null;
    }

    // Generated from `ServiceStack.CustomRequestFilter` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class CustomRequestFilter : ServiceStack.IPlugin
    {
        public bool ApplyToMessaging { get => throw null; set => throw null; }
        public CustomRequestFilter(System.Action<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, object> filter) => throw null;
        public void Register(ServiceStack.IAppHost appHost) => throw null;
    }

    // Generated from `ServiceStack.CustomResponseFilter` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class CustomResponseFilter : ServiceStack.IPlugin
    {
        public bool ApplyToMessaging { get => throw null; set => throw null; }
        public CustomResponseFilter(System.Action<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, object> filter) => throw null;
        public void Register(ServiceStack.IAppHost appHost) => throw null;
    }

    // Generated from `ServiceStack.DataConditionExpression` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class DataConditionExpression
    {
        public System.Collections.Generic.IEnumerable<T> Apply<T>(System.Collections.Generic.IEnumerable<T> source, System.Collections.Generic.IEnumerable<T> original) => throw null;
        public DataConditionExpression() => throw null;
        public System.Reflection.PropertyInfo Field { get => throw null; set => throw null; }
        public ServiceStack.GetMemberDelegate FieldGetter { get => throw null; set => throw null; }
        public object GetFieldValue(object instance) => throw null;
        public ServiceStack.QueryCondition QueryCondition { get => throw null; set => throw null; }
        public ServiceStack.QueryTerm Term { get => throw null; set => throw null; }
        public object Value { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.DataQuery<>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class DataQuery<T> : ServiceStack.IDataQuery
    {
        public virtual void AddCondition(ServiceStack.QueryTerm term, System.Reflection.PropertyInfo field, ServiceStack.QueryCondition condition, object value) => throw null;
        public virtual void And(string field, ServiceStack.QueryCondition condition, string value) => throw null;
        public System.Collections.Generic.List<ServiceStack.DataConditionExpression> Conditions { get => throw null; set => throw null; }
        public DataQuery(ServiceStack.QueryDataContext context) => throw null;
        public ServiceStack.IQueryData Dto { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<string, string> DynamicParams { get => throw null; set => throw null; }
        public virtual System.Tuple<System.Type, System.Reflection.PropertyInfo> FirstMatchingField(string field) => throw null;
        public virtual bool HasConditions { get => throw null; }
        public virtual void Join(System.Type joinType, System.Type type) => throw null;
        public virtual void LeftJoin(System.Type joinType, System.Type type) => throw null;
        public virtual void Limit(int? skip, int? take) => throw null;
        public int? Offset { get => throw null; set => throw null; }
        public System.Collections.Generic.HashSet<string> OnlyFields { get => throw null; set => throw null; }
        public virtual void Or(string field, ServiceStack.QueryCondition condition, string value) => throw null;
        public ServiceStack.OrderByExpression OrderBy { get => throw null; set => throw null; }
        public virtual void OrderByFields(params string[] fieldNames) => throw null;
        public virtual void OrderByFieldsDescending(params string[] fieldNames) => throw null;
        public virtual void OrderByPrimaryKey() => throw null;
        public int? Rows { get => throw null; set => throw null; }
        public virtual void Select(string[] fields) => throw null;
        public void Take(int take) => throw null;
    }

    // Generated from `ServiceStack.DefaultRequestAttribute` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class DefaultRequestAttribute : ServiceStack.AttributeBase
    {
        public DefaultRequestAttribute(System.Type requestType) => throw null;
        public System.Type RequestType { get => throw null; set => throw null; }
        public string Verbs { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.DefaultViewAttribute` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class DefaultViewAttribute : ServiceStack.RequestFilterAttribute
    {
        public DefaultViewAttribute() => throw null;
        public DefaultViewAttribute(string view) => throw null;
        public DefaultViewAttribute(string view, string template) => throw null;
        public override void Execute(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto) => throw null;
        public string Template { get => throw null; set => throw null; }
        public string View { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.DeleteFileUploadService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class DeleteFileUploadService : ServiceStack.Service
    {
        public System.Threading.Tasks.Task<object> Delete(ServiceStack.DeleteFileUpload request) => throw null;
        public DeleteFileUploadService() => throw null;
    }

    // Generated from `ServiceStack.DiagnosticEntry` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class DiagnosticEntry
    {
        public string Arg { get => throw null; set => throw null; }
        public System.Collections.Generic.List<System.Int64> ArgLengths { get => throw null; set => throw null; }
        public System.Collections.Generic.List<string> Args { get => throw null; set => throw null; }
        public string Command { get => throw null; set => throw null; }
        public string CommandType { get => throw null; set => throw null; }
        public System.DateTime Date { get => throw null; set => throw null; }
        public DiagnosticEntry() => throw null;
        public System.TimeSpan? Duration { get => throw null; set => throw null; }
        public ServiceStack.ResponseStatus Error { get => throw null; set => throw null; }
        public string EventType { get => throw null; set => throw null; }
        public System.Int64 Id { get => throw null; set => throw null; }
        public string Message { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<string, string> Meta { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<string, object> NamedArgs { get => throw null; set => throw null; }
        public string Operation { get => throw null; set => throw null; }
        public string SessionId { get => throw null; set => throw null; }
        public string Source { get => throw null; set => throw null; }
        public string StackTrace { get => throw null; set => throw null; }
        public string Tag { get => throw null; set => throw null; }
        public int ThreadId { get => throw null; set => throw null; }
        public System.Int64 Timestamp { get => throw null; set => throw null; }
        public string TraceId { get => throw null; set => throw null; }
        public string UserAuthId { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.DisposableTracker` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class DisposableTracker : System.IDisposable
    {
        public void Add(System.IDisposable instance) => throw null;
        public DisposableTracker() => throw null;
        public void Dispose() => throw null;
        public const string HashId = default;
    }

    // Generated from `ServiceStack.DtoUtils` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class DtoUtils
    {
        public static object CreateErrorResponse(object request, System.Exception ex) => throw null;
        public static object CreateErrorResponse(object request, System.Exception ex, ServiceStack.ResponseStatus responseStatus) => throw null;
        public static object CreateErrorResponse(object request, ServiceStack.Validation.ValidationErrorResult validationError) => throw null;
        public static object CreateErrorResponse(string errorCode, string errorMessage, System.Collections.Generic.IEnumerable<ServiceStack.Validation.ValidationErrorField> validationErrors) => throw null;
        public static object CreateResponseDto(object request, ServiceStack.ResponseStatus responseStatus) => throw null;
        public static ServiceStack.ResponseStatus CreateResponseStatus(System.Exception ex, object request = default(object), bool debugMode = default(bool)) => throw null;
        public static ServiceStack.ResponseStatus CreateResponseStatus(string errorCode) => throw null;
        public static ServiceStack.ResponseStatus CreateResponseStatus(string errorCode, string errorMessage) => throw null;
        public static ServiceStack.ResponseStatus CreateSuccessResponse(string message) => throw null;
        public const string ResponseStatusPropertyName = default;
        public static ServiceStack.ResponseStatus ToResponseStatus(this System.Exception exception, object requestDto = default(object)) => throw null;
        public static ServiceStack.ResponseStatus ToResponseStatus(this ServiceStack.Validation.ValidationError validationException) => throw null;
        public static ServiceStack.ResponseStatus ToResponseStatus(this ServiceStack.Validation.ValidationErrorResult validationResult) => throw null;
    }

    // Generated from `ServiceStack.EnableCorsAttribute` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class EnableCorsAttribute : ServiceStack.AttributeBase, ServiceStack.Web.IHasRequestFilterAsync, ServiceStack.Web.IRequestFilterBase
    {
        public bool AutoHandleOptionRequests { get => throw null; set => throw null; }
        public ServiceStack.Web.IRequestFilterBase Copy() => throw null;
        public EnableCorsAttribute(string allowedOrigins = default(string), string allowedMethods = default(string), string allowedHeaders = default(string), bool allowCredentials = default(bool)) => throw null;
        public int Priority { get => throw null; set => throw null; }
        public System.Threading.Tasks.Task RequestFilterAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto) => throw null;
    }

    // Generated from `ServiceStack.EncryptedMessagesFeature` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class EncryptedMessagesFeature : ServiceStack.IPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
    {
        public static System.TimeSpan DefaultMaxMaxRequestAge;
        public EncryptedMessagesFeature() => throw null;
        public static string ErrorInvalidMessage;
        public static string ErrorKeyNotFound;
        public static string ErrorNonceSeen;
        public static string ErrorRequestTooOld;
        public System.Collections.Generic.List<System.Security.Cryptography.RSAParameters> FallbackPrivateKeys { get => throw null; set => throw null; }
        public string Id { get => throw null; set => throw null; }
        public System.TimeSpan MaxRequestAge { get => throw null; set => throw null; }
        public System.Security.Cryptography.RSAParameters? PrivateKey { get => throw null; set => throw null; }
        protected System.Collections.Generic.Dictionary<string, System.Security.Cryptography.RSAParameters> PrivateKeyModulusMap { get => throw null; set => throw null; }
        public string PrivateKeyXml { get => throw null; set => throw null; }
        public string PublicKeyPath { get => throw null; set => throw null; }
        public void Register(ServiceStack.IAppHost appHost) => throw null;
        public static string RequestItemsAuthKey;
        public static string RequestItemsCryptKey;
        public static string RequestItemsIv;
        public static System.Threading.Tasks.Task WriteEncryptedError(ServiceStack.Web.IRequest req, System.Byte[] cryptKey, System.Byte[] authKey, System.Byte[] iv, System.Exception ex, string description = default(string)) => throw null;
    }

    // Generated from `ServiceStack.EncryptedMessagesFeatureExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class EncryptedMessagesFeatureExtensions
    {
        public static bool IsEncryptedMessage(this ServiceStack.Web.IRequest req) => throw null;
    }

    // Generated from `ServiceStack.EncryptedMessagesService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class EncryptedMessagesService : ServiceStack.Service
    {
        public object Any(ServiceStack.EncryptedMessage request) => throw null;
        public object Any(ServiceStack.GetPublicKey request) => throw null;
        public EncryptedMessagesService() => throw null;
    }

    // Generated from `ServiceStack.EndsWithCondition` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class EndsWithCondition : ServiceStack.QueryCondition
    {
        public override string Alias { get => throw null; }
        public EndsWithCondition() => throw null;
        public static ServiceStack.EndsWithCondition Instance;
        public override bool Match(object a, object b) => throw null;
    }

    // Generated from `ServiceStack.EnsureHttpsAttribute` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class EnsureHttpsAttribute : ServiceStack.RequestFilterAttribute
    {
        public EnsureHttpsAttribute() => throw null;
        public override void Execute(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto) => throw null;
        public bool SkipIfDebugMode { get => throw null; set => throw null; }
        public bool SkipIfXForwardedFor { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.EqualsCondition` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class EqualsCondition : ServiceStack.QueryCondition
    {
        public override string Alias { get => throw null; }
        public EqualsCondition() => throw null;
        public static ServiceStack.EqualsCondition Instance;
        public override bool Match(object a, object b) => throw null;
    }

    // Generated from `ServiceStack.ErrorMessages` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class ErrorMessages
    {
        public static string AccessDenied;
        public static string AlreadyRegistered;
        public static string ApiKeyDoesNotExist;
        public static string ApiKeyHasBeenCancelled;
        public static string ApiKeyHasExpired;
        public static string ApiKeyIsInvalid;
        public static string ApiKeyRequiresSecureConnection;
        public static string AppSettingNotFoundFmt;
        public static string AuthRepositoryNotExists;
        public static string CacheFeatureMustBeEnabled;
        public static string ClaimDoesNotExistFmt;
        public static string ConnectionStringNotFoundFmt;
        public static string ConstructorNotFoundForType;
        public static string ContentTypeNotSupportedFmt;
        public static string EmailAlreadyExists;
        public static string EmailAlreadyExistsFmt;
        public static string FileNotExistsFmt;
        public static string HostDoesNotSupportSingletonRequest;
        public static string IllegalUsername;
        public static string InvalidAccessToken;
        public static string InvalidBasicAuthCredentials;
        public static string InvalidPermission;
        public static string InvalidRole;
        public static string InvalidUsernameOrPassword;
        public static string JwtRequiresSecureConnection;
        public static string NoExternalRedirects;
        public static string NotAuthenticated;
        public static string OnlyAllowedInAspNetHosts;
        public static string PasswordsShouldMatch;
        public static string PrimaryKeyRequired;
        public static string RefreshTokenInvalid;
        public static string RegisterUpdatesDisabled;
        public static string RequestAlreadyProcessedFmt;
        public static string Requires2FA;
        public static string SessionIdEmpty;
        public static string ShouldNotRegisterAuthSession;
        public static string SubscriptionForbiddenFmt;
        public static string SubscriptionNotExistsFmt;
        public static string TokenExpired;
        public static string TokenInvalid;
        public static string TokenInvalidAudienceFmt;
        public static string TokenInvalidNotBefore;
        public static string TokenInvalidated;
        public static string UnknownAuthProviderFmt;
        public static string UserAccountLocked;
        public static string UserAlreadyExistsFmt;
        public static string UserForApiKeyDoesNotExist;
        public static string UserNotExists;
        public static string UsernameAlreadyExists;
        public static string UsernameOrEmailRequired;
        public static string WebSudoRequired;
        public static string WindowsAuthFailed;
    }

    // Generated from `ServiceStack.ErrorViewAttribute` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ErrorViewAttribute : ServiceStack.RequestFilterAttribute
    {
        public ErrorViewAttribute() => throw null;
        public ErrorViewAttribute(string fieldName) => throw null;
        public override void Execute(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto) => throw null;
        public string FieldName { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.EventSubscription` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class EventSubscription : ServiceStack.SubscriptionInfo, ServiceStack.IEventSubscription, System.IDisposable
    {
        public void Dispose() => throw null;
        public static int DisposeMaxWaitMs { get => throw null; set => throw null; }
        public EventSubscription(ServiceStack.Web.IResponse response) => throw null;
        public bool IsClosed { get => throw null; }
        public bool IsDisposed { get => throw null; }
        public bool IsLocked { get => throw null; }
        public string JsonArgs { get => throw null; }
        public System.Int64 LastMessageId { get => throw null; }
        public System.DateTime LastPulseAt { get => throw null; set => throw null; }
        public string[] MergedChannels { get => throw null; set => throw null; }
        public System.Action<ServiceStack.IEventSubscription> OnDispose { get => throw null; set => throw null; }
        public System.Action<ServiceStack.IEventSubscription, System.Exception> OnError { get => throw null; set => throw null; }
        public System.Action<ServiceStack.IEventSubscription> OnHungConnection { get => throw null; set => throw null; }
        public System.Action<ServiceStack.IEventSubscription, ServiceStack.Web.IResponse, string> OnPublish { get => throw null; set => throw null; }
        public System.Func<ServiceStack.IEventSubscription, ServiceStack.Web.IResponse, string, System.Threading.Tasks.Task> OnPublishAsync { get => throw null; set => throw null; }
        public System.Action<ServiceStack.IEventSubscription> OnUnsubscribe { get => throw null; set => throw null; }
        public System.Func<ServiceStack.IEventSubscription, System.Threading.Tasks.Task> OnUnsubscribeAsync { get => throw null; set => throw null; }
        public void Publish(string selector) => throw null;
        public void Publish(string selector, string message) => throw null;
        public System.Threading.Tasks.Task PublishAsync(string selector, string message, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public void PublishRaw(string frame) => throw null;
        public System.Threading.Tasks.Task PublishRawAsync(string frame, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public void Pulse() => throw null;
        public void Release() => throw null;
        public ServiceStack.Web.IRequest Request { get => throw null; }
        public ServiceStack.Web.IResponse Response { get => throw null; }
        public static string SerializeDictionary(System.Collections.Generic.IDictionary<string, string> map) => throw null;
        public static string[] UnknownChannel;
        public void Unsubscribe() => throw null;
        public System.Threading.Tasks.Task UnsubscribeAsync() => throw null;
        public void UpdateChannels(string[] channels) => throw null;
        public System.Action<ServiceStack.Web.IResponse, string> WriteEvent { get => throw null; set => throw null; }
        public System.Func<ServiceStack.Web.IResponse, string, System.Threading.CancellationToken, System.Threading.Tasks.Task> WriteEventAsync { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.FileExt` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class FileExt
    {
        public static string[] AllDocuments { get => throw null; set => throw null; }
        public static string[] BinaryDocuments { get => throw null; set => throw null; }
        public static string[] BinaryImages { get => throw null; set => throw null; }
        public static string[] Images { get => throw null; set => throw null; }
        public static string[] Presentations { get => throw null; set => throw null; }
        public static string[] Spreadsheets { get => throw null; set => throw null; }
        public static string[] TextDocuments { get => throw null; set => throw null; }
        public static string[] WebAudios { get => throw null; set => throw null; }
        public static string[] WebFormats { get => throw null; set => throw null; }
        public static string[] WebImages { get => throw null; set => throw null; }
        public static string[] WebVideos { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.FileExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class FileExtensions
    {
        public static bool IsRelativePath(this string relativeOrAbsolutePath) => throw null;
        public static string MapServerPath(this string relativePath) => throw null;
        public static string ReadAllText(this System.IO.FileInfo file) => throw null;
        public static System.Threading.Tasks.Task<string> ReadAllTextAsync(this System.IO.FileInfo file, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static System.Byte[] ReadFully(this System.IO.FileInfo file) => throw null;
        public static System.Threading.Tasks.Task<System.Byte[]> ReadFullyAsync(this System.IO.FileInfo file, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static void SaveTo(this ServiceStack.Web.IHttpFile httpFile, ServiceStack.IO.IVirtualFiles vfs, string filePath) => throw null;
        public static void SaveTo(this ServiceStack.Web.IHttpFile httpFile, string filePath) => throw null;
        public static System.Threading.Tasks.Task SaveToAsync(this ServiceStack.Web.IHttpFile httpFile, ServiceStack.IO.IVirtualFiles vfs, string filePath, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static System.Threading.Tasks.Task SaveToAsync(this ServiceStack.Web.IHttpFile httpFile, string filePath) => throw null;
        public static void WriteTo(this ServiceStack.Web.IHttpFile httpFile, System.IO.Stream stream) => throw null;
        public static System.Threading.Tasks.Task WriteToAsync(this ServiceStack.Web.IHttpFile httpFile, System.IO.Stream stream) => throw null;
    }

    // Generated from `ServiceStack.FilesUploadContext` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public struct FilesUploadContext
    {
        public string DateSegment { get => throw null; }
        public object Dto { get => throw null; }
        public ServiceStack.FilesUploadFeature Feature { get => throw null; }
        public string FileExtension { get => throw null; }
        public string FileName { get => throw null; }
        // Stub generator skipped constructor 
        public FilesUploadContext(ServiceStack.FilesUploadFeature feature, ServiceStack.UploadLocation location, ServiceStack.Web.IRequest request, string fileName) => throw null;
        public T GetDto<T>() => throw null;
        public string GetLocationPath(string relativePath) => throw null;
        public ServiceStack.UploadLocation Location { get => throw null; }
        public ServiceStack.Web.IRequest Request { get => throw null; }
        public ServiceStack.Auth.IAuthSession Session { get => throw null; }
        public string UserAuthId { get => throw null; }
    }

    // Generated from `ServiceStack.FilesUploadErrorMessages` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class FilesUploadErrorMessages
    {
        public string BadRequest { get => throw null; set => throw null; }
        public string ExceededMaxFileBytesFmt { get => throw null; set => throw null; }
        public string ExceededMaxFileCountFmt { get => throw null; set => throw null; }
        public string ExceededMinFileBytesFmt { get => throw null; set => throw null; }
        public string FileNotExists { get => throw null; set => throw null; }
        public FilesUploadErrorMessages() => throw null;
        public string InvalidFileExtensionFmt { get => throw null; set => throw null; }
        public string NoCreateAccess { get => throw null; set => throw null; }
        public string NoDeleteAccess { get => throw null; set => throw null; }
        public string NoReadAccess { get => throw null; set => throw null; }
        public string NoUpdateAccess { get => throw null; set => throw null; }
        public string UnknownLocationFmt { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.FilesUploadFeature` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class FilesUploadFeature : ServiceStack.IPlugin, ServiceStack.IPreInitPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
    {
        public ServiceStack.UploadLocation AssertLocation(string name, ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest)) => throw null;
        public string BasePath { get => throw null; set => throw null; }
        public void BeforePluginsLoaded(ServiceStack.IAppHost appHost) => throw null;
        public static object DefaultFileResult(ServiceStack.Web.IRequest req, ServiceStack.IO.IVirtualFile file) => throw null;
        public System.Threading.Tasks.Task<bool> DeleteFileAsync(ServiceStack.UploadLocation location, ServiceStack.Web.IRequest req, ServiceStack.Auth.IAuthSession session, string vfsPath) => throw null;
        public ServiceStack.FilesUploadErrorMessages Errors { get => throw null; set => throw null; }
        public System.Func<ServiceStack.Web.IRequest, ServiceStack.IO.IVirtualFile, object> FileResult { get => throw null; set => throw null; }
        public FilesUploadFeature(params ServiceStack.UploadLocation[] locations) => throw null;
        public FilesUploadFeature(string basePath, params ServiceStack.UploadLocation[] locations) => throw null;
        public System.Threading.Tasks.Task<ServiceStack.IO.IVirtualFile> GetFileAsync(ServiceStack.UploadLocation location, ServiceStack.Web.IRequest req, ServiceStack.Auth.IAuthSession session, string vfsPath) => throw null;
        public ServiceStack.UploadLocation GetLocation(string name) => throw null;
        public ServiceStack.UploadLocation GetLocationFromProperty(System.Type requestType, string propName) => throw null;
        public string Id { get => throw null; }
        public ServiceStack.UploadLocation[] Locations { get => throw null; set => throw null; }
        public void Register(ServiceStack.IAppHost appHost) => throw null;
        public System.Threading.Tasks.Task ReplaceFileAsync(ServiceStack.UploadLocation location, ServiceStack.Web.IRequest req, ServiceStack.Auth.IAuthSession session, string vfsPath, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public ServiceStack.ResolvedPath ResolveUploadFilePath(ServiceStack.UploadLocation location, ServiceStack.Web.IRequest req, ServiceStack.Web.IHttpFile file) => throw null;
        public System.Threading.Tasks.Task<string> UploadFileAsync(ServiceStack.UploadLocation location, ServiceStack.Web.IRequest req, ServiceStack.Auth.IAuthSession session, ServiceStack.Web.IHttpFile file, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public void ValidateFileUpload(ServiceStack.UploadLocation location, ServiceStack.Web.IRequest req, ServiceStack.Web.IHttpFile file, string vfsPath) => throw null;
    }

    // Generated from `ServiceStack.FilesUploadOperation` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    [System.Flags]
    public enum FilesUploadOperation
    {
        All,
        Create,
        Delete,
        None,
        Read,
        Update,
        Write,
    }

    // Generated from `ServiceStack.FilterExpression` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public abstract class FilterExpression
    {
        public abstract System.Collections.Generic.IEnumerable<T> Apply<T>(System.Collections.Generic.IEnumerable<T> source);
        protected FilterExpression() => throw null;
    }

    // Generated from `ServiceStack.GenericAppHost` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class GenericAppHost : ServiceStack.ServiceStackHost
    {
        public System.Action<ServiceStack.HostConfig> ConfigFilter { get => throw null; set => throw null; }
        public override void Configure(Funq.Container container) => throw null;
        public System.Action<ServiceStack.GenericAppHost> ConfigureAppHost { get => throw null; set => throw null; }
        public System.Action<Funq.Container> ConfigureContainer { get => throw null; set => throw null; }
        public GenericAppHost(params System.Reflection.Assembly[] serviceAssemblies) : base(default(string), default(System.Reflection.Assembly[])) => throw null;
        public override ServiceStack.IServiceGateway GetServiceGateway(ServiceStack.Web.IRequest req) => throw null;
        public override void OnConfigLoad() => throw null;
    }

    // Generated from `ServiceStack.GetFileService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class GetFileService : ServiceStack.Service
    {
        public object Get(ServiceStack.GetFile request) => throw null;
        public GetFileService() => throw null;
    }

    // Generated from `ServiceStack.GetFileUploadService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class GetFileUploadService : ServiceStack.Service
    {
        public System.Threading.Tasks.Task<object> Get(ServiceStack.GetFileUpload request) => throw null;
        public GetFileUploadService() => throw null;
    }

    // Generated from `ServiceStack.GreaterCondition` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class GreaterCondition : ServiceStack.QueryCondition
    {
        public override string Alias { get => throw null; }
        public GreaterCondition() => throw null;
        public static ServiceStack.GreaterCondition Instance;
        public override bool Match(object a, object b) => throw null;
    }

    // Generated from `ServiceStack.GreaterEqualCondition` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class GreaterEqualCondition : ServiceStack.QueryCondition
    {
        public override string Alias { get => throw null; }
        public GreaterEqualCondition() => throw null;
        public static ServiceStack.GreaterEqualCondition Instance;
        public override bool Match(object a, object b) => throw null;
    }

    // Generated from `ServiceStack.HasPermissionsValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class HasPermissionsValidator : ServiceStack.TypeValidator, ServiceStack.IAuthTypeValidator
    {
        public static string DefaultErrorMessage { get => throw null; set => throw null; }
        public HasPermissionsValidator(string[] permissions) : base(default(string), default(string), default(int?)) => throw null;
        public HasPermissionsValidator(string permission) : base(default(string), default(string), default(int?)) => throw null;
        public override System.Threading.Tasks.Task<bool> IsValidAsync(object dto, ServiceStack.Web.IRequest request) => throw null;
        public string[] Permissions { get => throw null; }
        public override System.Threading.Tasks.Task ThrowIfNotValidAsync(object dto, ServiceStack.Web.IRequest request) => throw null;
    }

    // Generated from `ServiceStack.HasRolesValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class HasRolesValidator : ServiceStack.TypeValidator, ServiceStack.IAuthTypeValidator
    {
        public static string DefaultErrorMessage { get => throw null; set => throw null; }
        public HasRolesValidator(string[] roles) : base(default(string), default(string), default(int?)) => throw null;
        public HasRolesValidator(string role) : base(default(string), default(string), default(int?)) => throw null;
        public override System.Threading.Tasks.Task<bool> IsValidAsync(object dto, ServiceStack.Web.IRequest request) => throw null;
        public string[] Roles { get => throw null; }
        public override System.Threading.Tasks.Task ThrowIfNotValidAsync(object dto, ServiceStack.Web.IRequest request) => throw null;
    }

    // Generated from `ServiceStack.HelpMessages` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class HelpMessages
    {
        public static string DefaultRedirectMessage;
        public static string NativeTypesDtoOptionsTip;
    }

    // Generated from `ServiceStack.HostConfig` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class HostConfig
    {
        public System.Collections.Generic.Dictionary<string, System.TimeSpan> AddMaxAgeForStaticMimeTypes { get => throw null; set => throw null; }
        public bool AddRedirectParamsToQueryString { get => throw null; set => throw null; }
        public string AdminAuthSecret { get => throw null; set => throw null; }
        public bool AllowAclUrlReservation { get => throw null; set => throw null; }
        public System.Collections.Generic.HashSet<string> AllowFileExtensions { get => throw null; set => throw null; }
        public System.Collections.Generic.List<string> AllowFilePaths { get => throw null; set => throw null; }
        public bool AllowJsConfig { get => throw null; set => throw null; }
        public bool AllowJsonpRequests { get => throw null; set => throw null; }
        public bool AllowNonHttpOnlyCookies { set => throw null; }
        public bool AllowPartialResponses { get => throw null; set => throw null; }
        public bool AllowRouteContentTypeExtensions { get => throw null; set => throw null; }
        public bool AllowSessionCookies { get => throw null; set => throw null; }
        public bool AllowSessionIdsInHttpParams { get => throw null; set => throw null; }
        public string ApiVersion { get => throw null; set => throw null; }
        public ServiceStack.AppInfo AppInfo { get => throw null; set => throw null; }
        public System.Collections.Generic.HashSet<string> AppendUtf8CharsetOnContentTypes { get => throw null; set => throw null; }
        public ServiceStack.Auth.IAuthSession AuthSecretSession { get => throw null; set => throw null; }
        public bool BufferSyncSerializers { get => throw null; set => throw null; }
        public System.Int64? CompressFilesLargerThanBytes { get => throw null; set => throw null; }
        public System.Collections.Generic.HashSet<string> CompressFilesWithExtensions { get => throw null; set => throw null; }
        public string DebugAspNetHostEnvironment { get => throw null; set => throw null; }
        public string DebugHttpListenerHostEnvironment { get => throw null; set => throw null; }
        public bool DebugMode { get => throw null; set => throw null; }
        public string DefaultContentType { get => throw null; set => throw null; }
        public System.Collections.Generic.List<string> DefaultDocuments { get => throw null; set => throw null; }
        public System.TimeSpan DefaultJsonpCacheExpiration { get => throw null; set => throw null; }
        public string DefaultRedirectPath { get => throw null; set => throw null; }
        public const string DefaultWsdlNamespace = default;
        public bool DisposeDependenciesAfterUse { get => throw null; set => throw null; }
        public System.Collections.Generic.List<System.Type> EmbeddedResourceBaseTypes { get => throw null; set => throw null; }
        public System.Collections.Generic.List<System.Reflection.Assembly> EmbeddedResourceSources { get => throw null; set => throw null; }
        public System.Collections.Generic.HashSet<string> EmbeddedResourceTreatAsFiles { get => throw null; set => throw null; }
        public bool EnableAccessRestrictions { get => throw null; set => throw null; }
        public bool EnableAutoHtmlResponses { get => throw null; set => throw null; }
        public ServiceStack.Feature EnableFeatures { get => throw null; set => throw null; }
        public bool EnableOptimizations { get => throw null; set => throw null; }
        public System.Collections.Generic.List<ServiceStack.Auth.IPasswordHasher> FallbackPasswordHashers { get => throw null; set => throw null; }
        public ServiceStack.Host.FallbackRestPathDelegate FallbackRestPath { get => throw null; set => throw null; }
        public System.Collections.Generic.List<string> ForbiddenPaths { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<string, string> GlobalResponseHeaders { get => throw null; set => throw null; }
        public string HandlerFactoryPath { get => throw null; set => throw null; }
        public HostConfig() => throw null;
        public System.Collections.Generic.Dictionary<string, string> HtmlReplaceTokens { get => throw null; set => throw null; }
        public System.Collections.Generic.HashSet<string> IgnoreFormatsInMetadata { get => throw null; set => throw null; }
        public bool IgnoreWarningsOnAllProperties { get => throw null; set => throw null; }
        public bool IgnoreWarningsOnAutoQueryApis { get => throw null; set => throw null; }
        public System.Collections.Generic.HashSet<string> IgnoreWarningsOnPropertyNames { get => throw null; set => throw null; }
        public static ServiceStack.HostConfig Instance { get => throw null; }
        public System.Text.RegularExpressions.Regex IsMobileRegex { get => throw null; set => throw null; }
        public ServiceStack.Logging.ILogFactory LogFactory { get => throw null; set => throw null; }
        public bool LogUnobservedTaskExceptions { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<System.Type, int> MapExceptionToStatusCode { get => throw null; set => throw null; }
        public string MetadataRedirectPath { get => throw null; set => throw null; }
        public ServiceStack.RequestAttributes MetadataVisibility { get => throw null; set => throw null; }
        public static ServiceStack.HostConfig NewInstance() => throw null;
        public bool OnlySendSessionCookiesSecurely { set => throw null; }
        public string PathBase { get => throw null; set => throw null; }
        public System.Collections.Generic.List<string> PreferredContentTypes { get => throw null; set => throw null; }
        public System.Collections.Generic.HashSet<string> RazorNamespaces { get => throw null; }
        public bool RedirectDirectoriesToTrailingSlashes { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<string, string> RedirectPaths { get => throw null; set => throw null; }
        public bool RedirectToDefaultDocuments { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<string, System.Func<ServiceStack.Web.IHttpRequest, bool>> RequestRules { get => throw null; set => throw null; }
        public static ServiceStack.HostConfig ResetInstance() => throw null;
        public string RestrictAllCookiesToDomain { get => throw null; set => throw null; }
        public bool Return204NoContentForEmptyResponse { get => throw null; set => throw null; }
        public bool ReturnsInnerException { get => throw null; set => throw null; }
        public System.Collections.Generic.List<ServiceStack.Host.RouteNamingConventionDelegate> RouteNamingConventions { get => throw null; set => throw null; }
        public System.Collections.Generic.List<string> ScanSkipPaths { get => throw null; set => throw null; }
        public ServiceStack.Metadata.ServiceEndpointsMetadataConfig ServiceEndpointsMetadataConfig { get => throw null; set => throw null; }
        public static string ServiceStackPath;
        public bool SkipFormDataInCreatingRequest { get => throw null; set => throw null; }
        public string SoapServiceName { get => throw null; set => throw null; }
        public bool? StrictMode { get => throw null; set => throw null; }
        public bool StripApplicationVirtualPath { get => throw null; set => throw null; }
        public bool TreatNonNullableRefTypesAsRequired { get => throw null; set => throw null; }
        public bool UseBclJsonSerializers { get => throw null; set => throw null; }
        public bool UseCamelCase { get => throw null; set => throw null; }
        public bool UseHttpOnlyCookies { get => throw null; set => throw null; }
        public bool UseHttpsLinks { get => throw null; set => throw null; }
        public bool UseJsObject { get => throw null; set => throw null; }
        public bool UseSaltedHash { get => throw null; set => throw null; }
        public bool? UseSameSiteCookies { get => throw null; set => throw null; }
        public bool UseSecureCookies { get => throw null; set => throw null; }
        public string WebHostPhysicalPath { get => throw null; set => throw null; }
        public string WebHostUrl { get => throw null; set => throw null; }
        public bool WriteErrorsToResponse { get => throw null; set => throw null; }
        public string WsdlServiceNamespace { get => throw null; set => throw null; }
        public System.Xml.XmlWriterSettings XmlWriterSettings { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.HostContext` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class HostContext
    {
        public static ServiceStack.ServiceStackHost AppHost { get => throw null; }
        public static ServiceStack.Configuration.IAppSettings AppSettings { get => throw null; }
        public static bool ApplyCustomHandlerRequestFilters(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes) => throw null;
        public static bool ApplyPreRequestFilters(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes) => throw null;
        public static System.Threading.Tasks.Task ApplyRequestFiltersAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, object requestDto) => throw null;
        public static System.Threading.Tasks.Task ApplyResponseFiltersAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, object response) => throw null;
        public static ServiceStack.ServiceStackHost AssertAppHost() => throw null;
        public static T AssertPlugin<T>() where T : class, ServiceStack.IPlugin => throw null;
        public static ServiceStack.AsyncContext Async;
        public static ServiceStack.Caching.ICacheClient Cache { get => throw null; }
        public static ServiceStack.Caching.ICacheClientAsync CacheClientAsync { get => throw null; }
        public static ServiceStack.HostConfig Config { get => throw null; }
        public static void ConfigureAppHost(System.Action<ServiceStack.ServiceStackHost> beforeConfigure = default(System.Action<ServiceStack.ServiceStackHost>), System.Action<ServiceStack.ServiceStackHost> afterConfigure = default(System.Action<ServiceStack.ServiceStackHost>), System.Action<ServiceStack.ServiceStackHost> afterPluginsLoaded = default(System.Action<ServiceStack.ServiceStackHost>), System.Action<ServiceStack.ServiceStackHost> afterAppHostInit = default(System.Action<ServiceStack.ServiceStackHost>)) => throw null;
        public static Funq.Container Container { get => throw null; }
        public static ServiceStack.IO.IVirtualDirectory ContentRootDirectory { get => throw null; }
        public static ServiceStack.Web.IContentTypes ContentTypes { get => throw null; }
        public static ServiceStack.Web.IServiceRunner<TRequest> CreateServiceRunner<TRequest>(ServiceStack.Host.ActionContext actionContext) => throw null;
        public static bool DebugMode { get => throw null; }
        public static string DefaultOperationNamespace { get => throw null; set => throw null; }
        public static ServiceStack.IO.FileSystemVirtualFiles FileSystemVirtualFiles { get => throw null; }
        public static int FindFreeTcpPort(int startingFrom = default(int), int endingAt = default(int)) => throw null;
        public static ServiceStack.Auth.IAuthSession GetAuthSecretSession() => throw null;
        public static ServiceStack.Web.IRequest GetCurrentRequest() => throw null;
        public static string GetDefaultNamespace() => throw null;
        public static T GetPlugin<T>() where T : class, ServiceStack.IPlugin => throw null;
        public static ServiceStack.IO.GistVirtualFiles GistVirtualFiles { get => throw null; }
        public static bool HasFeature(ServiceStack.Feature feature) => throw null;
        public static bool HasPlugin<T>() where T : class, ServiceStack.IPlugin => throw null;
        public static bool HasValidAuthSecret(ServiceStack.Web.IRequest httpReq) => throw null;
        public static bool IsAspNetHost { get => throw null; }
        public static bool IsHttpListenerHost { get => throw null; }
        public static bool IsNetCore { get => throw null; }
        public static ServiceStack.Caching.MemoryCacheClient LocalCache { get => throw null; }
        public static ServiceStack.IO.MemoryVirtualFiles MemoryVirtualFiles { get => throw null; }
        public static ServiceStack.Host.ServiceMetadata Metadata { get => throw null; }
        public static ServiceStack.Metadata.MetadataPagesConfig MetadataPagesConfig { get => throw null; }
        public static System.Threading.Tasks.Task RaiseAndHandleException(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, string operationName, System.Exception ex) => throw null;
        public static System.Threading.Tasks.Task RaiseGatewayException(ServiceStack.Web.IRequest httpReq, object request, System.Exception ex) => throw null;
        public static System.Threading.Tasks.Task<object> RaiseServiceException(ServiceStack.Web.IRequest httpReq, object request, System.Exception ex) => throw null;
        public static System.Threading.Tasks.Task RaiseUncaughtException(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, string operationName, System.Exception ex) => throw null;
        public static void Release(object service) => throw null;
        public static ServiceStack.RequestContext RequestContext { get => throw null; }
        public static void Reset() => throw null;
        public static T Resolve<T>() => throw null;
        public static string ResolveAbsoluteUrl(string virtualPath, ServiceStack.Web.IRequest httpReq) => throw null;
        public static string ResolveLocalizedString(string text, ServiceStack.Web.IRequest request = default(ServiceStack.Web.IRequest)) => throw null;
        public static string ResolvePhysicalPath(string virtualPath, ServiceStack.Web.IRequest httpReq) => throw null;
        public static T ResolveService<T>(ServiceStack.Web.IRequest httpReq) where T : class, ServiceStack.Web.IRequiresRequest => throw null;
        public static T ResolveService<T>(ServiceStack.Web.IRequest httpReq, T service) => throw null;
        public static ServiceStack.IO.IVirtualDirectory RootDirectory { get => throw null; }
        public static ServiceStack.Host.ServiceController ServiceController { get => throw null; }
        public static string ServiceName { get => throw null; }
        public static bool StrictMode { get => throw null; }
        public static bool TestMode { get => throw null; set => throw null; }
        public static ServiceStack.Web.IRequest TryGetCurrentRequest() => throw null;
        public static T TryResolve<T>() => throw null;
        public static System.UnauthorizedAccessException UnauthorizedAccess(ServiceStack.RequestAttributes requestAttrs) => throw null;
        public static ServiceStack.IO.IVirtualPathProvider VirtualFileSources { get => throw null; }
        public static ServiceStack.IO.IVirtualFiles VirtualFiles { get => throw null; }
    }

    // Generated from `ServiceStack.HotReloadFeature` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class HotReloadFeature : ServiceStack.IPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
    {
        public string DefaultPattern { set => throw null; }
        public HotReloadFeature() => throw null;
        public string Id { get => throw null; set => throw null; }
        public void Register(ServiceStack.IAppHost appHost) => throw null;
        public ServiceStack.IO.IVirtualPathProvider VirtualFiles { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.HotReloadFiles` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class HotReloadFiles : ServiceStack.IReturn, ServiceStack.IReturn<ServiceStack.HotReloadPageResponse>
    {
        public string ETag { get => throw null; set => throw null; }
        public HotReloadFiles() => throw null;
        public string Pattern { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.HotReloadFilesService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class HotReloadFilesService : ServiceStack.Service
    {
        public System.Threading.Tasks.Task<ServiceStack.HotReloadPageResponse> Any(ServiceStack.HotReloadFiles request) => throw null;
        public static System.TimeSpan CheckDelay;
        public static string DefaultPattern { get => throw null; set => throw null; }
        public static System.Collections.Generic.List<string> ExcludePatterns { get => throw null; }
        public HotReloadFilesService() => throw null;
        public static System.TimeSpan LongPollDuration;
        public static System.TimeSpan ModifiedDelay;
        public static ServiceStack.IO.IVirtualPathProvider UseVirtualFiles { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.HotReloadPage` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class HotReloadPage : ServiceStack.IReturn, ServiceStack.IReturn<ServiceStack.HotReloadPageResponse>
    {
        public string ETag { get => throw null; set => throw null; }
        public HotReloadPage() => throw null;
        public string Path { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.HotReloadPageResponse` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class HotReloadPageResponse
    {
        public string ETag { get => throw null; set => throw null; }
        public HotReloadPageResponse() => throw null;
        public string LastUpdatedPath { get => throw null; set => throw null; }
        public bool Reload { get => throw null; set => throw null; }
        public ServiceStack.ResponseStatus ResponseStatus { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.HotReloadPageService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class HotReloadPageService : ServiceStack.Service
    {
        public System.Threading.Tasks.Task<ServiceStack.HotReloadPageResponse> Any(ServiceStack.HotReloadPage request) => throw null;
        public static System.TimeSpan CheckDelay;
        public HotReloadPageService() => throw null;
        public static System.TimeSpan LongPollDuration;
        public static System.TimeSpan ModifiedDelay;
        public ServiceStack.Script.ISharpPages Pages { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.HtmlModule` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class HtmlModule
    {
        public string BasePath { get => throw null; set => throw null; }
        public System.Collections.Concurrent.ConcurrentDictionary<string, System.ReadOnlyMemory<System.Byte>> Cache { get => throw null; }
        public string CacheControl { get => throw null; set => throw null; }
        public string DirPath { get => throw null; set => throw null; }
        public System.Collections.Generic.List<string> DynamicPageQueryStrings { get => throw null; set => throw null; }
        public bool? EnableCompression { get => throw null; set => throw null; }
        public bool? EnableHttpCaching { get => throw null; set => throw null; }
        public ServiceStack.HtmlModulesFeature Feature { get => throw null; set => throw null; }
        public System.Func<ServiceStack.IO.IVirtualFile, string> FileContentsResolver { get => throw null; set => throw null; }
        public void Flush() => throw null;
        public System.Collections.Generic.List<ServiceStack.HtmlModules.IHtmlModulesHandler> Handlers { get => throw null; set => throw null; }
        public HtmlModule(string dirPath, string basePath = default(string)) => throw null;
        public string IndexFile { get => throw null; set => throw null; }
        public System.Collections.Generic.List<ServiceStack.HtmlModules.HtmlModuleLine> LineTransformers { get => throw null; set => throw null; }
        public System.Collections.Generic.List<string> PublicPaths { get => throw null; set => throw null; }
        public void Register(ServiceStack.IAppHost appHost) => throw null;
        public System.Collections.Generic.Dictionary<string, System.Func<ServiceStack.HtmlModuleContext, System.ReadOnlyMemory<System.Byte>>> Tokens { get => throw null; set => throw null; }
        public System.ReadOnlyMemory<System.Char> TransformContent(System.ReadOnlyMemory<System.Char> content) => throw null;
        public ServiceStack.IO.IVirtualPathProvider VirtualFiles { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.HtmlModuleContext` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class HtmlModuleContext
    {
        public ServiceStack.ServiceStackHost AppHost { get => throw null; }
        public ServiceStack.IO.IVirtualFile AssertFile(ServiceStack.IO.IVirtualPathProvider vfs, string virtualPath) => throw null;
        public ServiceStack.IO.IVirtualFile AssertFile(string virtualPath) => throw null;
        public System.ReadOnlyMemory<System.Byte> Cache(string key, System.Func<string, System.ReadOnlyMemory<System.Byte>> handler) => throw null;
        public bool DebugMode { get => throw null; }
        public System.Func<ServiceStack.IO.IVirtualFile, string> FileContentsResolver { get => throw null; }
        public HtmlModuleContext(ServiceStack.HtmlModule module, ServiceStack.Web.IRequest request) => throw null;
        public ServiceStack.HtmlModule Module { get => throw null; }
        public ServiceStack.Web.IRequest Request { get => throw null; }
        public ServiceStack.IO.IVirtualPathProvider VirtualFiles { get => throw null; }
    }

    // Generated from `ServiceStack.HtmlModulesFeature` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class HtmlModulesFeature : ServiceStack.IPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
    {
        public string CacheControl { get => throw null; set => throw null; }
        public ServiceStack.HtmlModulesFeature Configure(System.Action<ServiceStack.IAppHost, ServiceStack.HtmlModule> configure) => throw null;
        public const string DefaultCacheControl = default;
        public bool? EnableCompression { get => throw null; set => throw null; }
        public bool? EnableHttpCaching { get => throw null; set => throw null; }
        public System.Func<ServiceStack.IO.IVirtualFile, string> FileContentsResolver { get => throw null; set => throw null; }
        public ServiceStack.HtmlModules.FilesTransformer FilesTransformer { get => throw null; set => throw null; }
        public void Flush() => throw null;
        public System.Collections.Generic.List<ServiceStack.HtmlModules.IHtmlModulesHandler> Handlers { get => throw null; set => throw null; }
        public HtmlModulesFeature(params ServiceStack.HtmlModule[] modules) => throw null;
        public string Id { get => throw null; }
        public bool IgnoreIfError { get => throw null; set => throw null; }
        public bool IncludeHtmlLineTransformers { get => throw null; set => throw null; }
        public System.Collections.Generic.List<ServiceStack.HtmlModule> Modules { get => throw null; set => throw null; }
        public System.Collections.Generic.List<System.Action<ServiceStack.IAppHost, ServiceStack.HtmlModule>> OnConfigure { get => throw null; set => throw null; }
        public void Register(ServiceStack.IAppHost appHost) => throw null;
        public System.Collections.Generic.Dictionary<string, System.Func<ServiceStack.HtmlModuleContext, System.ReadOnlyMemory<System.Byte>>> Tokens { get => throw null; set => throw null; }
        public ServiceStack.IO.IVirtualPathProvider VirtualFiles { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.HtmlOnly` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class HtmlOnly : ServiceStack.RequestFilterAttribute
    {
        public override void Execute(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto) => throw null;
        public HtmlOnly() => throw null;
    }

    // Generated from `ServiceStack.HttpCacheExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class HttpCacheExtensions
    {
        public static bool ETagMatch(this ServiceStack.Web.IRequest req, string eTag) => throw null;
        public static void EndNotModified(this ServiceStack.Web.IResponse res, string description = default(string)) => throw null;
        public static bool Has(this ServiceStack.CacheControl cache, ServiceStack.CacheControl flag) => throw null;
        public static bool HasValidCache(this ServiceStack.Web.IRequest req, System.DateTime? lastModified) => throw null;
        public static bool HasValidCache(this ServiceStack.Web.IRequest req, string eTag) => throw null;
        public static bool HasValidCache(this ServiceStack.Web.IRequest req, string eTag, System.DateTime? lastModified) => throw null;
        public static bool NotModifiedSince(this ServiceStack.Web.IRequest req, System.DateTime? lastModified) => throw null;
        public static bool ShouldAddLastModifiedToOptimizedResults(this ServiceStack.HttpCacheFeature feature) => throw null;
    }

    // Generated from `ServiceStack.HttpCacheFeature` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class HttpCacheFeature : ServiceStack.IPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
    {
        public string BuildCacheControlHeader(ServiceStack.CacheInfo cacheInfo) => throw null;
        public System.Func<string, string> CacheControlFilter { get => throw null; set => throw null; }
        public string CacheControlForOptimizedResults { get => throw null; set => throw null; }
        public System.TimeSpan DefaultExpiresIn { get => throw null; set => throw null; }
        public System.TimeSpan DefaultMaxAge { get => throw null; set => throw null; }
        public bool DisableCaching { get => throw null; set => throw null; }
        public System.Threading.Tasks.Task HandleCacheResponses(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object response) => throw null;
        public HttpCacheFeature() => throw null;
        public string Id { get => throw null; set => throw null; }
        public void Register(ServiceStack.IAppHost appHost) => throw null;
    }

    // Generated from `ServiceStack.HttpError` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class HttpError : System.Exception, ServiceStack.IHasErrorCode, ServiceStack.IHasResponseStatus, ServiceStack.Model.IResponseStatusConvertible, ServiceStack.Web.IHasOptions, ServiceStack.Web.IHttpError, ServiceStack.Web.IHttpResult
    {
        public static System.Exception BadRequest(string message) => throw null;
        public static System.Exception BadRequest(string errorCode, string message) => throw null;
        public static System.Exception Conflict(string message) => throw null;
        public string ContentType { get => throw null; set => throw null; }
        public System.Collections.Generic.List<System.Net.Cookie> Cookies { get => throw null; set => throw null; }
        public string ErrorCode { get => throw null; set => throw null; }
        public static System.Exception ExpectationFailed(string message) => throw null;
        public static System.Exception Forbidden(string message) => throw null;
        public static System.Exception GetException(object responseDto) => throw null;
        public System.Collections.Generic.List<ServiceStack.ResponseError> GetFieldErrors() => throw null;
        public System.Collections.Generic.Dictionary<string, string> Headers { get => throw null; set => throw null; }
        public HttpError() => throw null;
        public HttpError(System.Net.HttpStatusCode statusCode) => throw null;
        public HttpError(System.Net.HttpStatusCode statusCode, System.Exception innerException) => throw null;
        public HttpError(System.Net.HttpStatusCode statusCode, string errorMessage) => throw null;
        public HttpError(System.Net.HttpStatusCode statusCode, string errorCode, string errorMessage) => throw null;
        public HttpError(ServiceStack.IHasResponseStatus responseDto, System.Net.HttpStatusCode statusCode) => throw null;
        public HttpError(ServiceStack.ResponseStatus responseStatus, System.Net.HttpStatusCode statusCode) => throw null;
        public HttpError(int statusCode, string errorCode) => throw null;
        public HttpError(int statusCode, string errorCode, string errorMessage, System.Exception innerException = default(System.Exception)) => throw null;
        public HttpError(object responseDto, System.Net.HttpStatusCode statusCode, string errorCode, string errorMessage) => throw null;
        public HttpError(object responseDto, int statusCode, string errorCode, string errorMessage = default(string), System.Exception innerException = default(System.Exception)) => throw null;
        public HttpError(string message) => throw null;
        public HttpError(string message, System.Exception innerException) => throw null;
        public static System.Exception MethodNotAllowed(string message) => throw null;
        public static System.Exception NotFound(string message) => throw null;
        public static System.Exception NotImplemented(string message) => throw null;
        public System.Collections.Generic.IDictionary<string, string> Options { get => throw null; }
        public int PaddingLength { get => throw null; set => throw null; }
        public static System.Exception PreconditionFailed(string message) => throw null;
        public ServiceStack.Web.IRequest RequestContext { get => throw null; set => throw null; }
        public object Response { get => throw null; set => throw null; }
        public ServiceStack.Web.IContentTypeWriter ResponseFilter { get => throw null; set => throw null; }
        public ServiceStack.ResponseStatus ResponseStatus { get => throw null; set => throw null; }
        public System.Func<System.IDisposable> ResultScope { get => throw null; set => throw null; }
        public static System.Exception ServiceUnavailable(string message) => throw null;
        public string StackTrace { get => throw null; set => throw null; }
        public int Status { get => throw null; set => throw null; }
        public System.Net.HttpStatusCode StatusCode { get => throw null; set => throw null; }
        public string StatusDescription { get => throw null; set => throw null; }
        public ServiceStack.ResponseStatus ToResponseStatus() => throw null;
        public static System.Exception Unauthorized(string message) => throw null;
        public static System.Exception Validation(string errorCode, string errorMessage, string fieldName) => throw null;
    }

    // Generated from `ServiceStack.HttpExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class HttpExtensions
    {
        public static void EndHttpHandlerRequest(this ServiceStack.Web.IResponse httpRes, bool skipHeaders = default(bool), bool skipClose = default(bool), System.Action<ServiceStack.Web.IResponse> afterHeaders = default(System.Action<ServiceStack.Web.IResponse>)) => throw null;
        public static System.Threading.Tasks.Task EndHttpHandlerRequestAsync(this ServiceStack.Web.IResponse httpRes, bool skipHeaders = default(bool), bool skipClose = default(bool), System.Func<ServiceStack.Web.IResponse, System.Threading.Tasks.Task> afterHeaders = default(System.Func<ServiceStack.Web.IResponse, System.Threading.Tasks.Task>)) => throw null;
        public static void EndMqRequest(this ServiceStack.Web.IResponse httpRes, bool skipClose = default(bool)) => throw null;
        public static void EndRequest(this ServiceStack.Web.IResponse httpRes, bool skipHeaders = default(bool)) => throw null;
        public static System.Threading.Tasks.Task EndRequestAsync(this ServiceStack.Web.IResponse httpRes, bool skipHeaders = default(bool), System.Func<ServiceStack.Web.IResponse, System.Threading.Tasks.Task> afterHeaders = default(System.Func<ServiceStack.Web.IResponse, System.Threading.Tasks.Task>)) => throw null;
        public static void EndRequestWithNoContent(this ServiceStack.Web.IResponse httpRes) => throw null;
        public static string ToAbsoluteUri(this ServiceStack.IReturn requestDto, string httpMethod = default(string), string formatFallbackToPredefinedRoute = default(string)) => throw null;
        public static string ToAbsoluteUri(this object requestDto, ServiceStack.Web.IRequest req, string httpMethod = default(string), string formatFallbackToPredefinedRoute = default(string)) => throw null;
        public static string ToAbsoluteUri(this object requestDto, string httpMethod = default(string), string formatFallbackToPredefinedRoute = default(string)) => throw null;
        public static string ToAbsoluteUri(this string relativeUrl, ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest)) => throw null;
    }

    // Generated from `ServiceStack.HttpHandlerFactory` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class HttpHandlerFactory : ServiceStack.Host.IHttpHandlerFactory
    {
        public static string DebugLastHandlerArgs;
        public static ServiceStack.Host.IHttpHandler DefaultHttpHandler;
        public static string DefaultRootFileName;
        public static ServiceStack.Host.IHttpHandler ForbiddenHttpHandler;
        public static ServiceStack.Host.IHttpHandler GetHandler(ServiceStack.Web.IHttpRequest httpReq) => throw null;
        public static ServiceStack.Host.IHttpHandler GetHandlerForPathInfo(ServiceStack.Web.IHttpRequest httpReq, string filePath) => throw null;
        public HttpHandlerFactory() => throw null;
        public static ServiceStack.Host.IHttpHandler InitHandler(ServiceStack.Host.IHttpHandler handler, ServiceStack.Web.IHttpRequest httpReq) => throw null;
        public static ServiceStack.Host.Handlers.RedirectHttpHandler NonRootModeDefaultHttpHandler;
        public static ServiceStack.Host.IHttpHandler NotFoundHttpHandler;
        public void ReleaseHandler(ServiceStack.Host.IHttpHandler handler) => throw null;
        public static bool ShouldAllow(string pathInfo) => throw null;
        public static ServiceStack.Host.IHttpHandler StaticFilesHandler;
        public static string WebHostPhysicalPath;
    }

    // Generated from `ServiceStack.HttpRequestExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class HttpRequestExtensions
    {
        public static bool CanReadRequestBody(this ServiceStack.Web.IRequest req) => throw null;
        public static System.Collections.Generic.Dictionary<string, string> CookiesAsDictionary(this ServiceStack.Web.IRequest httpReq) => throw null;
        public static bool DidReturn304NotModified(this ServiceStack.Web.IRequest httpReq, System.DateTime? dateTime, ServiceStack.Web.IResponse httpRes) => throw null;
        public static void EachRequest<T>(this ServiceStack.Web.IRequest httpReq, System.Action<T> action) => throw null;
        public static string GetAbsolutePath(this ServiceStack.Web.IRequest httpReq) => throw null;
        public static string GetAbsoluteUrl(this ServiceStack.Web.IRequest httpReq, string url) => throw null;
        public static string GetApplicationUrl(this ServiceStack.Web.IRequest httpReq) => throw null;
        public static ServiceStack.RequestAttributes GetAttributes(System.Net.IPAddress ipAddress) => throw null;
        public static ServiceStack.RequestAttributes GetAttributes(this ServiceStack.Web.IRequest request) => throw null;
        public static string GetBaseUrl(this ServiceStack.Web.IRequest httpReq) => throw null;
        public static System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> GetClaims(this ServiceStack.Web.IRequest req) => throw null;
        public static System.Security.Claims.ClaimsPrincipal GetClaimsPrincipal(this ServiceStack.Web.IRequest req) => throw null;
        public static string GetDirectoryPath(this ServiceStack.Web.IRequest request) => throw null;
        public static string GetErrorView(this ServiceStack.Web.IRequest httpReq) => throw null;
        public static System.Collections.Generic.Dictionary<string, string> GetFlattenedRequestParams(this ServiceStack.Web.IRequest request) => throw null;
        public static string GetFormatModifier(this ServiceStack.Web.IRequest httpReq) => throw null;
        public static string GetHttpMethodOverride(this ServiceStack.Web.IRequest httpReq) => throw null;
        public static string GetItemOrCookie(this ServiceStack.Web.IRequest httpReq, string name) => throw null;
        public static string GetJsonpCallback(this ServiceStack.Web.IRequest httpReq) => throw null;
        public static string GetLastPathInfo(this Microsoft.AspNetCore.Http.HttpRequest request) => throw null;
        public static string GetLeftAuthority(this System.Uri uri) => throw null;
        public static string GetOperationName(this Microsoft.AspNetCore.Http.HttpRequest request) => throw null;
        public static string GetOperationNameFromLastPathInfo(string lastPathInfo) => throw null;
        public static System.Type GetOperationType(this ServiceStack.Web.IRequest req) => throw null;
        public static string GetParam(this ServiceStack.Web.IRequest httpReq, string name) => throw null;
        public static string GetParentAbsolutePath(this ServiceStack.Web.IRequest httpReq) => throw null;
        public static string GetParentBaseUrl(this ServiceStack.Web.IRequest request) => throw null;
        public static string GetParentPathUrl(this ServiceStack.Web.IRequest httpReq) => throw null;
        public static string GetPathAndQuery(this Microsoft.AspNetCore.Http.HttpRequest request) => throw null;
        public static string GetPathInfo(string fullPath, string mode, string appPath) => throw null;
        public static string GetPathUrl(this ServiceStack.Web.IRequest httpReq) => throw null;
        public static string GetPhysicalPath(this ServiceStack.Web.IRequest httpReq) => throw null;
        public static string GetQueryStringContentType(this ServiceStack.Web.IRequest httpReq) => throw null;
        public static string GetQueryStringOrForm(this ServiceStack.Web.IRequest httpReq, string name) => throw null;
        public static string GetRawUrl(this ServiceStack.Web.IRequest httpReq) => throw null;
        public static string GetRequestValue(this ServiceStack.Web.IHttpRequest req, string name) => throw null;
        public static string GetResponseContentType(this ServiceStack.Web.IRequest httpReq) => throw null;
        public static string GetReturnUrl(this ServiceStack.Web.IRequest req) => throw null;
        public static ServiceStack.Host.RestPath GetRoute(this ServiceStack.Web.IRequest req) => throw null;
        public static string GetTemplate(this ServiceStack.Web.IRequest httpReq) => throw null;
        public static string GetUrlHostName(this ServiceStack.Web.IRequest httpReq) => throw null;
        public static string GetView(this ServiceStack.Web.IRequest httpReq) => throw null;
        public static ServiceStack.IO.IVirtualNode GetVirtualNode(this ServiceStack.Web.IRequest httpReq) => throw null;
        public static bool HasAnyOfContentTypes(this ServiceStack.Web.IRequest request, params string[] contentTypes) => throw null;
        public static bool HasClaim(this System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, string type, string value) => throw null;
        public static bool HasNotModifiedSince(this ServiceStack.Web.IRequest httpReq, System.DateTime? dateTime) => throw null;
        public static bool HasRole(this System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, string role) => throw null;
        public static bool HasScope(this System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, string scope) => throw null;
        public static string InferBaseUrl(this string absoluteUri, string fromPathInfo = default(string)) => throw null;
        public static bool IsContentType(this ServiceStack.Web.IRequest request, string contentType) => throw null;
        public static bool IsHtml(this ServiceStack.Web.IRequest req) => throw null;
        public static bool IsInLocalSubnet(this System.Net.IPAddress ipAddress) => throw null;
        public static bool IsMultiRequest(this ServiceStack.Web.IRequest req) => throw null;
        public static string NormalizeScheme(this string url, bool useHttps) => throw null;
        public static string ResolveAbsoluteUrl(this ServiceStack.Web.IRequest httpReq, string virtualPath = default(string)) => throw null;
        public static object ResolveItem(this ServiceStack.Web.IRequest httpReq, string itemKey, System.Func<ServiceStack.Web.IRequest, object> resolveFn) => throw null;
        public static string ResolvePathInfoFromMappedPath(string fullPath, string mappedPathRoot) => throw null;
        public static void SetAutoBatchCompletedHeader(this ServiceStack.Web.IRequest req, int completed) => throw null;
        public static void SetErrorView(this ServiceStack.Web.IRequest httpReq, string viewName) => throw null;
        public static void SetRoute(this ServiceStack.Web.IRequest req, ServiceStack.Host.RestPath route) => throw null;
        public static void SetTemplate(this ServiceStack.Web.IRequest httpReq, string templateName) => throw null;
        public static void SetView(this ServiceStack.Web.IRequest httpReq, string viewName) => throw null;
        public static string ToErrorCode(this System.Exception ex) => throw null;
        public static ServiceStack.RequestAttributes ToRequestAttributes(string[] attrNames) => throw null;
        public static int ToStatusCode(this System.Exception ex) => throw null;
        public static ServiceStack.WebServiceException ToWebServiceException(this ServiceStack.HttpError error) => throw null;
        public static ServiceStack.WebServiceException ToWebServiceException(this ServiceStack.FluentValidation.Results.ValidationResult validationResult, object requestDto, ServiceStack.Validation.ValidationFeature feature) => throw null;
        public static bool UseHttps(this ServiceStack.Web.IRequest httpReq) => throw null;
    }

    // Generated from `ServiceStack.HttpResponseExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class HttpResponseExtensions
    {
        public static void AddHeaderLastModified(this ServiceStack.Web.IResponse httpRes, System.DateTime? lastModified) => throw null;
        public static string AddParam(this string url, string key, object val) => throw null;
        public static string AddParam(this string url, string key, string val) => throw null;
        public static Microsoft.AspNetCore.Http.HttpContext AllowSyncIO(this Microsoft.AspNetCore.Http.HttpContext ctx) => throw null;
        public static Microsoft.AspNetCore.Http.HttpRequest AllowSyncIO(this Microsoft.AspNetCore.Http.HttpRequest req) => throw null;
        public static ServiceStack.Web.IRequest AllowSyncIO(this ServiceStack.Web.IRequest req) => throw null;
        public static ServiceStack.Web.IResponse AllowSyncIO(this ServiceStack.Web.IResponse res) => throw null;
        public static void ClearCookies(this ServiceStack.Web.IResponse response) => throw null;
        public static System.Collections.Generic.Dictionary<string, string> CookiesAsDictionary(this ServiceStack.Web.IResponse httpRes) => throw null;
        public static void DeleteCookie(this ServiceStack.Web.IResponse response, string cookieName) => throw null;
        public static void EndWith(this ServiceStack.Web.IResponse res, System.Net.HttpStatusCode code, string description = default(string)) => throw null;
        public static bool IsHttpListener;
        public static bool IsMonoFastCgi;
        public static bool IsNetCore;
        public static void Redirect(this ServiceStack.Web.IResponse httpRes, string url) => throw null;
        public static void RedirectToUrl(this ServiceStack.Web.IResponse httpRes, string url, System.Net.HttpStatusCode redirectStatusCode = default(System.Net.HttpStatusCode)) => throw null;
        public static System.Threading.Tasks.Task ReturnAuthRequired(this ServiceStack.Web.IResponse httpRes) => throw null;
        public static System.Threading.Tasks.Task ReturnAuthRequired(this ServiceStack.Web.IResponse httpRes, ServiceStack.AuthenticationHeaderType AuthType, string authRealm) => throw null;
        public static System.Threading.Tasks.Task ReturnAuthRequired(this ServiceStack.Web.IResponse httpRes, string authRealm) => throw null;
        public static System.Threading.Tasks.Task ReturnFailedAuthentication(this ServiceStack.Auth.IAuthSession session, ServiceStack.Web.IRequest request) => throw null;
        public static void SetCookie(this ServiceStack.Web.IResponse response, System.Net.Cookie cookie) => throw null;
        public static void SetCookie(this ServiceStack.Web.IResponse response, string cookieName, string cookieValue, System.DateTime expiresAt, string path = default(string)) => throw null;
        public static void SetCookie(this ServiceStack.Web.IResponse response, string cookieName, string cookieValue, System.TimeSpan expiresIn, string path = default(string)) => throw null;
        public static string SetParam(this string url, string key, object val) => throw null;
        public static string SetParam(this string url, string key, string val) => throw null;
        public static void SetPermanentCookie(this ServiceStack.Web.IResponse response, string cookieName, string cookieValue) => throw null;
        public static void SetSessionCookie(this ServiceStack.Web.IResponse response, string cookieName, string cookieValue) => throw null;
        public static void TransmitFile(this ServiceStack.Web.IResponse httpRes, string filePath) => throw null;
        public static void Write(this ServiceStack.Web.IResponse response, string contents) => throw null;
        public static System.Threading.Tasks.Task WriteAsync(this ServiceStack.Web.IResponse response, System.ReadOnlyMemory<System.Byte> bytes) => throw null;
        public static System.Threading.Tasks.Task WriteAsync(this ServiceStack.Web.IResponse response, string contents) => throw null;
        public static void WriteFile(this ServiceStack.Web.IResponse httpRes, string filePath) => throw null;
    }

    // Generated from `ServiceStack.HttpResponseExtensionsInternal` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class HttpResponseExtensionsInternal
    {
        public static void ApplyGlobalResponseHeaders(this ServiceStack.Web.IResponse httpRes) => throw null;
        public static bool ShouldWriteGlobalHeaders(ServiceStack.Web.IResponse httpRes) => throw null;
        public static System.Threading.Tasks.Task WriteBytesToResponse(this ServiceStack.Web.IResponse res, System.Byte[] responseBytes, string contentType, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static System.Threading.Tasks.Task WriteError(this ServiceStack.Web.IResponse httpRes, System.Exception ex, int statusCode = default(int), string errorMessage = default(string), string contentType = default(string)) => throw null;
        public static System.Threading.Tasks.Task WriteError(this ServiceStack.Web.IResponse httpRes, ServiceStack.Web.IRequest httpReq, object dto, string errorMessage) => throw null;
        public static System.Threading.Tasks.Task WriteError(this ServiceStack.Web.IResponse httpRes, object dto, string errorMessage) => throw null;
        public static System.Threading.Tasks.Task WriteErrorBody(this ServiceStack.Web.IResponse httpRes, System.Exception ex) => throw null;
        public static System.Threading.Tasks.Task WriteErrorToResponse(this ServiceStack.Web.IResponse httpRes, ServiceStack.Web.IRequest httpReq, string contentType, string operationName, string errorMessage, System.Exception ex, int statusCode) => throw null;
        public static bool WriteToOutputStream(ServiceStack.Web.IResponse response, object result, System.Byte[] bodyPrefix, System.Byte[] bodySuffix) => throw null;
        public static System.Threading.Tasks.Task<bool> WriteToOutputStreamAsync(ServiceStack.Web.IResponse response, object result, System.Byte[] bodyPrefix, System.Byte[] bodySuffix, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static System.Threading.Tasks.Task<bool> WriteToResponse(this ServiceStack.Web.IResponse httpRes, ServiceStack.Web.IRequest httpReq, object result, System.Byte[] bodyPrefix, System.Byte[] bodySuffix, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static System.Threading.Tasks.Task<bool> WriteToResponse(this ServiceStack.Web.IResponse httpRes, ServiceStack.Web.IRequest httpReq, object result, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static System.Threading.Tasks.Task<bool> WriteToResponse(this ServiceStack.Web.IResponse response, object result, ServiceStack.Web.StreamSerializerDelegateAsync defaultAction, ServiceStack.Web.IRequest request, System.Byte[] bodyPrefix, System.Byte[] bodySuffix, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static System.Threading.Tasks.Task<bool> WriteToResponse(this ServiceStack.Web.IResponse httpRes, object result, ServiceStack.Web.StreamSerializerDelegateAsync serializer, ServiceStack.Web.IRequest serializationContext, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static System.Threading.Tasks.Task<bool> WriteToResponse(this ServiceStack.Web.IResponse httpRes, object result, string contentType, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
    }

    // Generated from `ServiceStack.HttpResult` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class HttpResult : ServiceStack.Web.IHasOptions, ServiceStack.Web.IHttpResult, ServiceStack.Web.IPartialWriterAsync, ServiceStack.Web.IStreamWriterAsync, System.IDisposable
    {
        public System.TimeSpan? Age { get => throw null; set => throw null; }
        public bool AllowsPartialResponse { get => throw null; set => throw null; }
        public ServiceStack.CacheControl CacheControl { get => throw null; set => throw null; }
        public string ContentType { get => throw null; set => throw null; }
        public System.Collections.Generic.List<System.Net.Cookie> Cookies { get => throw null; }
        public void DeleteCookie(string name) => throw null;
        public void Dispose() => throw null;
        public string ETag { get => throw null; set => throw null; }
        public System.DateTime? Expires { get => throw null; set => throw null; }
        public System.IO.FileInfo FileInfo { get => throw null; }
        public System.Int64? GetContentLength() => throw null;
        public System.Collections.Generic.Dictionary<string, string> Headers { get => throw null; }
        public HttpResult() => throw null;
        public HttpResult(System.Byte[] responseBytes, string contentType) => throw null;
        public HttpResult(System.IO.FileInfo fileResponse, bool asAttachment) => throw null;
        public HttpResult(System.IO.FileInfo fileResponse, string contentType = default(string), bool asAttachment = default(bool)) => throw null;
        public HttpResult(System.Net.HttpStatusCode statusCode, string statusDescription) => throw null;
        public HttpResult(ServiceStack.IO.IVirtualFile fileResponse, bool asAttachment) => throw null;
        public HttpResult(ServiceStack.IO.IVirtualFile fileResponse, string contentType = default(string), bool asAttachment = default(bool)) => throw null;
        public HttpResult(System.IO.Stream responseStream, string contentType) => throw null;
        public HttpResult(object response) => throw null;
        public HttpResult(object response, System.Net.HttpStatusCode statusCode) => throw null;
        public HttpResult(object response, string contentType) => throw null;
        public HttpResult(object response, string contentType, System.Net.HttpStatusCode statusCode) => throw null;
        public HttpResult(string responseText, string contentType) => throw null;
        public bool IsPartialRequest { get => throw null; }
        public System.DateTime? LastModified { get => throw null; set => throw null; }
        public string Location { set => throw null; }
        public System.TimeSpan? MaxAge { get => throw null; set => throw null; }
        public static ServiceStack.HttpResult NotModified(string description = default(string), ServiceStack.CacheControl? cacheControl = default(ServiceStack.CacheControl?), System.TimeSpan? maxAge = default(System.TimeSpan?), string eTag = default(string), System.DateTime? lastModified = default(System.DateTime?)) => throw null;
        public System.Collections.Generic.IDictionary<string, string> Options { get => throw null; }
        public int PaddingLength { get => throw null; set => throw null; }
        public static ServiceStack.HttpResult Redirect(string newLocationUri, System.Net.HttpStatusCode redirectStatus = default(System.Net.HttpStatusCode)) => throw null;
        public ServiceStack.Web.IRequest RequestContext { get => throw null; set => throw null; }
        public object Response { get => throw null; set => throw null; }
        public ServiceStack.Web.IContentTypeWriter ResponseFilter { get => throw null; set => throw null; }
        public System.IO.Stream ResponseStream { get => throw null; set => throw null; }
        public string ResponseText { get => throw null; }
        public System.Func<System.IDisposable> ResultScope { get => throw null; set => throw null; }
        public void SetCookie(string name, string value, System.DateTime expiresAt, string path, bool secure = default(bool), bool httpOnly = default(bool)) => throw null;
        public void SetCookie(string name, string value, System.TimeSpan expiresIn, string path) => throw null;
        public void SetPermanentCookie(string name, string value) => throw null;
        public void SetPermanentCookie(string name, string value, string path) => throw null;
        public void SetSessionCookie(string name, string value) => throw null;
        public void SetSessionCookie(string name, string value, string path) => throw null;
        public static ServiceStack.HttpResult SoftRedirect(string newLocationUri, object response = default(object)) => throw null;
        public int Status { get => throw null; set => throw null; }
        public static ServiceStack.HttpResult Status201Created(object response, string newLocationUri) => throw null;
        public System.Net.HttpStatusCode StatusCode { get => throw null; set => throw null; }
        public string StatusDescription { get => throw null; set => throw null; }
        public string Template { get => throw null; set => throw null; }
        public static ServiceStack.HttpResult TriggerEvent(object response, string eventName, string value = default(string)) => throw null;
        public string View { get => throw null; set => throw null; }
        public ServiceStack.IO.IVirtualFile VirtualFile { get => throw null; }
        public System.Threading.Tasks.Task WritePartialToAsync(ServiceStack.Web.IResponse response, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public System.Threading.Tasks.Task WriteToAsync(System.IO.Stream responseStream, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
    }

    // Generated from `ServiceStack.HttpResultExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class HttpResultExtensions
    {
        public static ServiceStack.Web.IHttpResult AddCookie(this ServiceStack.Web.IHttpResult httpResult, ServiceStack.Web.IRequest req, System.Net.Cookie cookie) => throw null;
    }

    // Generated from `ServiceStack.HttpResultUtils` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class HttpResultUtils
    {
        public static void AddHttpRangeResponseHeaders(this ServiceStack.Web.IResponse response, System.Int64 rangeStart, System.Int64 rangeEnd, System.Int64 contentLength) => throw null;
        public static object CreateErrorResponse(this ServiceStack.Web.IHttpError httpError) => throw null;
        public static void ExtractHttpRanges(this string rangeHeader, System.Int64 contentLength, out System.Int64 rangeStart, out System.Int64 rangeEnd) => throw null;
        public static object GetDto(this object response) => throw null;
        public static TResponse GetDto<TResponse>(this object response) where TResponse : class => throw null;
        public static object GetResponseDto(this object response) => throw null;
        public static TResponse GetResponseDto<TResponse>(this object response) where TResponse : class => throw null;
        public static bool IsErrorResponse(this object response) => throw null;
    }

    // Generated from `ServiceStack.IAfterInitAppHost` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IAfterInitAppHost
    {
        void AfterInit(ServiceStack.IAppHost appHost);
    }

    // Generated from `ServiceStack.IAppHost` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IAppHost : ServiceStack.Configuration.IResolver
    {
        System.Collections.Generic.List<ServiceStack.IO.IVirtualPathProvider> AddVirtualFileSources { get; }
        System.Collections.Generic.List<System.Action<ServiceStack.ServiceStackHost>> AfterConfigure { get; set; }
        System.Collections.Generic.List<System.Action<ServiceStack.IAppHost>> AfterInitCallbacks { get; }
        void AfterPluginLoaded<T>(System.Action<T> configure) where T : class, ServiceStack.IPlugin;
        System.Collections.Generic.List<System.Action<ServiceStack.ServiceStackHost>> AfterPluginsLoaded { get; set; }
        ServiceStack.Configuration.IAppSettings AppSettings { get; }
        System.Collections.Generic.List<System.Action<ServiceStack.ServiceStackHost>> BeforeConfigure { get; set; }
        System.Collections.Generic.List<ServiceStack.Host.HttpHandlerResolverDelegate> CatchAllHandlers { get; }
        ServiceStack.HostConfig Config { get; }
        void ConfigurePlugin<T>(System.Action<T> configure) where T : class, ServiceStack.IPlugin;
        ServiceStack.IO.IVirtualDirectory ContentRootDirectory { get; }
        ServiceStack.Web.IContentTypes ContentTypes { get; }
        ServiceStack.Web.IServiceRunner<TRequest> CreateServiceRunner<TRequest>(ServiceStack.Host.ActionContext actionContext);
        System.Collections.Generic.Dictionary<System.Net.HttpStatusCode, ServiceStack.Host.Handlers.IServiceStackHandler> CustomErrorHttpHandlers { get; }
        object EvalExpression(string expr);
        object EvalExpressionCached(string expr);
        object EvalScriptValue(ServiceStack.IScriptValue scriptValue, ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest), System.Collections.Generic.Dictionary<string, object> args = default(System.Collections.Generic.Dictionary<string, object>));
        System.Threading.Tasks.Task<object> EvalScriptValueAsync(ServiceStack.IScriptValue scriptValue, ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest), System.Collections.Generic.Dictionary<string, object> args = default(System.Collections.Generic.Dictionary<string, object>));
        object ExecuteMessage(ServiceStack.Messaging.IMessage mqMessage);
        System.Threading.Tasks.Task<object> ExecuteMessageAsync(ServiceStack.Messaging.IMessage mqMessage, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        System.Collections.Generic.List<ServiceStack.Host.HttpHandlerResolverDelegate> FallbackHandlers { get; }
        System.Collections.Generic.List<ServiceStack.Host.HandleGatewayExceptionDelegate> GatewayExceptionHandlers { get; }
        System.Collections.Generic.List<ServiceStack.Host.HandleGatewayExceptionAsyncDelegate> GatewayExceptionHandlersAsync { get; }
        System.Collections.Generic.List<System.Action<ServiceStack.Web.IRequest, object>> GatewayRequestFilters { get; }
        System.Collections.Generic.List<System.Action<ServiceStack.Web.IRequest, object>> GatewayResponseFilters { get; }
        T GetRuntimeConfig<T>(ServiceStack.Web.IRequest req, string name, T defaultValue);
        ServiceStack.Host.Handlers.IServiceStackHandler GlobalHtmlErrorHttpHandler { get; }
        System.Collections.Generic.List<System.Action<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, object>> GlobalMessageRequestFilters { get; }
        System.Collections.Generic.List<System.Func<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, object, System.Threading.Tasks.Task>> GlobalMessageRequestFiltersAsync { get; }
        System.Collections.Generic.List<System.Action<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, object>> GlobalMessageResponseFilters { get; }
        System.Collections.Generic.List<System.Func<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, object, System.Threading.Tasks.Task>> GlobalMessageResponseFiltersAsync { get; }
        System.Collections.Generic.List<System.Action<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, object>> GlobalRequestFilters { get; }
        System.Collections.Generic.List<System.Func<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, object, System.Threading.Tasks.Task>> GlobalRequestFiltersAsync { get; }
        System.Collections.Generic.List<System.Action<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, object>> GlobalResponseFilters { get; }
        System.Collections.Generic.List<System.Func<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, object, System.Threading.Tasks.Task>> GlobalResponseFiltersAsync { get; set; }
        System.Collections.Generic.List<ServiceStack.IO.IVirtualPathProvider> InsertVirtualFileSources { get; set; }
        void LoadPlugin(params ServiceStack.IPlugin[] plugins);
        string MapProjectPath(string relativePath);
        ServiceStack.Host.ServiceMetadata Metadata { get; }
        System.Collections.Generic.List<System.Action<ServiceStack.IAppHost>> OnDisposeCallbacks { get; }
        void OnEndRequest(ServiceStack.Web.IRequest request = default(ServiceStack.Web.IRequest));
        System.Collections.Generic.List<System.Action<ServiceStack.Web.IRequest>> OnEndRequestCallbacks { get; }
        string PathBase { get; }
        System.Collections.Generic.List<ServiceStack.IPlugin> Plugins { get; }
        void PostConfigurePlugin<T>(System.Action<T> configure) where T : class, ServiceStack.IPlugin;
        System.Collections.Generic.List<System.Action<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse>> PreRequestFilters { get; }
        void PublishMessage<T>(ServiceStack.Messaging.IMessageProducer messageProducer, T message);
        System.Collections.Generic.List<System.Func<ServiceStack.Web.IHttpRequest, ServiceStack.Host.IHttpHandler>> RawHttpHandlers { get; }
        void Register<T>(T instance);
        void RegisterAs<T, TAs>() where T : TAs;
        void RegisterService(System.Type serviceType, params string[] atRestPaths);
        void RegisterServicesInAssembly(System.Reflection.Assembly assembly);
        void RegisterTypedMessageRequestFilter<T>(System.Action<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, T> filterFn);
        void RegisterTypedMessageResponseFilter<T>(System.Action<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, T> filterFn);
        void RegisterTypedRequestFilter<T>(System.Action<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, T> filterFn);
        void RegisterTypedRequestFilter<T>(System.Func<Funq.Container, ServiceStack.Host.ITypedFilter<T>> filter);
        void RegisterTypedRequestFilterAsync<T>(System.Func<Funq.Container, ServiceStack.Host.ITypedFilterAsync<T>> filter);
        void RegisterTypedRequestFilterAsync<T>(System.Func<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, T, System.Threading.Tasks.Task> filterFn);
        void RegisterTypedResponseFilter<T>(System.Action<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, T> filterFn);
        void RegisterTypedResponseFilter<T>(System.Func<Funq.Container, ServiceStack.Host.ITypedFilter<T>> filter);
        void RegisterTypedResponseFilterAsync<T>(System.Func<Funq.Container, ServiceStack.Host.ITypedFilterAsync<T>> filter);
        void RegisterTypedResponseFilterAsync<T>(System.Func<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, T, System.Threading.Tasks.Task> filterFn);
        void Release(object instance);
        System.Collections.Generic.Dictionary<System.Type, System.Func<ServiceStack.Web.IRequest, object>> RequestBinders { get; }
        System.Collections.Generic.List<System.Func<ServiceStack.Web.IRequest, object, System.Threading.Tasks.Task<object>>> RequestConverters { get; }
        string ResolveAbsoluteUrl(string virtualPath, ServiceStack.Web.IRequest httpReq);
        string ResolveLocalizedString(string text, ServiceStack.Web.IRequest request);
        System.Collections.Generic.List<System.Func<ServiceStack.Web.IRequest, object, System.Threading.Tasks.Task<object>>> ResponseConverters { get; }
        ServiceStack.IO.IVirtualDirectory RootDirectory { get; }
        ServiceStack.Web.IServiceRoutes Routes { get; }
        ServiceStack.Script.ScriptContext ScriptContext { get; }
        System.Collections.Generic.List<System.Reflection.Assembly> ServiceAssemblies { get; }
        ServiceStack.Host.ServiceController ServiceController { get; }
        System.Collections.Generic.List<ServiceStack.Host.HandleServiceExceptionDelegate> ServiceExceptionHandlers { get; }
        System.Collections.Generic.List<ServiceStack.Host.HandleServiceExceptionAsyncDelegate> ServiceExceptionHandlersAsync { get; }
        System.Collections.Generic.List<ServiceStack.Host.HandleUncaughtExceptionDelegate> UncaughtExceptionHandlers { get; }
        System.Collections.Generic.List<ServiceStack.Host.HandleUncaughtExceptionAsyncDelegate> UncaughtExceptionHandlersAsync { get; }
        System.Collections.Generic.List<ServiceStack.Html.IViewEngine> ViewEngines { get; }
        ServiceStack.IO.IVirtualPathProvider VirtualFileSources { get; set; }
        ServiceStack.IO.IVirtualFiles VirtualFiles { get; set; }
    }

    // Generated from `ServiceStack.IAppHostNetCore` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IAppHostNetCore : ServiceStack.Configuration.IResolver, ServiceStack.IAppHost, ServiceStack.IRequireConfiguration
    {
        Microsoft.AspNetCore.Builder.IApplicationBuilder App { get; }
        Microsoft.AspNetCore.Hosting.IWebHostEnvironment HostingEnvironment { get; }
    }

    // Generated from `ServiceStack.IAuthPlugin` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IAuthPlugin
    {
        void Register(ServiceStack.IAppHost appHost, ServiceStack.AuthFeature feature);
    }

    // Generated from `ServiceStack.IAuthTypeValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IAuthTypeValidator
    {
    }

    // Generated from `ServiceStack.IAutoQueryData` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IAutoQueryData
    {
        ServiceStack.QueryDataContext CreateContext(ServiceStack.IQueryData requestDto, System.Collections.Generic.Dictionary<string, string> dynamicParams, ServiceStack.Web.IRequest req);
        ServiceStack.IDataQuery CreateQuery(ServiceStack.IQueryData dto, System.Collections.Generic.Dictionary<string, string> dynamicParams, ServiceStack.Web.IRequest req, ServiceStack.IQueryDataSource db);
        ServiceStack.DataQuery<From> CreateQuery<From, Into>(ServiceStack.IQueryData<From, Into> dto, System.Collections.Generic.Dictionary<string, string> dynamicParams, ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest), ServiceStack.IQueryDataSource db = default(ServiceStack.IQueryDataSource));
        ServiceStack.DataQuery<From> CreateQuery<From>(ServiceStack.IQueryData<From> dto, System.Collections.Generic.Dictionary<string, string> dynamicParams, ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest), ServiceStack.IQueryDataSource db = default(ServiceStack.IQueryDataSource));
        ServiceStack.IQueryResponse Execute(ServiceStack.IQueryData request, ServiceStack.IDataQuery q, ServiceStack.IQueryDataSource db);
        ServiceStack.QueryResponse<Into> Execute<From, Into>(ServiceStack.IQueryData<From, Into> request, ServiceStack.DataQuery<From> q, ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest), ServiceStack.IQueryDataSource db = default(ServiceStack.IQueryDataSource));
        ServiceStack.QueryResponse<From> Execute<From>(ServiceStack.IQueryData<From> request, ServiceStack.DataQuery<From> q, ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest), ServiceStack.IQueryDataSource db = default(ServiceStack.IQueryDataSource));
        ServiceStack.IQueryDataSource GetDb(ServiceStack.QueryDataContext ctx, System.Type type);
        ServiceStack.IQueryDataSource GetDb<From>(ServiceStack.QueryDataContext ctx);
        System.Type GetFromType(System.Type requestDtoType);
        ServiceStack.ITypedQueryData GetTypedQuery(System.Type requestDtoType, System.Type fromType);
    }

    // Generated from `ServiceStack.IAutoQueryDataOptions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IAutoQueryDataOptions
    {
        bool EnableUntypedQueries { get; set; }
        System.Collections.Generic.Dictionary<string, ServiceStack.QueryDataField> EndsWithConventions { get; set; }
        System.Collections.Generic.HashSet<string> IgnoreProperties { get; set; }
        bool IncludeTotal { get; set; }
        int? MaxLimit { get; set; }
        bool OrderByPrimaryKeyOnLimitQuery { get; set; }
        System.Collections.Generic.Dictionary<string, ServiceStack.QueryDataField> StartsWithConventions { get; set; }
    }

    // Generated from `ServiceStack.IAutoQueryDbFilters` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IAutoQueryDbFilters
    {
        object sendToAutoQuery(ServiceStack.Script.ScriptScopeContext scope, object dto, string requestName, object options);
    }

    // Generated from `ServiceStack.ICancellableRequest` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface ICancellableRequest : System.IDisposable
    {
        System.TimeSpan Elapsed { get; }
        System.Threading.CancellationToken Token { get; }
        System.Threading.CancellationTokenSource TokenSource { get; }
    }

    // Generated from `ServiceStack.IConfigureApp` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IConfigureApp
    {
        void Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder app);
    }

    // Generated from `ServiceStack.IConfigureAppHost` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IConfigureAppHost
    {
        void Configure(ServiceStack.IAppHost appHost);
    }

    // Generated from `ServiceStack.IConfigureServices` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IConfigureServices
    {
        void Configure(Microsoft.Extensions.DependencyInjection.IServiceCollection services);
    }

    // Generated from `ServiceStack.IDataQuery` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IDataQuery
    {
        void AddCondition(ServiceStack.QueryTerm defaultTerm, System.Reflection.PropertyInfo field, ServiceStack.QueryCondition condition, object value);
        void And(string field, ServiceStack.QueryCondition condition, string value);
        System.Collections.Generic.List<ServiceStack.DataConditionExpression> Conditions { get; }
        ServiceStack.IQueryData Dto { get; }
        System.Collections.Generic.Dictionary<string, string> DynamicParams { get; }
        System.Tuple<System.Type, System.Reflection.PropertyInfo> FirstMatchingField(string name);
        bool HasConditions { get; }
        void Join(System.Type joinType, System.Type type);
        void LeftJoin(System.Type joinType, System.Type type);
        void Limit(int? skip, int? take);
        int? Offset { get; }
        System.Collections.Generic.HashSet<string> OnlyFields { get; }
        void Or(string field, ServiceStack.QueryCondition condition, string value);
        ServiceStack.OrderByExpression OrderBy { get; }
        void OrderByFields(string[] fieldNames);
        void OrderByFieldsDescending(string[] fieldNames);
        void OrderByPrimaryKey();
        int? Rows { get; }
        void Select(string[] fields);
    }

    // Generated from `ServiceStack.IEventSubscription` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IEventSubscription : System.IDisposable
    {
        string[] Channels { get; }
        System.Collections.Generic.Dictionary<string, string> ConnectArgs { get; set; }
        System.DateTime CreatedAt { get; set; }
        string DisplayName { get; }
        bool IsAuthenticated { get; set; }
        bool IsClosed { get; }
        string JsonArgs { get; }
        System.Int64 LastMessageId { get; }
        System.DateTime LastPulseAt { get; set; }
        string[] MergedChannels { get; }
        System.Collections.Concurrent.ConcurrentDictionary<string, string> Meta { get; set; }
        System.Action<ServiceStack.IEventSubscription> OnUnsubscribe { get; set; }
        System.Func<ServiceStack.IEventSubscription, System.Threading.Tasks.Task> OnUnsubscribeAsync { get; set; }
        void Publish(string selector, string message);
        System.Threading.Tasks.Task PublishAsync(string selector, string message, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        void PublishRaw(string frame);
        System.Threading.Tasks.Task PublishRawAsync(string frame, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        void Pulse();
        System.Collections.Generic.Dictionary<string, string> ServerArgs { get; set; }
        string SessionId { get; }
        string SubscriptionId { get; }
        void Unsubscribe();
        System.Threading.Tasks.Task UnsubscribeAsync();
        void UpdateChannels(string[] channels);
        string UserAddress { get; set; }
        string UserId { get; }
        string UserName { get; }
    }

    // Generated from `ServiceStack.IHasAppHost` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IHasAppHost
    {
        ServiceStack.IAppHost AppHost { get; }
    }

    // Generated from `ServiceStack.IHasServiceScope` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IHasServiceScope : System.IServiceProvider
    {
        Microsoft.Extensions.DependencyInjection.IServiceScope ServiceScope { get; set; }
    }

    // Generated from `ServiceStack.IHasServiceStackProvider` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IHasServiceStackProvider
    {
        ServiceStack.IServiceStackProvider ServiceStackProvider { get; }
    }

    // Generated from `ServiceStack.IHasTypeValidators` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IHasTypeValidators
    {
        System.Collections.Generic.List<ServiceStack.ITypeValidator> TypeValidators { get; }
    }

    // Generated from `ServiceStack.ILogic` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface ILogic : ServiceStack.IRepository
    {
        ServiceStack.Caching.ICacheClient Cache { get; }
        ServiceStack.Messaging.IMessageFactory MessageFactory { get; }
        ServiceStack.Messaging.IMessageProducer MessageProducer { get; }
        void PublishMessage<T>(T message);
        ServiceStack.Redis.IRedisClient Redis { get; }
        ServiceStack.Redis.IRedisClientsManager RedisManager { get; }
    }

    // Generated from `ServiceStack.IMarkdownTransformer` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IMarkdownTransformer
    {
        string Transform(string markdown);
    }

    // Generated from `ServiceStack.IMsgPackPlugin` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IMsgPackPlugin
    {
    }

    // Generated from `ServiceStack.INetSerializerPlugin` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface INetSerializerPlugin
    {
    }

    // Generated from `ServiceStack.IPlugin` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IPlugin
    {
        void Register(ServiceStack.IAppHost appHost);
    }

    // Generated from `ServiceStack.IPostInitPlugin` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IPostInitPlugin
    {
        void AfterPluginsLoaded(ServiceStack.IAppHost appHost);
    }

    // Generated from `ServiceStack.IPreConfigureAppHost` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IPreConfigureAppHost
    {
        void PreConfigure(ServiceStack.IAppHost appHost);
    }

    // Generated from `ServiceStack.IPreInitPlugin` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IPreInitPlugin
    {
        void BeforePluginsLoaded(ServiceStack.IAppHost appHost);
    }

    // Generated from `ServiceStack.IProtoBufPlugin` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IProtoBufPlugin
    {
        string GetProto(System.Type type);
    }

    // Generated from `ServiceStack.IQueryDataSource` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IQueryDataSource : System.IDisposable
    {
        int Count(ServiceStack.IDataQuery q);
        ServiceStack.IDataQuery From<T>();
        System.Collections.Generic.List<Into> LoadSelect<Into, From>(ServiceStack.IDataQuery q);
        object SelectAggregate(ServiceStack.IDataQuery q, string name, System.Collections.Generic.IEnumerable<string> args);
    }

    // Generated from `ServiceStack.IQueryDataSource<>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IQueryDataSource<T> : ServiceStack.IQueryDataSource, System.IDisposable
    {
    }

    // Generated from `ServiceStack.IQueryMultiple` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IQueryMultiple
    {
    }

    // Generated from `ServiceStack.IRazorPlugin` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IRazorPlugin
    {
    }

    // Generated from `ServiceStack.IRepository` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IRepository
    {
        System.Data.IDbConnection Db { get; }
        ServiceStack.Data.IDbConnectionFactory DbFactory { get; }
    }

    // Generated from `ServiceStack.IRequireConfiguration` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IRequireConfiguration
    {
        Microsoft.Extensions.Configuration.IConfiguration Configuration { get; set; }
    }

    // Generated from `ServiceStack.IServerEvents` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IServerEvents : System.IDisposable
    {
        System.Collections.Generic.List<ServiceStack.SubscriptionInfo> GetAllSubscriptionInfos();
        System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>> GetAllSubscriptionsDetails();
        ServiceStack.MemoryServerEvents GetMemoryServerEvents();
        System.Int64 GetNextSequence(string sequenceId);
        System.Collections.Generic.Dictionary<string, string> GetStats();
        ServiceStack.SubscriptionInfo GetSubscriptionInfo(string id);
        System.Collections.Generic.List<ServiceStack.SubscriptionInfo> GetSubscriptionInfosByUserId(string userId);
        System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>> GetSubscriptionsDetails(params string[] channels);
        void NotifyAll(string selector, object message);
        System.Threading.Tasks.Task NotifyAllAsync(string selector, object message, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        System.Threading.Tasks.Task NotifyAllJsonAsync(string selector, string json, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        void NotifyChannel(string channel, string selector, object message);
        System.Threading.Tasks.Task NotifyChannelAsync(string channel, string selector, object message, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        System.Threading.Tasks.Task NotifyChannelJsonAsync(string channel, string selector, string json, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        void NotifySession(string sessionId, string selector, object message, string channel = default(string));
        System.Threading.Tasks.Task NotifySessionAsync(string sessionId, string selector, object message, string channel = default(string), System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        System.Threading.Tasks.Task NotifySessionJsonAsync(string sessionId, string selector, string json, string channel = default(string), System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        void NotifySubscription(string subscriptionId, string selector, object message, string channel = default(string));
        System.Threading.Tasks.Task NotifySubscriptionAsync(string subscriptionId, string selector, object message, string channel = default(string), System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        System.Threading.Tasks.Task NotifySubscriptionJsonAsync(string subscriptionId, string selector, string json, string channel = default(string), System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        void NotifyUserId(string userId, string selector, object message, string channel = default(string));
        System.Threading.Tasks.Task NotifyUserIdAsync(string userId, string selector, object message, string channel = default(string), System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        System.Threading.Tasks.Task NotifyUserIdJsonAsync(string userId, string selector, string json, string channel = default(string), System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        void NotifyUserName(string userName, string selector, object message, string channel = default(string));
        System.Threading.Tasks.Task NotifyUserNameAsync(string userName, string selector, object message, string channel = default(string), System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        System.Threading.Tasks.Task NotifyUserNameJsonAsync(string userName, string selector, string json, string channel = default(string), System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        System.Threading.Tasks.Task<bool> PulseAsync(string subscriptionId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        void QueueAsyncTask(System.Func<System.Threading.Tasks.Task> task);
        System.Threading.Tasks.Task RegisterAsync(ServiceStack.IEventSubscription subscription, System.Collections.Generic.Dictionary<string, string> connectArgs = default(System.Collections.Generic.Dictionary<string, string>), System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        int RemoveExpiredSubscriptions();
        System.Threading.Tasks.Task<int> RemoveExpiredSubscriptionsAsync(System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        void Reset();
        void Start();
        void Stop();
        System.Threading.Tasks.Task StopAsync();
        void SubscribeToChannels(string subscriptionId, string[] channels);
        System.Threading.Tasks.Task SubscribeToChannelsAsync(string subscriptionId, string[] channels, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        System.Threading.Tasks.Task UnRegisterAsync(string subscriptionId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        void UnsubscribeFromChannels(string subscriptionId, string[] channels);
        System.Threading.Tasks.Task UnsubscribeFromChannelsAsync(string subscriptionId, string[] channels, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
    }

    // Generated from `ServiceStack.IServiceBase` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IServiceBase : ServiceStack.Configuration.IResolver, ServiceStack.Web.IRequiresRequest
    {
        ServiceStack.Configuration.IResolver GetResolver();
        T ResolveService<T>();
    }

    // Generated from `ServiceStack.IServiceStackProvider` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IServiceStackProvider : System.IDisposable
    {
        ServiceStack.Configuration.IAppSettings AppSettings { get; }
        ServiceStack.Auth.IAuthRepository AuthRepository { get; }
        ServiceStack.Auth.IAuthRepositoryAsync AuthRepositoryAsync { get; }
        ServiceStack.Caching.ICacheClient Cache { get; }
        ServiceStack.Caching.ICacheClientAsync CacheAsync { get; }
        void ClearSession();
        System.Threading.Tasks.Task ClearSessionAsync(System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        System.Data.IDbConnection Db { get; }
        object Execute(ServiceStack.Web.IRequest request);
        object Execute(object requestDto);
        TResponse Execute<TResponse>(ServiceStack.IReturn<TResponse> requestDto);
        ServiceStack.IServiceGateway Gateway { get; }
        System.Threading.Tasks.ValueTask<ServiceStack.Redis.IRedisClientAsync> GetRedisAsync();
        ServiceStack.Configuration.IResolver GetResolver();
        ServiceStack.Auth.IAuthSession GetSession(bool reload = default(bool));
        System.Threading.Tasks.Task<ServiceStack.Auth.IAuthSession> GetSessionAsync(bool reload = default(bool), System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        bool IsAuthenticated { get; }
        ServiceStack.Messaging.IMessageProducer MessageProducer { get; }
        void PublishMessage<T>(T message);
        ServiceStack.Redis.IRedisClient Redis { get; }
        ServiceStack.Web.IHttpRequest Request { get; }
        T ResolveService<T>();
        ServiceStack.Web.IHttpResponse Response { get; }
        ServiceStack.RpcGateway RpcGateway { get; }
        TUserSession SessionAs<TUserSession>();
        System.Threading.Tasks.Task<TUserSession> SessionAsAsync<TUserSession>(System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        ServiceStack.Caching.ISession SessionBag { get; }
        ServiceStack.Caching.ISessionAsync SessionBagAsync { get; }
        ServiceStack.Caching.ISessionFactory SessionFactory { get; }
        void SetResolver(ServiceStack.Configuration.IResolver resolver);
        T TryResolve<T>();
    }

    // Generated from `ServiceStack.ITypeValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface ITypeValidator
    {
        string ErrorCode { get; set; }
        System.Threading.Tasks.Task<bool> IsValidAsync(object dto, ServiceStack.Web.IRequest request);
        string Message { get; set; }
        int? StatusCode { get; set; }
        System.Threading.Tasks.Task ThrowIfNotValidAsync(object dto, ServiceStack.Web.IRequest request);
    }

    // Generated from `ServiceStack.ITypedQueryData` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface ITypedQueryData
    {
        ServiceStack.IDataQuery AddToQuery(ServiceStack.IDataQuery q, ServiceStack.IQueryData request, System.Collections.Generic.Dictionary<string, string> dynamicParams, ServiceStack.IAutoQueryDataOptions options = default(ServiceStack.IAutoQueryDataOptions));
        ServiceStack.IDataQuery CreateQuery(ServiceStack.IQueryDataSource db);
        ServiceStack.QueryResponse<Into> Execute<Into>(ServiceStack.IQueryDataSource db, ServiceStack.IDataQuery query);
    }

    // Generated from `ServiceStack.IWirePlugin` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IWirePlugin
    {
    }

    // Generated from `ServiceStack.IWriteEvent` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IWriteEvent
    {
        void WriteEvent(string msg);
    }

    // Generated from `ServiceStack.IWriteEventAsync` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public interface IWriteEventAsync
    {
        System.Threading.Tasks.Task WriteEventAsync(string msg, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
    }

    // Generated from `ServiceStack.ImageDrawingProvider` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ImageDrawingProvider : ServiceStack.ImageProvider
    {
        public ImageDrawingProvider() => throw null;
        public override System.IO.Stream Resize(System.IO.Stream origStream, int newWidth, int newHeight) => throw null;
    }

    // Generated from `ServiceStack.ImageExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class ImageExtensions
    {
        public static System.IO.MemoryStream CropToPng(this System.Drawing.Image img, int newWidth, int newHeight, int startX = default(int), int startY = default(int)) => throw null;
        public static System.IO.MemoryStream ResizeToPng(this System.Drawing.Image img, int newWidth, int newHeight) => throw null;
    }

    // Generated from `ServiceStack.ImageProvider` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public abstract class ImageProvider
    {
        protected ImageProvider() => throw null;
        public static ServiceStack.ImageProvider Instance { get => throw null; set => throw null; }
        public abstract System.IO.Stream Resize(System.IO.Stream stream, int newWidth, int newHeight);
        public virtual System.IO.Stream Resize(System.IO.Stream origStream, string savePhotoSize = default(string)) => throw null;
    }

    // Generated from `ServiceStack.ImagesHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ImagesHandler : ServiceStack.Host.Handlers.HttpAsyncTaskHandler
    {
        public ServiceStack.StaticContent Fallback { get => throw null; }
        public virtual ServiceStack.StaticContent Get(string path) => throw null;
        public System.Collections.Generic.Dictionary<string, ServiceStack.StaticContent> ImageContents { get => throw null; }
        public ImagesHandler(string path, ServiceStack.StaticContent fallback) => throw null;
        public string Path { get => throw null; }
        public override System.Threading.Tasks.Task ProcessRequestAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, string operationName) => throw null;
        public virtual string RewriteImageUri(string imageUri) => throw null;
        public virtual void Save(string path, ServiceStack.StaticContent content) => throw null;
    }

    // Generated from `ServiceStack.InBetweenCondition` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class InBetweenCondition : ServiceStack.QueryCondition, ServiceStack.IQueryMultiple
    {
        public override string Alias { get => throw null; }
        public InBetweenCondition() => throw null;
        public static ServiceStack.InBetweenCondition Instance;
        public override bool Match(object a, object b) => throw null;
    }

    // Generated from `ServiceStack.InCollectionCondition` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class InCollectionCondition : ServiceStack.QueryCondition, ServiceStack.IQueryMultiple
    {
        public override string Alias { get => throw null; }
        public InCollectionCondition() => throw null;
        public static ServiceStack.InCollectionCondition Instance;
        public override bool Match(object a, object b) => throw null;
    }

    // Generated from `ServiceStack.InProcessServiceGateway` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class InProcessServiceGateway : ServiceStack.IServiceGateway, ServiceStack.IServiceGatewayAsync
    {
        public InProcessServiceGateway(ServiceStack.Web.IRequest req) => throw null;
        public void Publish(object requestDto) => throw null;
        public void PublishAll(System.Collections.Generic.IEnumerable<object> requestDtos) => throw null;
        public System.Threading.Tasks.Task PublishAllAsync(System.Collections.Generic.IEnumerable<object> requestDtos, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public System.Threading.Tasks.Task PublishAsync(object requestDto, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public ServiceStack.Web.IRequest Request { get => throw null; }
        public TResponse Send<TResponse>(object requestDto) => throw null;
        public System.Collections.Generic.List<TResponse> SendAll<TResponse>(System.Collections.Generic.IEnumerable<object> requestDtos) => throw null;
        public System.Threading.Tasks.Task<System.Collections.Generic.List<TResponse>> SendAllAsync<TResponse>(System.Collections.Generic.IEnumerable<object> requestDtos, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public System.Threading.Tasks.Task<TResponse> SendAsync<TResponse>(object requestDto, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
    }

    // Generated from `ServiceStack.InfoScripts` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class InfoScripts : ServiceStack.Script.ScriptMethods
    {
        public InfoScripts() => throw null;
        public string env(string variable) => throw null;
        public string envCommandLine() => throw null;
        public string[] envCommandLineArgs() => throw null;
        public string envCurrentDirectory() => throw null;
        public string envExpandVariables(string name) => throw null;
        public string envFrameworkDescription() => throw null;
        public bool envIs64BitOperatingSystem() => throw null;
        public bool envIs64BitProcess() => throw null;
        public bool envIsAndroid() => throw null;
        public bool envIsIOS() => throw null;
        public bool envIsLinux() => throw null;
        public bool envIsMono() => throw null;
        public bool envIsOSX() => throw null;
        public bool envIsWindows() => throw null;
        public string[] envLogicalDrives() => throw null;
        public string envMachineName() => throw null;
        public System.Runtime.InteropServices.Architecture envOSArchitecture() => throw null;
        public string envOSDescription() => throw null;
        public System.OperatingSystem envOSVersion() => throw null;
        public System.Char envPathSeparator() => throw null;
        public int envProcessorCount() => throw null;
        public string envServerUserAgent() => throw null;
        public System.Decimal envServiceStackVersion() => throw null;
        public string envStackTrace() => throw null;
        public string envSystemDirectory() => throw null;
        public int envTickCount() => throw null;
        public string envUserDomainName() => throw null;
        public string envUserName() => throw null;
        public string envVariable(string variable) => throw null;
        public System.Collections.IDictionary envVariables() => throw null;
        public System.Version envVersion() => throw null;
        public ServiceStack.HostConfig hostConfig(ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public string hostServiceName(ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public bool isUnix() => throw null;
        public bool isWin() => throw null;
        public string licensedFeatures() => throw null;
        public System.Collections.Generic.List<string> metaAllDtoNames() => throw null;
        public System.Collections.Generic.HashSet<System.Type> metaAllDtos() => throw null;
        public System.Collections.Generic.List<string> metaAllOperationNames() => throw null;
        public System.Collections.Generic.List<System.Type> metaAllOperationTypes() => throw null;
        public System.Collections.Generic.IEnumerable<ServiceStack.Host.Operation> metaAllOperations() => throw null;
        public ServiceStack.Host.Operation metaOperation(string name) => throw null;
        public System.Collections.Generic.List<System.Net.IPAddress> networkIpv4Addresses() => throw null;
        public System.Collections.Generic.List<System.Net.IPAddress> networkIpv6Addresses() => throw null;
        public System.Collections.Generic.List<ServiceStack.IPlugin> plugins() => throw null;
        public string userEmail(ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public bool userHasPermission(ServiceStack.Script.ScriptScopeContext scope, string permission) => throw null;
        public bool userHasRole(ServiceStack.Script.ScriptScopeContext scope, string role) => throw null;
        public string userId(ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public string userName(ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public string userPermanentSessionId(ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public ServiceStack.Auth.IAuthSession userSession(ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public string userSessionId(ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public System.Collections.Generic.HashSet<string> userSessionOptions(ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public string userTempSessionId(ServiceStack.Script.ScriptScopeContext scope) => throw null;
    }

    // Generated from `ServiceStack.IsAuthenticatedValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class IsAuthenticatedValidator : ServiceStack.TypeValidator, ServiceStack.IAuthTypeValidator
    {
        public static string DefaultErrorMessage { get => throw null; set => throw null; }
        public static ServiceStack.IsAuthenticatedValidator Instance { get => throw null; }
        public IsAuthenticatedValidator() : base(default(string), default(string), default(int?)) => throw null;
        public IsAuthenticatedValidator(string provider) : base(default(string), default(string), default(int?)) => throw null;
        public override System.Threading.Tasks.Task<bool> IsValidAsync(object dto, ServiceStack.Web.IRequest request) => throw null;
        public string Provider { get => throw null; }
    }

    // Generated from `ServiceStack.JsonOnly` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class JsonOnly : ServiceStack.RequestFilterAttribute
    {
        public override void Execute(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto) => throw null;
        public JsonOnly() => throw null;
    }

    // Generated from `ServiceStack.JsvOnly` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class JsvOnly : ServiceStack.RequestFilterAttribute
    {
        public override void Execute(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto) => throw null;
        public JsvOnly() => throw null;
    }

    // Generated from `ServiceStack.Keywords` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class Keywords
    {
        public const string AccessTokenAuth = default;
        public const string Allows = default;
        public const string ApiKey = default;
        public static string ApiKeyParam;
        public const string Attributes = default;
        public static string AuthSecret;
        public const string Authorization = default;
        public const string AutoBatchIndex = default;
        public static string Bare;
        public const string CacheInfo = default;
        public static string Callback;
        public const string Code = default;
        public static string Continue;
        public const string Count = default;
        public const string DbInfo = default;
        public static string Debug;
        public const string DidAuthenticate = default;
        public const string Dynamic = default;
        public const string Embed = default;
        public const string Error = default;
        public const string ErrorStatus = default;
        public const string ErrorView = default;
        public const string EventModelId = default;
        public const string FilePath = default;
        public static string Format;
        public const string GrpcResponseStatus = default;
        public const string HasGlobalHeaders = default;
        public const string HasLogged = default;
        public const string HasPreAuthenticated = default;
        public const string HttpStatus = default;
        public const string IRequest = default;
        public const string Id = default;
        public static string Ignore;
        public const string IgnoreEvent = default;
        public static string IgnorePlaceHolder;
        public const string InvokeVerb = default;
        public static string JsConfig;
        public const string Model = default;
        public static string NoRedirect;
        public const string OAuthFailed = default;
        public const string OAuthSuccess = default;
        public static string PermanentSessionId;
        public static string Redirect;
        public static string RefreshTokenCookie;
        public const string RequestActivity = default;
        public const string RequestDuration = default;
        public static string RequestInfo;
        public const string Reset = default;
        public const string Result = default;
        public static string ReturnUrl;
        public const string Route = default;
        public const string RowVersion = default;
        public const string Session = default;
        public static string SessionId;
        public static string SessionOptionsKey;
        public const string SessionState = default;
        public const string SoapMessage = default;
        public const string State = default;
        public const string Template = default;
        public static string TokenCookie;
        public const string TraceId = default;
        public static string Version;
        public static string VersionAbbr;
        public static string VersionFxAbbr;
        public const string View = default;
        public const string WithoutOptions = default;
        public static string XCookies;
        public const string reset = default;
    }

    // Generated from `ServiceStack.LessCondition` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class LessCondition : ServiceStack.QueryCondition
    {
        public override string Alias { get => throw null; }
        public static ServiceStack.LessCondition Instance;
        public LessCondition() => throw null;
        public override bool Match(object a, object b) => throw null;
    }

    // Generated from `ServiceStack.LessEqualCondition` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class LessEqualCondition : ServiceStack.QueryCondition
    {
        public override string Alias { get => throw null; }
        public static ServiceStack.LessEqualCondition Instance;
        public LessEqualCondition() => throw null;
        public override bool Match(object a, object b) => throw null;
    }

    // Generated from `ServiceStack.LispReplTcpServer` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class LispReplTcpServer : ServiceStack.IAfterInitAppHost, ServiceStack.IPlugin, ServiceStack.IPreInitPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId, System.IDisposable
    {
        public void AfterInit(ServiceStack.IAppHost appHost) => throw null;
        public bool? AllowScriptingOfAllTypes { get => throw null; set => throw null; }
        public void BeforePluginsLoaded(ServiceStack.IAppHost appHost) => throw null;
        public void Dispose() => throw null;
        public string Id { get => throw null; set => throw null; }
        public LispReplTcpServer() => throw null;
        public LispReplTcpServer(System.Net.IPAddress localIp, int port) => throw null;
        public LispReplTcpServer(int port) => throw null;
        public LispReplTcpServer(string localIp, int port) => throw null;
        public void Register(ServiceStack.IAppHost appHost) => throw null;
        public bool RequireAuthSecret { get => throw null; set => throw null; }
        public System.Collections.Generic.List<System.Reflection.Assembly> ScanAssemblies { get => throw null; set => throw null; }
        public System.Collections.Generic.List<System.Type> ScanTypes { get => throw null; set => throw null; }
        public System.Collections.Generic.List<System.Reflection.Assembly> ScriptAssemblies { get => throw null; set => throw null; }
        public System.Collections.Generic.List<ServiceStack.Script.ScriptBlock> ScriptBlocks { get => throw null; set => throw null; }
        public ServiceStack.Script.ScriptContext ScriptContext { get => throw null; set => throw null; }
        public System.Collections.Generic.List<ServiceStack.Script.ScriptMethods> ScriptMethods { get => throw null; set => throw null; }
        public System.Collections.Generic.List<string> ScriptNamespaces { get => throw null; set => throw null; }
        public System.Collections.Generic.List<System.Type> ScriptTypes { get => throw null; set => throw null; }
        public void Start() => throw null;
        public void StartListening() => throw null;
        public void Stop() => throw null;
    }

    // Generated from `ServiceStack.LocalizedStrings` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class LocalizedStrings
    {
        public const string AssignRoles = default;
        public const string Auth = default;
        public const string Authenticate = default;
        public const string Login = default;
        public const string NotModified = default;
        public const string Redirect = default;
        public const string UnassignRoles = default;
    }

    // Generated from `ServiceStack.LogExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class LogExtensions
    {
        public static void ErrorStrict(this ServiceStack.Logging.ILog log, string message, System.Exception ex) => throw null;
        public static bool IsNullOrNullLogFactory(this ServiceStack.Logging.ILogFactory factory) => throw null;
    }

    // Generated from `ServiceStack.LogicBase` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public abstract class LogicBase : ServiceStack.RepositoryBase, ServiceStack.ILogic, ServiceStack.IRepository
    {
        public virtual ServiceStack.Caching.ICacheClient Cache { get => throw null; set => throw null; }
        public override void Dispose() => throw null;
        protected LogicBase() => throw null;
        public virtual ServiceStack.Messaging.IMessageFactory MessageFactory { get => throw null; set => throw null; }
        public virtual ServiceStack.Messaging.IMessageProducer MessageProducer { get => throw null; set => throw null; }
        public virtual void PublishMessage<T>(T message) => throw null;
        public virtual ServiceStack.Redis.IRedisClient Redis { get => throw null; }
        public virtual ServiceStack.Redis.IRedisClientsManager RedisManager { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.ManageApiKeysAsyncWrapper` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ManageApiKeysAsyncWrapper : ServiceStack.Auth.IManageApiKeysAsync
    {
        public System.Threading.Tasks.Task<bool> ApiKeyExistsAsync(string apiKey, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public System.Threading.Tasks.Task<ServiceStack.Auth.ApiKey> GetApiKeyAsync(string apiKey, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceStack.Auth.ApiKey>> GetUserApiKeysAsync(string userId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public void InitApiKeySchema() => throw null;
        public ManageApiKeysAsyncWrapper(ServiceStack.Auth.IManageApiKeys manageApiKeys) => throw null;
        public System.Threading.Tasks.Task StoreAllAsync(System.Collections.Generic.IEnumerable<ServiceStack.Auth.ApiKey> apiKeys, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
    }

    // Generated from `ServiceStack.MarkdownConfig` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class MarkdownConfig
    {
        public static string Transform(string html) => throw null;
        public static ServiceStack.IMarkdownTransformer Transformer { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.MarkdownPageFormat` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class MarkdownPageFormat : ServiceStack.Script.PageFormat
    {
        public MarkdownPageFormat() => throw null;
        public static System.Threading.Tasks.Task<System.IO.Stream> TransformToHtml(System.IO.Stream markdownStream) => throw null;
    }

    // Generated from `ServiceStack.MarkdownScriptBlock` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class MarkdownScriptBlock : ServiceStack.Script.ScriptBlock
    {
        public override ServiceStack.Script.ScriptLanguage Body { get => throw null; }
        public MarkdownScriptBlock() => throw null;
        public override string Name { get => throw null; }
        public override System.Threading.Tasks.Task WriteAsync(ServiceStack.Script.ScriptScopeContext scope, ServiceStack.Script.PageBlockFragment block, System.Threading.CancellationToken token) => throw null;
    }

    // Generated from `ServiceStack.MarkdownScriptMethods` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class MarkdownScriptMethods : ServiceStack.Script.ScriptMethods
    {
        public MarkdownScriptMethods() => throw null;
        public ServiceStack.IRawString markdown(string markdown) => throw null;
    }

    // Generated from `ServiceStack.MarkdownScriptPlugin` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class MarkdownScriptPlugin : ServiceStack.Script.IScriptPlugin
    {
        public MarkdownScriptPlugin() => throw null;
        public void Register(ServiceStack.Script.ScriptContext context) => throw null;
        public bool RegisterPageFormat { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.MarkdownTemplateFilter` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class MarkdownTemplateFilter : ServiceStack.MarkdownScriptMethods
    {
        public MarkdownTemplateFilter() => throw null;
    }

    // Generated from `ServiceStack.MarkdownTemplatePlugin` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class MarkdownTemplatePlugin : ServiceStack.MarkdownScriptPlugin
    {
        public MarkdownTemplatePlugin() => throw null;
    }

    // Generated from `ServiceStack.MemoryDataSource` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class MemoryDataSource
    {
        public static ServiceStack.MemoryDataSource<T> Create<T>(System.Collections.Generic.ICollection<T> data, ServiceStack.IQueryData dto, ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest)) => throw null;
    }

    // Generated from `ServiceStack.MemoryDataSource<>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class MemoryDataSource<T> : ServiceStack.QueryDataSource<T>
    {
        public static ServiceStack.MemoryDataSource<TItem> Create<TItem>(System.Collections.Generic.IEnumerable<TItem> data, ServiceStack.IQueryData dto, ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest)) => throw null;
        public System.Collections.Generic.IEnumerable<T> Data { get => throw null; }
        public override System.Collections.Generic.IEnumerable<T> GetDataSource(ServiceStack.IDataQuery q) => throw null;
        public MemoryDataSource(System.Collections.Generic.IEnumerable<T> data, ServiceStack.IQueryData dto, ServiceStack.Web.IRequest req) : base(default(ServiceStack.QueryDataContext)) => throw null;
        public MemoryDataSource(ServiceStack.QueryDataContext context, System.Collections.Generic.IEnumerable<T> data) : base(default(ServiceStack.QueryDataContext)) => throw null;
    }

    // Generated from `ServiceStack.MemoryServerEvents` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class MemoryServerEvents : ServiceStack.IServerEvents, System.IDisposable
    {
        public System.Collections.Concurrent.ConcurrentDictionary<string, System.Collections.Concurrent.ConcurrentDictionary<ServiceStack.IEventSubscription, bool>> ChannelSubscriptions;
        public void Dispose() => throw null;
        public System.Threading.Tasks.Task DisposeAsync() => throw null;
        protected System.Threading.Tasks.Task FlushNopAsync(System.Collections.Concurrent.ConcurrentDictionary<string, System.Collections.Concurrent.ConcurrentDictionary<ServiceStack.IEventSubscription, bool>> map, string key, string channel = default(string), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static bool FlushNopOnSubscription;
        public System.Threading.Tasks.Task FlushNopToChannelsAsync(string[] channels, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public System.Collections.Generic.List<ServiceStack.SubscriptionInfo> GetAllSubscriptionInfos() => throw null;
        public System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>> GetAllSubscriptionsDetails() => throw null;
        public ServiceStack.MemoryServerEvents GetMemoryServerEvents() => throw null;
        public System.Int64 GetNextSequence(string sequenceId) => throw null;
        public System.Collections.Generic.Dictionary<string, string> GetStats() => throw null;
        public ServiceStack.IEventSubscription GetSubscription(string id) => throw null;
        public ServiceStack.SubscriptionInfo GetSubscriptionInfo(string id) => throw null;
        public System.Collections.Generic.List<ServiceStack.SubscriptionInfo> GetSubscriptionInfosByUserId(string userId) => throw null;
        public System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>> GetSubscriptionsDetails(params string[] channels) => throw null;
        public System.TimeSpan HouseKeepingInterval { get => throw null; set => throw null; }
        public System.TimeSpan IdleTimeout { get => throw null; set => throw null; }
        public MemoryServerEvents() => throw null;
        protected void Notify(System.Collections.Concurrent.ConcurrentDictionary<string, System.Collections.Concurrent.ConcurrentDictionary<ServiceStack.IEventSubscription, bool>> map, string key, string selector, object message, string channel = default(string)) => throw null;
        protected void Notify(System.Collections.Concurrent.ConcurrentDictionary<string, ServiceStack.IEventSubscription> map, string key, string selector, object message, string channel = default(string)) => throw null;
        public void NotifyAll(string selector, object message) => throw null;
        public System.Threading.Tasks.Task NotifyAllAsync(string selector, object message, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public System.Threading.Tasks.Task NotifyAllJsonAsync(string selector, string json, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        protected System.Threading.Tasks.Task NotifyAsync(System.Collections.Concurrent.ConcurrentDictionary<string, System.Collections.Concurrent.ConcurrentDictionary<ServiceStack.IEventSubscription, bool>> map, string key, string selector, object message, string channel = default(string), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        protected System.Threading.Tasks.Task NotifyAsync(System.Collections.Concurrent.ConcurrentDictionary<string, ServiceStack.IEventSubscription> map, string key, string selector, object message, string channel = default(string), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public void NotifyChannel(string channel, string selector, object message) => throw null;
        public System.Threading.Tasks.Task NotifyChannelAsync(string channel, string selector, object message, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public System.Threading.Tasks.Task NotifyChannelJsonAsync(string channel, string selector, string json, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public bool NotifyChannelOfSubscriptions { get => throw null; set => throw null; }
        public System.Threading.Tasks.Task NotifyChannelsAsync(string[] channels, string selector, string body, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public System.Func<ServiceStack.IEventSubscription, System.Threading.Tasks.Task> NotifyHeartbeatAsync { get => throw null; set => throw null; }
        public System.Func<ServiceStack.IEventSubscription, System.Threading.Tasks.Task> NotifyJoinAsync { get => throw null; set => throw null; }
        public System.Func<ServiceStack.IEventSubscription, System.Threading.Tasks.Task> NotifyLeaveAsync { get => throw null; set => throw null; }
        protected void NotifyRaw(System.Collections.Concurrent.ConcurrentDictionary<string, System.Collections.Concurrent.ConcurrentDictionary<ServiceStack.IEventSubscription, bool>> map, string key, string selector, string body, string channel = default(string)) => throw null;
        protected System.Threading.Tasks.Task NotifyRawAsync(System.Collections.Concurrent.ConcurrentDictionary<string, System.Collections.Concurrent.ConcurrentDictionary<ServiceStack.IEventSubscription, bool>> map, string key, string selector, string body, string channel = default(string), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        protected System.Threading.Tasks.Task NotifyRawAsync(System.Collections.Concurrent.ConcurrentDictionary<string, ServiceStack.IEventSubscription> map, string key, string selector, string body, string channel = default(string), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public void NotifySession(string sessionId, string selector, object message, string channel = default(string)) => throw null;
        public System.Threading.Tasks.Task NotifySessionAsync(string sessionId, string selector, object message, string channel = default(string), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public System.Threading.Tasks.Task NotifySessionJsonAsync(string sessionId, string selector, string json, string channel = default(string), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public void NotifySubscription(string subscriptionId, string selector, object message, string channel = default(string)) => throw null;
        public System.Threading.Tasks.Task NotifySubscriptionAsync(string subscriptionId, string selector, object message, string channel = default(string), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public System.Threading.Tasks.Task NotifySubscriptionJsonAsync(string subscriptionId, string selector, string json, string channel = default(string), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public System.Func<ServiceStack.IEventSubscription, System.Threading.Tasks.Task> NotifyUpdateAsync { get => throw null; set => throw null; }
        public void NotifyUserId(string userId, string selector, object message, string channel = default(string)) => throw null;
        public System.Threading.Tasks.Task NotifyUserIdAsync(string userId, string selector, object message, string channel = default(string), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public System.Threading.Tasks.Task NotifyUserIdJsonAsync(string userId, string selector, string json, string channel = default(string), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public void NotifyUserName(string userName, string selector, object message, string channel = default(string)) => throw null;
        public System.Threading.Tasks.Task NotifyUserNameAsync(string userName, string selector, object message, string channel = default(string), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public System.Threading.Tasks.Task NotifyUserNameJsonAsync(string userName, string selector, string json, string channel = default(string), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public System.Action<ServiceStack.IEventSubscription, System.Exception> OnError { get => throw null; set => throw null; }
        public System.Func<ServiceStack.IEventSubscription, System.Threading.Tasks.Task> OnRemoveSubscriptionAsync { get => throw null; set => throw null; }
        public System.Func<ServiceStack.IEventSubscription, System.Threading.Tasks.Task> OnSubscribeAsync { get => throw null; set => throw null; }
        public System.Func<ServiceStack.IEventSubscription, System.Threading.Tasks.Task> OnUnsubscribeAsync { get => throw null; set => throw null; }
        public System.Func<ServiceStack.IEventSubscription, System.Threading.Tasks.Task> OnUpdateAsync { get => throw null; set => throw null; }
        public bool Pulse(string id) => throw null;
        public System.Threading.Tasks.Task<bool> PulseAsync(string id, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public void QueueAsyncTask(System.Func<System.Threading.Tasks.Task> task) => throw null;
        public System.Threading.Tasks.Task RegisterAsync(ServiceStack.IEventSubscription subscription, System.Collections.Generic.Dictionary<string, string> connectArgs = default(System.Collections.Generic.Dictionary<string, string>), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public void RegisterHungConnection(ServiceStack.IEventSubscription sub) => throw null;
        public int RemoveExpiredSubscriptions() => throw null;
        public System.Threading.Tasks.Task<int> RemoveExpiredSubscriptionsAsync(System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public void Reset() => throw null;
        public System.Func<object, string> Serialize { get => throw null; set => throw null; }
        public System.Collections.Concurrent.ConcurrentDictionary<string, System.Collections.Concurrent.ConcurrentDictionary<ServiceStack.IEventSubscription, bool>> SessionSubscriptions;
        public void Start() => throw null;
        public void Stop() => throw null;
        public System.Threading.Tasks.Task StopAsync() => throw null;
        public void SubscribeToChannels(string subscriptionId, string[] channels) => throw null;
        public System.Threading.Tasks.Task SubscribeToChannelsAsync(string subscriptionId, string[] channels, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public System.Collections.Concurrent.ConcurrentDictionary<string, ServiceStack.IEventSubscription> Subscriptions;
        public void UnRegister(string subscriptionId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public System.Threading.Tasks.Task UnRegisterAsync(string subscriptionId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public void UnsubscribeFromChannels(string subscriptionId, string[] channels) => throw null;
        public System.Threading.Tasks.Task UnsubscribeFromChannelsAsync(string subscriptionId, string[] channels, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public System.Collections.Concurrent.ConcurrentDictionary<string, System.Collections.Concurrent.ConcurrentDictionary<ServiceStack.IEventSubscription, bool>> UserIdSubscriptions;
        public System.Collections.Concurrent.ConcurrentDictionary<string, System.Collections.Concurrent.ConcurrentDictionary<ServiceStack.IEventSubscription, bool>> UserNameSubscriptions;
    }

    // Generated from `ServiceStack.MemoryValidationSource` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class MemoryValidationSource : ServiceStack.Auth.IClearable, ServiceStack.IValidationSource, ServiceStack.IValidationSourceAdmin
    {
        public void Clear() => throw null;
        public System.Threading.Tasks.Task ClearCacheAsync() => throw null;
        public System.Threading.Tasks.Task DeleteValidationRulesAsync(params int[] ids) => throw null;
        public System.Collections.Generic.List<ServiceStack.ValidationRule> GetAllValidateRules() => throw null;
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceStack.ValidationRule>> GetAllValidateRulesAsync() => throw null;
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceStack.ValidationRule>> GetAllValidateRulesAsync(string typeName) => throw null;
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceStack.ValidationRule>> GetValidateRulesByIdsAsync(params int[] ids) => throw null;
        public System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, ServiceStack.IValidateRule>> GetValidationRules(System.Type type) => throw null;
        public MemoryValidationSource() => throw null;
        public void SaveValidationRules(System.Collections.Generic.List<ServiceStack.ValidationRule> validateRules) => throw null;
        public System.Threading.Tasks.Task SaveValidationRulesAsync(System.Collections.Generic.List<ServiceStack.ValidationRule> validateRules) => throw null;
        public static System.Collections.Concurrent.ConcurrentDictionary<string, System.Collections.Generic.KeyValuePair<string, ServiceStack.IValidateRule>[]> TypeRulesMap;
    }

    // Generated from `ServiceStack.MetadataAppService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class MetadataAppService : ServiceStack.Service
    {
        public ServiceStack.AppMetadata Any(ServiceStack.MetadataApp request) => throw null;
        public MetadataAppService() => throw null;
        public ServiceStack.NativeTypes.INativeTypesMetadata NativeTypesMetadata { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.MetadataDebug` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class MetadataDebug : ServiceStack.IReturn, ServiceStack.IReturn<string>
    {
        public string AuthSecret { get => throw null; set => throw null; }
        public MetadataDebug() => throw null;
        public string Script { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.MetadataDebugService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class MetadataDebugService : ServiceStack.Service
    {
        public System.Threading.Tasks.Task<object> Any(ServiceStack.MetadataDebug request) => throw null;
        public static string DefaultTemplate;
        public System.Threading.Tasks.Task<object> GetHtml(ServiceStack.MetadataDebug request) => throw null;
        public MetadataDebugService() => throw null;
        public static string Route;
    }

    // Generated from `ServiceStack.MetadataFeature` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class MetadataFeature : ServiceStack.IPlugin, ServiceStack.IPreInitPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
    {
        public System.Collections.Generic.List<System.Action<ServiceStack.Web.IRequest, ServiceStack.AppMetadata>> AfterAppMetadataFilters { get => throw null; }
        public System.Collections.Generic.List<System.Action<ServiceStack.AppMetadata>> AppMetadataFilters { get => throw null; }
        public void BeforePluginsLoaded(ServiceStack.IAppHost appHost) => throw null;
        public System.Collections.Generic.Dictionary<string, string> DebugLinks { get => throw null; set => throw null; }
        public string DebugLinksTitle { get => throw null; set => throw null; }
        public System.Action<ServiceStack.Metadata.OperationControl> DetailPageFilter { get => throw null; set => throw null; }
        public bool EnableAppMetadata { get => throw null; set => throw null; }
        public bool EnableNav { get => throw null; set => throw null; }
        public System.Collections.Generic.List<System.Type> ExportTypes { get => throw null; }
        public ServiceStack.HtmlModule HtmlModule { get => throw null; set => throw null; }
        public string Id { get => throw null; set => throw null; }
        public System.Action<ServiceStack.Metadata.IndexOperationsControl> IndexPageFilter { get => throw null; set => throw null; }
        public MetadataFeature() => throw null;
        public System.Collections.Generic.Dictionary<string, string> PluginLinks { get => throw null; set => throw null; }
        public string PluginLinksTitle { get => throw null; set => throw null; }
        public virtual ServiceStack.Host.IHttpHandler ProcessRequest(string httpMethod, string pathInfo, string filePath) => throw null;
        public void Register(ServiceStack.IAppHost appHost) => throw null;
        public System.Collections.Generic.Dictionary<System.Type, string[]> ServiceRoutes { get => throw null; set => throw null; }
        public bool ShowResponseStatusInMetadataPages { get => throw null; set => throw null; }
        public System.Func<string, string> TagFilter { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.MetadataNavService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class MetadataNavService : ServiceStack.Service
    {
        public object Get(ServiceStack.GetNavItems request) => throw null;
        public MetadataNavService() => throw null;
    }

    // Generated from `ServiceStack.MetadataUtils` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class MetadataUtils
    {
        public static ServiceStack.MetadataFeature AddDebugLink(this ServiceStack.MetadataFeature metadata, string href, string title) => throw null;
        public static ServiceStack.MetadataFeature AddPluginLink(this ServiceStack.MetadataFeature metadata, string href, string title) => throw null;
        public static void LocalizeMetadata(ServiceStack.Web.IRequest req, ServiceStack.AppMetadata response) => throw null;
        public static ServiceStack.MetadataFeature RemoveDebugLink(this ServiceStack.MetadataFeature metadata, string href) => throw null;
        public static ServiceStack.MetadataFeature RemovePluginLink(this ServiceStack.MetadataFeature metadata, string href) => throw null;
        public static ServiceStack.AppMetadata ToAppMetadata(this ServiceStack.NativeTypes.INativeTypesMetadata nativeTypesMetadata, ServiceStack.Web.IRequest req) => throw null;
    }

    // Generated from `ServiceStack.MinifyCssScriptBlock` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class MinifyCssScriptBlock : ServiceStack.MinifyScriptBlockBase
    {
        public override ServiceStack.ICompressor Minifier { get => throw null; }
        public MinifyCssScriptBlock() => throw null;
        public override string Name { get => throw null; }
    }

    // Generated from `ServiceStack.MinifyHtmlScriptBlock` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class MinifyHtmlScriptBlock : ServiceStack.MinifyScriptBlockBase
    {
        public override ServiceStack.ICompressor Minifier { get => throw null; }
        public MinifyHtmlScriptBlock() => throw null;
        public override string Name { get => throw null; }
    }

    // Generated from `ServiceStack.MinifyJsScriptBlock` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class MinifyJsScriptBlock : ServiceStack.MinifyScriptBlockBase
    {
        public override ServiceStack.ICompressor Minifier { get => throw null; }
        public MinifyJsScriptBlock() => throw null;
        public override string Name { get => throw null; }
    }

    // Generated from `ServiceStack.MinifyScriptBlockBase` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public abstract class MinifyScriptBlockBase : ServiceStack.Script.ScriptBlock
    {
        public override ServiceStack.Script.ScriptLanguage Body { get => throw null; }
        public System.ReadOnlyMemory<System.Char> GetMinifiedOutputCache(System.ReadOnlyMemory<System.Char> contents) => throw null;
        public abstract ServiceStack.ICompressor Minifier { get; }
        protected MinifyScriptBlockBase() => throw null;
        public override System.Threading.Tasks.Task WriteAsync(ServiceStack.Script.ScriptScopeContext scope, ServiceStack.Script.PageBlockFragment block, System.Threading.CancellationToken token) => throw null;
    }

    // Generated from `ServiceStack.ModularExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class ModularExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddModularStartup<THost>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.Configuration.IConfiguration configuration) where THost : ServiceStack.AppHostBase => throw null;
        public static System.Collections.Generic.List<object> PriorityBelowZero(this System.Collections.Generic.List<System.Tuple<object, int>> instances) => throw null;
        public static System.Collections.Generic.List<object> PriorityOrdered(this System.Collections.Generic.List<System.Tuple<object, int>> instances) => throw null;
        public static System.Collections.Generic.List<object> PriorityZeroOrAbove(this System.Collections.Generic.List<System.Tuple<object, int>> instances) => throw null;
        public static Microsoft.AspNetCore.Hosting.IWebHostBuilder UseModularStartup<TStartup, TStartupActivator>(this Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder) where TStartup : class => throw null;
        public static Microsoft.AspNetCore.Hosting.IWebHostBuilder UseModularStartup<TStartup>(this Microsoft.AspNetCore.Hosting.IWebHostBuilder hostBuilder) where TStartup : class => throw null;
        public static System.Collections.Generic.List<System.Tuple<object, int>> WithPriority(this System.Collections.Generic.IEnumerable<object> instances) => throw null;
    }

    // Generated from `ServiceStack.ModularStartup` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public abstract class ModularStartup : Microsoft.AspNetCore.Hosting.IStartup
    {
        public Microsoft.Extensions.Configuration.IConfiguration Configuration { get => throw null; set => throw null; }
        public void Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder app) => throw null;
        public System.IServiceProvider ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection services) => throw null;
        public static System.Type Create<TStartup>() => throw null;
        public object CreateStartupInstance(System.Type type) => throw null;
        public System.Collections.Generic.List<System.Tuple<object, int>> GetPriorityInstances() => throw null;
        public System.Collections.Generic.List<System.Type> IgnoreTypes { get => throw null; set => throw null; }
        public static ServiceStack.ModularStartup Instance { get => throw null; set => throw null; }
        public virtual bool LoadType(System.Type startupType) => throw null;
        public System.Collections.Generic.List<object> LoadedConfigurations { get => throw null; set => throw null; }
        protected ModularStartup() => throw null;
        protected ModularStartup(Microsoft.Extensions.Configuration.IConfiguration configuration, System.Func<System.Collections.Generic.IEnumerable<System.Type>> typesResolver) => throw null;
        protected ModularStartup(Microsoft.Extensions.Configuration.IConfiguration configuration, System.Type[] types) => throw null;
        protected ModularStartup(Microsoft.Extensions.Configuration.IConfiguration configuration, params System.Reflection.Assembly[] assemblies) => throw null;
        public System.Collections.Generic.List<System.Reflection.Assembly> ScanAssemblies { get => throw null; }
        public System.Func<System.Collections.Generic.IEnumerable<System.Type>> TypeResolver { get => throw null; }
    }

    // Generated from `ServiceStack.ModularStartupActivator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ModularStartupActivator
    {
        protected Microsoft.Extensions.Configuration.IConfiguration Configuration { get => throw null; }
        public virtual void Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder app) => throw null;
        public virtual void ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection services) => throw null;
        protected ServiceStack.ModularStartup Instance;
        public ModularStartupActivator(Microsoft.Extensions.Configuration.IConfiguration configuration) => throw null;
        public static System.Type StartupType { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.MqExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class MqExtensions
    {
        public static System.Collections.Generic.Dictionary<string, string> ToHeaders(this ServiceStack.Messaging.IMessage message) => throw null;
    }

    // Generated from `ServiceStack.MqRequestDiagnosticEvent` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class MqRequestDiagnosticEvent : ServiceStack.DiagnosticEvent
    {
        public object Body { get => throw null; set => throw null; }
        public ServiceStack.Messaging.IMessage Message { get => throw null; set => throw null; }
        public ServiceStack.Messaging.IMessageQueueClient MqClient { get => throw null; set => throw null; }
        public MqRequestDiagnosticEvent() => throw null;
        public ServiceStack.IOneWayClient OneWayClient { get => throw null; set => throw null; }
        public string ReplyTo { get => throw null; set => throw null; }
        public override string Source { get => throw null; }
    }

    // Generated from `ServiceStack.NativeTypesFeature` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class NativeTypesFeature : ServiceStack.IPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
    {
        public ServiceStack.NativeTypes.MetadataTypesGenerator DefaultGenerator { get => throw null; set => throw null; }
        public static bool DisableTokenVerification { get => throw null; set => throw null; }
        public void ExportAttribute(System.Type attributeType, System.Func<System.Attribute, ServiceStack.MetadataAttribute> converter) => throw null;
        public void ExportAttribute<T>(System.Func<System.Attribute, ServiceStack.MetadataAttribute> converter) => throw null;
        public ServiceStack.NativeTypes.MetadataTypesGenerator GetGenerator() => throw null;
        public string Id { get => throw null; set => throw null; }
        public ServiceStack.MetadataTypesConfig MetadataTypesConfig { get => throw null; set => throw null; }
        public NativeTypesFeature() => throw null;
        public void Register(ServiceStack.IAppHost appHost) => throw null;
    }

    // Generated from `ServiceStack.NetCoreAppHostExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class NetCoreAppHostExtensions
    {
        public static Microsoft.AspNetCore.Hosting.IWebHostBuilder ConfigureAppHost(this Microsoft.AspNetCore.Hosting.IWebHostBuilder builder, System.Action<ServiceStack.ServiceStackHost> beforeConfigure = default(System.Action<ServiceStack.ServiceStackHost>), System.Action<ServiceStack.ServiceStackHost> afterConfigure = default(System.Action<ServiceStack.ServiceStackHost>), System.Action<ServiceStack.ServiceStackHost> afterPluginsLoaded = default(System.Action<ServiceStack.ServiceStackHost>), System.Action<ServiceStack.ServiceStackHost> afterAppHostInit = default(System.Action<ServiceStack.ServiceStackHost>)) => throw null;
        public static Microsoft.Extensions.DependencyInjection.IServiceScope CreateScope(this ServiceStack.Web.IRequest req) => throw null;
        public static Microsoft.AspNetCore.Builder.IApplicationBuilder GetApp(this ServiceStack.IAppHost appHost) => throw null;
        public static System.IServiceProvider GetApplicationServices(this ServiceStack.IAppHost appHost) => throw null;
        public static Microsoft.Extensions.Configuration.IConfiguration GetConfiguration(this ServiceStack.IAppHost appHost) => throw null;
        public static Microsoft.AspNetCore.Hosting.IWebHostEnvironment GetHostingEnvironment(this ServiceStack.IAppHost appHost) => throw null;
        public static System.Collections.Generic.IEnumerable<object> GetServices(this ServiceStack.Web.IRequest req, System.Type type) => throw null;
        public static System.Collections.Generic.IEnumerable<T> GetServices<T>(this ServiceStack.Web.IRequest req) => throw null;
        public static bool IsDevelopmentEnvironment(this ServiceStack.IAppHost appHost) => throw null;
        public static bool IsProductionEnvironment(this ServiceStack.IAppHost appHost) => throw null;
        public static bool IsStagingEnvironment(this ServiceStack.IAppHost appHost) => throw null;
        public static T Resolve<T>(this System.IServiceProvider provider) => throw null;
        public static object ResolveScoped(this ServiceStack.Web.IRequest req, System.Type type) => throw null;
        public static T ResolveScoped<T>(this ServiceStack.Web.IRequest req) => throw null;
        public static ServiceStack.Web.IHttpRequest ToRequest(this Microsoft.AspNetCore.Http.HttpContext httpContext, string operationName = default(string)) => throw null;
        public static ServiceStack.Web.IHttpRequest ToRequest(this Microsoft.AspNetCore.Http.HttpRequest request, string operationName = default(string)) => throw null;
        public static T TryResolve<T>(this System.IServiceProvider provider) => throw null;
        public static object TryResolveScoped(this ServiceStack.Web.IRequest req, System.Type type) => throw null;
        public static T TryResolveScoped<T>(this ServiceStack.Web.IRequest req) => throw null;
        public static Microsoft.AspNetCore.Builder.IApplicationBuilder Use(this Microsoft.AspNetCore.Builder.IApplicationBuilder app, ServiceStack.Host.IHttpAsyncHandler httpHandler) => throw null;
        public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseServiceStack(this Microsoft.AspNetCore.Builder.IApplicationBuilder app, ServiceStack.AppHostBase appHost) => throw null;
    }

    // Generated from `ServiceStack.NetCoreAppSettings` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class NetCoreAppSettings : ServiceStack.Configuration.IAppSettings
    {
        public Microsoft.Extensions.Configuration.IConfiguration Configuration { get => throw null; }
        public bool Exists(string key) => throw null;
        public T Get<T>(string name) => throw null;
        public T Get<T>(string name, T defaultValue) => throw null;
        public System.Collections.Generic.Dictionary<string, string> GetAll() => throw null;
        public System.Collections.Generic.List<string> GetAllKeys() => throw null;
        public System.Collections.Generic.IDictionary<string, string> GetDictionary(string key) => throw null;
        public System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> GetKeyValuePairs(string key) => throw null;
        public System.Collections.Generic.IList<string> GetList(string key) => throw null;
        public string GetString(string name) => throw null;
        public NetCoreAppSettings(Microsoft.Extensions.Configuration.IConfiguration configuration) => throw null;
        public void Set<T>(string key, T value) => throw null;
    }

    // Generated from `ServiceStack.NotEqualCondition` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class NotEqualCondition : ServiceStack.QueryCondition
    {
        public override string Alias { get => throw null; }
        public static ServiceStack.NotEqualCondition Instance;
        public override bool Match(object a, object b) => throw null;
        public NotEqualCondition() => throw null;
    }

    // Generated from `ServiceStack.OrderByExpression` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class OrderByExpression : ServiceStack.FilterExpression
    {
        public override System.Collections.Generic.IEnumerable<T> Apply<T>(System.Collections.Generic.IEnumerable<T> source) => throw null;
        public ServiceStack.GetMemberDelegate[] FieldGetters { get => throw null; set => throw null; }
        public string[] FieldNames { get => throw null; set => throw null; }
        public bool[] OrderAsc { get => throw null; set => throw null; }
        public OrderByExpression(string[] fieldNames, ServiceStack.GetMemberDelegate[] fieldGetters, bool[] orderAsc) => throw null;
        public OrderByExpression(string fieldName, ServiceStack.GetMemberDelegate fieldGetter, bool orderAsc = default(bool)) => throw null;
    }

    // Generated from `ServiceStack.PersistentImagesHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class PersistentImagesHandler : ServiceStack.ImagesHandler
    {
        public string DirPath { get => throw null; }
        public override ServiceStack.StaticContent Get(string path) => throw null;
        public PersistentImagesHandler(string path, ServiceStack.StaticContent fallback, ServiceStack.IO.IVirtualFiles virtualFiles, string dirPath) : base(default(string), default(ServiceStack.StaticContent)) => throw null;
        public override void Save(string path, ServiceStack.StaticContent content) => throw null;
        public ServiceStack.IO.IVirtualFiles VirtualFiles { get => throw null; }
    }

    // Generated from `ServiceStack.Platform` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class Platform
    {
        public virtual string GetAppConfigPath() => throw null;
        public virtual string GetAppSetting(string key) => throw null;
        public virtual string GetAppSetting(string key, string defaultValue) => throw null;
        public virtual T GetAppSetting<T>(string key, T defaultValue) => throw null;
        public virtual string GetConnectionString(string key) => throw null;
        public virtual System.Collections.Generic.Dictionary<string, string> GetCookiesAsDictionary(ServiceStack.Web.IRequest httpReq) => throw null;
        public virtual System.Collections.Generic.Dictionary<string, string> GetCookiesAsDictionary(ServiceStack.Web.IResponse httpRes) => throw null;
        public virtual string GetNullableAppSetting(string key) => throw null;
        public virtual System.Collections.Generic.HashSet<string> GetRazorNamespaces() => throw null;
        public virtual void InitHostConfig(ServiceStack.HostConfig config) => throw null;
        public static ServiceStack.Platform Instance;
        public static T ParseTextValue<T>(string textValue) => throw null;
        public Platform() => throw null;
    }

    // Generated from `ServiceStack.Plugins` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class Plugins
    {
        public static void AddToAppMetadata(this ServiceStack.IAppHost appHost, System.Action<ServiceStack.AppMetadata> fn) => throw null;
        public const string AdminUsers = default;
        public const string Auth = default;
        public const string AutoQuery = default;
        public const string AutoQueryData = default;
        public const string AutoQueryMetadata = default;
        public const string CancelRequests = default;
        public const string Cors = default;
        public const string Csv = default;
        public const string Desktop = default;
        public const string EncryptedMessaging = default;
        public const string FileUpload = default;
        public const string Grpc = default;
        public const string HotReload = default;
        public const string Html = default;
        public const string HttpCache = default;
        public const string LispTcpServer = default;
        public const string Metadata = default;
        public const string MiniProfiler = default;
        public static void ModifyAppMetadata(this ServiceStack.IAppHost appHost, System.Action<ServiceStack.Web.IRequest, ServiceStack.AppMetadata> fn) => throw null;
        public const string MsgPack = default;
        public const string NativeTypes = default;
        public const string OpenApi = default;
        public const string Postman = default;
        public const string PredefinedRoutes = default;
        public const string Profiling = default;
        public const string ProtoBuf = default;
        public const string Proxy = default;
        public const string Razor = default;
        public const string RedisErrorLogs = default;
        public const string Register = default;
        public const string RequestInfo = default;
        public const string RequestLogs = default;
        public const string ServerEvents = default;
        public const string Session = default;
        public const string SharpPages = default;
        public const string Sitemap = default;
        public const string Soap = default;
        public const string Svg = default;
        public const string Swagger = default;
        public const string Ui = default;
        public const string Validation = default;
        public const string WebSudo = default;
    }

    // Generated from `ServiceStack.PocoDataSource` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class PocoDataSource
    {
        public static ServiceStack.PocoDataSource<T> Create<T>(System.Collections.Generic.ICollection<T> items) => throw null;
        public static ServiceStack.PocoDataSource<T> Create<T>(System.Collections.Generic.ICollection<T> items, System.Func<System.Collections.Generic.IEnumerable<T>, System.Int64> nextId) => throw null;
        public static ServiceStack.PocoDataSource<T> Create<T>(System.Collections.Generic.IEnumerable<T> items, System.Func<System.Collections.Generic.IEnumerable<T>, System.Int64> nextIdSequence) => throw null;
        public static ServiceStack.PocoDataSource<T> Create<T>(System.Collections.Generic.IEnumerable<T> items, System.Int64 idSequence) => throw null;
    }

    // Generated from `ServiceStack.PocoDataSource<>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class PocoDataSource<T>
    {
        public T Add(T item) => throw null;
        public System.Collections.Generic.List<T> GetAll() => throw null;
        public System.Int64 NextId() => throw null;
        public PocoDataSource(System.Collections.Generic.IEnumerable<T> items, System.Int64 nextIdSequence = default(System.Int64)) => throw null;
        public T Save(T item) => throw null;
        public ServiceStack.MemoryDataSource<T> ToDataSource(ServiceStack.IQueryData dto, ServiceStack.Web.IRequest req) => throw null;
        public bool TryDelete(T item) => throw null;
        public bool TryDeleteById(object itemId) => throw null;
        public int TryDeleteByIds<TId>(System.Collections.Generic.IEnumerable<TId> itemIds) => throw null;
        public bool TryUpdate(T item) => throw null;
        public bool TryUpdateById(T item, object itemId) => throw null;
    }

    // Generated from `ServiceStack.Postman` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class Postman
    {
        public bool ExportSession { get => throw null; set => throw null; }
        public System.Collections.Generic.List<string> Label { get => throw null; set => throw null; }
        public Postman() => throw null;
        public string ssid { get => throw null; set => throw null; }
        public string ssopt { get => throw null; set => throw null; }
        public string sspid { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.PostmanCollection` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class PostmanCollection
    {
        public PostmanCollection() => throw null;
        public ServiceStack.PostmanCollectionInfo info { get => throw null; set => throw null; }
        public System.Collections.Generic.List<ServiceStack.PostmanRequest> item { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.PostmanCollectionInfo` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class PostmanCollectionInfo
    {
        public PostmanCollectionInfo() => throw null;
        public string name { get => throw null; set => throw null; }
        public string schema { get => throw null; set => throw null; }
        public string version { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.PostmanData` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class PostmanData
    {
        public PostmanData() => throw null;
        public string key { get => throw null; set => throw null; }
        public string type { get => throw null; set => throw null; }
        public string value { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.PostmanExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class PostmanExtensions
    {
        public static System.Collections.Generic.Dictionary<string, string> ApplyPropertyTypes(this System.Collections.Generic.IEnumerable<string> names, System.Collections.Generic.Dictionary<string, string> typeMap, string defaultValue = default(string)) => throw null;
        public static System.Collections.Generic.List<ServiceStack.PostmanData> ApplyPropertyTypes(this System.Collections.Generic.List<ServiceStack.PostmanData> data, System.Collections.Generic.Dictionary<string, string> typeMap, string defaultValue = default(string)) => throw null;
        public static string AsFriendlyName(this System.Type type, ServiceStack.PostmanFeature feature) => throw null;
        public static string ToPostmanPathVariables(this string path) => throw null;
    }

    // Generated from `ServiceStack.PostmanFeature` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class PostmanFeature : ServiceStack.IPlugin, ServiceStack.IPreInitPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
    {
        public string AtRestPath { get => throw null; set => throw null; }
        public void BeforePluginsLoaded(ServiceStack.IAppHost appHost) => throw null;
        public System.Collections.Generic.List<string> DefaultLabelFmt { get => throw null; set => throw null; }
        public System.Collections.Generic.List<string> DefaultVerbsForAny { get => throw null; set => throw null; }
        public bool? EnableSessionExport { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<string, string> FriendlyTypeNames;
        public string Headers { get => throw null; set => throw null; }
        public string Id { get => throw null; set => throw null; }
        public PostmanFeature() => throw null;
        public void Register(ServiceStack.IAppHost appHost) => throw null;
    }

    // Generated from `ServiceStack.PostmanRequest` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class PostmanRequest
    {
        public PostmanRequest() => throw null;
        public string name { get => throw null; set => throw null; }
        public ServiceStack.PostmanRequestDetails request { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.PostmanRequestBody` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class PostmanRequestBody
    {
        public PostmanRequestBody() => throw null;
        public System.Collections.Generic.List<ServiceStack.PostmanData> formdata { get => throw null; set => throw null; }
        public string mode { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.PostmanRequestDetails` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class PostmanRequestDetails
    {
        public PostmanRequestDetails() => throw null;
        public ServiceStack.PostmanRequestBody body { get => throw null; set => throw null; }
        public string header { get => throw null; set => throw null; }
        public string method { get => throw null; set => throw null; }
        public ServiceStack.PostmanRequestUrl url { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.PostmanRequestKeyValue` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class PostmanRequestKeyValue
    {
        public PostmanRequestKeyValue() => throw null;
        public string key { get => throw null; set => throw null; }
        public string value { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.PostmanRequestUrl` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class PostmanRequestUrl
    {
        public PostmanRequestUrl() => throw null;
        public string host { get => throw null; set => throw null; }
        public string[] path { get => throw null; set => throw null; }
        public string port { get => throw null; set => throw null; }
        public string protocol { get => throw null; set => throw null; }
        public System.Collections.Generic.List<ServiceStack.PostmanRequestKeyValue> query { get => throw null; set => throw null; }
        public string raw { get => throw null; set => throw null; }
        public System.Collections.Generic.List<ServiceStack.PostmanRequestKeyValue> variable { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.PostmanService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class PostmanService : ServiceStack.Service
    {
        public object Any(ServiceStack.Postman request) => throw null;
        public string GetName(ServiceStack.PostmanFeature feature, ServiceStack.Postman request, System.Type requestType, string virtualPath) => throw null;
        public System.Collections.Generic.List<ServiceStack.PostmanRequest> GetRequests(ServiceStack.Postman request, string parentId, System.Collections.Generic.IEnumerable<ServiceStack.Host.Operation> operations) => throw null;
        public PostmanService() => throw null;
    }

    // Generated from `ServiceStack.PreProcessRequest` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class PreProcessRequest : ServiceStack.IPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
    {
        public System.Threading.Tasks.Task HandleFileUploadsAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object dto) => throw null;
        public System.Func<ServiceStack.Web.IRequest, ServiceStack.Web.IHttpFile, System.Threading.CancellationToken, System.Threading.Tasks.Task<string>> HandleUploadFileAsync { get => throw null; set => throw null; }
        public string Id { get => throw null; }
        public PreProcessRequest() => throw null;
        public void Register(ServiceStack.IAppHost appHost) => throw null;
    }

    // Generated from `ServiceStack.PredefinedRoutesFeature` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class PredefinedRoutesFeature : ServiceStack.IPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
    {
        public System.Collections.Generic.Dictionary<string, System.Func<ServiceStack.Host.IHttpHandler>> HandlerMappings { get => throw null; }
        public string Id { get => throw null; set => throw null; }
        public string JsonApiRoute { get => throw null; set => throw null; }
        public PredefinedRoutesFeature() => throw null;
        public ServiceStack.Host.IHttpHandler ProcessRequest(string httpMethod, string pathInfo, string filePath) => throw null;
        public void Register(ServiceStack.IAppHost appHost) => throw null;
    }

    // Generated from `ServiceStack.ProfilerDiagnosticObserver` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ProfilerDiagnosticObserver : System.IObserver<System.Collections.Generic.KeyValuePair<string, object>>, System.IObserver<System.Diagnostics.DiagnosticListener>
    {
        public static int AnalyzeCommandLength { get => throw null; set => throw null; }
        public ServiceStack.DiagnosticEntry CreateDiagnosticEntry(ServiceStack.DiagnosticEvent e, ServiceStack.DiagnosticEvent orig = default(ServiceStack.DiagnosticEvent)) => throw null;
        public ServiceStack.DiagnosticEntry Filter(ServiceStack.DiagnosticEntry entry, ServiceStack.DiagnosticEvent e) => throw null;
        public System.Collections.Generic.List<ServiceStack.DiagnosticEntry> GetLatestEntries(int? take) => throw null;
        public System.Collections.Generic.List<ServiceStack.DiagnosticEntry> GetPendingEntries(int? take) => throw null;
        public void OnCompleted() => throw null;
        void System.IObserver<System.Diagnostics.DiagnosticListener>.OnCompleted() => throw null;
        public void OnError(System.Exception error) => throw null;
        void System.IObserver<System.Diagnostics.DiagnosticListener>.OnError(System.Exception error) => throw null;
        void System.IObserver<System.Diagnostics.DiagnosticListener>.OnNext(System.Diagnostics.DiagnosticListener diagnosticListener) => throw null;
        public void OnNext(System.Collections.Generic.KeyValuePair<string, object> kvp) => throw null;
        public ProfilerDiagnosticObserver(ServiceStack.ProfilingFeature feature) => throw null;
        public static void SetException(ServiceStack.DiagnosticEntry to, System.Exception ex) => throw null;
        public ServiceStack.DiagnosticEntry ToDiagnosticEntry(ServiceStack.HttpClientDiagnosticEvent e, ServiceStack.HttpClientDiagnosticEvent orig = default(ServiceStack.HttpClientDiagnosticEvent)) => throw null;
        public ServiceStack.DiagnosticEntry ToDiagnosticEntry(ServiceStack.MqRequestDiagnosticEvent e, ServiceStack.MqRequestDiagnosticEvent orig = default(ServiceStack.MqRequestDiagnosticEvent)) => throw null;
        public ServiceStack.DiagnosticEntry ToDiagnosticEntry(ServiceStack.OrmLiteDiagnosticEvent e, ServiceStack.OrmLiteDiagnosticEvent orig = default(ServiceStack.OrmLiteDiagnosticEvent)) => throw null;
        public ServiceStack.DiagnosticEntry ToDiagnosticEntry(ServiceStack.RedisDiagnosticEvent e, ServiceStack.RedisDiagnosticEvent orig = default(ServiceStack.RedisDiagnosticEvent)) => throw null;
        public ServiceStack.DiagnosticEntry ToDiagnosticEntry(ServiceStack.RequestDiagnosticEvent e, ServiceStack.RequestDiagnosticEvent orig = default(ServiceStack.RequestDiagnosticEvent)) => throw null;
        protected System.Collections.Concurrent.ConcurrentQueue<ServiceStack.DiagnosticEntry> entries;
    }

    // Generated from `ServiceStack.ProfilingFeature` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ProfilingFeature : ServiceStack.IPlugin, ServiceStack.IPreInitPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
    {
        public string AccessRole { get => throw null; set => throw null; }
        public void BeforePluginsLoaded(ServiceStack.IAppHost appHost) => throw null;
        public int Capacity { get => throw null; set => throw null; }
        public const int DefaultCapacity = default;
        public int DefaultLimit { get => throw null; set => throw null; }
        public System.Action<ServiceStack.DiagnosticEntry, ServiceStack.DiagnosticEvent> DiagnosticEntryFilter { get => throw null; set => throw null; }
        public System.Collections.Generic.List<System.Type> ExcludeRequestDtoTypes { get => throw null; set => throw null; }
        public System.Collections.Generic.List<string> ExcludeRequestPathInfoStartingWith { get => throw null; set => throw null; }
        public System.Func<ServiceStack.Web.IRequest, bool> ExcludeRequestsFilter { get => throw null; set => throw null; }
        public System.Collections.Generic.List<System.Type> ExcludeResponseTypes { get => throw null; set => throw null; }
        public System.Collections.Generic.List<System.Type> HideRequestBodyForRequestDtoTypes { get => throw null; set => throw null; }
        public string Id { get => throw null; }
        public bool? IncludeStackTrace { get => throw null; set => throw null; }
        public int MaxBodyLength { get => throw null; set => throw null; }
        protected internal ServiceStack.ProfilerDiagnosticObserver Observer { get => throw null; set => throw null; }
        public ServiceStack.ProfileSource Profile { get => throw null; set => throw null; }
        public ProfilingFeature() => throw null;
        public void Register(ServiceStack.IAppHost appHost) => throw null;
        public System.Func<ServiceStack.Web.IRequest, bool> ResponseTrackingFilter { get => throw null; set => throw null; }
        public System.Collections.Generic.List<string> SummaryFields { get => throw null; set => throw null; }
        public string TagLabel { get => throw null; set => throw null; }
        public System.Func<ServiceStack.Web.IRequest, string> TagResolver { get => throw null; set => throw null; }
        protected internal System.DateTime startDateTime;
        protected internal System.Int64 startTick;
    }

    // Generated from `ServiceStack.ProxyFeature` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ProxyFeature : ServiceStack.IPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
    {
        public string Id { get => throw null; set => throw null; }
        public System.Collections.Generic.HashSet<string> IgnoreResponseHeaders;
        public ProxyFeature(System.Func<ServiceStack.Web.IHttpRequest, bool> matchingRequests, System.Func<ServiceStack.Web.IHttpRequest, string> resolveUrl) => throw null;
        public System.Action<ServiceStack.Web.IHttpRequest, System.Net.HttpWebRequest> ProxyRequestFilter { get => throw null; set => throw null; }
        public System.Action<ServiceStack.Web.IHttpResponse, System.Net.HttpWebResponse> ProxyResponseFilter { get => throw null; set => throw null; }
        public void Register(ServiceStack.IAppHost appHost) => throw null;
        public System.Func<ServiceStack.Web.IHttpRequest, string> ResolveUrl;
        public System.Func<ServiceStack.Web.IHttpRequest, System.IO.Stream, System.Threading.Tasks.Task<System.IO.Stream>> TransformRequest { get => throw null; set => throw null; }
        public System.Func<ServiceStack.Web.IHttpResponse, System.IO.Stream, System.Threading.Tasks.Task<System.IO.Stream>> TransformResponse { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.ProxyFeatureHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ProxyFeatureHandler : ServiceStack.Host.Handlers.HttpAsyncTaskHandler
    {
        public virtual System.Threading.Tasks.Task CopyToResponse(ServiceStack.Web.IHttpResponse res, System.Net.HttpWebResponse webRes) => throw null;
        public System.Collections.Generic.HashSet<string> IgnoreResponseHeaders { get => throw null; set => throw null; }
        public static void InitWebRequest(ServiceStack.Web.IHttpRequest httpReq, System.Net.HttpWebRequest webReq) => throw null;
        public override System.Threading.Tasks.Task ProcessRequestAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse response, string operationName) => throw null;
        public ProxyFeatureHandler() => throw null;
        public System.Threading.Tasks.Task ProxyRequestAsync(ServiceStack.Web.IHttpRequest httpReq, System.Net.HttpWebRequest webReq) => throw null;
        public virtual System.Threading.Tasks.Task ProxyRequestAsync(ServiceStack.Web.IHttpRequest httpReq, string url) => throw null;
        public System.Action<ServiceStack.Web.IHttpRequest, System.Net.HttpWebRequest> ProxyRequestFilter { get => throw null; set => throw null; }
        public System.Action<ServiceStack.Web.IHttpResponse, System.Net.HttpWebResponse> ProxyResponseFilter { get => throw null; set => throw null; }
        public System.Threading.Tasks.Task ProxyToResponse(ServiceStack.Web.IHttpResponse res, System.Net.HttpWebRequest webReq) => throw null;
        public System.Func<ServiceStack.Web.IHttpRequest, string> ResolveUrl { get => throw null; set => throw null; }
        public override bool RunAsAsync() => throw null;
        public System.Func<ServiceStack.Web.IHttpRequest, System.IO.Stream, System.Threading.Tasks.Task<System.IO.Stream>> TransformRequest { get => throw null; set => throw null; }
        public System.Func<ServiceStack.Web.IHttpResponse, System.IO.Stream, System.Threading.Tasks.Task<System.IO.Stream>> TransformResponse { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.QueryCondition` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public abstract class QueryCondition
    {
        public abstract string Alias { get; }
        public virtual int CompareTo(object a, object b) => throw null;
        public abstract bool Match(object a, object b);
        protected QueryCondition() => throw null;
        public ServiceStack.QueryTerm Term { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.QueryDataContext` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class QueryDataContext
    {
        public ServiceStack.IQueryData Dto { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<string, string> DynamicParams { get => throw null; set => throw null; }
        public QueryDataContext() => throw null;
        public ServiceStack.Web.IRequest Request { get => throw null; set => throw null; }
        public ServiceStack.ITypedQueryData TypedQuery { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.QueryDataField` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class QueryDataField
    {
        public string Condition { get => throw null; set => throw null; }
        public string Field { get => throw null; set => throw null; }
        public ServiceStack.QueryCondition QueryCondition { get => throw null; set => throw null; }
        public QueryDataField() => throw null;
        public ServiceStack.QueryTerm Term { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.QueryDataFilterContext` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class QueryDataFilterContext
    {
        public System.Collections.Generic.List<ServiceStack.Command> Commands { get => throw null; set => throw null; }
        public ServiceStack.IQueryDataSource Db { get => throw null; set => throw null; }
        public ServiceStack.IQueryData Dto { get => throw null; set => throw null; }
        public ServiceStack.IDataQuery Query { get => throw null; set => throw null; }
        public QueryDataFilterContext() => throw null;
        public ServiceStack.IQueryResponse Response { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.QueryDataFilterDelegate` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public delegate void QueryDataFilterDelegate(ServiceStack.IDataQuery q, ServiceStack.IQueryData dto, ServiceStack.Web.IRequest req);

    // Generated from `ServiceStack.QueryDataSource<>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public abstract class QueryDataSource<T> : ServiceStack.IQueryDataSource, ServiceStack.IQueryDataSource<T>, System.IDisposable
    {
        public virtual System.Collections.Generic.IEnumerable<T> ApplyConditions(System.Collections.Generic.IEnumerable<T> data, System.Collections.Generic.IEnumerable<ServiceStack.DataConditionExpression> conditions) => throw null;
        public virtual System.Collections.Generic.IEnumerable<T> ApplyLimits(System.Collections.Generic.IEnumerable<T> source, int? skip, int? take) => throw null;
        public virtual System.Collections.Generic.IEnumerable<T> ApplySorting(System.Collections.Generic.IEnumerable<T> source, ServiceStack.OrderByExpression orderBy) => throw null;
        public virtual int Count(ServiceStack.IDataQuery q) => throw null;
        public virtual void Dispose() => throw null;
        public virtual ServiceStack.IDataQuery From<TSource>() => throw null;
        public abstract System.Collections.Generic.IEnumerable<T> GetDataSource(ServiceStack.IDataQuery q);
        public virtual System.Collections.Generic.List<Into> LoadSelect<Into, From>(ServiceStack.IDataQuery q) => throw null;
        protected QueryDataSource(ServiceStack.QueryDataContext context) => throw null;
        public virtual object SelectAggregate(ServiceStack.IDataQuery q, string name, System.Collections.Generic.IEnumerable<string> args) => throw null;
    }

    // Generated from `ServiceStack.RedisErrorLoggerFeature` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class RedisErrorLoggerFeature : ServiceStack.IPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
    {
        public const string CombinedServiceLogId = default;
        public object HandleServiceException(ServiceStack.Web.IRequest httpReq, object request, System.Exception ex) => throw null;
        public void HandleUncaughtException(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, string operationName, System.Exception ex) => throw null;
        public string Id { get => throw null; set => throw null; }
        public RedisErrorLoggerFeature(ServiceStack.Redis.IRedisClientsManager redisManager) => throw null;
        public void Register(ServiceStack.IAppHost appHost) => throw null;
        public const string UrnServiceErrorType = default;
    }

    // Generated from `ServiceStack.RegistrationFeature` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class RegistrationFeature : ServiceStack.IPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
    {
        public bool AllowUpdates { get => throw null; set => throw null; }
        public string AtRestPath { get => throw null; set => throw null; }
        public System.Collections.Generic.List<ServiceStack.InputInfo> FormLayout { get => throw null; set => throw null; }
        public string Id { get => throw null; set => throw null; }
        public void Register(ServiceStack.IAppHost appHost) => throw null;
        public RegistrationFeature() => throw null;
        public ServiceStack.Auth.ValidateFn ValidateFn { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.ReplaceFileUploadService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ReplaceFileUploadService : ServiceStack.Service
    {
        public System.Threading.Tasks.Task<object> Put(ServiceStack.ReplaceFileUpload request) => throw null;
        public ReplaceFileUploadService() => throw null;
    }

    // Generated from `ServiceStack.RepositoryBase` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public abstract class RepositoryBase : ServiceStack.IRepository, System.IDisposable
    {
        public virtual System.Data.IDbConnection Db { get => throw null; }
        public virtual ServiceStack.Data.IDbConnectionFactory DbFactory { get => throw null; set => throw null; }
        public virtual void Dispose() => throw null;
        protected RepositoryBase() => throw null;
    }

    // Generated from `ServiceStack.RequestContext` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class RequestContext
    {
        public static System.Threading.AsyncLocal<System.Collections.IDictionary> AsyncRequestItems;
        public void EndRequest() => throw null;
        public T GetOrCreate<T>(System.Func<T> createFn) => throw null;
        public static ServiceStack.RequestContext Instance;
        public virtual System.Collections.IDictionary Items { get => throw null; set => throw null; }
        public bool ReleaseDisposables() => throw null;
        public RequestContext() => throw null;
        public void StartRequestContext() => throw null;
        public void TrackDisposable(System.IDisposable instance) => throw null;
    }

    // Generated from `ServiceStack.RequestDiagnosticEvent` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class RequestDiagnosticEvent : ServiceStack.DiagnosticEvent
    {
        public ServiceStack.Web.IRequest Request { get => throw null; set => throw null; }
        public RequestDiagnosticEvent() => throw null;
        public override string Source { get => throw null; }
    }

    // Generated from `ServiceStack.RequestExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null; ServiceStack.Common, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static partial class RequestExtensions
    {
        public static bool AllowConnection(this ServiceStack.Web.IRequest req, bool requireSecureConnection) => throw null;
        public static string GetCompressionType(this ServiceStack.Web.IRequest request) => throw null;
        public static ServiceStack.Caching.IStreamCompressor GetCompressor(this ServiceStack.Web.IRequest request) => throw null;
        public static string GetContentEncoding(this ServiceStack.Web.IRequest request) => throw null;
        public static ServiceStack.IO.IVirtualDirectory GetDirectory(this ServiceStack.Web.IRequest request) => throw null;
        public static System.TimeSpan GetElapsed(this ServiceStack.Web.IRequest req) => throw null;
        public static ServiceStack.IO.IVirtualFile GetFile(this ServiceStack.Web.IRequest request) => throw null;
        public static string GetHeader(this ServiceStack.Web.IRequest request, string headerName) => throw null;
        public static System.IO.Stream GetInputStream(this ServiceStack.Web.IRequest req, System.IO.Stream stream) => throw null;
        public static object GetItem(this ServiceStack.Web.IRequest httpReq, string key) => throw null;
        public static string GetParamInRequestHeader(this ServiceStack.Web.IRequest request, string name) => throw null;
        public static T GetRuntimeConfig<T>(this ServiceStack.Web.IRequest req, string name, T defaultValue) => throw null;
        public static System.Threading.Tasks.Task<ServiceStack.SessionSourceResult> GetSessionFromSourceAsync(this ServiceStack.Web.IRequest request, string userAuthId, System.Func<ServiceStack.Auth.IAuthRepositoryAsync, ServiceStack.Auth.IUserAuth, System.Threading.Tasks.Task> validator, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static string GetTraceId(this ServiceStack.Web.IRequest req) => throw null;
        public static ServiceStack.IO.IVirtualPathProvider GetVirtualFileSources(this ServiceStack.Web.IRequest request) => throw null;
        public static ServiceStack.IO.IVirtualFiles GetVirtualFiles(this ServiceStack.Web.IRequest request) => throw null;
        public static bool IsDirectory(this ServiceStack.Web.IRequest request) => throw null;
        public static bool IsFile(this ServiceStack.Web.IRequest request) => throw null;
        public static bool IsInProcessRequest(this ServiceStack.Web.IRequest httpReq) => throw null;
        public static void RegisterForDispose(this ServiceStack.Web.IRequest request, System.IDisposable disposable) => throw null;
        public static void ReleaseIfInProcessRequest(this ServiceStack.Web.IRequest httpReq) => throw null;
        public static ServiceStack.AuthUserSession ReloadSession(this ServiceStack.Web.IRequest request) => throw null;
        public static void SetInProcessRequest(this ServiceStack.Web.IRequest httpReq) => throw null;
        public static void SetItem(this ServiceStack.Web.IRequest httpReq, string key, object value) => throw null;
        public static object ToOptimizedResult(this ServiceStack.Web.IRequest request, object dto) => throw null;
        public static System.Threading.Tasks.Task<object> ToOptimizedResultAsync(this ServiceStack.Web.IRequest request, object dto) => throw null;
        public static object ToOptimizedResultUsingCache<T>(this ServiceStack.Web.IRequest req, ServiceStack.Caching.ICacheClient cacheClient, string cacheKey, System.Func<T> factoryFn) => throw null;
        public static object ToOptimizedResultUsingCache<T>(this ServiceStack.Web.IRequest req, ServiceStack.Caching.ICacheClient cacheClient, string cacheKey, System.TimeSpan? expireCacheIn, System.Func<T> factoryFn) => throw null;
        public static System.Threading.Tasks.Task<object> ToOptimizedResultUsingCacheAsync<T>(this ServiceStack.Web.IRequest req, ServiceStack.Caching.ICacheClientAsync cacheClient, string cacheKey, System.Func<T> factoryFn, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static System.Threading.Tasks.Task<object> ToOptimizedResultUsingCacheAsync<T>(this ServiceStack.Web.IRequest req, ServiceStack.Caching.ICacheClientAsync cacheClient, string cacheKey, System.TimeSpan? expireCacheIn, System.Func<T> factoryFn, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
    }

    // Generated from `ServiceStack.RequestFilterAsyncAttribute` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public abstract class RequestFilterAsyncAttribute : ServiceStack.AttributeBase, ServiceStack.Web.IHasRequestFilterAsync, ServiceStack.Web.IRequestFilterBase
    {
        public ServiceStack.ApplyTo ApplyTo { get => throw null; set => throw null; }
        public virtual ServiceStack.Web.IRequestFilterBase Copy() => throw null;
        public abstract System.Threading.Tasks.Task ExecuteAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto);
        public int Priority { get => throw null; set => throw null; }
        public System.Threading.Tasks.Task RequestFilterAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto) => throw null;
        public RequestFilterAsyncAttribute() => throw null;
        public RequestFilterAsyncAttribute(ServiceStack.ApplyTo applyTo) => throw null;
    }

    // Generated from `ServiceStack.RequestFilterAttribute` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public abstract class RequestFilterAttribute : ServiceStack.AttributeBase, ServiceStack.Web.IHasRequestFilter, ServiceStack.Web.IRequestFilterBase
    {
        public ServiceStack.ApplyTo ApplyTo { get => throw null; set => throw null; }
        public virtual ServiceStack.Web.IRequestFilterBase Copy() => throw null;
        public abstract void Execute(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto);
        public int Priority { get => throw null; set => throw null; }
        public void RequestFilter(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto) => throw null;
        public RequestFilterAttribute() => throw null;
        public RequestFilterAttribute(ServiceStack.ApplyTo applyTo) => throw null;
    }

    // Generated from `ServiceStack.RequestFilterPriority` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public enum RequestFilterPriority
    {
        Authenticate,
        RequiredPermission,
        RequiredRole,
    }

    // Generated from `ServiceStack.RequestInfoFeature` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class RequestInfoFeature : ServiceStack.IPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
    {
        public string Id { get => throw null; set => throw null; }
        public ServiceStack.Host.IHttpHandler ProcessRequest(string httpMethod, string pathInfo, string filePath) => throw null;
        public void Register(ServiceStack.IAppHost appHost) => throw null;
        public RequestInfoFeature() => throw null;
    }

    // Generated from `ServiceStack.RequestLogsFeature` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class RequestLogsFeature : ServiceStack.IPlugin, ServiceStack.IPreInitPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
    {
        public string AccessRole { get => throw null; set => throw null; }
        public string AtRestPath { get => throw null; set => throw null; }
        public void BeforePluginsLoaded(ServiceStack.IAppHost appHost) => throw null;
        public int? Capacity { get => throw null; set => throw null; }
        public System.Func<System.DateTime> CurrentDateFn { get => throw null; set => throw null; }
        public bool DefaultIgnoreFilter(object o) => throw null;
        public int DefaultLimit { get => throw null; set => throw null; }
        public bool EnableErrorTracking { get => throw null; set => throw null; }
        public bool EnableRequestBodyTracking { get => throw null; set => throw null; }
        public bool EnableResponseTracking { get => throw null; set => throw null; }
        public bool EnableSessionTracking { get => throw null; set => throw null; }
        public System.Type[] ExcludeRequestDtoTypes { get => throw null; set => throw null; }
        public System.Type[] ExcludeResponseTypes { get => throw null; set => throw null; }
        public System.Type[] HideRequestBodyForRequestDtoTypes { get => throw null; set => throw null; }
        public string Id { get => throw null; set => throw null; }
        public System.Func<object, bool> IgnoreFilter { get => throw null; set => throw null; }
        public System.Collections.Generic.List<System.Type> IgnoreTypes { get => throw null; set => throw null; }
        public bool LimitToServiceRequests { get => throw null; set => throw null; }
        public void Register(ServiceStack.IAppHost appHost) => throw null;
        public System.Func<ServiceStack.Web.IRequest, bool> RequestBodyTrackingFilter { get => throw null; set => throw null; }
        public System.Action<ServiceStack.Web.IRequest, ServiceStack.RequestLogEntry> RequestLogFilter { get => throw null; set => throw null; }
        public ServiceStack.Web.IRequestLogger RequestLogger { get => throw null; set => throw null; }
        public RequestLogsFeature() => throw null;
        public RequestLogsFeature(int capacity) => throw null;
        public string[] RequiredRoles { get => throw null; set => throw null; }
        public System.Func<ServiceStack.Web.IRequest, bool> ResponseTrackingFilter { get => throw null; set => throw null; }
        public System.Func<ServiceStack.Web.IRequest, bool> SkipLogging { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.RequestUtils` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class RequestUtils
    {
        public static void AssertAccessRole(ServiceStack.Web.IRequest req, string accessRole = default(string), string authSecret = default(string)) => throw null;
        public static System.Threading.Tasks.Task AssertAccessRoleAsync(ServiceStack.Web.IRequest req, string accessRole = default(string), string authSecret = default(string), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static System.Threading.Tasks.Task AssertAccessRoleOrDebugModeAsync(ServiceStack.Web.IRequest req, string accessRole = default(string), string authSecret = default(string), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
    }

    // Generated from `ServiceStack.RequiredClaimAttribute` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class RequiredClaimAttribute : ServiceStack.AuthenticateAttribute
    {
        protected bool Equals(ServiceStack.RequiredClaimAttribute other) => throw null;
        public override bool Equals(object obj) => throw null;
        public override System.Threading.Tasks.Task ExecuteAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto) => throw null;
        public override int GetHashCode() => throw null;
        public static bool HasClaim(ServiceStack.Web.IRequest req, string type, string value) => throw null;
        public RequiredClaimAttribute(ServiceStack.ApplyTo applyTo, string type, string value) => throw null;
        public RequiredClaimAttribute(string type, string value) => throw null;
        public string Type { get => throw null; set => throw null; }
        public string Value { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.RequiredPermissionAttribute` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class RequiredPermissionAttribute : ServiceStack.AuthenticateAttribute
    {
        public static void AssertRequiredPermissions(ServiceStack.Web.IRequest req, params string[] requiredPermissions) => throw null;
        public static System.Threading.Tasks.Task AssertRequiredPermissionsAsync(ServiceStack.Web.IRequest req, string[] requiredPermissions, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        protected bool Equals(ServiceStack.RequiredPermissionAttribute other) => throw null;
        public override bool Equals(object obj) => throw null;
        public override System.Threading.Tasks.Task ExecuteAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto) => throw null;
        public override int GetHashCode() => throw null;
        public bool HasAllPermissions(ServiceStack.Web.IRequest req, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthRepository authRepo) => throw null;
        public static bool HasAllPermissions(ServiceStack.Web.IRequest req, ServiceStack.Auth.IAuthSession session, System.Collections.Generic.ICollection<string> requiredPermissions) => throw null;
        public System.Threading.Tasks.Task<bool> HasAllPermissionsAsync(ServiceStack.Web.IRequest req, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthRepositoryAsync authRepo) => throw null;
        public static System.Threading.Tasks.Task<bool> HasAllPermissionsAsync(ServiceStack.Web.IRequest req, ServiceStack.Auth.IAuthSession session, System.Collections.Generic.ICollection<string> requiredPermissions, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static System.Threading.Tasks.Task<bool> HasRequiredPermissionsAsync(ServiceStack.Web.IRequest req, string[] requiredPermissions) => throw null;
        public RequiredPermissionAttribute(ServiceStack.ApplyTo applyTo, params string[] permissions) => throw null;
        public RequiredPermissionAttribute(params string[] permissions) => throw null;
        public System.Collections.Generic.List<string> RequiredPermissions { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.RequiredRoleAttribute` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class RequiredRoleAttribute : ServiceStack.AuthenticateAttribute
    {
        public static System.Threading.Tasks.Task AssertRequiredRoleAsync(ServiceStack.Web.IRequest req, string requiredRole, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static void AssertRequiredRoles(ServiceStack.Web.IRequest req, params string[] requiredRoles) => throw null;
        public static System.Threading.Tasks.Task AssertRequiredRolesAsync(ServiceStack.Web.IRequest req, string[] requiredRoles, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        protected bool Equals(ServiceStack.RequiredRoleAttribute other) => throw null;
        public override bool Equals(object obj) => throw null;
        public override System.Threading.Tasks.Task ExecuteAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto) => throw null;
        public override int GetHashCode() => throw null;
        public bool HasAllRoles(ServiceStack.Web.IRequest req, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthRepository authRepo) => throw null;
        public static bool HasAllRoles(ServiceStack.Web.IRequest req, ServiceStack.Auth.IAuthSession session, System.Collections.Generic.ICollection<string> requiredRoles) => throw null;
        public System.Threading.Tasks.Task<bool> HasAllRolesAsync(ServiceStack.Web.IRequest req, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthRepositoryAsync authRepo) => throw null;
        public static System.Threading.Tasks.Task<bool> HasAllRolesAsync(ServiceStack.Web.IRequest req, ServiceStack.Auth.IAuthSession session, System.Collections.Generic.ICollection<string> requiredRoles, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static System.Threading.Tasks.Task<bool> HasAllRolesAsync(ServiceStack.Web.IRequest req, System.Collections.Generic.ICollection<string> requiredRoles, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static bool HasRequiredRoles(ServiceStack.Web.IRequest req, string[] requiredRoles) => throw null;
        public static System.Threading.Tasks.Task<bool> HasRequiredRolesAsync(ServiceStack.Web.IRequest req, string[] requiredRoles) => throw null;
        public static bool PreAuthenticatedValidForAllRoles(ServiceStack.Web.IRequest req, System.Collections.Generic.ICollection<string> requiredRoles) => throw null;
        public RequiredRoleAttribute(ServiceStack.ApplyTo applyTo, params string[] roles) => throw null;
        public RequiredRoleAttribute(params string[] roles) => throw null;
        public System.Collections.Generic.List<string> RequiredRoles { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.RequiresAnyPermissionAttribute` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class RequiresAnyPermissionAttribute : ServiceStack.AuthenticateAttribute
    {
        public override System.Threading.Tasks.Task ExecuteAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto) => throw null;
        public virtual bool HasAnyPermissions(ServiceStack.Web.IRequest req, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthRepository authRepo) => throw null;
        public System.Collections.Generic.List<string> RequiredPermissions { get => throw null; set => throw null; }
        public RequiresAnyPermissionAttribute(ServiceStack.ApplyTo applyTo, params string[] permissions) => throw null;
        public RequiresAnyPermissionAttribute(params string[] permissions) => throw null;
    }

    // Generated from `ServiceStack.RequiresAnyRoleAttribute` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class RequiresAnyRoleAttribute : ServiceStack.AuthenticateAttribute
    {
        public static void AssertRequiredRoles(ServiceStack.Web.IRequest req, params string[] requiredRoles) => throw null;
        public override System.Threading.Tasks.Task ExecuteAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto) => throw null;
        public virtual bool HasAnyRoles(ServiceStack.Web.IRequest req, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthRepository authRepo) => throw null;
        public System.Collections.Generic.List<string> RequiredRoles { get => throw null; set => throw null; }
        public RequiresAnyRoleAttribute(ServiceStack.ApplyTo applyTo, params string[] roles) => throw null;
        public RequiresAnyRoleAttribute(params string[] roles) => throw null;
    }

    // Generated from `ServiceStack.RequiresSchemaProviders` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class RequiresSchemaProviders
    {
        public static void InitSchema(this ServiceStack.Auth.IAuthRepository authRepo) => throw null;
        public static void InitSchema(this ServiceStack.Auth.IAuthRepositoryAsync authRepo) => throw null;
        public static void InitSchema(this ServiceStack.Caching.ICacheClient cache) => throw null;
    }

    // Generated from `ServiceStack.ResolvedPath` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public struct ResolvedPath
    {
        public string PublicPath { get => throw null; }
        // Stub generator skipped constructor 
        public ResolvedPath(string publicPath, string virtualPath) => throw null;
        public string VirtualPath { get => throw null; }
    }

    // Generated from `ServiceStack.ResponseFilterAsyncAttribute` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public abstract class ResponseFilterAsyncAttribute : ServiceStack.AttributeBase, ServiceStack.Web.IHasResponseFilterAsync, ServiceStack.Web.IResponseFilterBase
    {
        public ServiceStack.ApplyTo ApplyTo { get => throw null; set => throw null; }
        public virtual ServiceStack.Web.IResponseFilterBase Copy() => throw null;
        public abstract System.Threading.Tasks.Task ExecuteAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object responseDto);
        public int Priority { get => throw null; set => throw null; }
        public System.Threading.Tasks.Task ResponseFilterAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object response) => throw null;
        public ResponseFilterAsyncAttribute() => throw null;
        public ResponseFilterAsyncAttribute(ServiceStack.ApplyTo applyTo) => throw null;
    }

    // Generated from `ServiceStack.ResponseFilterAttribute` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public abstract class ResponseFilterAttribute : ServiceStack.AttributeBase, ServiceStack.Web.IHasResponseFilter, ServiceStack.Web.IResponseFilterBase
    {
        public ServiceStack.ApplyTo ApplyTo { get => throw null; set => throw null; }
        public virtual ServiceStack.Web.IResponseFilterBase Copy() => throw null;
        public abstract void Execute(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object responseDto);
        public int Priority { get => throw null; set => throw null; }
        public void ResponseFilter(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object response) => throw null;
        public ResponseFilterAttribute() => throw null;
        public ResponseFilterAttribute(ServiceStack.ApplyTo applyTo) => throw null;
    }

    // Generated from `ServiceStack.ReturnExceptionsInJsonAttribute` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ReturnExceptionsInJsonAttribute : ServiceStack.ResponseFilterAttribute
    {
        public override void Execute(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object responseDto) => throw null;
        public ReturnExceptionsInJsonAttribute() => throw null;
    }

    // Generated from `ServiceStack.RpcGateway` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class RpcGateway
    {
        public static ServiceStack.HttpError CreateError(ServiceStack.Web.IResponse res, string errorCode = default(string), string errorMessage = default(string)) => throw null;
        public static TResponse CreateErrorResponse<TResponse>(ServiceStack.Web.IResponse res, System.Exception ex) => throw null;
        public virtual System.Threading.Tasks.Task<TResponse> ExecuteAsync<TResponse>(ServiceStack.IReturn<TResponse> requestDto, ServiceStack.Web.IRequest req) => throw null;
        public virtual System.Threading.Tasks.Task<TResponse> ExecuteAsync<TResponse>(object requestDto, ServiceStack.Web.IRequest req) => throw null;
        public static TResponse GetResponse<TResponse>(ServiceStack.Web.IResponse res, object ret) => throw null;
        public RpcGateway(ServiceStack.ServiceStackHost appHost) => throw null;
        public RpcGateway(ServiceStack.ServiceStackHost appHost, ServiceStack.Web.IServiceExecutor executor) => throw null;
    }

    // Generated from `ServiceStack.SameSiteCookiesServiceCollectionExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class SameSiteCookiesServiceCollectionExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IHttpClientBuilder AddHttpUtilsClient(this Microsoft.Extensions.DependencyInjection.IServiceCollection services) => throw null;
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureNonBreakingSameSiteCookies(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<Microsoft.AspNetCore.Builder.CookiePolicyOptions> configure = default(System.Action<Microsoft.AspNetCore.Builder.CookiePolicyOptions>)) => throw null;
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureNonBreakingSameSiteCookies(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.AspNetCore.Hosting.IWebHostEnvironment env) => throw null;
    }

    // Generated from `ServiceStack.ScriptAdmin` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ScriptAdmin : ServiceStack.IReturn, ServiceStack.IReturn<ServiceStack.ScriptAdminResponse>
    {
        public string Actions { get => throw null; set => throw null; }
        public ScriptAdmin() => throw null;
    }

    // Generated from `ServiceStack.ScriptAdminResponse` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ScriptAdminResponse
    {
        public ServiceStack.ResponseStatus ResponseStatus { get => throw null; set => throw null; }
        public string[] Results { get => throw null; set => throw null; }
        public ScriptAdminResponse() => throw null;
    }

    // Generated from `ServiceStack.ScriptAdminService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ScriptAdminService : ServiceStack.Service
    {
        public static string[] Actions;
        public System.Threading.Tasks.Task<object> Any(ServiceStack.ScriptAdmin request) => throw null;
        public static string[] Routes { get => throw null; set => throw null; }
        public ScriptAdminService() => throw null;
    }

    // Generated from `ServiceStack.ScriptConditionValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ScriptConditionValidator : ServiceStack.FluentValidation.Validators.PropertyValidator, ServiceStack.FluentValidation.Validators.IPredicateValidator, ServiceStack.FluentValidation.Validators.IPropertyValidator
    {
        public ServiceStack.Script.SharpPage Code { get => throw null; }
        protected override bool IsValid(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
        protected override System.Threading.Tasks.Task<bool> IsValidAsync(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context, System.Threading.CancellationToken cancellation) => throw null;
        public ScriptConditionValidator(ServiceStack.Script.SharpPage code) => throw null;
        public override bool ShouldValidateAsynchronously(ServiceStack.FluentValidation.IValidationContext context) => throw null;
    }

    // Generated from `ServiceStack.ScriptValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ScriptValidator : ServiceStack.TypeValidator
    {
        public ServiceStack.Script.SharpPage Code { get => throw null; }
        public string Condition { get => throw null; }
        public override System.Threading.Tasks.Task<bool> IsValidAsync(object dto, ServiceStack.Web.IRequest request) => throw null;
        public ScriptValidator(ServiceStack.Script.SharpPage code, string condition) : base(default(string), default(string), default(int?)) => throw null;
    }

    // Generated from `ServiceStack.Selector` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class Selector
    {
        public static string Id(System.Type type) => throw null;
        public static string Id<T>() => throw null;
    }

    // Generated from `ServiceStack.ServerEventExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class ServerEventExtensions
    {
        public static ServiceStack.SubscriptionInfo GetInfo(this ServiceStack.IEventSubscription sub) => throw null;
        public static bool HasAnyChannel(this ServiceStack.IEventSubscription sub, string[] channels) => throw null;
        public static bool HasChannel(this ServiceStack.IEventSubscription sub, string channel) => throw null;
        public static bool IsGrpc(this ServiceStack.IEventSubscription sub) => throw null;
        public static void NotifyAll(this ServiceStack.IServerEvents server, object message) => throw null;
        public static System.Threading.Tasks.Task NotifyAllAsync(this ServiceStack.IServerEvents server, object message, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static void NotifyChannel(this ServiceStack.IServerEvents server, string channel, object message) => throw null;
        public static System.Threading.Tasks.Task NotifyChannelAsync(this ServiceStack.IServerEvents server, string channel, object message, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static void NotifySession(this ServiceStack.IServerEvents server, string sspid, object message, string channel = default(string)) => throw null;
        public static System.Threading.Tasks.Task NotifySessionAsync(this ServiceStack.IServerEvents server, string sspid, object message, string channel = default(string), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static void NotifySubscription(this ServiceStack.IServerEvents server, string subscriptionId, object message, string channel = default(string)) => throw null;
        public static System.Threading.Tasks.Task NotifySubscriptionAsync(this ServiceStack.IServerEvents server, string subscriptionId, object message, string channel = default(string), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static void NotifyUserId(this ServiceStack.IServerEvents server, string userId, object message, string channel = default(string)) => throw null;
        public static System.Threading.Tasks.Task NotifyUserIdAsync(this ServiceStack.IServerEvents server, string userId, object message, string channel = default(string), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static void NotifyUserName(this ServiceStack.IServerEvents server, string userName, object message, string channel = default(string)) => throw null;
        public static System.Threading.Tasks.Task NotifyUserNameAsync(this ServiceStack.IServerEvents server, string userName, object message, string channel = default(string), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
    }

    // Generated from `ServiceStack.ServerEventsFeature` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ServerEventsFeature : ServiceStack.IPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
    {
        public System.TimeSpan HeartbeatInterval { get => throw null; set => throw null; }
        public string HeartbeatPath { get => throw null; set => throw null; }
        public System.TimeSpan HouseKeepingInterval { get => throw null; set => throw null; }
        public string Id { get => throw null; set => throw null; }
        public System.TimeSpan IdleTimeout { get => throw null; set => throw null; }
        public void IncrementCounter(string name) => throw null;
        public bool LimitToAuthenticatedUsers { get => throw null; set => throw null; }
        public bool NotifyChannelOfSubscriptions { get => throw null; set => throw null; }
        public System.Action<ServiceStack.IEventSubscription, System.Collections.Generic.Dictionary<string, string>> OnConnect { get => throw null; set => throw null; }
        public System.Action<ServiceStack.IEventSubscription, ServiceStack.Web.IRequest> OnCreated { get => throw null; set => throw null; }
        public System.Action<ServiceStack.IEventSubscription, ServiceStack.Web.IRequest> OnDispose { get => throw null; set => throw null; }
        public System.Action<ServiceStack.IEventSubscription, System.Exception> OnError { get => throw null; set => throw null; }
        public System.Action<ServiceStack.Web.IRequest> OnHeartbeatInit { get => throw null; set => throw null; }
        public System.Action<ServiceStack.IEventSubscription> OnHungConnection { get => throw null; set => throw null; }
        public System.Action<ServiceStack.Web.IRequest> OnInit { get => throw null; set => throw null; }
        public System.Action<ServiceStack.IEventSubscription, ServiceStack.Web.IResponse, string> OnPublish { get => throw null; set => throw null; }
        public System.Func<ServiceStack.IEventSubscription, ServiceStack.Web.IResponse, string, System.Threading.Tasks.Task> OnPublishAsync { get => throw null; set => throw null; }
        public System.Action<ServiceStack.IEventSubscription> OnSubscribe { get => throw null; set => throw null; }
        public System.Func<ServiceStack.IEventSubscription, System.Threading.Tasks.Task> OnSubscribeAsync { get => throw null; set => throw null; }
        public System.Action<ServiceStack.IEventSubscription> OnUnsubscribe { get => throw null; set => throw null; }
        public System.Func<ServiceStack.IEventSubscription, System.Threading.Tasks.Task> OnUnsubscribeAsync { get => throw null; set => throw null; }
        public System.Func<ServiceStack.IEventSubscription, System.Threading.Tasks.Task> OnUpdateAsync { get => throw null; set => throw null; }
        public void Register(ServiceStack.IAppHost appHost) => throw null;
        public System.Func<object, string> Serialize { get => throw null; set => throw null; }
        public ServerEventsFeature() => throw null;
        public string StreamPath { get => throw null; set => throw null; }
        public string SubscribersPath { get => throw null; set => throw null; }
        public int ThrottlePublisherAfterBufferExceedsBytes { get => throw null; set => throw null; }
        public string UnRegisterPath { get => throw null; set => throw null; }
        public bool ValidateUserAddress { get => throw null; set => throw null; }
        public System.Action<ServiceStack.Web.IResponse, string> WriteEvent { get => throw null; set => throw null; }
        public System.Func<ServiceStack.Web.IResponse, string, System.Threading.CancellationToken, System.Threading.Tasks.Task> WriteEventAsync { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.ServerEventsHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ServerEventsHandler : ServiceStack.Host.Handlers.HttpAsyncTaskHandler
    {
        public const string EventStreamDenyNoAuth = default;
        public const string EventStreamDenyOnCreated = default;
        public const string EventStreamDenyOnInit = default;
        public override System.Threading.Tasks.Task ProcessRequestAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, string operationName) => throw null;
        public static int RemoveExpiredSubscriptionsEvery { get => throw null; }
        public override bool RunAsAsync() => throw null;
        public ServerEventsHandler() => throw null;
    }

    // Generated from `ServiceStack.ServerEventsHeartbeatHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ServerEventsHeartbeatHandler : ServiceStack.Host.Handlers.HttpAsyncTaskHandler
    {
        public override System.Threading.Tasks.Task ProcessRequestAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, string operationName) => throw null;
        public override bool RunAsAsync() => throw null;
        public ServerEventsHeartbeatHandler() => throw null;
    }

    // Generated from `ServiceStack.ServerEventsSubscribersService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ServerEventsSubscribersService : ServiceStack.Service
    {
        public object Any(ServiceStack.GetEventSubscribers request) => throw null;
        public ServiceStack.IServerEvents ServerEvents { get => throw null; set => throw null; }
        public ServerEventsSubscribersService() => throw null;
    }

    // Generated from `ServiceStack.ServerEventsUnRegisterService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ServerEventsUnRegisterService : ServiceStack.Service
    {
        public System.Threading.Tasks.Task<object> Any(ServiceStack.UnRegisterEventSubscriber request) => throw null;
        public System.Threading.Tasks.Task<object> Any(ServiceStack.UpdateEventSubscriber request) => throw null;
        public ServiceStack.IServerEvents ServerEvents { get => throw null; set => throw null; }
        public ServerEventsUnRegisterService() => throw null;
        public const string UnRegisterSubNotExists = default;
        public const string UpdateEventSubNotExists = default;
    }

    // Generated from `ServiceStack.ServerStats` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ServerStats
    {
        public string MqDescription { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<string, System.Int64> MqWorkers { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<string, System.Int64> Redis { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<string, string> ServerEvents { get => throw null; set => throw null; }
        public ServerStats() => throw null;
    }

    // Generated from `ServiceStack.Service` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class Service : ServiceStack.Configuration.IResolver, ServiceStack.IService, ServiceStack.IServiceAfterFilter, ServiceStack.IServiceBase, ServiceStack.IServiceBeforeFilter, ServiceStack.IServiceErrorFilter, ServiceStack.IServiceFilters, ServiceStack.Web.IRequiresRequest, System.IAsyncDisposable, System.IDisposable
    {
        public T AssertPlugin<T>() where T : class, ServiceStack.IPlugin => throw null;
        public virtual ServiceStack.Auth.IAuthRepository AuthRepository { get => throw null; }
        public virtual ServiceStack.Auth.IAuthRepositoryAsync AuthRepositoryAsync { get => throw null; }
        public virtual ServiceStack.Caching.ICacheClient Cache { get => throw null; }
        public virtual ServiceStack.Caching.ICacheClientAsync CacheAsync { get => throw null; }
        public virtual System.Data.IDbConnection Db { get => throw null; }
        public virtual void Dispose() => throw null;
        public System.Threading.Tasks.ValueTask DisposeAsync() => throw null;
        public virtual ServiceStack.IServiceGateway Gateway { get => throw null; }
        public T GetPlugin<T>() where T : class, ServiceStack.IPlugin => throw null;
        public virtual System.Threading.Tasks.ValueTask<ServiceStack.Redis.IRedisClientAsync> GetRedisAsync() => throw null;
        public virtual ServiceStack.Configuration.IResolver GetResolver() => throw null;
        public virtual ServiceStack.Auth.IAuthSession GetSession(bool reload = default(bool)) => throw null;
        public virtual System.Threading.Tasks.Task<ServiceStack.Auth.IAuthSession> GetSessionAsync(bool reload = default(bool), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static ServiceStack.Configuration.IResolver GlobalResolver { get => throw null; set => throw null; }
        public virtual bool IsAuthenticated { get => throw null; }
        public virtual ServiceStack.Caching.MemoryCacheClient LocalCache { get => throw null; }
        public virtual ServiceStack.Messaging.IMessageProducer MessageProducer { get => throw null; }
        public virtual object OnAfterExecute(object response) => throw null;
        public virtual void OnBeforeExecute(object requestDto) => throw null;
        public virtual System.Threading.Tasks.Task<object> OnExceptionAsync(object requestDto, System.Exception ex) => throw null;
        public virtual void PublishMessage<T>(T message) => throw null;
        public virtual ServiceStack.Redis.IRedisClient Redis { get => throw null; }
        public ServiceStack.Web.IRequest Request { get => throw null; set => throw null; }
        public virtual T ResolveService<T>() => throw null;
        protected virtual ServiceStack.Web.IResponse Response { get => throw null; }
        public Service() => throw null;
        protected virtual TUserSession SessionAs<TUserSession>() => throw null;
        protected virtual System.Threading.Tasks.Task<TUserSession> SessionAsAsync<TUserSession>() => throw null;
        public virtual ServiceStack.Caching.ISession SessionBag { get => throw null; }
        public virtual ServiceStack.Caching.ISessionAsync SessionBagAsync { get => throw null; }
        public virtual ServiceStack.Caching.ISessionFactory SessionFactory { get => throw null; }
        public virtual ServiceStack.Service SetResolver(ServiceStack.Configuration.IResolver resolver) => throw null;
        public virtual T TryResolve<T>() => throw null;
        public ServiceStack.IO.IVirtualPathProvider VirtualFileSources { get => throw null; }
        public ServiceStack.IO.IVirtualFiles VirtualFiles { get => throw null; }
    }

    // Generated from `ServiceStack.ServiceExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class ServiceExtensions
    {
        public static ServiceStack.Auth.IAuthSession AssertAuthenticatedSession(this ServiceStack.Web.IRequest req, bool reload = default(bool)) => throw null;
        public static System.Threading.Tasks.Task<ServiceStack.Auth.IAuthSession> AssertAuthenticatedSessionAsync(this ServiceStack.Web.IRequest req, bool reload = default(bool), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static ServiceStack.Web.IHttpResult AuthenticationRequired(this ServiceStack.IServiceBase service) => throw null;
        public static void CacheSet<T>(this ServiceStack.Caching.ICacheClient cache, string key, T value, System.TimeSpan? expiresIn) => throw null;
        public static System.Threading.Tasks.Task CacheSetAsync<T>(this ServiceStack.Caching.ICacheClientAsync cache, string key, T value, System.TimeSpan? expiresIn, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static ServiceStack.Caching.ICacheClient GetCacheClient(this ServiceStack.Web.IRequest request) => throw null;
        public static ServiceStack.Caching.ICacheClientAsync GetCacheClientAsync(this ServiceStack.Web.IRequest request) => throw null;
        public static ServiceStack.Caching.ICacheClient GetMemoryCacheClient(this ServiceStack.Web.IRequest request) => throw null;
        public static ServiceStack.Auth.IAuthSession GetSession(this ServiceStack.Web.IRequest httpReq, bool reload = default(bool)) => throw null;
        public static ServiceStack.Auth.IAuthSession GetSession(this ServiceStack.IServiceBase service, bool reload = default(bool)) => throw null;
        public static System.Threading.Tasks.Task<ServiceStack.Auth.IAuthSession> GetSessionAsync(this ServiceStack.Web.IRequest httpReq, bool reload = default(bool), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static System.Threading.Tasks.Task<ServiceStack.Auth.IAuthSession> GetSessionAsync(this ServiceStack.IServiceBase service, bool reload = default(bool), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static string GetSessionId(this ServiceStack.IServiceBase service) => throw null;
        public static System.TimeSpan? GetSessionTimeToLive(this ServiceStack.Caching.ICacheClient cache, string sessionId) => throw null;
        public static System.TimeSpan? GetSessionTimeToLive(this ServiceStack.Web.IRequest httpReq) => throw null;
        public static System.Threading.Tasks.Task<System.TimeSpan?> GetSessionTimeToLiveAsync(this ServiceStack.Caching.ICacheClientAsync cache, string sessionId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static System.Threading.Tasks.Task<System.TimeSpan?> GetSessionTimeToLiveAsync(this ServiceStack.Web.IRequest httpReq, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static bool IsAuthenticated(this ServiceStack.Web.IRequest req) => throw null;
        public static System.Threading.Tasks.Task<bool> IsAuthenticatedAsync(this ServiceStack.Web.IRequest req) => throw null;
        public static ServiceStack.Web.IHttpResult LocalRedirect(this ServiceStack.IServiceBase service, string redirect) => throw null;
        public static ServiceStack.Web.IHttpResult LocalRedirect(this ServiceStack.IServiceBase service, string redirect, string message) => throw null;
        public static ServiceStack.Logging.ILog Log;
        public static ServiceStack.Web.IHttpResult Redirect(this ServiceStack.IServiceBase service, string redirect) => throw null;
        public static ServiceStack.Web.IHttpResult Redirect(this ServiceStack.IServiceBase service, string redirect, string message) => throw null;
        public static void RemoveSession(this ServiceStack.Web.IRequest httpReq) => throw null;
        public static void RemoveSession(this ServiceStack.Web.IRequest httpReq, string sessionId) => throw null;
        public static void RemoveSession(this ServiceStack.IServiceBase service) => throw null;
        public static void RemoveSession(this ServiceStack.Service service) => throw null;
        public static System.Threading.Tasks.Task RemoveSessionAsync(this ServiceStack.Web.IRequest httpReq, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static System.Threading.Tasks.Task RemoveSessionAsync(this ServiceStack.Web.IRequest httpReq, string sessionId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static System.Threading.Tasks.Task RemoveSessionAsync(this ServiceStack.IServiceBase service, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static System.Threading.Tasks.Task RemoveSessionAsync(this ServiceStack.Service service, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static object RunAction<TService, TRequest>(this TService service, TRequest request, System.Func<TService, TRequest, object> invokeAction, ServiceStack.Web.IRequest requestContext = default(ServiceStack.Web.IRequest)) where TService : ServiceStack.IService => throw null;
        public static void SaveSession(this ServiceStack.Web.IRequest httpReq, ServiceStack.Auth.IAuthSession session, System.TimeSpan? expiresIn = default(System.TimeSpan?)) => throw null;
        public static void SaveSession(this ServiceStack.IServiceBase service, ServiceStack.Auth.IAuthSession session, System.TimeSpan? expiresIn = default(System.TimeSpan?)) => throw null;
        public static System.Threading.Tasks.Task SaveSessionAsync(this ServiceStack.Web.IRequest httpReq, ServiceStack.Auth.IAuthSession session, System.TimeSpan? expiresIn = default(System.TimeSpan?), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static System.Threading.Tasks.Task SaveSessionAsync(this ServiceStack.IServiceBase service, ServiceStack.Auth.IAuthSession session, System.TimeSpan? expiresIn = default(System.TimeSpan?), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static TUserSession SessionAs<TUserSession>(this ServiceStack.Web.IRequest req) => throw null;
        public static System.Threading.Tasks.Task<TUserSession> SessionAsAsync<TUserSession>(this ServiceStack.Web.IRequest req, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
    }

    // Generated from `ServiceStack.ServiceGatewayFactoryBase` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public abstract class ServiceGatewayFactoryBase : ServiceStack.IServiceGateway, ServiceStack.IServiceGatewayAsync, ServiceStack.Web.IServiceGatewayFactory
    {
        public abstract ServiceStack.IServiceGateway GetGateway(System.Type requestType);
        protected virtual ServiceStack.IServiceGatewayAsync GetGatewayAsync(System.Type requestType) => throw null;
        public virtual ServiceStack.IServiceGateway GetServiceGateway(ServiceStack.Web.IRequest request) => throw null;
        public void Publish(object requestDto) => throw null;
        public void PublishAll(System.Collections.Generic.IEnumerable<object> requestDtos) => throw null;
        public System.Threading.Tasks.Task PublishAllAsync(System.Collections.Generic.IEnumerable<object> requestDtos, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public System.Threading.Tasks.Task PublishAsync(object requestDto, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public ServiceStack.Web.IRequest Request { get => throw null; set => throw null; }
        public TResponse Send<TResponse>(object requestDto) => throw null;
        public System.Collections.Generic.List<TResponse> SendAll<TResponse>(System.Collections.Generic.IEnumerable<object> requestDtos) => throw null;
        public System.Threading.Tasks.Task<System.Collections.Generic.List<TResponse>> SendAllAsync<TResponse>(System.Collections.Generic.IEnumerable<object> requestDtos, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public System.Threading.Tasks.Task<TResponse> SendAsync<TResponse>(object requestDto, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        protected ServiceGatewayFactoryBase() => throw null;
        protected ServiceStack.InProcessServiceGateway localGateway;
    }

    // Generated from `ServiceStack.ServiceResponseException` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ServiceResponseException : System.Exception
    {
        public string ErrorCode { get => throw null; set => throw null; }
        public ServiceResponseException() => throw null;
        public ServiceResponseException(ServiceStack.ResponseStatus responseStatus) => throw null;
        public ServiceResponseException(string message) => throw null;
        public ServiceResponseException(string errorCode, string errorMessage) => throw null;
        public ServiceResponseException(string errorCode, string errorMessage, string serviceStackTrace) => throw null;
        public string ServiceStackTrace { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.ServiceRoutesExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class ServiceRoutesExtensions
    {
        public static ServiceStack.Web.IServiceRoutes Add(this ServiceStack.Web.IServiceRoutes routes, System.Type requestType, string restPath, ServiceStack.ApplyTo verbs) => throw null;
        public static ServiceStack.Web.IServiceRoutes Add<T>(this ServiceStack.Web.IServiceRoutes serviceRoutes, string restPath, ServiceStack.ApplyTo verbs, params System.Linq.Expressions.Expression<System.Func<T, object>>[] propertyExpressions) => throw null;
        public static ServiceStack.Web.IServiceRoutes Add<TRequest>(this ServiceStack.Web.IServiceRoutes routes, string restPath, ServiceStack.ApplyTo verbs) => throw null;
        public static ServiceStack.Web.IServiceRoutes AddFromAssembly(this ServiceStack.Web.IServiceRoutes routes, params System.Reflection.Assembly[] assembliesWithServices) => throw null;
        public static bool IsSubclassOfRawGeneric(this System.Type toCheck, System.Type generic) => throw null;
    }

    // Generated from `ServiceStack.ServiceScopeExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class ServiceScopeExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IServiceScope StartScope(this ServiceStack.Web.IRequest request) => throw null;
    }

    // Generated from `ServiceStack.ServiceStackActivityArgs` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ServiceStackActivityArgs
    {
        public System.Diagnostics.Activity Activity { get => throw null; set => throw null; }
        public ServiceStack.Web.IRequest Request { get => throw null; set => throw null; }
        public ServiceStackActivityArgs() => throw null;
    }

    // Generated from `ServiceStack.ServiceStackCodePage` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public abstract class ServiceStackCodePage : ServiceStack.Script.SharpCodePage, ServiceStack.Web.IRequiresRequest
    {
        public virtual ServiceStack.Auth.IAuthRepository AuthRepository { get => throw null; }
        public virtual ServiceStack.Caching.ICacheClient Cache { get => throw null; }
        public virtual System.Data.IDbConnection Db { get => throw null; }
        public override void Dispose() => throw null;
        public virtual ServiceStack.IServiceGateway Gateway { get => throw null; }
        public virtual ServiceStack.Configuration.IResolver GetResolver() => throw null;
        public virtual ServiceStack.Auth.IAuthSession GetSession(bool reload = default(bool)) => throw null;
        public virtual bool IsAuthenticated { get => throw null; }
        public virtual ServiceStack.Caching.MemoryCacheClient LocalCache { get => throw null; }
        public virtual ServiceStack.Messaging.IMessageProducer MessageProducer { get => throw null; }
        public virtual void PublishMessage<T>(T message) => throw null;
        public virtual ServiceStack.Redis.IRedisClient Redis { get => throw null; }
        public ServiceStack.Web.IRequest Request { get => throw null; set => throw null; }
        public virtual T ResolveService<T>() => throw null;
        protected virtual ServiceStack.Web.IResponse Response { get => throw null; }
        protected ServiceStackCodePage() : base(default(string)) => throw null;
        protected virtual TUserSession SessionAs<TUserSession>() => throw null;
        public virtual ServiceStack.Caching.ISession SessionBag { get => throw null; }
        public virtual ServiceStack.Caching.ISessionFactory SessionFactory { get => throw null; }
        public virtual T TryResolve<T>() => throw null;
        public ServiceStack.IO.IVirtualPathProvider VirtualFileSources { get => throw null; }
        public ServiceStack.IO.IVirtualFiles VirtualFiles { get => throw null; }
    }

    // Generated from `ServiceStack.ServiceStackDiagnosticsUtils` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class ServiceStackDiagnosticsUtils
    {
        public static ServiceStack.MqRequestDiagnosticEvent Init(this ServiceStack.MqRequestDiagnosticEvent evt, System.Guid operationId) => throw null;
        public static ServiceStack.RequestDiagnosticEvent Init(this ServiceStack.RequestDiagnosticEvent evt, ServiceStack.Web.IRequest req) => throw null;
    }

    // Generated from `ServiceStack.ServiceStackHost` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public abstract class ServiceStackHost : Funq.IFunqlet, Funq.IHasContainer, ServiceStack.Configuration.IResolver, ServiceStack.IAppHost, System.IDisposable
    {
        public System.Collections.Generic.List<ServiceStack.IO.IVirtualPathProvider> AddVirtualFileSources { get => throw null; set => throw null; }
        public System.Collections.Generic.List<System.Action<ServiceStack.ServiceStackHost>> AfterConfigure { get => throw null; set => throw null; }
        public System.DateTime? AfterInitAt { get => throw null; set => throw null; }
        public System.Collections.Generic.List<System.Action<ServiceStack.IAppHost>> AfterInitCallbacks { get => throw null; set => throw null; }
        public void AfterPluginLoaded<T>(System.Action<T> configure) where T : class, ServiceStack.IPlugin => throw null;
        public System.Collections.Generic.List<System.Action<ServiceStack.ServiceStackHost>> AfterPluginsLoaded { get => throw null; set => throw null; }
        protected virtual bool AllowSetCookie(ServiceStack.Web.IRequest req, string cookieName) => throw null;
        public ServiceStack.Configuration.IAppSettings AppSettings { get => throw null; set => throw null; }
        public bool ApplyCustomHandlerRequestFilters(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes) => throw null;
        public bool ApplyMessageRequestFilters(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto) => throw null;
        public bool ApplyMessageResponseFilters(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object response) => throw null;
        public virtual System.Threading.Tasks.Task ApplyPreAuthenticateFiltersAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes) => throw null;
        public bool ApplyPreRequestFilters(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes) => throw null;
        public System.Threading.Tasks.Task<object> ApplyRequestConvertersAsync(ServiceStack.Web.IRequest req, object requestDto) => throw null;
        public bool ApplyRequestFilters(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto) => throw null;
        public System.Threading.Tasks.Task ApplyRequestFiltersAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto) => throw null;
        protected System.Threading.Tasks.Task ApplyRequestFiltersSingleAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto) => throw null;
        public System.Threading.Tasks.Task<object> ApplyResponseConvertersAsync(ServiceStack.Web.IRequest req, object responseDto) => throw null;
        public bool ApplyResponseFilters(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object response) => throw null;
        public System.Threading.Tasks.Task ApplyResponseFiltersAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object response) => throw null;
        protected System.Threading.Tasks.Task ApplyResponseFiltersSingleAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object response) => throw null;
        public virtual ServiceStack.Auth.IAuthSession AssertAuthenticated(ServiceStack.Auth.IAuthSession session, ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest)) => throw null;
        public void AssertContentType(string contentType) => throw null;
        public void AssertFeatures(ServiceStack.Feature usesFeatures) => throw null;
        public System.Collections.Generic.List<ServiceStack.ResponseStatus> AsyncErrors { get => throw null; set => throw null; }
        public virtual ServiceStack.Web.IHttpResult AuthenticationRequired(ServiceStack.IServiceBase service) => throw null;
        public System.Collections.Generic.List<System.Action<ServiceStack.ServiceStackHost>> BeforeConfigure { get => throw null; set => throw null; }
        public System.Collections.Generic.List<ServiceStack.Host.HttpHandlerResolverDelegate> CatchAllHandlers { get => throw null; set => throw null; }
        public ServiceStack.HostConfig Config { get => throw null; set => throw null; }
        public abstract void Configure(Funq.Container container);
        public virtual void ConfigureLogging() => throw null;
        public void ConfigurePlugin<T>(System.Action<T> configure) where T : class, ServiceStack.IPlugin => throw null;
        public virtual Funq.Container Container { get => throw null; set => throw null; }
        public ServiceStack.IO.IVirtualDirectory ContentRootDirectory { get => throw null; }
        public ServiceStack.Web.IContentTypes ContentTypes { get => throw null; set => throw null; }
        public virtual void CookieOptionsFilter(System.Net.Cookie cookie, Microsoft.AspNetCore.Http.CookieOptions cookieOptions) => throw null;
        public virtual ServiceStack.ErrorResponse CreateErrorResponse(System.Exception ex, object request = default(object)) => throw null;
        public virtual ServiceStack.ResponseStatus CreateResponseStatus(System.Exception ex, object request = default(object)) => throw null;
        protected virtual ServiceStack.Host.ServiceController CreateServiceController(params System.Reflection.Assembly[] assembliesWithServices) => throw null;
        protected virtual ServiceStack.Host.ServiceController CreateServiceController(params System.Type[] serviceTypes) => throw null;
        public virtual ServiceStack.Web.IServiceRunner<TRequest> CreateServiceRunner<TRequest>(ServiceStack.Host.ActionContext actionContext) => throw null;
        public System.Collections.Generic.Dictionary<System.Net.HttpStatusCode, ServiceStack.Host.Handlers.IServiceStackHandler> CustomErrorHttpHandlers { get => throw null; set => throw null; }
        public ServiceStack.Script.ScriptContext DefaultScriptContext { get => throw null; set => throw null; }
        public void Dispose() => throw null;
        protected virtual void Dispose(bool disposing) => throw null;
        public virtual object EvalExpression(string expr) => throw null;
        public virtual object EvalExpressionCached(string expr) => throw null;
        public virtual object EvalScript(ServiceStack.Script.PageResult pageResult, ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest), System.Collections.Generic.Dictionary<string, object> args = default(System.Collections.Generic.Dictionary<string, object>)) => throw null;
        public virtual System.Threading.Tasks.Task<object> EvalScriptAsync(ServiceStack.Script.PageResult pageResult, ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest), System.Collections.Generic.Dictionary<string, object> args = default(System.Collections.Generic.Dictionary<string, object>)) => throw null;
        public virtual object EvalScriptValue(ServiceStack.IScriptValue scriptValue, ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest), System.Collections.Generic.Dictionary<string, object> args = default(System.Collections.Generic.Dictionary<string, object>)) => throw null;
        public virtual System.Threading.Tasks.Task<object> EvalScriptValueAsync(ServiceStack.IScriptValue scriptValue, ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest), System.Collections.Generic.Dictionary<string, object> args = default(System.Collections.Generic.Dictionary<string, object>)) => throw null;
        public System.Collections.Generic.HashSet<System.Type> ExcludeAutoRegisteringServiceTypes { get => throw null; set => throw null; }
        public void ExecTypedFilters(System.Collections.Generic.Dictionary<System.Type, ServiceStack.Host.ITypedFilter> typedFilters, ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object dto) => throw null;
        public System.Threading.Tasks.Task ExecTypedFiltersAsync(System.Collections.Generic.Dictionary<System.Type, ServiceStack.Host.ITypedFilterAsync> typedFilters, ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object dto) => throw null;
        public virtual object ExecuteMessage(ServiceStack.Messaging.IMessage mqMessage) => throw null;
        public virtual object ExecuteMessage(ServiceStack.Messaging.IMessage dto, ServiceStack.Web.IRequest req) => throw null;
        public System.Threading.Tasks.Task<object> ExecuteMessageAsync(ServiceStack.Messaging.IMessage mqMessage, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public System.Threading.Tasks.Task<object> ExecuteMessageAsync(ServiceStack.Messaging.IMessage mqMessage, ServiceStack.Web.IRequest req, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public virtual object ExecuteService(object requestDto) => throw null;
        public virtual object ExecuteService(object requestDto, ServiceStack.Web.IRequest req) => throw null;
        public virtual object ExecuteService(object requestDto, ServiceStack.RequestAttributes requestAttributes) => throw null;
        public virtual System.Threading.Tasks.Task<object> ExecuteServiceAsync(object requestDto, ServiceStack.Web.IRequest req) => throw null;
        public System.Collections.Generic.List<ServiceStack.Host.HttpHandlerResolverDelegate> FallbackHandlers { get => throw null; set => throw null; }
        public System.Collections.Generic.List<ServiceStack.Host.HandleGatewayExceptionDelegate> GatewayExceptionHandlers { get => throw null; set => throw null; }
        public System.Collections.Generic.List<ServiceStack.Host.HandleGatewayExceptionAsyncDelegate> GatewayExceptionHandlersAsync { get => throw null; set => throw null; }
        public System.Collections.Generic.List<System.Action<ServiceStack.Web.IRequest, object>> GatewayRequestFilters { get => throw null; set => throw null; }
        public System.Collections.Generic.List<System.Func<ServiceStack.Web.IRequest, object, System.Threading.Tasks.Task>> GatewayRequestFiltersAsync { get => throw null; set => throw null; }
        public System.Collections.Generic.List<System.Action<ServiceStack.Web.IRequest, object>> GatewayResponseFilters { get => throw null; set => throw null; }
        public System.Collections.Generic.List<System.Func<ServiceStack.Web.IRequest, object, System.Threading.Tasks.Task>> GatewayResponseFiltersAsync { get => throw null; set => throw null; }
        public virtual string GenerateWsdl(ServiceStack.Metadata.WsdlTemplateBase wsdlTemplate) => throw null;
        public virtual ServiceStack.Auth.IAuthRepository GetAuthRepository(ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest)) => throw null;
        public virtual ServiceStack.Auth.IAuthRepositoryAsync GetAuthRepositoryAsync(ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest)) => throw null;
        public virtual string GetAuthorization(ServiceStack.Web.IRequest req) => throw null;
        public virtual string GetBaseUrl(ServiceStack.Web.IRequest httpReq) => throw null;
        public virtual string GetBearerToken(ServiceStack.Web.IRequest req) => throw null;
        public virtual ServiceStack.Caching.ICacheClient GetCacheClient(ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest)) => throw null;
        public virtual ServiceStack.Caching.ICacheClientAsync GetCacheClientAsync(ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest)) => throw null;
        public virtual string GetCompressionType(ServiceStack.Web.IRequest request) => throw null;
        public virtual ServiceStack.Web.ICookies GetCookies(ServiceStack.Web.IHttpResponse res) => throw null;
        public ServiceStack.Host.Handlers.IServiceStackHandler GetCustomErrorHandler(System.Net.HttpStatusCode errorStatus) => throw null;
        public ServiceStack.Host.Handlers.IServiceStackHandler GetCustomErrorHandler(int errorStatusCode) => throw null;
        public ServiceStack.Host.IHttpHandler GetCustomErrorHttpHandler(System.Net.HttpStatusCode errorStatus) => throw null;
        public virtual System.Data.IDbConnection GetDbConnection(ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest)) => throw null;
        public virtual string GetDbNamedConnection(ServiceStack.Web.IRequest req) => throw null;
        public virtual System.TimeSpan GetDefaultSessionExpiry(ServiceStack.Web.IRequest req) => throw null;
        public virtual string GetJwtRefreshToken(ServiceStack.Web.IRequest req) => throw null;
        public virtual string GetJwtToken(ServiceStack.Web.IRequest req) => throw null;
        public virtual ServiceStack.Caching.MemoryCacheClient GetMemoryCacheClient(ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest)) => throw null;
        public virtual ServiceStack.Messaging.IMessageProducer GetMessageProducer(ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest)) => throw null;
        public virtual System.Collections.Generic.List<string> GetMetadataPluginIds() => throw null;
        public ServiceStack.Host.Handlers.IServiceStackHandler GetNotFoundHandler() => throw null;
        public T GetPlugin<T>() where T : class, ServiceStack.IPlugin => throw null;
        public virtual ServiceStack.Redis.IRedisClient GetRedisClient(ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest)) => throw null;
        public virtual System.Threading.Tasks.ValueTask<ServiceStack.Redis.IRedisClientAsync> GetRedisClientAsync(ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest)) => throw null;
        public virtual string GetRefreshToken(ServiceStack.Web.IRequest req) => throw null;
        public virtual ServiceStack.RouteAttribute[] GetRouteAttributes(System.Type requestType) => throw null;
        public virtual T GetRuntimeConfig<T>(ServiceStack.Web.IRequest req, string name, T defaultValue) => throw null;
        public virtual ServiceStack.IServiceGateway GetServiceGateway() => throw null;
        public virtual ServiceStack.IServiceGateway GetServiceGateway(ServiceStack.Web.IRequest req) => throw null;
        public virtual ServiceStack.MetadataTypesConfig GetTypesConfigForMetadata(ServiceStack.Web.IRequest req) => throw null;
        public virtual T GetVirtualFileSource<T>() where T : class => throw null;
        public virtual System.Collections.Generic.List<ServiceStack.IO.IVirtualPathProvider> GetVirtualFileSources() => throw null;
        public virtual string GetWebRootPath() => throw null;
        public static System.Collections.Generic.List<System.Action<ServiceStack.ServiceStackHost>> GlobalAfterAppHostInit { get => throw null; }
        public static System.Collections.Generic.List<System.Action<ServiceStack.ServiceStackHost>> GlobalAfterConfigure { get => throw null; }
        public static System.Collections.Generic.List<System.Action<ServiceStack.ServiceStackHost>> GlobalAfterPluginsLoaded { get => throw null; }
        public static System.Collections.Generic.List<System.Action<ServiceStack.ServiceStackHost>> GlobalBeforeConfigure { get => throw null; }
        public ServiceStack.Host.Handlers.IServiceStackHandler GlobalHtmlErrorHttpHandler { get => throw null; set => throw null; }
        public System.Collections.Generic.List<System.Action<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, object>> GlobalMessageRequestFilters { get => throw null; }
        public System.Collections.Generic.List<System.Func<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, object, System.Threading.Tasks.Task>> GlobalMessageRequestFiltersAsync { get => throw null; }
        public System.Collections.Generic.List<System.Action<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, object>> GlobalMessageResponseFilters { get => throw null; }
        public System.Collections.Generic.List<System.Func<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, object, System.Threading.Tasks.Task>> GlobalMessageResponseFiltersAsync { get => throw null; }
        public System.Collections.Generic.List<System.Action<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, object>> GlobalRequestFilters { get => throw null; set => throw null; }
        public System.Collections.Generic.List<System.Func<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, object, System.Threading.Tasks.Task>> GlobalRequestFiltersAsync { get => throw null; set => throw null; }
        public System.Collections.Generic.List<System.Action<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, object>> GlobalResponseFilters { get => throw null; set => throw null; }
        public System.Collections.Generic.List<System.Func<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, object, System.Threading.Tasks.Task>> GlobalResponseFiltersAsync { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<System.Type, ServiceStack.Host.ITypedFilter> GlobalTypedMessageRequestFilters { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<System.Type, ServiceStack.Host.ITypedFilter> GlobalTypedMessageResponseFilters { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<System.Type, ServiceStack.Host.ITypedFilter> GlobalTypedRequestFilters { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<System.Type, ServiceStack.Host.ITypedFilterAsync> GlobalTypedRequestFiltersAsync { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<System.Type, ServiceStack.Host.ITypedFilter> GlobalTypedResponseFilters { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<System.Type, ServiceStack.Host.ITypedFilterAsync> GlobalTypedResponseFiltersAsync { get => throw null; set => throw null; }
        public void HandleErrorResponse(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, System.Net.HttpStatusCode errorStatus, string errorStatusDescription = default(string)) => throw null;
        public virtual System.Threading.Tasks.Task HandleResponseException(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, string operationName, System.Exception ex) => throw null;
        public virtual System.Threading.Tasks.Task HandleShortCircuitedErrors(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto) => throw null;
        public virtual System.Threading.Tasks.Task HandleShortCircuitedErrors(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto, System.Net.HttpStatusCode statusCode, string statusDescription = default(string)) => throw null;
        protected virtual System.Threading.Tasks.Task HandleUncaughtException(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, string operationName, System.Exception ex) => throw null;
        public bool HasAccessToMetadata(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes) => throw null;
        public bool HasFeature(ServiceStack.Feature feature) => throw null;
        public static bool HasInit { get => throw null; }
        public bool HasPlugin<T>() where T : class, ServiceStack.IPlugin => throw null;
        public bool HasStarted { get => throw null; }
        public virtual bool HasUi() => throw null;
        public bool HasValidAuthSecret(ServiceStack.Web.IRequest httpReq) => throw null;
        public virtual ServiceStack.ServiceStackHost Init() => throw null;
        public System.Collections.Generic.List<ServiceStack.IO.IVirtualPathProvider> InsertVirtualFileSources { get => throw null; set => throw null; }
        public static ServiceStack.ServiceStackHost Instance { get => throw null; set => throw null; }
        public bool IsDebugLogEnabled { get => throw null; }
        public static bool IsReady() => throw null;
        public virtual void LoadPlugin(params ServiceStack.IPlugin[] plugins) => throw null;
        public virtual ServiceStack.Web.IHttpResult LocalRedirect(ServiceStack.IServiceBase service, string redirect, string message) => throw null;
        protected ServiceStack.Logging.ILog Log;
        public virtual string MapProjectPath(string relativePath) => throw null;
        public ServiceStack.Host.ServiceMetadata Metadata { get => throw null; set => throw null; }
        public ServiceStack.Metadata.MetadataPagesConfig MetadataPagesConfig { get => throw null; }
        public static string NormalizePathInfo(string pathInfo, string mode) => throw null;
        public virtual void OnAfterConfigChanged() => throw null;
        public virtual object OnAfterExecute(ServiceStack.Web.IRequest req, object requestDto, object response) => throw null;
        public virtual void OnAfterInit() => throw null;
        public System.Collections.Generic.Dictionary<System.Type, System.Collections.Generic.List<System.Action<ServiceStack.IPlugin>>> OnAfterPluginsLoaded { get => throw null; set => throw null; }
        public virtual void OnApplicationStopping() => throw null;
        public virtual void OnBeforeInit() => throw null;
        public virtual void OnConfigLoad() => throw null;
        public virtual object OnDeserializeJson(System.Type intoType, System.IO.Stream fromStream) => throw null;
        public System.Collections.Generic.List<System.Action<ServiceStack.IAppHost>> OnDisposeCallbacks { get => throw null; set => throw null; }
        public virtual void OnEndRequest(ServiceStack.Web.IRequest request = default(ServiceStack.Web.IRequest)) => throw null;
        public System.Collections.Generic.List<System.Action<ServiceStack.Web.IRequest>> OnEndRequestCallbacks { get => throw null; set => throw null; }
        public virtual void OnExceptionTypeFilter(System.Exception ex, ServiceStack.ResponseStatus responseStatus) => throw null;
        public virtual System.Threading.Tasks.Task OnGatewayException(ServiceStack.Web.IRequest httpReq, object request, System.Exception ex) => throw null;
        public virtual void OnLogError(System.Type type, string message, System.Exception innerEx = default(System.Exception)) => throw null;
        public virtual object OnPostExecuteServiceFilter(ServiceStack.IService service, object response, ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes) => throw null;
        public System.Collections.Generic.Dictionary<System.Type, System.Collections.Generic.List<System.Action<ServiceStack.IPlugin>>> OnPostRegisterPlugins { get => throw null; set => throw null; }
        public virtual object OnPreExecuteServiceFilter(ServiceStack.IService service, object request, ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes) => throw null;
        public System.Collections.Generic.Dictionary<System.Type, System.Collections.Generic.List<System.Action<ServiceStack.IPlugin>>> OnPreRegisterPlugins { get => throw null; set => throw null; }
        public virtual void OnSaveSession(ServiceStack.Web.IRequest httpReq, ServiceStack.Auth.IAuthSession session, System.TimeSpan? expiresIn = default(System.TimeSpan?)) => throw null;
        public virtual System.Threading.Tasks.Task OnSaveSessionAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Auth.IAuthSession session, System.TimeSpan? expiresIn = default(System.TimeSpan?), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public virtual void OnSerializeJson(ServiceStack.Web.IRequest req, object dto, System.IO.Stream outputStream) => throw null;
        public virtual System.Threading.Tasks.Task<object> OnServiceException(ServiceStack.Web.IRequest httpReq, object request, System.Exception ex) => throw null;
        public virtual ServiceStack.Auth.IAuthSession OnSessionFilter(ServiceStack.Web.IRequest req, ServiceStack.Auth.IAuthSession session, string withSessionId) => throw null;
        public virtual void OnStartupException(System.Exception ex) => throw null;
        public virtual void OnStartupException(System.Exception ex, string target, string method) => throw null;
        public virtual System.Threading.Tasks.Task OnUncaughtException(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, string operationName, System.Exception ex) => throw null;
        public virtual string PathBase { get => throw null; set => throw null; }
        public System.Collections.Generic.List<ServiceStack.IPlugin> Plugins { get => throw null; set => throw null; }
        public System.Collections.Generic.List<string> PluginsLoaded { get => throw null; set => throw null; }
        protected void PopulateArrayFilters() => throw null;
        public void PostConfigurePlugin<T>(System.Action<T> configure) where T : class, ServiceStack.IPlugin => throw null;
        public System.Collections.Generic.List<System.Action<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse>> PreRequestFilters { get => throw null; set => throw null; }
        public virtual void PublishMessage<T>(ServiceStack.Messaging.IMessageProducer messageProducer, T message) => throw null;
        public System.Collections.Generic.List<System.Func<ServiceStack.Web.IHttpRequest, ServiceStack.Host.IHttpHandler>> RawHttpHandlers { get => throw null; set => throw null; }
        public System.DateTime? ReadyAt { get => throw null; set => throw null; }
        public virtual ServiceStack.Web.IHttpResult Redirect(ServiceStack.IServiceBase service, string redirect, string message) => throw null;
        public virtual void Register<T>(T instance) => throw null;
        public virtual void RegisterAs<T, TAs>() where T : TAs => throw null;
        protected virtual void RegisterLicenseKey(string licenseKeyText) => throw null;
        public virtual void RegisterService(System.Type serviceType, params string[] atRestPaths) => throw null;
        public virtual void RegisterService<T>(params string[] atRestPaths) where T : ServiceStack.IService => throw null;
        public void RegisterServicesInAssembly(System.Reflection.Assembly assembly) => throw null;
        public void RegisterTypedMessageRequestFilter<T>(System.Action<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, T> filterFn) => throw null;
        public void RegisterTypedMessageResponseFilter<T>(System.Action<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, T> filterFn) => throw null;
        public void RegisterTypedRequestFilter<T>(System.Action<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, T> filterFn) => throw null;
        public void RegisterTypedRequestFilter<T>(System.Func<Funq.Container, ServiceStack.Host.ITypedFilter<T>> filter) => throw null;
        public void RegisterTypedRequestFilterAsync<T>(System.Func<Funq.Container, ServiceStack.Host.ITypedFilterAsync<T>> filter) => throw null;
        public void RegisterTypedRequestFilterAsync<T>(System.Func<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, T, System.Threading.Tasks.Task> filterFn) => throw null;
        public void RegisterTypedResponseFilter<T>(System.Action<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, T> filterFn) => throw null;
        public void RegisterTypedResponseFilter<T>(System.Func<Funq.Container, ServiceStack.Host.ITypedFilter<T>> filter) => throw null;
        public void RegisterTypedResponseFilterAsync<T>(System.Func<Funq.Container, ServiceStack.Host.ITypedFilterAsync<T>> filter) => throw null;
        public void RegisterTypedResponseFilterAsync<T>(System.Func<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, T, System.Threading.Tasks.Task> filterFn) => throw null;
        public virtual void Release(object instance) => throw null;
        public System.Collections.Generic.Dictionary<System.Type, System.Func<ServiceStack.Web.IRequest, object>> RequestBinders { get => throw null; }
        public System.Collections.Generic.List<System.Func<ServiceStack.Web.IRequest, object, System.Threading.Tasks.Task<object>>> RequestConverters { get => throw null; set => throw null; }
        public virtual T Resolve<T>() => throw null;
        public virtual string ResolveAbsoluteUrl(string virtualPath, ServiceStack.Web.IRequest httpReq) => throw null;
        public virtual string ResolveLocalizedString(string text, ServiceStack.Web.IRequest request = default(ServiceStack.Web.IRequest)) => throw null;
        public virtual string ResolveLocalizedStringFormat(string text, object[] args, ServiceStack.Web.IRequest request = default(ServiceStack.Web.IRequest)) => throw null;
        public virtual string ResolvePathInfo(ServiceStack.Web.IRequest request, string originalPathInfo) => throw null;
        public virtual string ResolvePhysicalPath(string virtualPath, ServiceStack.Web.IRequest httpReq) => throw null;
        public System.Collections.Generic.List<System.Func<ServiceStack.Web.IRequest, object, System.Threading.Tasks.Task<object>>> ResponseConverters { get => throw null; set => throw null; }
        public System.Collections.Generic.List<ServiceStack.Host.RestPath> RestPaths { get => throw null; set => throw null; }
        public virtual ServiceStack.Host.IHttpHandler ReturnRedirectHandler(ServiceStack.Web.IHttpRequest httpReq) => throw null;
        public virtual ServiceStack.Host.IHttpHandler ReturnRequestInfoHandler(ServiceStack.Web.IHttpRequest httpReq) => throw null;
        public ServiceStack.IO.IVirtualDirectory RootDirectory { get => throw null; }
        public ServiceStack.Web.IServiceRoutes Routes { get => throw null; set => throw null; }
        public ServiceStack.RpcGateway RpcGateway { get => throw null; set => throw null; }
        public ServiceStack.Script.ScriptContext ScriptContext { get => throw null; }
        public System.Collections.Generic.List<System.Reflection.Assembly> ServiceAssemblies { get => throw null; set => throw null; }
        public ServiceStack.Host.ServiceController ServiceController { get => throw null; set => throw null; }
        public System.Collections.Generic.List<ServiceStack.Host.HandleServiceExceptionDelegate> ServiceExceptionHandlers { get => throw null; set => throw null; }
        public System.Collections.Generic.List<ServiceStack.Host.HandleServiceExceptionAsyncDelegate> ServiceExceptionHandlersAsync { get => throw null; set => throw null; }
        public string ServiceName { get => throw null; set => throw null; }
        protected ServiceStackHost(string serviceName, params System.Reflection.Assembly[] assembliesWithServices) => throw null;
        public virtual void SetConfig(ServiceStack.HostConfig config) => throw null;
        public virtual bool SetCookieFilter(ServiceStack.Web.IRequest req, System.Net.Cookie cookie) => throw null;
        public virtual bool ShouldCompressFile(ServiceStack.IO.IVirtualFile file) => throw null;
        public virtual bool ShouldProfileRequest(ServiceStack.Web.IRequest req) => throw null;
        public virtual ServiceStack.ServiceStackHost Start(string urlBase) => throw null;
        public System.Collections.Generic.List<ServiceStack.ResponseStatus> StartUpErrors { get => throw null; set => throw null; }
        public System.DateTime StartedAt { get => throw null; set => throw null; }
        public bool TestMode { get => throw null; set => throw null; }
        public virtual ServiceStack.Web.IRequest TryGetCurrentRequest() => throw null;
        public virtual void TryGetNativeCacheClient(ServiceStack.Web.IRequest req, out ServiceStack.Caching.ICacheClient cacheSync, out ServiceStack.Caching.ICacheClientAsync cacheAsync) => throw null;
        public virtual string TryGetUserId(ServiceStack.Web.IRequest req) => throw null;
        public virtual T TryResolve<T>() => throw null;
        public System.Collections.Generic.List<ServiceStack.Host.HandleUncaughtExceptionDelegate> UncaughtExceptionHandlers { get => throw null; set => throw null; }
        public System.Collections.Generic.List<ServiceStack.Host.HandleUncaughtExceptionAsyncDelegate> UncaughtExceptionHandlersAsync { get => throw null; set => throw null; }
        public System.Exception UseException(System.Exception ex) => throw null;
        public virtual bool UseHttps(ServiceStack.Web.IRequest httpReq) => throw null;
        public System.Collections.Generic.List<ServiceStack.Html.IViewEngine> ViewEngines { get => throw null; set => throw null; }
        public ServiceStack.IO.IVirtualPathProvider VirtualFileSources { get => throw null; set => throw null; }
        public ServiceStack.IO.IVirtualFiles VirtualFiles { get => throw null; set => throw null; }
        public virtual System.Threading.Tasks.Task WriteAutoHtmlResponseAsync(ServiceStack.Web.IRequest request, object response, string html, System.IO.Stream outputStream) => throw null;
        // ERR: Stub generator didn't handle member: ~ServiceStackHost
    }

    // Generated from `ServiceStack.ServiceStackHttpHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ServiceStackHttpHandler : ServiceStack.Host.Handlers.HttpAsyncTaskHandler
    {
        public override void ProcessRequest(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, string operationName) => throw null;
        public ServiceStackHttpHandler(ServiceStack.Host.Handlers.IServiceStackHandler servicestackHandler) => throw null;
    }

    // Generated from `ServiceStack.ServiceStackMqActivityArgs` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ServiceStackMqActivityArgs
    {
        public System.Diagnostics.Activity Activity { get => throw null; set => throw null; }
        public ServiceStack.Messaging.IMessage Message { get => throw null; set => throw null; }
        public ServiceStackMqActivityArgs() => throw null;
    }

    // Generated from `ServiceStack.ServiceStackProvider` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ServiceStackProvider : ServiceStack.IServiceStackProvider, System.IDisposable
    {
        public ServiceStack.Configuration.IAppSettings AppSettings { get => throw null; }
        public ServiceStack.Auth.IAuthRepository AuthRepository { get => throw null; }
        public ServiceStack.Auth.IAuthRepositoryAsync AuthRepositoryAsync { get => throw null; }
        public virtual ServiceStack.Caching.ICacheClient Cache { get => throw null; }
        public virtual ServiceStack.Caching.ICacheClientAsync CacheAsync { get => throw null; }
        public virtual void ClearSession() => throw null;
        public System.Threading.Tasks.Task ClearSessionAsync(System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public virtual System.Data.IDbConnection Db { get => throw null; }
        public virtual void Dispose() => throw null;
        public System.Threading.Tasks.ValueTask DisposeAsync() => throw null;
        public object Execute(ServiceStack.Web.IRequest request) => throw null;
        public object Execute(object requestDto) => throw null;
        public TResponse Execute<TResponse>(ServiceStack.IReturn<TResponse> requestDto) => throw null;
        public object ForwardRequest() => throw null;
        public virtual ServiceStack.IServiceGateway Gateway { get => throw null; }
        public virtual System.Threading.Tasks.ValueTask<ServiceStack.Redis.IRedisClientAsync> GetRedisAsync() => throw null;
        public virtual ServiceStack.Configuration.IResolver GetResolver() => throw null;
        public virtual ServiceStack.Auth.IAuthSession GetSession(bool reload = default(bool)) => throw null;
        public virtual System.Threading.Tasks.Task<ServiceStack.Auth.IAuthSession> GetSessionAsync(bool reload = default(bool), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public virtual bool IsAuthenticated { get => throw null; }
        public virtual ServiceStack.Messaging.IMessageProducer MessageProducer { get => throw null; }
        public virtual void PublishMessage<T>(T message) => throw null;
        public virtual ServiceStack.Redis.IRedisClient Redis { get => throw null; }
        public virtual ServiceStack.Web.IHttpRequest Request { get => throw null; }
        public virtual T ResolveService<T>() => throw null;
        public virtual ServiceStack.Web.IHttpResponse Response { get => throw null; }
        public ServiceStack.RpcGateway RpcGateway { get => throw null; }
        public ServiceStackProvider(ServiceStack.Web.IHttpRequest request, ServiceStack.Configuration.IResolver resolver = default(ServiceStack.Configuration.IResolver)) => throw null;
        public virtual TUserSession SessionAs<TUserSession>() => throw null;
        public virtual System.Threading.Tasks.Task<TUserSession> SessionAsAsync<TUserSession>(System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public virtual ServiceStack.Caching.ISession SessionBag { get => throw null; }
        public virtual ServiceStack.Caching.ISessionAsync SessionBagAsync { get => throw null; }
        public virtual ServiceStack.Caching.ISessionFactory SessionFactory { get => throw null; }
        public virtual void SetResolver(ServiceStack.Configuration.IResolver resolver) => throw null;
        public virtual T TryResolve<T>() => throw null;
    }

    // Generated from `ServiceStack.ServiceStackProviderExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class ServiceStackProviderExtensions
    {
        public static bool HasAccess(this ServiceStack.IHasServiceStackProvider hasProvider, System.Collections.Generic.ICollection<ServiceStack.RequiredRoleAttribute> roleAttrs, System.Collections.Generic.ICollection<ServiceStack.RequiresAnyRoleAttribute> anyRoleAttrs, System.Collections.Generic.ICollection<ServiceStack.RequiredPermissionAttribute> permAttrs, System.Collections.Generic.ICollection<ServiceStack.RequiresAnyPermissionAttribute> anyPermAttrs) => throw null;
        public static bool IsAuthorized(this ServiceStack.IHasServiceStackProvider hasProvider, ServiceStack.AuthenticateAttribute authAttr) => throw null;
        public static ServiceStack.FluentValidation.IValidator<T> ResolveValidator<T>(this ServiceStack.IHasServiceStackProvider provider) => throw null;
    }

    // Generated from `ServiceStack.ServiceStackScriptBlocks` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ServiceStackScriptBlocks : ServiceStack.Script.IScriptPlugin
    {
        public void Register(ServiceStack.Script.ScriptContext context) => throw null;
        public ServiceStackScriptBlocks() => throw null;
    }

    // Generated from `ServiceStack.ServiceStackScriptUtils` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class ServiceStackScriptUtils
    {
        public static ServiceStack.ResponseStatus GetErrorStatus(this ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public static ServiceStack.Web.IHttpRequest GetHttpRequest(this ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public static ServiceStack.Web.IRequest GetRequest(this ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public static System.Collections.Generic.HashSet<string> GetUserAttributes(this ServiceStack.Web.IRequest request) => throw null;
        public static string ResolveUrl(this ServiceStack.Script.ScriptScopeContext scope, string url) => throw null;
        public static ServiceStack.NavOptions WithDefaults(this ServiceStack.NavOptions options, ServiceStack.Web.IRequest request) => throw null;
    }

    // Generated from `ServiceStack.ServiceStackScripts` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ServiceStackScripts : ServiceStack.Script.ScriptMethods, ServiceStack.Script.IConfigureScriptContext
    {
        public void Configure(ServiceStack.Script.ScriptContext context) => throw null;
        public static ServiceStack.Logging.ILog Log;
        public static System.Collections.Generic.List<string> RemoveNewLinesFor { get => throw null; }
        public ServiceStackScripts() => throw null;
        public static ServiceStack.HttpResult ToHttpResult(System.Collections.Generic.Dictionary<string, object> args) => throw null;
        public object assertPermission(ServiceStack.Script.ScriptScopeContext scope, string permission) => throw null;
        public object assertPermission(ServiceStack.Script.ScriptScopeContext scope, string permission, System.Collections.Generic.Dictionary<string, object> options) => throw null;
        public object assertRole(ServiceStack.Script.ScriptScopeContext scope, string role) => throw null;
        public object assertRole(ServiceStack.Script.ScriptScopeContext scope, string role, System.Collections.Generic.Dictionary<string, object> options) => throw null;
        public ServiceStack.Auth.IAuthRepository authRepo(ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public object baseUrl(ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public ServiceStack.IRawString bundleCss(object virtualPaths) => throw null;
        public ServiceStack.IRawString bundleCss(object virtualPaths, object options) => throw null;
        public ServiceStack.IRawString bundleHtml(object virtualPaths) => throw null;
        public ServiceStack.IRawString bundleHtml(object virtualPaths, object options) => throw null;
        public ServiceStack.IRawString bundleJs(object virtualPaths) => throw null;
        public ServiceStack.IRawString bundleJs(object virtualPaths, object options) => throw null;
        public ServiceStack.Auth.IUserAuth createUserAuth(ServiceStack.Auth.IAuthRepository authRepo, ServiceStack.Auth.IUserAuth newUser, string password) => throw null;
        public ServiceStack.Script.IgnoreResult deleteUserAuth(ServiceStack.Auth.IAuthRepository authRepo, string userAuthId) => throw null;
        public object endIfAuthenticated(ServiceStack.Script.ScriptScopeContext scope, object value) => throw null;
        public string errorResponse(ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public string errorResponse(ServiceStack.Script.ScriptScopeContext scope, ServiceStack.ResponseStatus errorStatus, string fieldName) => throw null;
        public string errorResponse(ServiceStack.Script.ScriptScopeContext scope, string fieldName) => throw null;
        public string errorResponseExcept(ServiceStack.Script.ScriptScopeContext scope, System.Collections.IEnumerable fields) => throw null;
        public string errorResponseExcept(ServiceStack.Script.ScriptScopeContext scope, ServiceStack.ResponseStatus errorStatus, System.Collections.IEnumerable fields) => throw null;
        public string errorResponseSummary(ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public string errorResponseSummary(ServiceStack.Script.ScriptScopeContext scope, ServiceStack.ResponseStatus errorStatus) => throw null;
        public object execService(ServiceStack.Script.ScriptScopeContext scope, string requestName) => throw null;
        public object execService(ServiceStack.Script.ScriptScopeContext scope, string requestName, object options) => throw null;
        public bool formCheckValue(ServiceStack.Script.ScriptScopeContext scope, string name) => throw null;
        public string formValue(ServiceStack.Script.ScriptScopeContext scope, string name) => throw null;
        public string formValue(ServiceStack.Script.ScriptScopeContext scope, string name, string defaultValue) => throw null;
        public string[] formValues(ServiceStack.Script.ScriptScopeContext scope, string name) => throw null;
        public ServiceStack.ResponseStatus getErrorStatus(ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public ServiceStack.Web.IHttpResult getHttpResult(ServiceStack.Script.ScriptScopeContext scope, object options) => throw null;
        public ServiceStack.Auth.IUserAuth getUserAuth(ServiceStack.Auth.IAuthRepository authRepo, string userAuthId) => throw null;
        public ServiceStack.Auth.IUserAuth getUserAuthByUserName(ServiceStack.Auth.IAuthRepository authRepo, string userNameOrEmail) => throw null;
        public System.Collections.Generic.List<ServiceStack.Auth.IUserAuth> getUserAuths(ServiceStack.Auth.IAuthRepository authRepo) => throw null;
        public System.Collections.Generic.List<ServiceStack.Auth.IUserAuth> getUserAuths(ServiceStack.Auth.IAuthRepository authRepo, System.Collections.Generic.Dictionary<string, object> options) => throw null;
        public object getUserSession(ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public bool hasErrorStatus(ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public object hasPermission(ServiceStack.Script.ScriptScopeContext scope, string permission) => throw null;
        public object hasRole(ServiceStack.Script.ScriptScopeContext scope, string role) => throw null;
        public ServiceStack.IO.FileSystemVirtualFiles hostVfsFileSystem() => throw null;
        public ServiceStack.IO.GistVirtualFiles hostVfsGist() => throw null;
        public ServiceStack.IO.MemoryVirtualFiles hostVfsMemory() => throw null;
        public ServiceStack.Web.IHttpRequest httpRequest(ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public ServiceStack.HttpResult httpResult(ServiceStack.Script.ScriptScopeContext scope, object options) => throw null;
        public object ifAuthenticated(ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public object ifNotAuthenticated(ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public bool isAuthenticated(ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public bool isAuthenticated(ServiceStack.Script.ScriptScopeContext scope, string provider) => throw null;
        public ServiceStack.Auth.IUserAuth newUserAuth(ServiceStack.Auth.IAuthRepository authRepo) => throw null;
        public ServiceStack.Auth.IUserAuthDetails newUserAuthDetails(ServiceStack.Auth.IAuthRepository authRepo) => throw null;
        public object onlyIfAuthenticated(ServiceStack.Script.ScriptScopeContext scope, object value) => throw null;
        public ServiceStack.Script.IgnoreResult publishMessage(ServiceStack.Script.ScriptScopeContext scope, string requestName, object dto) => throw null;
        public ServiceStack.Script.IgnoreResult publishMessage(ServiceStack.Script.ScriptScopeContext scope, string requestName, object dto, object options) => throw null;
        public object publishToGateway(ServiceStack.Script.ScriptScopeContext scope, object dto, string requestName) => throw null;
        public object publishToGateway(ServiceStack.Script.ScriptScopeContext scope, object dto, string requestName, object options) => throw null;
        public object publishToGateway(ServiceStack.Script.ScriptScopeContext scope, string requestName) => throw null;
        public object redirectIfNotAuthenticated(ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public object redirectIfNotAuthenticated(ServiceStack.Script.ScriptScopeContext scope, string path) => throw null;
        public object redirectTo(ServiceStack.Script.ScriptScopeContext scope, string path) => throw null;
        public object requestItem(ServiceStack.Script.ScriptScopeContext scope, string key) => throw null;
        public object resolveUrl(ServiceStack.Script.ScriptScopeContext scope, string virtualPath) => throw null;
        public ServiceStack.Script.IgnoreResult saveUserAuth(ServiceStack.Auth.IAuthRepository authRepo, ServiceStack.Auth.IUserAuth userAuth) => throw null;
        public System.Collections.Generic.List<ServiceStack.Auth.IUserAuth> searchUserAuths(ServiceStack.Auth.IAuthRepository authRepo, System.Collections.Generic.Dictionary<string, object> options) => throw null;
        public object sendToAutoQuery(ServiceStack.Script.ScriptScopeContext scope, object dto, string requestName) => throw null;
        public object sendToAutoQuery(ServiceStack.Script.ScriptScopeContext scope, object dto, string requestName, object options) => throw null;
        public object sendToAutoQuery(ServiceStack.Script.ScriptScopeContext scope, string requestName) => throw null;
        public object sendToGateway(ServiceStack.Script.ScriptScopeContext scope, object dto, string requestName) => throw null;
        public object sendToGateway(ServiceStack.Script.ScriptScopeContext scope, object dto, string requestName, object options) => throw null;
        public object sendToGateway(ServiceStack.Script.ScriptScopeContext scope, string requestName) => throw null;
        public ServiceStack.IRawString serviceStackLogoDataUri() => throw null;
        public ServiceStack.IRawString serviceStackLogoDataUri(string color) => throw null;
        public ServiceStack.IRawString serviceStackLogoDataUriLight() => throw null;
        public ServiceStack.IRawString serviceStackLogoSvg() => throw null;
        public ServiceStack.IRawString serviceStackLogoSvg(string color) => throw null;
        public string serviceUrl(ServiceStack.Script.ScriptScopeContext scope, string requestName) => throw null;
        public string serviceUrl(ServiceStack.Script.ScriptScopeContext scope, string requestName, System.Collections.Generic.Dictionary<string, object> properties) => throw null;
        public string serviceUrl(ServiceStack.Script.ScriptScopeContext scope, string requestName, System.Collections.Generic.Dictionary<string, object> properties, string httpMethod) => throw null;
        public ServiceStack.Auth.IAuthSession sessionIfAuthenticated(ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public ServiceStack.Script.IgnoreResult svgAdd(string svg, string name) => throw null;
        public ServiceStack.Script.IgnoreResult svgAdd(string svg, string name, string cssFile) => throw null;
        public ServiceStack.Script.IgnoreResult svgAddFile(ServiceStack.Script.ScriptScopeContext scope, string svgPath, string name) => throw null;
        public ServiceStack.Script.IgnoreResult svgAddFile(ServiceStack.Script.ScriptScopeContext scope, string svgPath, string name, string cssFile) => throw null;
        public ServiceStack.IRawString svgBackgroundImageCss(string name) => throw null;
        public ServiceStack.IRawString svgBackgroundImageCss(string name, string fillColor) => throw null;
        public string svgBaseUrl(ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> svgCssFiles() => throw null;
        public ServiceStack.IRawString svgDataUri(string name) => throw null;
        public ServiceStack.IRawString svgDataUri(string name, string fillColor) => throw null;
        public System.Collections.Generic.Dictionary<string, string> svgDataUris() => throw null;
        public ServiceStack.IRawString svgFill(string svg, string color) => throw null;
        public ServiceStack.IRawString svgImage(string name) => throw null;
        public ServiceStack.IRawString svgImage(string name, string fillColor) => throw null;
        public System.Collections.Generic.Dictionary<string, string> svgImages() => throw null;
        public ServiceStack.IRawString svgInBackgroundImageCss(string svg) => throw null;
        public object toResults(object dto) => throw null;
        public ServiceStack.Auth.IUserAuth tryAuthenticate(ServiceStack.Script.ScriptScopeContext scope, ServiceStack.Auth.IAuthRepository authRepo, string userName, string password) => throw null;
        public ServiceStack.Auth.IUserAuth updateUserAuth(ServiceStack.Auth.IAuthRepository authRepo, ServiceStack.Auth.IUserAuth existingUser, ServiceStack.Auth.IUserAuth newUser) => throw null;
        public ServiceStack.Script.IgnoreResult updateUserAuth(ServiceStack.Auth.IAuthRepository authRepo, ServiceStack.Auth.IUserAuth existingUser, ServiceStack.Auth.IUserAuth newUser, string password) => throw null;
        public System.Collections.Generic.HashSet<string> userAttributes(ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public string userAuthId(ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public string userAuthName(ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public string userProfileUrl(ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public ServiceStack.Auth.IAuthSession userSession(ServiceStack.Script.ScriptScopeContext scope) => throw null;
        public ServiceStack.IO.IVirtualFiles vfsContent() => throw null;
    }

    // Generated from `ServiceStack.SessionExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class SessionExtensions
    {
        public static System.Collections.Generic.HashSet<string> AddSessionOptions(this ServiceStack.Web.IRequest req, params string[] options) => throw null;
        public static bool Base64StringContainsUrlUnfriendlyChars(string base64) => throw null;
        public static void ClearSession(this ServiceStack.Caching.ICacheClient cache, ServiceStack.Web.IRequest httpReq = default(ServiceStack.Web.IRequest)) => throw null;
        public static System.Threading.Tasks.Task ClearSessionAsync(this ServiceStack.Caching.ICacheClientAsync cache, ServiceStack.Web.IRequest httpReq = default(ServiceStack.Web.IRequest), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static string CreatePermanentSessionId(this ServiceStack.Web.IRequest req, string sessionId) => throw null;
        public static string CreatePermanentSessionId(this ServiceStack.Web.IResponse res, ServiceStack.Web.IRequest req) => throw null;
        public static string CreateRandomBase62Id(int size) => throw null;
        public static string CreateRandomBase64Id(int size = default(int)) => throw null;
        public static string CreateRandomSessionId() => throw null;
        public static string CreateSessionId(this ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, string sessionKey, string sessionId) => throw null;
        public static string CreateSessionId(this ServiceStack.Web.IResponse res, ServiceStack.Web.IRequest req) => throw null;
        public static string CreateSessionIds(this ServiceStack.Web.IResponse res, ServiceStack.Web.IRequest req) => throw null;
        public static string CreateTemporarySessionId(this ServiceStack.Web.IRequest req, string sessionId) => throw null;
        public static string CreateTemporarySessionId(this ServiceStack.Web.IResponse res, ServiceStack.Web.IRequest req) => throw null;
        public static void DeleteJwtCookie(this ServiceStack.Web.IResponse response) => throw null;
        public static void DeleteSessionCookies(this ServiceStack.Web.IResponse response) => throw null;
        public static System.Threading.Tasks.Task GenerateNewSessionCookiesAsync(this ServiceStack.Web.IRequest req, ServiceStack.Auth.IAuthSession session, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static T Get<T>(this ServiceStack.Caching.ISession session) => throw null;
        public static System.Threading.Tasks.Task<T> GetAsync<T>(this ServiceStack.Caching.ISessionAsync session, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static string GetOrCreateSessionId(this ServiceStack.Web.IRequest httpReq) => throw null;
        public static string GetPermanentSessionId(this ServiceStack.Web.IRequest httpReq) => throw null;
        public static ServiceStack.Caching.ISession GetSessionBag(this ServiceStack.Web.IRequest request) => throw null;
        public static ServiceStack.Caching.ISession GetSessionBag(this ServiceStack.IServiceBase service) => throw null;
        public static ServiceStack.Caching.ISessionAsync GetSessionBagAsync(this ServiceStack.Web.IRequest request, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static ServiceStack.Caching.ISessionAsync GetSessionBagAsync(this ServiceStack.IServiceBase service, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static string GetSessionId(this ServiceStack.Web.IRequest req) => throw null;
        public static string GetSessionKey(ServiceStack.Web.IRequest httpReq = default(ServiceStack.Web.IRequest)) => throw null;
        public static System.Collections.Generic.HashSet<string> GetSessionOptions(this ServiceStack.Web.IRequest httpReq) => throw null;
        public static string GetSessionParam(this ServiceStack.Web.IRequest httpReq, string sessionKey) => throw null;
        public static string GetTemporarySessionId(this ServiceStack.Web.IRequest httpReq) => throw null;
        public static ServiceStack.Auth.IAuthSession GetUntypedSession(this ServiceStack.Caching.ICacheClient cache, ServiceStack.Web.IRequest httpReq = default(ServiceStack.Web.IRequest), ServiceStack.Web.IResponse httpRes = default(ServiceStack.Web.IResponse)) => throw null;
        public static System.Threading.Tasks.Task<ServiceStack.Auth.IAuthSession> GetUntypedSessionAsync(this ServiceStack.Caching.ICacheClientAsync cache, ServiceStack.Web.IRequest httpReq = default(ServiceStack.Web.IRequest), ServiceStack.Web.IResponse httpRes = default(ServiceStack.Web.IResponse), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static string GetUserAuthIdOrName(this ServiceStack.Auth.IAuthSession session) => throw null;
        public static string GetUserAuthName(this ServiceStack.Auth.IAuthSession session) => throw null;
        public static bool IsPermanentSession(this ServiceStack.Web.IRequest req) => throw null;
        public static void PopulateWithSecureRandomBytes(System.Byte[] bytes) => throw null;
        public static void Remove<T>(this ServiceStack.Caching.ISession session) => throw null;
        public static System.Threading.Tasks.Task RemoveAsync<T>(this ServiceStack.Caching.ISessionAsync session, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static TUserSession SessionAs<TUserSession>(this ServiceStack.Caching.ICacheClient cache, ServiceStack.Web.IRequest httpReq = default(ServiceStack.Web.IRequest), ServiceStack.Web.IResponse httpRes = default(ServiceStack.Web.IResponse)) => throw null;
        public static System.Threading.Tasks.Task<TUserSession> SessionAsAsync<TUserSession>(this ServiceStack.Caching.ICacheClientAsync cache, ServiceStack.Web.IRequest httpReq = default(ServiceStack.Web.IRequest), ServiceStack.Web.IResponse httpRes = default(ServiceStack.Web.IResponse), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static void Set<T>(this ServiceStack.Caching.ISession session, T value) => throw null;
        public static System.Threading.Tasks.Task SetAsync<T>(this ServiceStack.Caching.ISessionAsync session, T value, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static void SetSessionId(this ServiceStack.Web.IRequest req, string sessionId) => throw null;
        public static void UpdateSession(this ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IUserAuth userAuth) => throw null;
    }

    // Generated from `ServiceStack.SessionFactory` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class SessionFactory : ServiceStack.Caching.ISessionFactory
    {
        // Generated from `ServiceStack.SessionFactory+SessionCacheClient` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class SessionCacheClient : ServiceStack.Caching.ISession
        {
            public T Get<T>(string key) => throw null;
            public object this[string key] { get => throw null; set => throw null; }
            public bool Remove(string key) => throw null;
            public void RemoveAll() => throw null;
            public SessionCacheClient(ServiceStack.Caching.ICacheClient cacheClient, string sessionId) => throw null;
            public void Set<T>(string key, T value) => throw null;
        }


        // Generated from `ServiceStack.SessionFactory+SessionCacheClientAsync` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class SessionCacheClientAsync : ServiceStack.Caching.ISessionAsync
        {
            public System.Threading.Tasks.Task<T> GetAsync<T>(string key, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task RemoveAllAsync(System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<bool> RemoveAsync(string key, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public SessionCacheClientAsync(ServiceStack.Caching.ICacheClientAsync cacheClient, string sessionId) => throw null;
            public System.Threading.Tasks.Task SetAsync<T>(string key, T value, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        }


        public ServiceStack.Caching.ISession CreateSession(string sessionId) => throw null;
        public ServiceStack.Caching.ISessionAsync CreateSessionAsync(string sessionId) => throw null;
        public ServiceStack.Caching.ISession GetOrCreateSession() => throw null;
        public ServiceStack.Caching.ISession GetOrCreateSession(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes) => throw null;
        public ServiceStack.Caching.ISessionAsync GetOrCreateSessionAsync() => throw null;
        public ServiceStack.Caching.ISessionAsync GetOrCreateSessionAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes) => throw null;
        public SessionFactory(ServiceStack.Caching.ICacheClient cacheClient) => throw null;
        public SessionFactory(ServiceStack.Caching.ICacheClient cacheClient, ServiceStack.Caching.ICacheClientAsync cacheClientAsync) => throw null;
    }

    // Generated from `ServiceStack.SessionFeature` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class SessionFeature : ServiceStack.IPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
    {
        public static void AddSessionIdToRequestFilter(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto) => throw null;
        public static ServiceStack.Auth.IAuthSession CreateNewSession(ServiceStack.Web.IRequest httpReq) => throw null;
        public static ServiceStack.Auth.IAuthSession CreateNewSession(ServiceStack.Web.IRequest httpReq, string sessionId) => throw null;
        public static string CreateSessionIds(ServiceStack.Web.IRequest httpReq = default(ServiceStack.Web.IRequest), ServiceStack.Web.IResponse httpRes = default(ServiceStack.Web.IResponse)) => throw null;
        public static System.TimeSpan DefaultPermanentSessionExpiry;
        public static System.TimeSpan DefaultSessionExpiry;
        public static T GetOrCreateSession<T>(ServiceStack.Caching.ICacheClient cache = default(ServiceStack.Caching.ICacheClient), ServiceStack.Web.IRequest httpReq = default(ServiceStack.Web.IRequest), ServiceStack.Web.IResponse httpRes = default(ServiceStack.Web.IResponse)) => throw null;
        public static System.Threading.Tasks.Task<T> GetOrCreateSessionAsync<T>(ServiceStack.Caching.ICacheClientAsync cache = default(ServiceStack.Caching.ICacheClientAsync), ServiceStack.Web.IRequest httpReq = default(ServiceStack.Web.IRequest), ServiceStack.Web.IResponse httpRes = default(ServiceStack.Web.IResponse), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        public static string GetSessionKey(ServiceStack.Web.IRequest httpReq = default(ServiceStack.Web.IRequest)) => throw null;
        public static string GetSessionKey(string sessionId) => throw null;
        public string Id { get => throw null; set => throw null; }
        public System.TimeSpan? PermanentSessionExpiry { get => throw null; set => throw null; }
        public const string PermanentSessionId = default;
        public void Register(ServiceStack.IAppHost appHost) => throw null;
        public System.TimeSpan? SessionBagExpiry { get => throw null; set => throw null; }
        public System.TimeSpan? SessionExpiry { get => throw null; set => throw null; }
        public SessionFeature() => throw null;
        public const string SessionId = default;
        public const string SessionOptionsKey = default;
        public const string XUserAuthId = default;
    }

    // Generated from `ServiceStack.SessionFeatureUtils` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class SessionFeatureUtils
    {
        public static ServiceStack.Auth.IAuthSession CreateNewSession(this ServiceStack.Auth.IUserAuth user, ServiceStack.Web.IRequest httpReq) => throw null;
    }

    // Generated from `ServiceStack.SessionOptions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class SessionOptions
    {
        public const string Permanent = default;
        public SessionOptions() => throw null;
        public const string Temporary = default;
    }

    // Generated from `ServiceStack.SessionSourceResult` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class SessionSourceResult
    {
        public System.Collections.Generic.IEnumerable<string> Permissions { get => throw null; }
        public System.Collections.Generic.IEnumerable<string> Roles { get => throw null; }
        public ServiceStack.Auth.IAuthSession Session { get => throw null; }
        public SessionSourceResult(ServiceStack.Auth.IAuthSession session, System.Collections.Generic.IEnumerable<string> roles, System.Collections.Generic.IEnumerable<string> permissions) => throw null;
    }

    // Generated from `ServiceStack.SetStatusAttribute` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class SetStatusAttribute : ServiceStack.RequestFilterAttribute
    {
        public string Description { get => throw null; set => throw null; }
        public override void Execute(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto) => throw null;
        public SetStatusAttribute() => throw null;
        public SetStatusAttribute(System.Net.HttpStatusCode statusCode, string description) => throw null;
        public SetStatusAttribute(int status, string description) => throw null;
        public int? Status { get => throw null; set => throw null; }
        public System.Net.HttpStatusCode? StatusCode { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.SharpApiService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class SharpApiService : ServiceStack.Service
    {
        public System.Threading.Tasks.Task<object> Any(ServiceStack.ApiPages request) => throw null;
        public SharpApiService() => throw null;
    }

    // Generated from `ServiceStack.SharpCodePageHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class SharpCodePageHandler : ServiceStack.Host.Handlers.HttpAsyncTaskHandler
    {
        public System.Collections.Generic.Dictionary<string, object> Args { get => throw null; set => throw null; }
        public object Model { get => throw null; set => throw null; }
        public System.IO.Stream OutputStream { get => throw null; set => throw null; }
        public override System.Threading.Tasks.Task ProcessRequestAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, string operationName) => throw null;
        public SharpCodePageHandler(ServiceStack.Script.SharpCodePage page, ServiceStack.Script.SharpPage layoutPage = default(ServiceStack.Script.SharpPage)) => throw null;
    }

    // Generated from `ServiceStack.SharpPageHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class SharpPageHandler : ServiceStack.Host.Handlers.HttpAsyncTaskHandler
    {
        public System.Collections.Generic.Dictionary<string, object> Args { get => throw null; set => throw null; }
        public ServiceStack.Script.ScriptContext Context { get => throw null; set => throw null; }
        public System.Action<ServiceStack.Web.IRequest> Filter { get => throw null; set => throw null; }
        public ServiceStack.Script.SharpPage LayoutPage { get => throw null; set => throw null; }
        public object Model { get => throw null; set => throw null; }
        public static ServiceStack.Script.ScriptContext NewContext(ServiceStack.IAppHost appHost) => throw null;
        public System.IO.Stream OutputStream { get => throw null; set => throw null; }
        public ServiceStack.Script.SharpPage Page { get => throw null; set => throw null; }
        public override System.Threading.Tasks.Task ProcessRequestAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, string operationName) => throw null;
        public SharpPageHandler(ServiceStack.Script.SharpPage page, ServiceStack.Script.SharpPage layoutPage = default(ServiceStack.Script.SharpPage)) => throw null;
        public SharpPageHandler(string pagePath, string layoutPath = default(string)) => throw null;
        public System.Func<ServiceStack.Web.IRequest, bool> ValidateFn { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.SharpPagesFeature` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class SharpPagesFeature : ServiceStack.Script.ScriptContext, ServiceStack.Html.IViewEngine, ServiceStack.IPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
    {
        public string ApiDefaultContentType { get => throw null; set => throw null; }
        public string ApiPath { get => throw null; set => throw null; }
        public string DebugDefaultTemplate { get => throw null; set => throw null; }
        public bool DisablePageBasedRouting { get => throw null; set => throw null; }
        public bool? EnableHotReload { get => throw null; set => throw null; }
        public bool? EnableSpaFallback { get => throw null; set => throw null; }
        public bool ExcludeProtectedFilters { set => throw null; }
        public ServiceStack.Script.SharpPage GetRoutingPage(string pathInfo, out System.Collections.Generic.Dictionary<string, object> routingArgs) => throw null;
        public ServiceStack.Script.SharpPage GetViewPage(string viewName) => throw null;
        public bool HasView(string viewName, ServiceStack.Web.IRequest httpReq = default(ServiceStack.Web.IRequest)) => throw null;
        public string HtmlExtension { get => throw null; set => throw null; }
        public string Id { get => throw null; set => throw null; }
        public System.Collections.Generic.List<string> IgnorePaths { get => throw null; set => throw null; }
        public bool ImportRequestParams { get => throw null; set => throw null; }
        public string MetadataDebugAdminRole { get => throw null; set => throw null; }
        protected virtual ServiceStack.Host.IHttpHandler PageBasedRoutingHandler(string httpMethod, string pathInfo, string requestFilePath) => throw null;
        public System.Threading.Tasks.Task<bool> ProcessRequestAsync(ServiceStack.Web.IRequest req, object dto, System.IO.Stream outputStream) => throw null;
        public virtual void Register(ServiceStack.IAppHost appHost) => throw null;
        public string RenderPartial(string pageName, object model, bool renderHtml, System.IO.StreamWriter writer = default(System.IO.StreamWriter), ServiceStack.Html.IHtmlContext htmlHelper = default(ServiceStack.Html.IHtmlContext)) => throw null;
        protected virtual ServiceStack.Host.IHttpHandler RequestHandler(string httpMethod, string pathInfo, string filePath) => throw null;
        public string RunInitPage() => throw null;
        public string ScriptAdminRole { get => throw null; set => throw null; }
        public ServiceStack.ServiceStackScripts ServiceStackScripts { get => throw null; }
        public SharpPagesFeature() => throw null;
    }

    // Generated from `ServiceStack.SharpPagesFeatureExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class SharpPagesFeatureExtensions
    {
        public static ServiceStack.Script.PageResult BindRequest(this ServiceStack.Script.PageResult result, ServiceStack.Web.IRequest request) => throw null;
        public static System.Collections.Generic.Dictionary<string, object> CreateRequestArgs(System.Collections.Generic.Dictionary<string, object> args) => throw null;
        public static ServiceStack.Script.SharpCodePage GetCodePage(this ServiceStack.Web.IRequest request, string virtualPath) => throw null;
        public static ServiceStack.Script.SharpPage GetPage(this ServiceStack.Web.IRequest request, string virtualPath) => throw null;
        public static ServiceStack.Script.PageResult GetPageResult(this ServiceStack.Web.IRequest request, string virtualPath, System.Collections.Generic.Dictionary<string, object> args = default(System.Collections.Generic.Dictionary<string, object>)) => throw null;
        public static System.Collections.Generic.Dictionary<string, object> GetScriptRequestParams(this ServiceStack.Web.IRequest request, bool importRequestParams = default(bool)) => throw null;
        public static ServiceStack.ServiceStackScripts GetServiceStackFilters(this ServiceStack.Script.ScriptContext context) => throw null;
        public static ServiceStack.Script.ScriptContext InitForSharpPages(this ServiceStack.Script.ScriptContext context, ServiceStack.IAppHost appHost) => throw null;
        public static ServiceStack.Script.SharpPage OneTimePage(this ServiceStack.Web.IRequest request, string contents, string ext = default(string)) => throw null;
        public static System.Collections.Generic.Dictionary<string, object> SetRequestArgs(System.Collections.Generic.Dictionary<string, object> args, ServiceStack.Web.IRequest request) => throw null;
        public static ServiceStack.Script.ScriptContext UseAppHost(this ServiceStack.Script.ScriptContext context, ServiceStack.IAppHost appHost) => throw null;
        public static ServiceStack.Script.SharpCodePage With(this ServiceStack.Script.SharpCodePage page, ServiceStack.Web.IRequest request) => throw null;
    }

    // Generated from `ServiceStack.Sitemap` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class Sitemap
    {
        public string AtPath { get => throw null; set => throw null; }
        public string CustomXml { get => throw null; set => throw null; }
        public System.DateTime? LastModified { get => throw null; set => throw null; }
        public string Location { get => throw null; set => throw null; }
        public Sitemap() => throw null;
        public System.Collections.Generic.List<ServiceStack.SitemapUrl> UrlSet { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.SitemapCustomXml` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class SitemapCustomXml
    {
        public SitemapCustomXml() => throw null;
        public string SitemapIndexFooterXml { get => throw null; set => throw null; }
        public string SitemapIndexHeaderXml { get => throw null; set => throw null; }
        public string UrlSetFooterXml { get => throw null; set => throw null; }
        public string UrlSetHeaderXml { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.SitemapFeature` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class SitemapFeature : ServiceStack.IPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
    {
        // Generated from `ServiceStack.SitemapFeature+SitemapIndexHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class SitemapIndexHandler : ServiceStack.Host.Handlers.HttpAsyncTaskHandler
        {
            public override System.Threading.Tasks.Task ProcessRequestAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, string operationName) => throw null;
            public SitemapIndexHandler(ServiceStack.SitemapFeature feature) => throw null;
        }


        // Generated from `ServiceStack.SitemapFeature+SitemapUrlSetHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class SitemapUrlSetHandler : ServiceStack.Host.Handlers.HttpAsyncTaskHandler
        {
            public override System.Threading.Tasks.Task ProcessRequestAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, string operationName) => throw null;
            public SitemapUrlSetHandler(ServiceStack.SitemapFeature feature, System.Collections.Generic.List<ServiceStack.SitemapUrl> urlSet) => throw null;
        }


        public string AtPath { get => throw null; set => throw null; }
        public ServiceStack.SitemapCustomXml CustomXml { get => throw null; set => throw null; }
        public string Id { get => throw null; set => throw null; }
        public void Register(ServiceStack.IAppHost appHost) => throw null;
        public SitemapFeature() => throw null;
        public System.Collections.Generic.List<ServiceStack.Sitemap> SitemapIndex { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<string, string> SitemapIndexNamespaces { get => throw null; set => throw null; }
        public System.Collections.Generic.List<ServiceStack.SitemapUrl> UrlSet { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<string, string> UrlSetNamespaces { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.SitemapFrequency` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public enum SitemapFrequency
    {
        Always,
        Daily,
        Hourly,
        Monthly,
        Never,
        Weekly,
        Yearly,
    }

    // Generated from `ServiceStack.SitemapUrl` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class SitemapUrl
    {
        public ServiceStack.SitemapFrequency? ChangeFrequency { get => throw null; set => throw null; }
        public string CustomXml { get => throw null; set => throw null; }
        public System.DateTime? LastModified { get => throw null; set => throw null; }
        public string Location { get => throw null; set => throw null; }
        public System.Decimal? Priority { get => throw null; set => throw null; }
        public SitemapUrl() => throw null;
    }

    // Generated from `ServiceStack.SpaFallback` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class SpaFallback : ServiceStack.IReturn, ServiceStack.IReturn<string>
    {
        public string PathInfo { get => throw null; set => throw null; }
        public SpaFallback() => throw null;
    }

    // Generated from `ServiceStack.SpaFallbackService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class SpaFallbackService : ServiceStack.Service
    {
        public object Any(ServiceStack.SpaFallback request) => throw null;
        public SpaFallbackService() => throw null;
    }

    // Generated from `ServiceStack.SpaFeature` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class SpaFeature : ServiceStack.SharpPagesFeature
    {
        public SpaFeature() => throw null;
    }

    // Generated from `ServiceStack.StartsWithCondition` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class StartsWithCondition : ServiceStack.QueryCondition
    {
        public override string Alias { get => throw null; }
        public static ServiceStack.StartsWithCondition Instance;
        public override bool Match(object a, object b) => throw null;
        public StartsWithCondition() => throw null;
    }

    // Generated from `ServiceStack.StaticContent` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class StaticContent
    {
        public static ServiceStack.StaticContent CreateFromDataUri(string dataUri) => throw null;
        public System.ReadOnlyMemory<System.Byte> Data { get => throw null; }
        public string MimeType { get => throw null; }
        public StaticContent(System.ReadOnlyMemory<System.Byte> data, string mimeType) => throw null;
    }

    // Generated from `ServiceStack.StoreFileUploadService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class StoreFileUploadService : ServiceStack.Service
    {
        public System.Threading.Tasks.Task<object> Any(ServiceStack.StoreFileUpload request) => throw null;
        public StoreFileUploadService() => throw null;
    }

    // Generated from `ServiceStack.StrictModeCodes` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class StrictModeCodes
    {
        public const string CyclicalUserSession = default;
        public const string ReturnsValueType = default;
    }

    // Generated from `ServiceStack.SubscriptionInfo` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class SubscriptionInfo
    {
        public string[] Channels { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<string, string> ConnectArgs { get => throw null; set => throw null; }
        public System.DateTime CreatedAt { get => throw null; set => throw null; }
        public string DisplayName { get => throw null; set => throw null; }
        public bool IsAuthenticated { get => throw null; set => throw null; }
        public System.Collections.Concurrent.ConcurrentDictionary<string, string> Meta { get => throw null; set => throw null; }
        public System.Collections.Generic.Dictionary<string, string> ServerArgs { get => throw null; set => throw null; }
        public string SessionId { get => throw null; set => throw null; }
        public string SubscriptionId { get => throw null; set => throw null; }
        public SubscriptionInfo() => throw null;
        public string UserAddress { get => throw null; set => throw null; }
        public string UserId { get => throw null; set => throw null; }
        public string UserName { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.Svg` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class Svg
    {
        // Generated from `ServiceStack.Svg+Body` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class Body
        {
            public static string History;
            public static string Home;
            public static string Key;
            public static string Lock;
            public static string Logs;
            public static string Profiling;
            public static string Table;
            public static string User;
            public static string UserDetails;
            public static string UserShield;
            public static string Users;
        }


        // Generated from `ServiceStack.Svg+Icons` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class Icons
        {
            public const string DefaultProfile = default;
            public const string Female = default;
            public const string FemaleBusiness = default;
            public const string FemaleColor = default;
            public const string Male = default;
            public const string MaleBusiness = default;
            public const string MaleColor = default;
            public const string Users = default;
        }


        // Generated from `ServiceStack.Svg+Logos` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class Logos
        {
            public const string Apple = default;
            public const string Facebook = default;
            public const string GitHub = default;
            public const string Google = default;
            public const string LinkedIn = default;
            public const string Microsoft = default;
            public const string ServiceStack = default;
            public const string Twitter = default;
        }


        public static void AddImage(string svg, string name, string cssFile = default(string)) => throw null;
        public static System.Collections.Generic.Dictionary<string, string> AdjacentCssRules { get => throw null; set => throw null; }
        public static System.Collections.Generic.Dictionary<string, string> AppendToCssFiles { get => throw null; set => throw null; }
        public static string Create(string body, string fill = default(string), string viewBox = default(string), string stroke = default(string)) => throw null;
        public static ServiceStack.ImageInfo CreateImage(string body, string fill = default(string), string viewBox = default(string), string stroke = default(string)) => throw null;
        public static System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> CssFiles { get => throw null; set => throw null; }
        public static System.Collections.Generic.Dictionary<string, string> CssFillColor { get => throw null; set => throw null; }
        public static System.Collections.Generic.Dictionary<string, string> DataUris { get => throw null; set => throw null; }
        public static string Encode(string svg) => throw null;
        public static string Fill(string svg, string fillColor) => throw null;
        public static string[] FillColors { get => throw null; set => throw null; }
        public static string GetBackgroundImageCss(string name) => throw null;
        public static string GetBackgroundImageCss(string name, string fillColor) => throw null;
        public static string GetDataUri(string name) => throw null;
        public static string GetDataUri(string name, string fillColor) => throw null;
        public static string GetImage(string name) => throw null;
        public static string GetImage(string name, string fillColor) => throw null;
        public static ServiceStack.StaticContent GetStaticContent(string name) => throw null;
        public static ServiceStack.ImageInfo ImageSvg(string svg) => throw null;
        public static ServiceStack.ImageInfo ImageUri(string uri) => throw null;
        public static System.Collections.Generic.Dictionary<string, string> Images { get => throw null; set => throw null; }
        public static string InBackgroundImageCss(string svg) => throw null;
        public static string LightColor { get => throw null; set => throw null; }
        public static void Load(ServiceStack.IO.IVirtualDirectory svgDir) => throw null;
        public static string ToDataUri(string svg) => throw null;
    }

    // Generated from `ServiceStack.SvgFeature` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class SvgFeature : ServiceStack.IPlugin, ServiceStack.IPostInitPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
    {
        public void AfterPluginsLoaded(ServiceStack.IAppHost appHost) => throw null;
        public string Id { get => throw null; set => throw null; }
        public void Register(ServiceStack.IAppHost appHost) => throw null;
        public string RoutePath { get => throw null; set => throw null; }
        public SvgFeature() => throw null;
        public System.Func<ServiceStack.Web.IRequest, bool> ValidateFn { get => throw null; set => throw null; }
        public static void WriteAdjacentCss(System.Text.StringBuilder sb, System.Collections.Generic.List<string> dataUris, System.Collections.Generic.Dictionary<string, string> adjacentCssRules) => throw null;
        public static void WriteDataUris(System.Text.StringBuilder sb, System.Collections.Generic.List<string> dataUris) => throw null;
        public static void WriteSvgCssFile(ServiceStack.IO.IVirtualFiles vfs, string name, System.Collections.Generic.List<string> dataUris, System.Collections.Generic.Dictionary<string, string> adjacentCssRules = default(System.Collections.Generic.Dictionary<string, string>), System.Collections.Generic.Dictionary<string, string> appendToCssFiles = default(System.Collections.Generic.Dictionary<string, string>)) => throw null;
    }

    // Generated from `ServiceStack.SvgFormatHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class SvgFormatHandler : ServiceStack.Host.Handlers.HttpAsyncTaskHandler
    {
        public string Fill { get => throw null; set => throw null; }
        public string Format { get => throw null; set => throw null; }
        public string Id { get => throw null; set => throw null; }
        public override System.Threading.Tasks.Task ProcessRequestAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, string operationName) => throw null;
        public SvgFormatHandler() => throw null;
        public SvgFormatHandler(string fileName) => throw null;
    }

    // Generated from `ServiceStack.SvgScriptBlock` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class SvgScriptBlock : ServiceStack.Script.ScriptBlock
    {
        public override ServiceStack.Script.ScriptLanguage Body { get => throw null; }
        public override string Name { get => throw null; }
        public SvgScriptBlock() => throw null;
        public override System.Threading.Tasks.Task WriteAsync(ServiceStack.Script.ScriptScopeContext scope, ServiceStack.Script.PageBlockFragment block, System.Threading.CancellationToken token) => throw null;
    }

    // Generated from `ServiceStack.TemplateInfoFilters` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class TemplateInfoFilters : ServiceStack.InfoScripts
    {
        public TemplateInfoFilters() => throw null;
    }

    // Generated from `ServiceStack.TemplateMarkdownBlock` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class TemplateMarkdownBlock : ServiceStack.MarkdownScriptBlock
    {
        public TemplateMarkdownBlock() => throw null;
    }

    // Generated from `ServiceStack.TemplateServiceStackFilters` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class TemplateServiceStackFilters : ServiceStack.ServiceStackScripts
    {
        public TemplateServiceStackFilters() => throw null;
    }

    // Generated from `ServiceStack.TopLevelAppModularStartup` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class TopLevelAppModularStartup : ServiceStack.ModularStartup
    {
        public System.Type AppHostType { get => throw null; set => throw null; }
        public void Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder app) => throw null;
        public void ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection services) => throw null;
        public static ServiceStack.ModularStartup Create<THost>(THost instance, Microsoft.Extensions.Configuration.IConfiguration configuration, System.Func<System.Collections.Generic.IEnumerable<System.Type>> typesResolver) where THost : ServiceStack.AppHostBase => throw null;
        public static ServiceStack.ModularStartup Instance { get => throw null; set => throw null; }
        public ServiceStack.AppHostBase StartupInstance { get => throw null; set => throw null; }
        protected TopLevelAppModularStartup(System.Type hostType, ServiceStack.AppHostBase hostInstance, Microsoft.Extensions.Configuration.IConfiguration configuration, System.Func<System.Collections.Generic.IEnumerable<System.Type>> typesResolver) => throw null;
    }

    // Generated from `ServiceStack.TypeValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public abstract class TypeValidator : ServiceStack.ITypeValidator
    {
        public System.Collections.Generic.Dictionary<string, object> ContextArgs { get => throw null; set => throw null; }
        public string DefaultErrorCode { get => throw null; set => throw null; }
        public string DefaultMessage { get => throw null; set => throw null; }
        public int? DefaultStatusCode { get => throw null; set => throw null; }
        public string ErrorCode { get => throw null; set => throw null; }
        public virtual bool IsValid(object dto, ServiceStack.Web.IRequest request) => throw null;
        public virtual System.Threading.Tasks.Task<bool> IsValidAsync(object dto, ServiceStack.Web.IRequest request) => throw null;
        public string Message { get => throw null; set => throw null; }
        protected string ResolveErrorCode() => throw null;
        protected string ResolveErrorMessage(ServiceStack.Web.IRequest request, object dto) => throw null;
        protected int ResolveStatusCode() => throw null;
        public int? StatusCode { get => throw null; set => throw null; }
        public virtual System.Threading.Tasks.Task ThrowIfNotValidAsync(object dto, ServiceStack.Web.IRequest request) => throw null;
        protected TypeValidator(string errorCode = default(string), string message = default(string), int? statusCode = default(int?)) => throw null;
    }

    // Generated from `ServiceStack.TypedQueryData<,>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class TypedQueryData<QueryModel, From> : ServiceStack.ITypedQueryData
    {
        public ServiceStack.IDataQuery AddToQuery(ServiceStack.IDataQuery q, ServiceStack.IQueryData request, System.Collections.Generic.Dictionary<string, string> dynamicParams, ServiceStack.IAutoQueryDataOptions options = default(ServiceStack.IAutoQueryDataOptions)) => throw null;
        public ServiceStack.IDataQuery CreateQuery(ServiceStack.IQueryDataSource db) => throw null;
        public ServiceStack.QueryResponse<Into> Execute<Into>(ServiceStack.IQueryDataSource db, ServiceStack.IDataQuery query) => throw null;
        public System.Type FromType { get => throw null; }
        public System.Type QueryType { get => throw null; }
        public TypedQueryData() => throw null;
    }

    // Generated from `ServiceStack.UiFeature` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class UiFeature : ServiceStack.IPlugin, ServiceStack.IPostInitPlugin, ServiceStack.IPreInitPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
    {
        public void AddAdminLink(ServiceStack.AdminUi feature, ServiceStack.LinkInfo link) => throw null;
        public ServiceStack.HtmlModule AdminHtmlModule { get => throw null; set => throw null; }
        public ServiceStack.AdminUi AdminUi { get => throw null; set => throw null; }
        public void AfterPluginsLoaded(ServiceStack.IAppHost appHost) => throw null;
        public void BeforePluginsLoaded(ServiceStack.IAppHost appHost) => throw null;
        public System.Action<ServiceStack.IAppHost> Configure { get => throw null; set => throw null; }
        public ServiceStack.LinkInfo DashboardLink { get => throw null; set => throw null; }
        public System.Collections.Generic.List<ServiceStack.HtmlModules.IHtmlModulesHandler> Handlers { get => throw null; set => throw null; }
        public System.Collections.Generic.List<ServiceStack.HtmlModule> HtmlModules { get => throw null; }
        public string Id { get => throw null; }
        public ServiceStack.UiInfo Info { get => throw null; set => throw null; }
        public ServiceStack.HtmlModulesFeature Module { get => throw null; }
        public System.Collections.Generic.List<string> PreserveAttributesNamed { get => throw null; set => throw null; }
        public void Register(ServiceStack.IAppHost appHost) => throw null;
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<ServiceStack.LinkInfo>> RoleLinks { get => throw null; set => throw null; }
        public UiFeature() => throw null;
    }

    // Generated from `ServiceStack.UiFeatureUtils` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class UiFeatureUtils
    {
        public static ServiceStack.LinkInfo ToAdminRoleLink(this ServiceStack.LinkInfo link) => throw null;
    }

    // Generated from `ServiceStack.UnRegisterEventSubscriber` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class UnRegisterEventSubscriber : ServiceStack.IReturn, ServiceStack.IReturn<System.Collections.Generic.Dictionary<string, string>>
    {
        public string Id { get => throw null; set => throw null; }
        public UnRegisterEventSubscriber() => throw null;
    }

    // Generated from `ServiceStack.UploadLocation` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class UploadLocation
    {
        public System.Collections.Generic.HashSet<string> AllowExtensions { get => throw null; set => throw null; }
        public ServiceStack.FilesUploadOperation AllowOperations { get => throw null; set => throw null; }
        public System.Int64? MaxFileBytes { get => throw null; set => throw null; }
        public int? MaxFileCount { get => throw null; set => throw null; }
        public System.Int64? MinFileBytes { get => throw null; set => throw null; }
        public string Name { get => throw null; set => throw null; }
        public string ReadAccessRole { get => throw null; set => throw null; }
        public System.Func<ServiceStack.FilesUploadContext, string> ResolvePath { get => throw null; set => throw null; }
        public UploadLocation(string name, ServiceStack.IO.IVirtualFiles virtualFiles, System.Func<ServiceStack.FilesUploadContext, string> resolvePath = default(System.Func<ServiceStack.FilesUploadContext, string>), string readAccessRole = default(string), string writeAccessRole = default(string), string[] allowExtensions = default(string[]), ServiceStack.FilesUploadOperation allowOperations = default(ServiceStack.FilesUploadOperation), int? maxFileCount = default(int?), System.Int64? minFileBytes = default(System.Int64?), System.Int64? maxFileBytes = default(System.Int64?), System.Action<ServiceStack.Web.IRequest, ServiceStack.Web.IHttpFile> validateUpload = default(System.Action<ServiceStack.Web.IRequest, ServiceStack.Web.IHttpFile>), System.Action<ServiceStack.Web.IRequest, ServiceStack.IO.IVirtualFile> validateDownload = default(System.Action<ServiceStack.Web.IRequest, ServiceStack.IO.IVirtualFile>), System.Action<ServiceStack.Web.IRequest, ServiceStack.IO.IVirtualFile> validateDelete = default(System.Action<ServiceStack.Web.IRequest, ServiceStack.IO.IVirtualFile>), System.Func<ServiceStack.Web.IRequest, ServiceStack.IO.IVirtualFile, object> fileResult = default(System.Func<ServiceStack.Web.IRequest, ServiceStack.IO.IVirtualFile, object>)) => throw null;
        public System.Action<ServiceStack.Web.IRequest, ServiceStack.IO.IVirtualFile> ValidateDelete { get => throw null; set => throw null; }
        public System.Action<ServiceStack.Web.IRequest, ServiceStack.IO.IVirtualFile> ValidateDownload { get => throw null; set => throw null; }
        public System.Action<ServiceStack.Web.IRequest, ServiceStack.Web.IHttpFile> ValidateUpload { get => throw null; set => throw null; }
        public ServiceStack.IO.IVirtualFiles VirtualFiles { get => throw null; set => throw null; }
        public string WriteAccessRole { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.ValidateScripts` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class ValidateScripts : ServiceStack.Script.ScriptMethods
    {
        public ServiceStack.FluentValidation.Validators.IPropertyValidator CreditCard() => throw null;
        public ServiceStack.FluentValidation.Validators.IPropertyValidator Email() => throw null;
        public ServiceStack.FluentValidation.Validators.IPropertyValidator Empty() => throw null;
        public ServiceStack.FluentValidation.Validators.IPropertyValidator Empty(object defaultValue) => throw null;
        public ServiceStack.FluentValidation.Validators.IPropertyValidator Enum(System.Type enumType) => throw null;
        public ServiceStack.FluentValidation.Validators.IPropertyValidator Equal(object value) => throw null;
        public ServiceStack.FluentValidation.Validators.IPropertyValidator ExactLength(int length) => throw null;
        public ServiceStack.FluentValidation.Validators.IPropertyValidator ExclusiveBetween(System.IComparable from, System.IComparable to) => throw null;
        public ServiceStack.FluentValidation.Validators.IPropertyValidator GreaterThan(int value) => throw null;
        public ServiceStack.FluentValidation.Validators.IPropertyValidator GreaterThanOrEqual(int value) => throw null;
        public ServiceStack.ITypeValidator HasPermission(string permission) => throw null;
        public ServiceStack.ITypeValidator HasPermissions(string[] permission) => throw null;
        public ServiceStack.ITypeValidator HasRole(string role) => throw null;
        public ServiceStack.ITypeValidator HasRoles(string[] roles) => throw null;
        public ServiceStack.FluentValidation.Validators.IPropertyValidator InclusiveBetween(System.IComparable from, System.IComparable to) => throw null;
        public static ServiceStack.ValidateScripts Instance;
        public ServiceStack.ITypeValidator IsAdmin() => throw null;
        public ServiceStack.ITypeValidator IsAuthenticated() => throw null;
        public ServiceStack.ITypeValidator IsAuthenticated(string provider) => throw null;
        public ServiceStack.FluentValidation.Validators.IPropertyValidator Length(int min, int max) => throw null;
        public ServiceStack.FluentValidation.Validators.IPropertyValidator LessThan(int value) => throw null;
        public ServiceStack.FluentValidation.Validators.IPropertyValidator LessThanOrEqual(int value) => throw null;
        public ServiceStack.FluentValidation.Validators.IPropertyValidator MaximumLength(int max) => throw null;
        public ServiceStack.FluentValidation.Validators.IPropertyValidator MinimumLength(int min) => throw null;
        public ServiceStack.FluentValidation.Validators.IPropertyValidator NotEmpty() => throw null;
        public ServiceStack.FluentValidation.Validators.IPropertyValidator NotEmpty(object defaultValue) => throw null;
        public ServiceStack.FluentValidation.Validators.IPropertyValidator NotEqual(object value) => throw null;
        public ServiceStack.FluentValidation.Validators.IPropertyValidator NotNull() => throw null;
        public ServiceStack.FluentValidation.Validators.IPropertyValidator Null() => throw null;
        public ServiceStack.FluentValidation.Validators.IPropertyValidator RegularExpression(string regex) => throw null;
        public static System.Collections.Generic.HashSet<string> RequiredValidators { get => throw null; }
        public ServiceStack.FluentValidation.Validators.IPropertyValidator ScalePrecision(int scale, int precision) => throw null;
        public ValidateScripts() => throw null;
    }

    // Generated from `ServiceStack.ValidationResultExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class ValidationResultExtensions
    {
        public static ServiceStack.Validation.ValidationErrorResult ToErrorResult(this ServiceStack.FluentValidation.Results.ValidationResult result) => throw null;
        public static ServiceStack.Validation.ValidationError ToException(this ServiceStack.FluentValidation.Results.ValidationResult result) => throw null;
    }

    // Generated from `ServiceStack.ValidationSourceUtils` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class ValidationSourceUtils
    {
        public static System.Threading.Tasks.Task ClearCacheAsync(this ServiceStack.IValidationSource source, params int[] ids) => throw null;
        public static System.Threading.Tasks.Task DeleteValidationRulesAsync(this ServiceStack.IValidationSource source, params int[] ids) => throw null;
        public static System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceStack.ValidationRule>> GetAllValidateRulesAsync(this ServiceStack.IValidationSource source, string typeName) => throw null;
        public static System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceStack.ValidationRule>> GetValidateRulesByIdsAsync(this ServiceStack.IValidationSource source, params int[] ids) => throw null;
        public static void InitSchema(this ServiceStack.IValidationSource source) => throw null;
        public static System.Threading.Tasks.Task SaveValidationRulesAsync(this ServiceStack.IValidationSource source, System.Collections.Generic.List<ServiceStack.ValidationRule> validateRules) => throw null;
    }

    // Generated from `ServiceStack.ValidatorUtils` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class ValidatorUtils
    {
        public static ServiceStack.ITypeValidator Init(this ServiceStack.ITypeValidator validator, ServiceStack.IValidateRule rule) => throw null;
    }

    // Generated from `ServiceStack.Validators` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public static class Validators
    {
        public static void AddRule(this System.Collections.Generic.List<ServiceStack.FluentValidation.Validators.IPropertyValidator> validators, System.Reflection.PropertyInfo pi, ServiceStack.IValidateRule propRule) => throw null;
        public static void AddRule(System.Type type, System.Reflection.PropertyInfo pi, ServiceStack.ValidateAttribute attr) => throw null;
        public static void AddRule(System.Type type, string name, ServiceStack.ValidateAttribute attr) => throw null;
        public static void AddTypeValidator(System.Collections.Generic.List<ServiceStack.ITypeValidator> to, ServiceStack.IValidateRule attr) => throw null;
        public static void AppendDefaultValueOnEmptyValidators(System.Reflection.PropertyInfo pi, ServiceStack.IValidateRule rule) => throw null;
        public static System.Threading.Tasks.Task AssertTypeValidatorsAsync(ServiceStack.Web.IRequest req, object requestDto, System.Type requestType) => throw null;
        public static System.Collections.Generic.Dictionary<string, string> ConditionErrorCodes { get => throw null; set => throw null; }
        public static ServiceStack.FluentValidation.IValidationRule CreateCollectionPropertyRule(System.Type type, System.Reflection.PropertyInfo pi) => throw null;
        public static ServiceStack.FluentValidation.IValidationRule CreatePropertyRule(System.Type type, System.Reflection.PropertyInfo pi) => throw null;
        public static System.Collections.Generic.Dictionary<string, string> ErrorCodeMessages { get => throw null; set => throw null; }
        public static System.Collections.Generic.List<ServiceStack.FluentValidation.IValidationRule> GetPropertyRules(System.Type type) => throw null;
        public static System.Collections.Generic.List<ServiceStack.ITypeValidator> GetTypeRules(System.Type type) => throw null;
        public static bool HasValidateAttributes(System.Type type) => throw null;
        public static bool HasValidateRequestAttributes(System.Type type) => throw null;
        public static ServiceStack.Script.SharpPage ParseCondition(ServiceStack.Script.ScriptContext context, string condition) => throw null;
        public static bool RegisterPropertyRulesFor(System.Type type) => throw null;
        public static bool RegisterRequestRulesFor(System.Type type) => throw null;
        public static System.Collections.Generic.List<System.Action<System.Reflection.PropertyInfo, ServiceStack.IValidateRule>> RuleFilters { get => throw null; }
        public static ServiceStack.Script.PageResult ToPageResult(this ServiceStack.FluentValidation.Validators.PropertyValidatorContext context, ServiceStack.Script.SharpPage page) => throw null;
        public static System.Collections.Generic.Dictionary<System.Type, System.Collections.Generic.List<ServiceStack.FluentValidation.IValidationRule>> TypePropertyRulesMap { get => throw null; set => throw null; }
        public static System.Collections.Generic.Dictionary<System.Type, System.Collections.Generic.List<ServiceStack.ITypeValidator>> TypeRulesMap { get => throw null; set => throw null; }
    }

    // Generated from `ServiceStack.WebSudoAuthUserSession` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class WebSudoAuthUserSession : ServiceStack.AuthUserSession, ServiceStack.Auth.IAuthSession, ServiceStack.Auth.IWebSudoAuthSession
    {
        public System.DateTime AuthenticatedAt { get => throw null; set => throw null; }
        public int AuthenticatedCount { get => throw null; set => throw null; }
        public System.DateTime? AuthenticatedWebSudoUntil { get => throw null; set => throw null; }
        public WebSudoAuthUserSession() => throw null;
    }

    // Generated from `ServiceStack.WebSudoFeature` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class WebSudoFeature : ServiceStack.Auth.AuthEvents, ServiceStack.IPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
    {
        public string Id { get => throw null; set => throw null; }
        public override void OnAuthenticated(ServiceStack.Web.IRequest httpReq, ServiceStack.Auth.IAuthSession session, ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo) => throw null;
        public override void OnCreated(ServiceStack.Web.IRequest httpReq, ServiceStack.Auth.IAuthSession session) => throw null;
        public void Register(ServiceStack.IAppHost appHost) => throw null;
        public const string SessionCopyRequestItemKey = default;
        public System.TimeSpan WebSudoDuration { get => throw null; set => throw null; }
        public WebSudoFeature() => throw null;
    }

    // Generated from `ServiceStack.WebSudoRequiredAttribute` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class WebSudoRequiredAttribute : ServiceStack.AuthenticateAttribute
    {
        public override System.Threading.Tasks.Task ExecuteAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto) => throw null;
        public System.Threading.Tasks.Task<bool> HasWebSudoAsync(ServiceStack.Web.IRequest req, ServiceStack.Auth.IWebSudoAuthSession session) => throw null;
        public WebSudoRequiredAttribute() => throw null;
        public WebSudoRequiredAttribute(ServiceStack.ApplyTo applyTo) => throw null;
    }

    // Generated from `ServiceStack.XmlOnly` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
    public class XmlOnly : ServiceStack.RequestFilterAttribute
    {
        public override void Execute(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto) => throw null;
        public XmlOnly() => throw null;
    }

    namespace Admin
    {
        // Generated from `ServiceStack.Admin.AdminUsersFeature` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class AdminUsersFeature : ServiceStack.IAfterInitAppHost, ServiceStack.IPlugin, ServiceStack.IPreInitPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
        {
            public string AdminRole { get => throw null; set => throw null; }
            public AdminUsersFeature() => throw null;
            public void AfterInit(ServiceStack.IAppHost appHost) => throw null;
            public void BeforePluginsLoaded(ServiceStack.IAppHost appHost) => throw null;
            public bool ExecuteOnRegisteredEventsForCreatedUsers { get => throw null; set => throw null; }
            public System.Collections.Generic.List<ServiceStack.InputInfo> FormLayout { get => throw null; set => throw null; }
            public string Id { get => throw null; set => throw null; }
            public System.Func<ServiceStack.Auth.IUserAuth, ServiceStack.Service, System.Threading.Tasks.Task> OnAfterCreateUser { get => throw null; set => throw null; }
            public System.Func<string, ServiceStack.Service, System.Threading.Tasks.Task> OnAfterDeleteUser { get => throw null; set => throw null; }
            public System.Func<ServiceStack.Auth.IUserAuth, ServiceStack.Auth.IUserAuth, ServiceStack.Service, System.Threading.Tasks.Task> OnAfterUpdateUser { get => throw null; set => throw null; }
            public System.Func<ServiceStack.Auth.IUserAuth, ServiceStack.Service, System.Threading.Tasks.Task> OnBeforeCreateUser { get => throw null; set => throw null; }
            public System.Func<string, ServiceStack.Service, System.Threading.Tasks.Task> OnBeforeDeleteUser { get => throw null; set => throw null; }
            public System.Func<ServiceStack.Auth.IUserAuth, ServiceStack.Auth.IUserAuth, ServiceStack.Service, System.Threading.Tasks.Task> OnBeforeUpdateUser { get => throw null; set => throw null; }
            public System.Collections.Generic.List<ServiceStack.MediaRule> QueryMediaRules { get => throw null; set => throw null; }
            public System.Collections.Generic.List<string> QueryUserAuthProperties { get => throw null; set => throw null; }
            public void Register(ServiceStack.IAppHost appHost) => throw null;
            public ServiceStack.Admin.AdminUsersFeature RemoveFields(params string[] fieldNames) => throw null;
            public ServiceStack.Admin.AdminUsersFeature RemoveFromQueryResults(params string[] fieldNames) => throw null;
            public ServiceStack.Admin.AdminUsersFeature RemoveFromUserForm(System.Predicate<ServiceStack.InputInfo> match) => throw null;
            public ServiceStack.Admin.AdminUsersFeature RemoveFromUserForm(params string[] fieldNames) => throw null;
            public System.Collections.Generic.List<string> RestrictedUserAuthProperties { get => throw null; set => throw null; }
            public System.Collections.Generic.List<System.Collections.Generic.List<ServiceStack.InputInfo>> UserFormLayout { set => throw null; }
            public ServiceStack.Auth.ValidateAsyncFn ValidateFn { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Admin.AdminUsersService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class AdminUsersService : ServiceStack.Service
        {
            public AdminUsersService() => throw null;
            public System.Threading.Tasks.Task<object> Delete(ServiceStack.AdminDeleteUser request) => throw null;
            public System.Threading.Tasks.Task<object> Get(ServiceStack.AdminGetUser request) => throw null;
            public System.Threading.Tasks.Task<object> Get(ServiceStack.AdminQueryUsers request) => throw null;
            public System.Threading.Tasks.Task<object> Post(ServiceStack.AdminCreateUser request) => throw null;
            public System.Threading.Tasks.Task<object> Put(ServiceStack.AdminUpdateUser request) => throw null;
        }

        // Generated from `ServiceStack.Admin.RequestLogs` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class RequestLogs : ServiceStack.IReturn, ServiceStack.IReturn<ServiceStack.Admin.RequestLogsResponse>
        {
            public int? AfterId { get => throw null; set => throw null; }
            public int? AfterSecs { get => throw null; set => throw null; }
            public int? BeforeId { get => throw null; set => throw null; }
            public int? BeforeSecs { get => throw null; set => throw null; }
            public System.TimeSpan? DurationLessThan { get => throw null; set => throw null; }
            public System.TimeSpan? DurationLongerThan { get => throw null; set => throw null; }
            public bool? EnableErrorTracking { get => throw null; set => throw null; }
            public bool? EnableResponseTracking { get => throw null; set => throw null; }
            public bool? EnableSessionTracking { get => throw null; set => throw null; }
            public string ForwardedFor { get => throw null; set => throw null; }
            public bool? HasResponse { get => throw null; set => throw null; }
            public System.Int64[] Ids { get => throw null; set => throw null; }
            public string IpAddress { get => throw null; set => throw null; }
            public string OperationName { get => throw null; set => throw null; }
            public string OrderBy { get => throw null; set => throw null; }
            public string PathInfo { get => throw null; set => throw null; }
            public string Referer { get => throw null; set => throw null; }
            public RequestLogs() => throw null;
            public string SessionId { get => throw null; set => throw null; }
            public int Skip { get => throw null; set => throw null; }
            public int? Take { get => throw null; set => throw null; }
            public string UserAuthId { get => throw null; set => throw null; }
            public bool? WithErrors { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Admin.RequestLogsResponse` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class RequestLogsResponse
        {
            public RequestLogsResponse() => throw null;
            public ServiceStack.ResponseStatus ResponseStatus { get => throw null; set => throw null; }
            public System.Collections.Generic.List<ServiceStack.RequestLogEntry> Results { get => throw null; set => throw null; }
            public int Total { get => throw null; set => throw null; }
            public System.Collections.Generic.Dictionary<string, string> Usage { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Admin.RequestLogsService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class RequestLogsService : ServiceStack.Service
        {
            public System.Threading.Tasks.Task<object> Any(ServiceStack.Admin.RequestLogs request) => throw null;
            public ServiceStack.Web.IRequestLogger RequestLogger { get => throw null; set => throw null; }
            public RequestLogsService() => throw null;
        }

    }
    namespace Auth
    {
        // Generated from `ServiceStack.Auth.ApiKey` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class ApiKey : ServiceStack.IMeta
        {
            public ApiKey() => throw null;
            public System.DateTime? CancelledDate { get => throw null; set => throw null; }
            public System.DateTime CreatedDate { get => throw null; set => throw null; }
            public string Environment { get => throw null; set => throw null; }
            public System.DateTime? ExpiryDate { get => throw null; set => throw null; }
            public string Id { get => throw null; set => throw null; }
            public string KeyType { get => throw null; set => throw null; }
            public System.Collections.Generic.Dictionary<string, string> Meta { get => throw null; set => throw null; }
            public string Notes { get => throw null; set => throw null; }
            public int? RefId { get => throw null; set => throw null; }
            public string RefIdStr { get => throw null; set => throw null; }
            public string UserAuthId { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Auth.ApiKeyAuthProvider` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class ApiKeyAuthProvider : ServiceStack.Auth.AuthProvider, ServiceStack.Auth.IAuthWithRequest, ServiceStack.IAuthPlugin
        {
            public bool AllowInHttpParams { get => throw null; set => throw null; }
            public ApiKeyAuthProvider() => throw null;
            public ApiKeyAuthProvider(ServiceStack.Configuration.IAppSettings appSettings) => throw null;
            public override System.Threading.Tasks.Task<object> AuthenticateAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Authenticate request, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public virtual System.Threading.Tasks.Task CacheSessionAsync(ServiceStack.Web.IRequest req, string apiSessionKey) => throw null;
            public virtual string CreateApiKey(string environment, string keyType, int sizeBytes) => throw null;
            public System.Action<ServiceStack.Auth.ApiKey> CreateApiKeyFilter { get => throw null; set => throw null; }
            public static string[] DefaultEnvironments;
            public static int DefaultKeySizeBytes;
            public static string[] DefaultTypes;
            public string[] Environments { get => throw null; set => throw null; }
            public System.TimeSpan? ExpireKeysAfter { get => throw null; set => throw null; }
            public ServiceStack.Auth.CreateApiKeyDelegate GenerateApiKey { get => throw null; set => throw null; }
            public System.Collections.Generic.List<ServiceStack.Auth.ApiKey> GenerateNewApiKeys(string userId, params string[] environments) => throw null;
            protected virtual System.Threading.Tasks.Task<ServiceStack.Auth.ApiKey> GetApiKeyAsync(ServiceStack.Web.IRequest req, string apiKey) => throw null;
            public static string GetSessionKey(string apiKey) => throw null;
            public virtual System.Threading.Tasks.Task<bool> HasCachedSessionAsync(ServiceStack.Web.IRequest req, string apiSessionKey) => throw null;
            protected virtual void Init(ServiceStack.Configuration.IAppSettings appSettings = default(ServiceStack.Configuration.IAppSettings)) => throw null;
            public bool InitSchema { get => throw null; set => throw null; }
            public override bool IsAuthorized(ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, ServiceStack.Authenticate request = default(ServiceStack.Authenticate)) => throw null;
            public int KeySizeBytes { get => throw null; set => throw null; }
            public string[] KeyTypes { get => throw null; set => throw null; }
            public const string Name = default;
            public override System.Threading.Tasks.Task OnFailedAuthentication(ServiceStack.Auth.IAuthSession session, ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes) => throw null;
            public virtual System.Threading.Tasks.Task PreAuthenticateAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res) => throw null;
            public virtual System.Threading.Tasks.Task PreAuthenticateWithApiKeyAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, ServiceStack.Auth.ApiKey apiKey) => throw null;
            public const string Realm = default;
            public override void Register(ServiceStack.IAppHost appHost, ServiceStack.AuthFeature feature) => throw null;
            public bool RequireSecureConnection { get => throw null; set => throw null; }
            public System.Collections.Generic.Dictionary<System.Type, string[]> ServiceRoutes { get => throw null; set => throw null; }
            public System.TimeSpan? SessionCacheDuration { get => throw null; set => throw null; }
            public override string Type { get => throw null; }
            public virtual void ValidateApiKey(ServiceStack.Web.IRequest req, ServiceStack.Auth.ApiKey apiKey) => throw null;
        }

        // Generated from `ServiceStack.Auth.AssignRolesService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class AssignRolesService : ServiceStack.Service
        {
            public AssignRolesService() => throw null;
            public System.Threading.Tasks.Task<object> Post(ServiceStack.AssignRoles request) => throw null;
        }

        // Generated from `ServiceStack.Auth.AuthContext` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class AuthContext : ServiceStack.IMeta
        {
            public AuthContext() => throw null;
            public System.Collections.Generic.Dictionary<string, string> AuthInfo { get => throw null; set => throw null; }
            public ServiceStack.Auth.AuthProvider AuthProvider { get => throw null; set => throw null; }
            public ServiceStack.Auth.AuthProviderSync AuthProviderSync { get => throw null; set => throw null; }
            public ServiceStack.Auth.IAuthRepository AuthRepository { get => throw null; set => throw null; }
            public ServiceStack.Auth.IAuthRepositoryAsync AuthRepositoryAsync { get => throw null; set => throw null; }
            public ServiceStack.Auth.IAuthTokens AuthTokens { get => throw null; set => throw null; }
            public System.Collections.Generic.Dictionary<string, string> Meta { get => throw null; set => throw null; }
            public ServiceStack.Web.IRequest Request { get => throw null; set => throw null; }
            public ServiceStack.IServiceBase Service { get => throw null; set => throw null; }
            public ServiceStack.Auth.IAuthSession Session { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Auth.AuthEvents` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class AuthEvents : ServiceStack.Auth.IAuthEvents, ServiceStack.Auth.IAuthEventsAsync
        {
            public AuthEvents() => throw null;
            public virtual void OnAuthenticated(ServiceStack.Web.IRequest httpReq, ServiceStack.Auth.IAuthSession session, ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo) => throw null;
            public virtual System.Threading.Tasks.Task OnAuthenticatedAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Auth.IAuthSession session, ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public virtual void OnCreated(ServiceStack.Web.IRequest httpReq, ServiceStack.Auth.IAuthSession session) => throw null;
            public virtual System.Threading.Tasks.Task OnCreatedAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Auth.IAuthSession session, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public virtual void OnLogout(ServiceStack.Web.IRequest httpReq, ServiceStack.Auth.IAuthSession session, ServiceStack.IServiceBase authService) => throw null;
            public virtual System.Threading.Tasks.Task OnLogoutAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Auth.IAuthSession session, ServiceStack.IServiceBase authService, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public virtual void OnRegistered(ServiceStack.Web.IRequest httpReq, ServiceStack.Auth.IAuthSession session, ServiceStack.IServiceBase registrationService) => throw null;
            public virtual System.Threading.Tasks.Task OnRegisteredAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Auth.IAuthSession session, ServiceStack.IServiceBase registrationService, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public virtual ServiceStack.Web.IHttpResult Validate(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo) => throw null;
            public virtual System.Threading.Tasks.Task<ServiceStack.Web.IHttpResult> ValidateAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        }

        // Generated from `ServiceStack.Auth.AuthEventsUtils` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class AuthEventsUtils
        {
            public static System.Threading.Tasks.Task ExecuteOnRegisteredUserEventsAsync(this ServiceStack.Auth.IAuthEvents authEvents, ServiceStack.Auth.IAuthSession session, ServiceStack.IServiceBase service) => throw null;
        }

        // Generated from `ServiceStack.Auth.AuthFilterContext` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class AuthFilterContext
        {
            public bool AlreadyAuthenticated { get => throw null; set => throw null; }
            public AuthFilterContext() => throw null;
            public ServiceStack.Auth.IAuthProvider AuthProvider { get => throw null; set => throw null; }
            public ServiceStack.Authenticate AuthRequest { get => throw null; set => throw null; }
            public ServiceStack.AuthenticateResponse AuthResponse { get => throw null; set => throw null; }
            public ServiceStack.Auth.AuthenticateService AuthService { get => throw null; set => throw null; }
            public bool DidAuthenticate { get => throw null; set => throw null; }
            public string ReferrerUrl { get => throw null; set => throw null; }
            public ServiceStack.Web.IRequest Request { get => throw null; }
            public ServiceStack.Auth.IAuthSession Session { get => throw null; set => throw null; }
            public object UserSource { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Auth.AuthHttpGateway` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class AuthHttpGateway : ServiceStack.Auth.IAuthHttpGateway
        {
            public AuthHttpGateway() => throw null;
            public string CreateMicrosoftPhotoUrl(string accessToken, string savePhotoSize = default(string)) => throw null;
            public System.Threading.Tasks.Task<string> CreateMicrosoftPhotoUrlAsync(string accessToken, string savePhotoSize = default(string), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public string DownloadFacebookUserInfo(string facebookCode, params string[] fields) => throw null;
            public System.Threading.Tasks.Task<string> DownloadFacebookUserInfoAsync(string facebookCode, string[] fields, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public string DownloadGithubUserEmailsInfo(string accessToken) => throw null;
            public System.Threading.Tasks.Task<string> DownloadGithubUserEmailsInfoAsync(string accessToken, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public string DownloadGithubUserInfo(string accessToken) => throw null;
            public System.Threading.Tasks.Task<string> DownloadGithubUserInfoAsync(string accessToken, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public string DownloadGoogleUserInfo(string accessToken) => throw null;
            public System.Threading.Tasks.Task<string> DownloadGoogleUserInfoAsync(string accessToken, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public string DownloadMicrosoftUserInfo(string accessToken) => throw null;
            public System.Threading.Tasks.Task<string> DownloadMicrosoftUserInfoAsync(string accessToken, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public string DownloadTwitterUserInfo(string consumerKey, string consumerSecret, string accessToken, string accessTokenSecret, string twitterUserId) => throw null;
            public System.Threading.Tasks.Task<string> DownloadTwitterUserInfoAsync(string consumerKey, string consumerSecret, string accessToken, string accessTokenSecret, string twitterUserId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public string DownloadYammerUserInfo(string yammerUserId) => throw null;
            public System.Threading.Tasks.Task<string> DownloadYammerUserInfoAsync(string yammerUserId) => throw null;
            public static string FacebookUserUrl;
            public static string FacebookVerifyTokenUrl;
            public string GetJsonFromGitHub(string url, string accessToken) => throw null;
            public System.Threading.Tasks.Task<string> GetJsonFromGitHubAsync(string url, string accessToken, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public static string GetJsonFromOAuthUrl(string consumerKey, string consumerSecret, string accessToken, string accessTokenSecret, string url, string data = default(string)) => throw null;
            public static System.Threading.Tasks.Task<string> GetJsonFromOAuthUrlAsync(string consumerKey, string consumerSecret, string accessToken, string accessTokenSecret, string url, string data = default(string), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public static string GithubUserEmailsUrl;
            public static string GithubUserUrl;
            protected static ServiceStack.Logging.ILog Log;
            public static string TwitterUserUrl;
            public static string TwitterVerifyCredentialsUrl;
            public bool VerifyFacebookAccessToken(string appId, string accessToken) => throw null;
            public System.Threading.Tasks.Task<bool> VerifyFacebookAccessTokenAsync(string appId, string accessToken, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public bool VerifyTwitterAccessToken(string consumerKey, string consumerSecret, string accessToken, string accessTokenSecret, out string userId, out string email) => throw null;
            public System.Threading.Tasks.Task<ServiceStack.Auth.AuthId> VerifyTwitterAccessTokenAsync(string consumerKey, string consumerSecret, string accessToken, string accessTokenSecret, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public static string YammerUserUrl;
        }

        // Generated from `ServiceStack.Auth.AuthId` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class AuthId
        {
            public AuthId() => throw null;
            public string Email { get => throw null; set => throw null; }
            public string UserId { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Auth.AuthMetadataProvider` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class AuthMetadataProvider : ServiceStack.Auth.IAuthMetadataProvider
        {
            public virtual void AddMetadata(ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo) => throw null;
            public virtual void AddProfileUrl(ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo) => throw null;
            public AuthMetadataProvider() => throw null;
            public virtual string GetProfileUrl(ServiceStack.Auth.IAuthSession authSession, string defaultUrl = default(string)) => throw null;
            public static string GetRedirectUrlIfAny(string url) => throw null;
            public string NoProfileImgUrl { get => throw null; set => throw null; }
            public const string ProfileUrlKey = default;
        }

        // Generated from `ServiceStack.Auth.AuthMetadataProviderExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class AuthMetadataProviderExtensions
        {
            public static void SafeAddMetadata(this ServiceStack.Auth.IAuthMetadataProvider provider, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo) => throw null;
        }

        // Generated from `ServiceStack.Auth.AuthProvider` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public abstract class AuthProvider : ServiceStack.Auth.IAuthProvider, ServiceStack.IAuthPlugin
        {
            public System.Func<ServiceStack.Auth.AuthContext, string, string> AccessTokenUrlFilter;
            public System.Func<ServiceStack.Auth.IAuthRepository, ServiceStack.Auth.IUserAuth, ServiceStack.Auth.IAuthTokens, bool> AccountLockedValidator { get => throw null; set => throw null; }
            public ServiceStack.Auth.IAuthEvents AuthEvents { get => throw null; }
            protected AuthProvider() => throw null;
            protected AuthProvider(ServiceStack.Configuration.IAppSettings appSettings, string authRealm, string authProvider) => throw null;
            public string AuthRealm { get => throw null; set => throw null; }
            public abstract System.Threading.Tasks.Task<object> AuthenticateAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Authenticate request, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            public string CallbackUrl { get => throw null; set => throw null; }
            protected virtual object ConvertToClientError(object failedResult, bool isHtml) => throw null;
            protected virtual ServiceStack.Auth.AuthContext CreateAuthContext(ServiceStack.IServiceBase authService = default(ServiceStack.IServiceBase), ServiceStack.Auth.IAuthSession session = default(ServiceStack.Auth.IAuthSession), ServiceStack.Auth.IAuthTokens tokens = default(ServiceStack.Auth.IAuthTokens)) => throw null;
            public virtual string CreateOrMergeAuthSession(ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens) => throw null;
            public System.Func<ServiceStack.Auth.AuthContext, ServiceStack.Web.IHttpResult> CustomValidationFilter { get => throw null; set => throw null; }
            protected virtual System.Threading.Tasks.Task<bool> EmailAlreadyExistsAsync(ServiceStack.Auth.IAuthRepositoryAsync authRepo, ServiceStack.Auth.IUserAuth userAuth, ServiceStack.Auth.IAuthTokens tokens = default(ServiceStack.Auth.IAuthTokens), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Collections.Generic.HashSet<string> ExcludeAuthInfoItems { get => throw null; set => throw null; }
            public System.Func<ServiceStack.Auth.AuthContext, string, string> FailedRedirectUrlFilter;
            protected string FallbackConfig(string fallback) => throw null;
            public System.Collections.Generic.List<ServiceStack.InputInfo> FormLayout { get => throw null; set => throw null; }
            protected virtual string GetAuthRedirectUrl(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session) => throw null;
            protected virtual ServiceStack.Auth.IAuthRepository GetAuthRepository(ServiceStack.Web.IRequest req) => throw null;
            protected virtual ServiceStack.Auth.IAuthRepositoryAsync GetAuthRepositoryAsync(ServiceStack.Web.IRequest req) => throw null;
            protected virtual string GetReferrerUrl(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Authenticate request = default(ServiceStack.Authenticate)) => throw null;
            public ServiceStack.Auth.IUserAuthRepositoryAsync GetUserAuthRepositoryAsync(ServiceStack.Web.IRequest request) => throw null;
            public ServiceStack.ImageInfo Icon { get => throw null; set => throw null; }
            public virtual System.Threading.Tasks.Task<bool> IsAccountLockedAsync(ServiceStack.Auth.IAuthRepositoryAsync authRepoAsync, ServiceStack.Auth.IUserAuth userAuth, ServiceStack.Auth.IAuthTokens tokens = default(ServiceStack.Auth.IAuthTokens), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public abstract bool IsAuthorized(ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, ServiceStack.Authenticate request = default(ServiceStack.Authenticate));
            public string Label { get => throw null; set => throw null; }
            public System.Action<ServiceStack.AuthUserSession, ServiceStack.Auth.IAuthTokens, System.Collections.Generic.Dictionary<string, string>> LoadUserAuthFilter { get => throw null; set => throw null; }
            protected void LoadUserAuthInfo(ServiceStack.AuthUserSession userSession, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo) => throw null;
            protected virtual System.Threading.Tasks.Task LoadUserAuthInfoAsync(ServiceStack.AuthUserSession userSession, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Func<ServiceStack.AuthUserSession, ServiceStack.Auth.IAuthTokens, System.Collections.Generic.Dictionary<string, string>, System.Threading.CancellationToken, System.Threading.Tasks.Task> LoadUserAuthInfoFilterAsync { get => throw null; set => throw null; }
            protected ServiceStack.Logging.ILog Log;
            protected static bool LoginMatchesSession(ServiceStack.Auth.IAuthSession session, string userName) => throw null;
            public virtual System.Threading.Tasks.Task<object> LogoutAsync(ServiceStack.IServiceBase service, ServiceStack.Authenticate request, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Func<ServiceStack.Auth.AuthContext, string, string> LogoutUrlFilter;
            public virtual System.Collections.Generic.Dictionary<string, string> Meta { get => throw null; }
            public ServiceStack.NavItem NavItem { get => throw null; set => throw null; }
            public virtual System.Threading.Tasks.Task<ServiceStack.Web.IHttpResult> OnAuthenticatedAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public virtual System.Threading.Tasks.Task OnFailedAuthentication(ServiceStack.Auth.IAuthSession session, ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes) => throw null;
            public bool PersistSession { get => throw null; set => throw null; }
            public System.Func<ServiceStack.Auth.AuthContext, string, string> PreAuthUrlFilter;
            public string Provider { get => throw null; set => throw null; }
            public string RedirectUrl { get => throw null; set => throw null; }
            public virtual void Register(ServiceStack.IAppHost appHost, ServiceStack.AuthFeature feature) => throw null;
            public bool? RestoreSessionFromState { get => throw null; set => throw null; }
            public bool SaveExtendedUserInfo { get => throw null; set => throw null; }
            public System.TimeSpan? SessionExpiry { get => throw null; set => throw null; }
            public int Sort { get => throw null; set => throw null; }
            public System.Func<ServiceStack.Auth.AuthContext, string, string> SuccessRedirectUrlFilter;
            public virtual string Type { get => throw null; }
            public static string UrlFilter(ServiceStack.Auth.AuthContext provider, string url) => throw null;
            protected virtual System.Threading.Tasks.Task<bool> UserNameAlreadyExistsAsync(ServiceStack.Auth.IAuthRepositoryAsync authRepo, ServiceStack.Auth.IUserAuth userAuth, ServiceStack.Auth.IAuthTokens tokens = default(ServiceStack.Auth.IAuthTokens), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            protected virtual System.Threading.Tasks.Task<ServiceStack.Web.IHttpResult> ValidateAccountAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthRepositoryAsync authRepo, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        }

        // Generated from `ServiceStack.Auth.AuthProviderExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class AuthProviderExtensions
        {
            public static bool IsAuthorizedSafe(this ServiceStack.Auth.IAuthProvider authProvider, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens) => throw null;
            public static void PopulatePasswordHashes(this ServiceStack.Auth.IUserAuth newUser, string password, ServiceStack.Auth.IUserAuth existingUser = default(ServiceStack.Auth.IUserAuth)) => throw null;
            public static bool PopulateRequestDtoIfAuthenticated(this ServiceStack.Web.IRequest req, object requestDto) => throw null;
            public static string SanitizeOAuthUrl(this string url) => throw null;
            public static void SaveSession(this ServiceStack.Auth.IAuthProvider provider, ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, System.TimeSpan? sessionExpiry = default(System.TimeSpan?)) => throw null;
            public static System.Threading.Tasks.Task SaveSessionAsync(this ServiceStack.Auth.IAuthProvider provider, ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, System.TimeSpan? sessionExpiry = default(System.TimeSpan?), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public static bool VerifyDigestAuth(this ServiceStack.Auth.IUserAuth userAuth, System.Collections.Generic.Dictionary<string, string> digestHeaders, string privateKey, int nonceTimeOut, string sequence) => throw null;
            public static bool VerifyPassword(this ServiceStack.Auth.IUserAuth userAuth, string providedPassword, out bool needsRehash) => throw null;
        }

        // Generated from `ServiceStack.Auth.AuthProviderSync` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public abstract class AuthProviderSync : ServiceStack.Auth.IAuthProvider, ServiceStack.IAuthPlugin
        {
            public System.Func<ServiceStack.Auth.AuthProviderSync, string, string> AccessTokenUrlFilter;
            public System.Func<ServiceStack.Auth.IAuthRepository, ServiceStack.Auth.IUserAuth, ServiceStack.Auth.IAuthTokens, bool> AccountLockedValidator { get => throw null; set => throw null; }
            public ServiceStack.Auth.IAuthEvents AuthEvents { get => throw null; }
            protected AuthProviderSync() => throw null;
            protected AuthProviderSync(ServiceStack.Configuration.IAppSettings appSettings, string authRealm, string oAuthProvider) => throw null;
            public string AuthRealm { get => throw null; set => throw null; }
            public abstract object Authenticate(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Authenticate request);
            public System.Threading.Tasks.Task<object> AuthenticateAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Authenticate request, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public string CallbackUrl { get => throw null; set => throw null; }
            protected virtual object ConvertToClientError(object failedResult, bool isHtml) => throw null;
            public virtual string CreateOrMergeAuthSession(ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens) => throw null;
            public System.Func<ServiceStack.Auth.AuthContext, ServiceStack.Web.IHttpResult> CustomValidationFilter { get => throw null; set => throw null; }
            protected virtual bool EmailAlreadyExists(ServiceStack.Auth.IAuthRepository authRepo, ServiceStack.Auth.IUserAuth userAuth, ServiceStack.Auth.IAuthTokens tokens = default(ServiceStack.Auth.IAuthTokens)) => throw null;
            public System.Collections.Generic.HashSet<string> ExcludeAuthInfoItems { get => throw null; set => throw null; }
            public System.Func<ServiceStack.Auth.AuthProviderSync, string, string> FailedRedirectUrlFilter;
            protected string FallbackConfig(string fallback) => throw null;
            protected virtual string GetAuthRedirectUrl(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session) => throw null;
            protected virtual ServiceStack.Auth.IAuthRepository GetAuthRepository(ServiceStack.Web.IRequest req) => throw null;
            protected virtual string GetReferrerUrl(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Authenticate request = default(ServiceStack.Authenticate)) => throw null;
            public virtual bool IsAccountLocked(ServiceStack.Auth.IAuthRepository authRepo, ServiceStack.Auth.IUserAuth userAuth, ServiceStack.Auth.IAuthTokens tokens = default(ServiceStack.Auth.IAuthTokens)) => throw null;
            public abstract bool IsAuthorized(ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, ServiceStack.Authenticate request = default(ServiceStack.Authenticate));
            public System.Action<ServiceStack.AuthUserSession, ServiceStack.Auth.IAuthTokens, System.Collections.Generic.Dictionary<string, string>> LoadUserAuthFilter { get => throw null; set => throw null; }
            protected virtual void LoadUserAuthInfo(ServiceStack.AuthUserSession userSession, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo) => throw null;
            protected static ServiceStack.Logging.ILog Log;
            protected static bool LoginMatchesSession(ServiceStack.Auth.IAuthSession session, string userName) => throw null;
            public virtual object Logout(ServiceStack.IServiceBase service, ServiceStack.Authenticate request) => throw null;
            public System.Threading.Tasks.Task<object> LogoutAsync(ServiceStack.IServiceBase service, ServiceStack.Authenticate request, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Func<ServiceStack.Auth.AuthProviderSync, string, string> LogoutUrlFilter;
            public virtual System.Collections.Generic.Dictionary<string, string> Meta { get => throw null; }
            public ServiceStack.NavItem NavItem { get => throw null; set => throw null; }
            public virtual ServiceStack.Web.IHttpResult OnAuthenticated(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo) => throw null;
            public virtual System.Threading.Tasks.Task OnFailedAuthentication(ServiceStack.Auth.IAuthSession session, ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes) => throw null;
            public bool PersistSession { get => throw null; set => throw null; }
            public System.Func<ServiceStack.Auth.AuthProviderSync, string, string> PreAuthUrlFilter;
            public string Provider { get => throw null; set => throw null; }
            public string RedirectUrl { get => throw null; set => throw null; }
            public virtual void Register(ServiceStack.IAppHost appHost, ServiceStack.AuthFeature feature) => throw null;
            public bool? RestoreSessionFromState { get => throw null; set => throw null; }
            public bool SaveExtendedUserInfo { get => throw null; set => throw null; }
            public System.TimeSpan? SessionExpiry { get => throw null; set => throw null; }
            public System.Func<ServiceStack.Auth.AuthProviderSync, string, string> SuccessRedirectUrlFilter;
            public virtual string Type { get => throw null; }
            public static string UrlFilter(ServiceStack.Auth.AuthProviderSync provider, string url) => throw null;
            protected virtual bool UserNameAlreadyExists(ServiceStack.Auth.IAuthRepository authRepo, ServiceStack.Auth.IUserAuth userAuth, ServiceStack.Auth.IAuthTokens tokens = default(ServiceStack.Auth.IAuthTokens)) => throw null;
            protected virtual ServiceStack.Web.IHttpResult ValidateAccount(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthRepository authRepo, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens) => throw null;
        }

        // Generated from `ServiceStack.Auth.AuthRepositoryUtils` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class AuthRepositoryUtils
        {
            public static string ParseOrderBy(string orderBy, out bool desc) => throw null;
            public static System.Collections.Generic.IEnumerable<TUserAuth> SortAndPage<TUserAuth>(this System.Collections.Generic.IEnumerable<TUserAuth> q, string orderBy, int? skip, int? take) where TUserAuth : ServiceStack.Auth.IUserAuth => throw null;
        }

        // Generated from `ServiceStack.Auth.AuthResultContext` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class AuthResultContext
        {
            public AuthResultContext() => throw null;
            public ServiceStack.Web.IRequest Request { get => throw null; set => throw null; }
            public ServiceStack.Web.IHttpResult Result { get => throw null; set => throw null; }
            public ServiceStack.IServiceBase Service { get => throw null; set => throw null; }
            public ServiceStack.Auth.IAuthSession Session { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Auth.AuthTokens` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class AuthTokens : ServiceStack.Auth.IAuthTokens, ServiceStack.Auth.IUserAuthDetailsExtended
        {
            public string AccessToken { get => throw null; set => throw null; }
            public string AccessTokenSecret { get => throw null; set => throw null; }
            public string Address { get => throw null; set => throw null; }
            public string Address2 { get => throw null; set => throw null; }
            public AuthTokens() => throw null;
            public System.DateTime? BirthDate { get => throw null; set => throw null; }
            public string BirthDateRaw { get => throw null; set => throw null; }
            public string City { get => throw null; set => throw null; }
            public string Company { get => throw null; set => throw null; }
            public string Country { get => throw null; set => throw null; }
            public string Culture { get => throw null; set => throw null; }
            public string DisplayName { get => throw null; set => throw null; }
            public string Email { get => throw null; set => throw null; }
            public string FirstName { get => throw null; set => throw null; }
            public string FullName { get => throw null; set => throw null; }
            public string Gender { get => throw null; set => throw null; }
            public System.Collections.Generic.Dictionary<string, string> Items { get => throw null; set => throw null; }
            public string Language { get => throw null; set => throw null; }
            public string LastName { get => throw null; set => throw null; }
            public string MailAddress { get => throw null; set => throw null; }
            public string Nickname { get => throw null; set => throw null; }
            public string PhoneNumber { get => throw null; set => throw null; }
            public string PostalCode { get => throw null; set => throw null; }
            public string Provider { get => throw null; set => throw null; }
            public string RefreshToken { get => throw null; set => throw null; }
            public System.DateTime? RefreshTokenExpiry { get => throw null; set => throw null; }
            public string RequestToken { get => throw null; set => throw null; }
            public string RequestTokenSecret { get => throw null; set => throw null; }
            public string State { get => throw null; set => throw null; }
            public string TimeZone { get => throw null; set => throw null; }
            public string UserId { get => throw null; set => throw null; }
            public string UserName { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Auth.AuthenticateService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class AuthenticateService : ServiceStack.Service
        {
            public const string ApiKeyProvider = default;
            public static System.Func<ServiceStack.Auth.AuthFilterContext, object> AuthResponseDecorator { get => throw null; set => throw null; }
            public ServiceStack.AuthenticateResponse Authenticate(ServiceStack.Authenticate request) => throw null;
            public System.Threading.Tasks.Task<ServiceStack.AuthenticateResponse> AuthenticateAsync(ServiceStack.Authenticate request, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public AuthenticateService() => throw null;
            public const string BasicProvider = default;
            public const string CredentialsAliasProvider = default;
            public const string CredentialsProvider = default;
            public static System.Func<ServiceStack.Auth.IAuthSession> CurrentSessionFactory { get => throw null; set => throw null; }
            public static string DefaultOAuthProvider { get => throw null; set => throw null; }
            public static string DefaultOAuthRealm { get => throw null; set => throw null; }
            public System.Threading.Tasks.Task<object> DeleteAsync(ServiceStack.Authenticate request) => throw null;
            public const string DigestProvider = default;
            public System.Threading.Tasks.Task<object> GetAsync(ServiceStack.Authenticate request) => throw null;
            public static ServiceStack.Auth.IAuthProvider GetAuthProvider(string provider) => throw null;
            public static ServiceStack.Auth.IAuthProvider[] GetAuthProviders(string provider = default(string)) => throw null;
            public static ServiceStack.Auth.JwtAuthProviderReader GetJwtAuthProvider() => throw null;
            public static ServiceStack.Auth.JwtAuthProviderReader GetRequiredJwtAuthProvider() => throw null;
            public static ServiceStack.Auth.IUserSessionSource GetUserSessionSource() => throw null;
            public static ServiceStack.Auth.IUserSessionSourceAsync GetUserSessionSourceAsync() => throw null;
            public static string HtmlRedirect { get => throw null; set => throw null; }
            public static string HtmlRedirectAccessDenied { get => throw null; set => throw null; }
            public static string HtmlRedirectReturnParam { get => throw null; set => throw null; }
            public static bool HtmlRedirectReturnPathOnly { get => throw null; set => throw null; }
            public const string IdentityProvider = default;
            public static void Init(System.Func<ServiceStack.Auth.IAuthSession> sessionFactory, params ServiceStack.Auth.IAuthProvider[] authProviders) => throw null;
            public const string JwtProvider = default;
            public const string LogoutAction = default;
            public void Options(ServiceStack.Authenticate request) => throw null;
            public object Post(ServiceStack.Authenticate request) => throw null;
            public System.Threading.Tasks.Task<object> PostAsync(ServiceStack.Authenticate request) => throw null;
            public static ServiceStack.Auth.ValidateFn ValidateFn { get => throw null; set => throw null; }
            public const string WindowsAuthProvider = default;
        }

        // Generated from `ServiceStack.Auth.BasicAuthProvider` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class BasicAuthProvider : ServiceStack.Auth.CredentialsAuthProvider, ServiceStack.Auth.IAuthWithRequest
        {
            public override System.Threading.Tasks.Task<object> AuthenticateAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Authenticate request, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public BasicAuthProvider() => throw null;
            public BasicAuthProvider(ServiceStack.Configuration.IAppSettings appSettings) => throw null;
            public static string Name;
            public virtual System.Threading.Tasks.Task PreAuthenticateAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res) => throw null;
            public static string Realm;
            public override string Type { get => throw null; }
        }

        // Generated from `ServiceStack.Auth.BasicAuthProviderSync` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class BasicAuthProviderSync : ServiceStack.Auth.CredentialsAuthProviderSync, ServiceStack.Auth.IAuthWithRequestSync
        {
            public override object Authenticate(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Authenticate request) => throw null;
            public BasicAuthProviderSync() => throw null;
            public BasicAuthProviderSync(ServiceStack.Configuration.IAppSettings appSettings) => throw null;
            public static string Name;
            public virtual void PreAuthenticate(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res) => throw null;
            public static string Realm;
            public override string Type { get => throw null; }
        }

        // Generated from `ServiceStack.Auth.ConvertSessionToTokenService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class ConvertSessionToTokenService : ServiceStack.Service
        {
            public object Any(ServiceStack.ConvertSessionToToken request) => throw null;
            public ConvertSessionToTokenService() => throw null;
        }

        // Generated from `ServiceStack.Auth.CreateApiKeyDelegate` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public delegate string CreateApiKeyDelegate(string environment, string keyType, int keySizeBytes);

        // Generated from `ServiceStack.Auth.CredentialsAuthProvider` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class CredentialsAuthProvider : ServiceStack.Auth.AuthProvider
        {
            public override System.Threading.Tasks.Task<object> AuthenticateAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Authenticate request, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            protected System.Threading.Tasks.Task<object> AuthenticateAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, string userName, string password, string referrerUrl, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            protected virtual System.Threading.Tasks.Task<object> AuthenticatePrivateRequestAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, string userName, string password, string referrerUrl, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public CredentialsAuthProvider() => throw null;
            public CredentialsAuthProvider(ServiceStack.Configuration.IAppSettings appSettings) => throw null;
            public CredentialsAuthProvider(ServiceStack.Configuration.IAppSettings appSettings, string authProvider) => throw null;
            public CredentialsAuthProvider(ServiceStack.Configuration.IAppSettings appSettings, string authRealm, string authProvider) => throw null;
            protected virtual void Init() => throw null;
            public override bool IsAuthorized(ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, ServiceStack.Authenticate request = default(ServiceStack.Authenticate)) => throw null;
            public static string Name;
            public static string Realm;
            protected virtual System.Threading.Tasks.Task<ServiceStack.Auth.IAuthSession> ResetSessionBeforeLoginAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, string userName, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public bool SkipPasswordVerificationForInProcessRequests { get => throw null; set => throw null; }
            public virtual System.Threading.Tasks.Task<bool> TryAuthenticateAsync(ServiceStack.IServiceBase authService, string userName, string password, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public override string Type { get => throw null; }
        }

        // Generated from `ServiceStack.Auth.CredentialsAuthProviderSync` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class CredentialsAuthProviderSync : ServiceStack.Auth.AuthProviderSync
        {
            public override object Authenticate(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Authenticate request) => throw null;
            protected object Authenticate(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, string userName, string password) => throw null;
            protected object Authenticate(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, string userName, string password, string referrerUrl) => throw null;
            protected virtual object AuthenticatePrivateRequest(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, string userName, string password, string referrerUrl) => throw null;
            public CredentialsAuthProviderSync() => throw null;
            public CredentialsAuthProviderSync(ServiceStack.Configuration.IAppSettings appSettings) => throw null;
            public CredentialsAuthProviderSync(ServiceStack.Configuration.IAppSettings appSettings, string authRealm, string oAuthProvider) => throw null;
            public ServiceStack.Auth.IUserAuthRepository GetUserAuthRepository(ServiceStack.Web.IRequest request) => throw null;
            public override bool IsAuthorized(ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, ServiceStack.Authenticate request = default(ServiceStack.Authenticate)) => throw null;
            public static string Name;
            public override ServiceStack.Web.IHttpResult OnAuthenticated(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo) => throw null;
            public static string Realm;
            protected virtual ServiceStack.Auth.IAuthSession ResetSessionBeforeLogin(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, string userName) => throw null;
            public bool SkipPasswordVerificationForInProcessRequests { get => throw null; set => throw null; }
            public virtual bool TryAuthenticate(ServiceStack.IServiceBase authService, string userName, string password) => throw null;
            public override string Type { get => throw null; }
        }

        // Generated from `ServiceStack.Auth.DigestAuthFunctions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class DigestAuthFunctions
        {
            public string Base64Decode(string StringToDecode) => throw null;
            public string Base64Encode(string StringToEncode) => throw null;
            public string ConvertToHexString(System.Collections.Generic.IEnumerable<System.Byte> hash) => throw null;
            public string CreateAuthResponse(System.Collections.Generic.Dictionary<string, string> digestHeaders, string Ha1) => throw null;
            public string CreateAuthResponse(System.Collections.Generic.Dictionary<string, string> digestHeaders, string Ha1, string Ha2) => throw null;
            public string CreateHa1(System.Collections.Generic.Dictionary<string, string> digestHeaders, string password) => throw null;
            public string CreateHa1(string Username, string Realm, string Password) => throw null;
            public string CreateHa2(System.Collections.Generic.Dictionary<string, string> digestHeaders) => throw null;
            public DigestAuthFunctions() => throw null;
            public string GetNonce(string IPAddress, string PrivateKey) => throw null;
            public string[] GetNonceParts(string nonce) => throw null;
            public string PrivateHashEncode(string TimeStamp, string IPAddress, string PrivateKey) => throw null;
            public bool StaleNonce(string nonce, int Timeout) => throw null;
            public bool ValidateNonce(string nonce, string IPAddress, string PrivateKey) => throw null;
            public bool ValidateResponse(System.Collections.Generic.Dictionary<string, string> digestInfo, string PrivateKey, int NonceTimeOut, string DigestHA1, string sequence) => throw null;
        }

        // Generated from `ServiceStack.Auth.DigestAuthProvider` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class DigestAuthProvider : ServiceStack.Auth.AuthProvider, ServiceStack.Auth.IAuthWithRequest
        {
            public ServiceStack.Configuration.IAppSettings AppSettings { get => throw null; set => throw null; }
            public override System.Threading.Tasks.Task<object> AuthenticateAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Authenticate request, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            protected System.Threading.Tasks.Task<object> AuthenticateAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, string userName, string password, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public DigestAuthProvider() => throw null;
            public DigestAuthProvider(ServiceStack.Configuration.IAppSettings appSettings) => throw null;
            public DigestAuthProvider(ServiceStack.Configuration.IAppSettings appSettings, string authRealm, string authProvider) => throw null;
            public override bool IsAuthorized(ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, ServiceStack.Authenticate request = default(ServiceStack.Authenticate)) => throw null;
            public static string Name;
            public static int NonceTimeOut;
            public override System.Threading.Tasks.Task<ServiceStack.Web.IHttpResult> OnAuthenticatedAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public override System.Threading.Tasks.Task OnFailedAuthentication(ServiceStack.Auth.IAuthSession session, ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes) => throw null;
            public System.Threading.Tasks.Task PreAuthenticateAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res) => throw null;
            public string PrivateKey;
            public static string Realm;
            public virtual bool TryAuthenticate(ServiceStack.IServiceBase authService, string userName, string password) => throw null;
            public override string Type { get => throw null; }
        }

        // Generated from `ServiceStack.Auth.DiscordAuthProvider` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class DiscordAuthProvider : ServiceStack.Auth.OAuth2Provider
        {
            protected override System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> CreateAuthInfoAsync(string accessToken, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public DiscordAuthProvider(ServiceStack.Configuration.IAppSettings appSettings) : base(default(ServiceStack.Configuration.IAppSettings), default(string), default(string)) => throw null;
            protected override System.Threading.Tasks.Task<string> GetAccessTokenJsonAsync(string code, ServiceStack.Auth.AuthContext ctx, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public const string Name = default;
            public static string Realm;
        }

        // Generated from `ServiceStack.Auth.EmailAddresses` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class EmailAddresses
        {
            public string Address { get => throw null; set => throw null; }
            public EmailAddresses() => throw null;
            public string Type { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Auth.FacebookAuthProvider` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class FacebookAuthProvider : ServiceStack.Auth.OAuthProvider
        {
            public string AppId { get => throw null; set => throw null; }
            public string AppSecret { get => throw null; set => throw null; }
            public override System.Threading.Tasks.Task<object> AuthenticateAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Authenticate request, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            protected virtual System.Threading.Tasks.Task<object> AuthenticateWithAccessTokenAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, string accessToken, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public static string[] DefaultFields;
            public FacebookAuthProvider(ServiceStack.Configuration.IAppSettings appSettings) => throw null;
            public string[] Fields { get => throw null; set => throw null; }
            protected override System.Threading.Tasks.Task LoadUserAuthInfoAsync(ServiceStack.AuthUserSession userSession, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public override void LoadUserOAuthProvider(ServiceStack.Auth.IAuthSession authSession, ServiceStack.Auth.IAuthTokens tokens) => throw null;
            public override System.Collections.Generic.Dictionary<string, string> Meta { get => throw null; }
            public const string Name = default;
            public string[] Permissions { get => throw null; set => throw null; }
            public static string PreAuthUrl;
            public static string Realm;
            public bool RetrieveUserPicture { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Auth.FullRegistrationValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class FullRegistrationValidator : ServiceStack.Auth.RegistrationValidator
        {
            public FullRegistrationValidator() => throw null;
        }

        // Generated from `ServiceStack.Auth.GetAccessTokenService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class GetAccessTokenService : ServiceStack.Service
        {
            public System.Threading.Tasks.Task<object> Any(ServiceStack.GetAccessToken request) => throw null;
            public GetAccessTokenService() => throw null;
        }

        // Generated from `ServiceStack.Auth.GetApiKeysService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class GetApiKeysService : ServiceStack.Service
        {
            public System.Threading.Tasks.Task<object> Any(ServiceStack.GetApiKeys request) => throw null;
            public GetApiKeysService() => throw null;
        }

        // Generated from `ServiceStack.Auth.GithubAuthProvider` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class GithubAuthProvider : ServiceStack.Auth.OAuthProvider
        {
            public override System.Threading.Tasks.Task<object> AuthenticateAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Authenticate request, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            protected virtual System.Threading.Tasks.Task<object> AuthenticateWithAccessTokenAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, string accessToken, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public string ClientId { get => throw null; set => throw null; }
            public string ClientSecret { get => throw null; set => throw null; }
            public const string DefaultPreAuthUrl = default;
            public const string DefaultVerifyAccessTokenUrl = default;
            public GithubAuthProvider(ServiceStack.Configuration.IAppSettings appSettings) => throw null;
            protected override System.Threading.Tasks.Task LoadUserAuthInfoAsync(ServiceStack.AuthUserSession userSession, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public override void LoadUserOAuthProvider(ServiceStack.Auth.IAuthSession authSession, ServiceStack.Auth.IAuthTokens tokens) => throw null;
            public override System.Collections.Generic.Dictionary<string, string> Meta { get => throw null; }
            public const string Name = default;
            public string PreAuthUrl { get => throw null; set => throw null; }
            public static string Realm;
            public string[] Scopes { get => throw null; set => throw null; }
            public string VerifyAccessTokenUrl { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Auth.GoogleAuthProvider` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class GoogleAuthProvider : ServiceStack.Auth.OAuth2Provider
        {
            protected override System.Threading.Tasks.Task<object> AuthenticateWithAccessTokenAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, string accessToken, System.Collections.Generic.Dictionary<string, string> authInfo = default(System.Collections.Generic.Dictionary<string, string>), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            protected override System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> CreateAuthInfoAsync(string accessToken, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public const string DefaultAccessTokenUrl = default;
            public const string DefaultAuthorizeUrl = default;
            public const string DefaultUserProfileUrl = default;
            public const string DefaultVerifyTokenUrl = default;
            public GoogleAuthProvider(ServiceStack.Configuration.IAppSettings appSettings) : base(default(ServiceStack.Configuration.IAppSettings), default(string), default(string)) => throw null;
            public const string Name = default;
            public virtual System.Threading.Tasks.Task<bool> OnVerifyAccessTokenAsync(string accessToken, ServiceStack.Auth.AuthContext ctx) => throw null;
            public static string Realm;
        }

        // Generated from `ServiceStack.Auth.HashExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class HashExtensions
        {
            public static string HexHash(System.Security.Cryptography.HashAlgorithm hash, System.Byte[] bytes) => throw null;
            public static string HexHash(System.Security.Cryptography.HashAlgorithm hash, string s) => throw null;
            public static string ToMd5Hash(this string value) => throw null;
            public static string ToSha1Hash(this string value) => throw null;
            public static System.Byte[] ToSha1HashBytes(this System.Byte[] bytes) => throw null;
            public static string ToSha256Hash(this string value) => throw null;
            public static System.Byte[] ToSha256HashBytes(this System.Byte[] bytes) => throw null;
            public static string ToSha512Hash(this string value) => throw null;
            public static System.Byte[] ToSha512HashBytes(this System.Byte[] bytes) => throw null;
        }

        // Generated from `ServiceStack.Auth.IAuthEvents` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IAuthEvents
        {
            void OnAuthenticated(ServiceStack.Web.IRequest httpReq, ServiceStack.Auth.IAuthSession session, ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo);
            void OnCreated(ServiceStack.Web.IRequest httpReq, ServiceStack.Auth.IAuthSession session);
            void OnLogout(ServiceStack.Web.IRequest httpReq, ServiceStack.Auth.IAuthSession session, ServiceStack.IServiceBase authService);
            void OnRegistered(ServiceStack.Web.IRequest httpReq, ServiceStack.Auth.IAuthSession session, ServiceStack.IServiceBase registrationService);
            ServiceStack.Web.IHttpResult Validate(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo);
        }

        // Generated from `ServiceStack.Auth.IAuthEventsAsync` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IAuthEventsAsync
        {
            System.Threading.Tasks.Task OnAuthenticatedAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Auth.IAuthSession session, ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task OnLogoutAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Auth.IAuthSession session, ServiceStack.IServiceBase authService, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task OnRegisteredAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Auth.IAuthSession session, ServiceStack.IServiceBase registrationService, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task<ServiceStack.Web.IHttpResult> ValidateAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        }

        // Generated from `ServiceStack.Auth.IAuthHttpGateway` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IAuthHttpGateway
        {
            string CreateMicrosoftPhotoUrl(string accessToken, string savePhotoSize = default(string));
            System.Threading.Tasks.Task<string> CreateMicrosoftPhotoUrlAsync(string accessToken, string savePhotoSize = default(string), System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            string DownloadFacebookUserInfo(string facebookCode, params string[] fields);
            System.Threading.Tasks.Task<string> DownloadFacebookUserInfoAsync(string facebookCode, string[] fields, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            string DownloadGithubUserEmailsInfo(string accessToken);
            System.Threading.Tasks.Task<string> DownloadGithubUserEmailsInfoAsync(string accessToken, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            string DownloadGithubUserInfo(string accessToken);
            System.Threading.Tasks.Task<string> DownloadGithubUserInfoAsync(string accessToken, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            string DownloadGoogleUserInfo(string accessToken);
            System.Threading.Tasks.Task<string> DownloadGoogleUserInfoAsync(string accessToken, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            string DownloadMicrosoftUserInfo(string accessToken);
            System.Threading.Tasks.Task<string> DownloadMicrosoftUserInfoAsync(string accessToken, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            string DownloadTwitterUserInfo(string consumerKey, string consumerSecret, string accessToken, string accessTokenSecret, string twitterUserId);
            System.Threading.Tasks.Task<string> DownloadTwitterUserInfoAsync(string consumerKey, string consumerSecret, string accessToken, string accessTokenSecret, string twitterUserId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            string DownloadYammerUserInfo(string yammerUserId);
            System.Threading.Tasks.Task<string> DownloadYammerUserInfoAsync(string yammerUserId);
            bool VerifyFacebookAccessToken(string appId, string accessToken);
            System.Threading.Tasks.Task<bool> VerifyFacebookAccessTokenAsync(string appId, string accessToken, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            bool VerifyTwitterAccessToken(string consumerKey, string consumerSecret, string accessToken, string accessTokenSecret, out string userId, out string email);
            System.Threading.Tasks.Task<ServiceStack.Auth.AuthId> VerifyTwitterAccessTokenAsync(string consumerKey, string consumerSecret, string accessToken, string accessTokenSecret, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        }

        // Generated from `ServiceStack.Auth.IAuthMetadataProvider` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IAuthMetadataProvider
        {
            void AddMetadata(ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo);
            string GetProfileUrl(ServiceStack.Auth.IAuthSession authSession, string defaultUrl = default(string));
        }

        // Generated from `ServiceStack.Auth.IAuthProvider` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IAuthProvider
        {
            string AuthRealm { get; set; }
            System.Threading.Tasks.Task<object> AuthenticateAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Authenticate request, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            string CallbackUrl { get; set; }
            bool IsAuthorized(ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, ServiceStack.Authenticate request = default(ServiceStack.Authenticate));
            System.Threading.Tasks.Task<object> LogoutAsync(ServiceStack.IServiceBase service, ServiceStack.Authenticate request, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Collections.Generic.Dictionary<string, string> Meta { get; }
            string Provider { get; set; }
            string Type { get; }
        }

        // Generated from `ServiceStack.Auth.IAuthRepository` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IAuthRepository
        {
            ServiceStack.Auth.IUserAuthDetails CreateOrMergeAuthSession(ServiceStack.Auth.IAuthSession authSession, ServiceStack.Auth.IAuthTokens tokens);
            ServiceStack.Auth.IUserAuth GetUserAuth(ServiceStack.Auth.IAuthSession authSession, ServiceStack.Auth.IAuthTokens tokens);
            ServiceStack.Auth.IUserAuth GetUserAuthByUserName(string userNameOrEmail);
            System.Collections.Generic.List<ServiceStack.Auth.IUserAuthDetails> GetUserAuthDetails(string userAuthId);
            void LoadUserAuth(ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens);
            void SaveUserAuth(ServiceStack.Auth.IAuthSession authSession);
            void SaveUserAuth(ServiceStack.Auth.IUserAuth userAuth);
            bool TryAuthenticate(System.Collections.Generic.Dictionary<string, string> digestHeaders, string privateKey, int nonceTimeOut, string sequence, out ServiceStack.Auth.IUserAuth userAuth);
            bool TryAuthenticate(string userName, string password, out ServiceStack.Auth.IUserAuth userAuth);
        }

        // Generated from `ServiceStack.Auth.IAuthRepositoryAsync` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IAuthRepositoryAsync
        {
            System.Threading.Tasks.Task<ServiceStack.Auth.IUserAuthDetails> CreateOrMergeAuthSessionAsync(ServiceStack.Auth.IAuthSession authSession, ServiceStack.Auth.IAuthTokens tokens, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task<ServiceStack.Auth.IUserAuth> GetUserAuthAsync(ServiceStack.Auth.IAuthSession authSession, ServiceStack.Auth.IAuthTokens tokens, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task<ServiceStack.Auth.IUserAuth> GetUserAuthByUserNameAsync(string userNameOrEmail, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceStack.Auth.IUserAuthDetails>> GetUserAuthDetailsAsync(string userAuthId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task LoadUserAuthAsync(ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task SaveUserAuthAsync(ServiceStack.Auth.IAuthSession authSession, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task SaveUserAuthAsync(ServiceStack.Auth.IUserAuth userAuth, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task<ServiceStack.Auth.IUserAuth> TryAuthenticateAsync(System.Collections.Generic.Dictionary<string, string> digestHeaders, string privateKey, int nonceTimeOut, string sequence, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task<ServiceStack.Auth.IUserAuth> TryAuthenticateAsync(string userName, string password, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        }

        // Generated from `ServiceStack.Auth.IAuthResponseFilter` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IAuthResponseFilter
        {
            System.Threading.Tasks.Task ExecuteAsync(ServiceStack.Auth.AuthFilterContext authContext);
            System.Threading.Tasks.Task ResultFilterAsync(ServiceStack.Auth.AuthResultContext authContext, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        }

        // Generated from `ServiceStack.Auth.IAuthSession` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IAuthSession
        {
            string AuthProvider { get; set; }
            System.DateTime CreatedAt { get; set; }
            string DisplayName { get; set; }
            string Email { get; set; }
            string FirstName { get; set; }
            bool FromToken { get; set; }
            System.Collections.Generic.ICollection<string> GetPermissions(ServiceStack.Auth.IAuthRepository authRepo);
            System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetPermissionsAsync(ServiceStack.Auth.IAuthRepositoryAsync authRepo, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Collections.Generic.ICollection<string> GetRoles(ServiceStack.Auth.IAuthRepository authRepo);
            System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetRolesAsync(ServiceStack.Auth.IAuthRepositoryAsync authRepo, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            bool HasPermission(string permission, ServiceStack.Auth.IAuthRepository authRepo);
            System.Threading.Tasks.Task<bool> HasPermissionAsync(string permission, ServiceStack.Auth.IAuthRepositoryAsync authRepo, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            bool HasRole(string role, ServiceStack.Auth.IAuthRepository authRepo);
            System.Threading.Tasks.Task<bool> HasRoleAsync(string role, ServiceStack.Auth.IAuthRepositoryAsync authRepo, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            string Id { get; set; }
            bool IsAuthenticated { get; set; }
            bool IsAuthorized(string provider);
            System.DateTime LastModified { get; set; }
            string LastName { get; set; }
            void OnAuthenticated(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo);
            void OnCreated(ServiceStack.Web.IRequest httpReq);
            void OnLogout(ServiceStack.IServiceBase authService);
            void OnRegistered(ServiceStack.Web.IRequest httpReq, ServiceStack.Auth.IAuthSession session, ServiceStack.IServiceBase service);
            System.Collections.Generic.List<string> Permissions { get; set; }
            string ProfileUrl { get; set; }
            System.Collections.Generic.List<ServiceStack.Auth.IAuthTokens> ProviderOAuthAccess { get; set; }
            string ReferrerUrl { get; set; }
            System.Collections.Generic.List<string> Roles { get; set; }
            string Sequence { get; set; }
            string UserAuthId { get; set; }
            string UserAuthName { get; set; }
            string UserName { get; set; }
        }

        // Generated from `ServiceStack.Auth.IAuthSessionExtended` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IAuthSessionExtended : ServiceStack.Auth.IAuthSession
        {
            string Address { get; set; }
            string Address2 { get; set; }
            System.Collections.Generic.List<string> Audiences { get; set; }
            System.DateTime? BirthDate { get; set; }
            string BirthDateRaw { get; set; }
            string City { get; set; }
            string Company { get; set; }
            string Country { get; set; }
            string Dns { get; set; }
            bool? EmailConfirmed { get; set; }
            string Gender { get; set; }
            System.Threading.Tasks.Task<bool> HasAllPermissionsAsync(System.Collections.Generic.ICollection<string> requiredPermissions, ServiceStack.Auth.IAuthRepositoryAsync authRepo, ServiceStack.Web.IRequest req, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task<bool> HasAllRolesAsync(System.Collections.Generic.ICollection<string> requiredRoles, ServiceStack.Auth.IAuthRepositoryAsync authRepo, ServiceStack.Web.IRequest req, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task<bool> HasAnyPermissionsAsync(System.Collections.Generic.ICollection<string> permissions, ServiceStack.Auth.IAuthRepositoryAsync authRepo, ServiceStack.Web.IRequest req, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task<bool> HasAnyRolesAsync(System.Collections.Generic.ICollection<string> roles, ServiceStack.Auth.IAuthRepositoryAsync authRepo, ServiceStack.Web.IRequest req, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            string Hash { get; set; }
            string HomePhone { get; set; }
            string MobilePhone { get; set; }
            System.Threading.Tasks.Task OnAuthenticatedAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            void OnLoad(ServiceStack.Web.IRequest httpReq);
            System.Threading.Tasks.Task OnLogoutAsync(ServiceStack.IServiceBase authService, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task OnRegisteredAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Auth.IAuthSession session, ServiceStack.IServiceBase service, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            string PhoneNumber { get; set; }
            bool? PhoneNumberConfirmed { get; set; }
            string PostalCode { get; set; }
            string PrimaryEmail { get; set; }
            string Rsa { get; set; }
            System.Collections.Generic.List<string> Scopes { get; set; }
            string SecurityStamp { get; set; }
            string Sid { get; set; }
            string State { get; set; }
            bool? TwoFactorEnabled { get; set; }
            string Type { get; set; }
            ServiceStack.Web.IHttpResult Validate(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo);
            System.Threading.Tasks.Task<ServiceStack.Web.IHttpResult> ValidateAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            string Webpage { get; set; }
        }

        // Generated from `ServiceStack.Auth.IAuthWithRequest` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IAuthWithRequest
        {
            System.Threading.Tasks.Task PreAuthenticateAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res);
        }

        // Generated from `ServiceStack.Auth.IAuthWithRequestSync` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IAuthWithRequestSync
        {
            void PreAuthenticate(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res);
        }

        // Generated from `ServiceStack.Auth.IClearable` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IClearable
        {
            void Clear();
        }

        // Generated from `ServiceStack.Auth.IClearableAsync` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IClearableAsync
        {
            System.Threading.Tasks.Task ClearAsync(System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        }

        // Generated from `ServiceStack.Auth.ICustomUserAuth` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface ICustomUserAuth
        {
            ServiceStack.Auth.IUserAuth CreateUserAuth();
            ServiceStack.Auth.IUserAuthDetails CreateUserAuthDetails();
        }

        // Generated from `ServiceStack.Auth.IHashProvider` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IHashProvider
        {
            void GetHashAndSaltString(string Data, out string Hash, out string Salt);
            bool VerifyHashString(string Data, string Hash, string Salt);
        }

        // Generated from `ServiceStack.Auth.IManageApiKeys` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IManageApiKeys
        {
            bool ApiKeyExists(string apiKey);
            ServiceStack.Auth.ApiKey GetApiKey(string apiKey);
            System.Collections.Generic.List<ServiceStack.Auth.ApiKey> GetUserApiKeys(string userId);
            void InitApiKeySchema();
            void StoreAll(System.Collections.Generic.IEnumerable<ServiceStack.Auth.ApiKey> apiKeys);
        }

        // Generated from `ServiceStack.Auth.IManageApiKeysAsync` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IManageApiKeysAsync
        {
            System.Threading.Tasks.Task<bool> ApiKeyExistsAsync(string apiKey, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task<ServiceStack.Auth.ApiKey> GetApiKeyAsync(string apiKey, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceStack.Auth.ApiKey>> GetUserApiKeysAsync(string userId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            void InitApiKeySchema();
            System.Threading.Tasks.Task StoreAllAsync(System.Collections.Generic.IEnumerable<ServiceStack.Auth.ApiKey> apiKeys, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        }

        // Generated from `ServiceStack.Auth.IManageRoles` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IManageRoles
        {
            void AssignRoles(string userAuthId, System.Collections.Generic.ICollection<string> roles = default(System.Collections.Generic.ICollection<string>), System.Collections.Generic.ICollection<string> permissions = default(System.Collections.Generic.ICollection<string>));
            System.Collections.Generic.ICollection<string> GetPermissions(string userAuthId);
            System.Collections.Generic.ICollection<string> GetRoles(string userAuthId);
            void GetRolesAndPermissions(string userAuthId, out System.Collections.Generic.ICollection<string> roles, out System.Collections.Generic.ICollection<string> permissions);
            bool HasPermission(string userAuthId, string permission);
            bool HasRole(string userAuthId, string role);
            void UnAssignRoles(string userAuthId, System.Collections.Generic.ICollection<string> roles = default(System.Collections.Generic.ICollection<string>), System.Collections.Generic.ICollection<string> permissions = default(System.Collections.Generic.ICollection<string>));
        }

        // Generated from `ServiceStack.Auth.IManageRolesAsync` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IManageRolesAsync
        {
            System.Threading.Tasks.Task AssignRolesAsync(string userAuthId, System.Collections.Generic.ICollection<string> roles = default(System.Collections.Generic.ICollection<string>), System.Collections.Generic.ICollection<string> permissions = default(System.Collections.Generic.ICollection<string>), System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetPermissionsAsync(string userAuthId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task<System.Tuple<System.Collections.Generic.ICollection<string>, System.Collections.Generic.ICollection<string>>> GetRolesAndPermissionsAsync(string userAuthId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetRolesAsync(string userAuthId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task<bool> HasPermissionAsync(string userAuthId, string permission, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task<bool> HasRoleAsync(string userAuthId, string role, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task UnAssignRolesAsync(string userAuthId, System.Collections.Generic.ICollection<string> roles = default(System.Collections.Generic.ICollection<string>), System.Collections.Generic.ICollection<string> permissions = default(System.Collections.Generic.ICollection<string>), System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        }

        // Generated from `ServiceStack.Auth.IMemoryAuthRepository` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IMemoryAuthRepository : ServiceStack.Auth.IAuthRepository, ServiceStack.Auth.IClearable, ServiceStack.Auth.ICustomUserAuth, ServiceStack.Auth.IManageApiKeys, ServiceStack.Auth.IUserAuthRepository
        {
            System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, string>> Hashes { get; }
            System.Collections.Generic.Dictionary<string, System.Collections.Generic.HashSet<string>> Sets { get; }
        }

        // Generated from `ServiceStack.Auth.IOAuthProvider` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IOAuthProvider : ServiceStack.Auth.IAuthProvider
        {
            string AccessTokenUrl { get; set; }
            ServiceStack.Auth.IAuthHttpGateway AuthHttpGateway { get; set; }
            string AuthorizeUrl { get; set; }
            string ConsumerKey { get; set; }
            string ConsumerSecret { get; set; }
            string RequestTokenUrl { get; set; }
        }

        // Generated from `ServiceStack.Auth.IQueryUserAuth` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IQueryUserAuth
        {
            System.Collections.Generic.List<ServiceStack.Auth.IUserAuth> GetUserAuths(string orderBy = default(string), int? skip = default(int?), int? take = default(int?));
            System.Collections.Generic.List<ServiceStack.Auth.IUserAuth> SearchUserAuths(string query, string orderBy = default(string), int? skip = default(int?), int? take = default(int?));
        }

        // Generated from `ServiceStack.Auth.IQueryUserAuthAsync` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IQueryUserAuthAsync
        {
            System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceStack.Auth.IUserAuth>> GetUserAuthsAsync(string orderBy = default(string), int? skip = default(int?), int? take = default(int?), System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceStack.Auth.IUserAuth>> SearchUserAuthsAsync(string query, string orderBy = default(string), int? skip = default(int?), int? take = default(int?), System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        }

        // Generated from `ServiceStack.Auth.IRedisClientFacade` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IRedisClientFacade : System.IDisposable
        {
            void AddItemToSet(string setId, string item);
            ServiceStack.Auth.ITypedRedisClientFacade<T> As<T>();
            void DeleteById<T>(string id);
            System.Collections.Generic.HashSet<string> GetAllItemsFromSet(string setId);
            string GetValueFromHash(string hashId, string key);
            void RemoveEntryFromHash(string hashId, string key);
            void SetEntryInHash(string hashId, string key, string value);
            void Store<T>(T item);
        }

        // Generated from `ServiceStack.Auth.IRedisClientFacadeAsync` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IRedisClientFacadeAsync : System.IAsyncDisposable
        {
            System.Threading.Tasks.Task AddItemToSetAsync(string setId, string item, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            ServiceStack.Auth.ITypedRedisClientFacadeAsync<T> AsAsync<T>();
            System.Threading.Tasks.Task DeleteByIdAsync<T>(string id, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task<System.Collections.Generic.HashSet<string>> GetAllItemsFromSetAsync(string setId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task<string> GetValueFromHashAsync(string hashId, string key, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task RemoveEntryFromHashAsync(string hashId, string key, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task SetEntryInHashAsync(string hashId, string key, string value, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task StoreAsync<T>(T item, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        }

        // Generated from `ServiceStack.Auth.IRedisClientManagerFacade` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IRedisClientManagerFacade : ServiceStack.Auth.IClearable, ServiceStack.Auth.IClearableAsync
        {
            ServiceStack.Auth.IRedisClientFacade GetClient();
            System.Threading.Tasks.Task<ServiceStack.Auth.IRedisClientFacadeAsync> GetClientAsync(System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        }

        // Generated from `ServiceStack.Auth.ITypedRedisClientFacade<>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface ITypedRedisClientFacade<T>
        {
            void DeleteById(string id);
            void DeleteByIds(System.Collections.IEnumerable ids);
            System.Collections.Generic.List<T> GetAll(int? skip = default(int?), int? take = default(int?));
            T GetById(object id);
            System.Collections.Generic.List<T> GetByIds(System.Collections.IEnumerable ids);
            int GetNextSequence();
        }

        // Generated from `ServiceStack.Auth.ITypedRedisClientFacadeAsync<>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface ITypedRedisClientFacadeAsync<T>
        {
            System.Threading.Tasks.Task DeleteByIdAsync(string id, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task DeleteByIdsAsync(System.Collections.IEnumerable ids, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task<System.Collections.Generic.List<T>> GetAllAsync(int? skip = default(int?), int? take = default(int?), System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task<T> GetByIdAsync(object id, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task<System.Collections.Generic.List<T>> GetByIdsAsync(System.Collections.IEnumerable ids, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task<int> GetNextSequenceAsync(System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        }

        // Generated from `ServiceStack.Auth.IUserAuthRepository` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IUserAuthRepository : ServiceStack.Auth.IAuthRepository
        {
            ServiceStack.Auth.IUserAuth CreateUserAuth(ServiceStack.Auth.IUserAuth newUser, string password);
            void DeleteUserAuth(string userAuthId);
            ServiceStack.Auth.IUserAuth GetUserAuth(string userAuthId);
            ServiceStack.Auth.IUserAuth UpdateUserAuth(ServiceStack.Auth.IUserAuth existingUser, ServiceStack.Auth.IUserAuth newUser);
            ServiceStack.Auth.IUserAuth UpdateUserAuth(ServiceStack.Auth.IUserAuth existingUser, ServiceStack.Auth.IUserAuth newUser, string password);
        }

        // Generated from `ServiceStack.Auth.IUserAuthRepositoryAsync` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IUserAuthRepositoryAsync : ServiceStack.Auth.IAuthRepositoryAsync
        {
            System.Threading.Tasks.Task<ServiceStack.Auth.IUserAuth> CreateUserAuthAsync(ServiceStack.Auth.IUserAuth newUser, string password, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task DeleteUserAuthAsync(string userAuthId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task<ServiceStack.Auth.IUserAuth> GetUserAuthAsync(string userAuthId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task<ServiceStack.Auth.IUserAuth> UpdateUserAuthAsync(ServiceStack.Auth.IUserAuth existingUser, ServiceStack.Auth.IUserAuth newUser, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            System.Threading.Tasks.Task<ServiceStack.Auth.IUserAuth> UpdateUserAuthAsync(ServiceStack.Auth.IUserAuth existingUser, ServiceStack.Auth.IUserAuth newUser, string password, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        }

        // Generated from `ServiceStack.Auth.IUserSessionSource` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IUserSessionSource
        {
            ServiceStack.Auth.IAuthSession GetUserSession(string userAuthId);
        }

        // Generated from `ServiceStack.Auth.IUserSessionSourceAsync` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IUserSessionSourceAsync
        {
            System.Threading.Tasks.Task<ServiceStack.Auth.IAuthSession> GetUserSessionAsync(string userAuthId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        }

        // Generated from `ServiceStack.Auth.IWebSudoAuthSession` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IWebSudoAuthSession : ServiceStack.Auth.IAuthSession
        {
            System.DateTime AuthenticatedAt { get; set; }
            int AuthenticatedCount { get; set; }
            System.DateTime? AuthenticatedWebSudoUntil { get; set; }
        }

        // Generated from `ServiceStack.Auth.InMemoryAuthRepository` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class InMemoryAuthRepository : ServiceStack.Auth.InMemoryAuthRepository<ServiceStack.Auth.UserAuth, ServiceStack.Auth.UserAuthDetails>
        {
            public InMemoryAuthRepository() => throw null;
        }

        // Generated from `ServiceStack.Auth.InMemoryAuthRepository<,>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class InMemoryAuthRepository<TUserAuth, TUserAuthDetails> : ServiceStack.Auth.RedisAuthRepository<TUserAuth, TUserAuthDetails>, ServiceStack.Auth.IAuthRepository, ServiceStack.Auth.IClearable, ServiceStack.Auth.ICustomUserAuth, ServiceStack.Auth.IManageApiKeys, ServiceStack.Auth.IMemoryAuthRepository, ServiceStack.Auth.IUserAuthRepository where TUserAuth : class, ServiceStack.Auth.IUserAuth where TUserAuthDetails : class, ServiceStack.Auth.IUserAuthDetails
        {
            public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, string>> Hashes { get => throw null; set => throw null; }
            public InMemoryAuthRepository() : base(default(ServiceStack.Auth.IRedisClientManagerFacade)) => throw null;
            public static ServiceStack.Auth.InMemoryAuthRepository<TUserAuth, TUserAuthDetails> Instance;
            public System.Collections.Generic.Dictionary<string, System.Collections.Generic.HashSet<string>> Sets { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Auth.JwtAuthProvider` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class JwtAuthProvider : ServiceStack.Auth.JwtAuthProviderReader, ServiceStack.Auth.IAuthResponseFilter
        {
            public override System.Threading.Tasks.Task<string> CreateAccessTokenFromRefreshToken(string refreshToken, ServiceStack.Web.IRequest req) => throw null;
            public static string CreateEncryptedJweToken(ServiceStack.Text.JsonObject jwtPayload, System.Security.Cryptography.RSAParameters publicKey) => throw null;
            public static string CreateJwt(ServiceStack.Text.JsonObject jwtHeader, ServiceStack.Text.JsonObject jwtPayload, System.Func<System.Byte[], System.Byte[]> signData) => throw null;
            public string CreateJwtBearerToken(ServiceStack.Auth.IAuthSession session, System.Collections.Generic.IEnumerable<string> roles = default(System.Collections.Generic.IEnumerable<string>), System.Collections.Generic.IEnumerable<string> perms = default(System.Collections.Generic.IEnumerable<string>)) => throw null;
            public string CreateJwtBearerToken(ServiceStack.Web.IRequest req, ServiceStack.Auth.IAuthSession session, System.Collections.Generic.IEnumerable<string> roles = default(System.Collections.Generic.IEnumerable<string>), System.Collections.Generic.IEnumerable<string> perms = default(System.Collections.Generic.IEnumerable<string>)) => throw null;
            public static ServiceStack.Text.JsonObject CreateJwtHeader(string algorithm, string keyId = default(string)) => throw null;
            public static ServiceStack.Text.JsonObject CreateJwtPayload(ServiceStack.Auth.IAuthSession session, string issuer, System.TimeSpan expireIn, System.Collections.Generic.IEnumerable<string> audiences = default(System.Collections.Generic.IEnumerable<string>), System.Collections.Generic.IEnumerable<string> roles = default(System.Collections.Generic.IEnumerable<string>), System.Collections.Generic.IEnumerable<string> permissions = default(System.Collections.Generic.IEnumerable<string>)) => throw null;
            public string CreateJwtRefreshToken(ServiceStack.Web.IRequest req, string userId, System.TimeSpan expireRefreshTokenIn) => throw null;
            public string CreateJwtRefreshToken(string userId, System.TimeSpan expireRefreshTokenIn) => throw null;
            public static string Dump(string jwt) => throw null;
            protected virtual bool EnableRefreshToken() => throw null;
            public System.Threading.Tasks.Task ExecuteAsync(ServiceStack.Auth.AuthFilterContext authContext) => throw null;
            public System.Func<System.Byte[], System.Byte[]> GetHashAlgorithm() => throw null;
            public System.Func<System.Byte[], System.Byte[]> GetHashAlgorithm(ServiceStack.Web.IRequest req) => throw null;
            public override void Init(ServiceStack.Configuration.IAppSettings appSettings = default(ServiceStack.Configuration.IAppSettings)) => throw null;
            public JwtAuthProvider() => throw null;
            public JwtAuthProvider(ServiceStack.Configuration.IAppSettings appSettings) => throw null;
            public static int MaxProfileUrlSize { get => throw null; set => throw null; }
            public static void PrintDump(string jwt) => throw null;
            public System.Threading.Tasks.Task ResultFilterAsync(ServiceStack.Auth.AuthResultContext authContext, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public bool SetBearerTokenOnAuthenticateResponse { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Auth.JwtAuthProviderReader` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class JwtAuthProviderReader : ServiceStack.Auth.AuthProvider, ServiceStack.Auth.IAuthWithRequest, ServiceStack.IAuthPlugin
        {
            public bool AllowInFormData { get => throw null; set => throw null; }
            public bool AllowInQueryString { get => throw null; set => throw null; }
            public void AssertJwtPayloadIsValid(ServiceStack.Text.JsonObject jwtPayload) => throw null;
            public void AssertRefreshJwtPayloadIsValid(ServiceStack.Text.JsonObject jwtPayload) => throw null;
            public string Audience { get => throw null; set => throw null; }
            public System.Collections.Generic.List<string> Audiences { get => throw null; set => throw null; }
            public System.Byte[] AuthKey { get => throw null; set => throw null; }
            public string AuthKeyBase64 { set => throw null; }
            public override System.Threading.Tasks.Task<object> AuthenticateAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Authenticate request, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            protected virtual bool AuthenticateBearerToken(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, string bearerToken) => throw null;
            protected virtual System.Threading.Tasks.Task<bool> AuthenticateRefreshToken(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, string refreshToken) => throw null;
            public object AuthenticateResponseDecorator(ServiceStack.Auth.AuthFilterContext ctx) => throw null;
            public virtual ServiceStack.Auth.IAuthSession ConvertJwtToSession(ServiceStack.Web.IRequest req, string jwt) => throw null;
            public virtual System.Threading.Tasks.Task<string> CreateAccessTokenFromRefreshToken(string refreshToken, ServiceStack.Web.IRequest req) => throw null;
            public System.Action<ServiceStack.Text.JsonObject, ServiceStack.Auth.IAuthSession> CreateHeaderFilter { get => throw null; set => throw null; }
            public System.Action<ServiceStack.Text.JsonObject, ServiceStack.Auth.IAuthSession> CreatePayloadFilter { get => throw null; set => throw null; }
            public static ServiceStack.Auth.IAuthSession CreateSessionFromJwt(ServiceStack.Web.IRequest req) => throw null;
            public virtual ServiceStack.Auth.IAuthSession CreateSessionFromPayload(ServiceStack.Web.IRequest req, ServiceStack.Text.JsonObject jwtPayload) => throw null;
            public static System.Int64 DefaultResolveUnixTime(System.DateTime dateTime) => throw null;
            public bool EncryptPayload { get => throw null; set => throw null; }
            public System.TimeSpan ExpireRefreshTokensIn { get => throw null; set => throw null; }
            public System.TimeSpan ExpireTokensIn { get => throw null; set => throw null; }
            public int ExpireTokensInDays { set => throw null; }
            public static System.Collections.Generic.Dictionary<string, object> ExtractHeader(string jwt) => throw null;
            public static System.Collections.Generic.Dictionary<string, object> ExtractPayload(string jwt) => throw null;
            public System.Collections.Generic.List<System.Byte[]> FallbackAuthKeys { get => throw null; set => throw null; }
            public System.Collections.Generic.List<System.Security.Cryptography.RSAParameters> FallbackPrivateKeys { get => throw null; set => throw null; }
            public System.Collections.Generic.List<System.Security.Cryptography.RSAParameters> FallbackPublicKeys { get => throw null; set => throw null; }
            public System.Byte[] GetAuthKey(ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest)) => throw null;
            public System.Collections.Generic.List<System.Byte[]> GetFallbackAuthKeys(ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest)) => throw null;
            public System.Collections.Generic.List<System.Security.Cryptography.RSAParameters> GetFallbackPrivateKeys(ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest)) => throw null;
            public System.Collections.Generic.List<System.Security.Cryptography.RSAParameters> GetFallbackPublicKeys(ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest)) => throw null;
            public virtual string GetInvalidJwtPayloadError(ServiceStack.Text.JsonObject jwtPayload) => throw null;
            public virtual string GetInvalidRefreshJwtPayloadError(ServiceStack.Text.JsonObject jwtPayload) => throw null;
            public virtual string GetKeyId(ServiceStack.Web.IRequest req) => throw null;
            public System.Security.Cryptography.RSAParameters? GetPrivateKey(ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest)) => throw null;
            public System.Security.Cryptography.RSAParameters? GetPublicKey(ServiceStack.Web.IRequest req = default(ServiceStack.Web.IRequest)) => throw null;
            public static System.Int64? GetUnixTime(System.Collections.Generic.Dictionary<string, string> jwtPayload, string key) => throw null;
            public virtual ServiceStack.Text.JsonObject GetValidJwtPayload(ServiceStack.Web.IRequest req) => throw null;
            public virtual ServiceStack.Text.JsonObject GetValidJwtPayload(ServiceStack.Web.IRequest req, string jwt) => throw null;
            public ServiceStack.Text.JsonObject GetValidJwtPayload(string jwt) => throw null;
            public virtual ServiceStack.Text.JsonObject GetVerifiedJwePayload(ServiceStack.Web.IRequest req, string[] parts) => throw null;
            public virtual ServiceStack.Text.JsonObject GetVerifiedJwePayload(string jwt) => throw null;
            public virtual ServiceStack.Text.JsonObject GetVerifiedJwtPayload(ServiceStack.Web.IRequest req, string[] parts) => throw null;
            public virtual ServiceStack.Text.JsonObject GetVerifiedJwtPayload(string jwt) => throw null;
            public virtual bool HasBeenInvalidated(ServiceStack.Text.JsonObject jwtPayload, System.Int64 unixTime) => throw null;
            public virtual bool HasExpired(ServiceStack.Text.JsonObject jwtPayload) => throw null;
            public virtual bool HasInvalidAudience(ServiceStack.Text.JsonObject jwtPayload, out string audience) => throw null;
            public virtual bool HasInvalidNotBefore(ServiceStack.Text.JsonObject jwtPayload) => throw null;
            public virtual bool HasInvalidatedId(ServiceStack.Text.JsonObject jwtPayload) => throw null;
            public string HashAlgorithm { get => throw null; set => throw null; }
            public static System.Collections.Generic.Dictionary<string, System.Func<System.Byte[], System.Byte[], System.Byte[]>> HmacAlgorithms;
            public static System.Collections.Generic.HashSet<string> IgnoreForOperationTypes;
            public bool IncludeJwtInConvertSessionToTokenResponse { get => throw null; set => throw null; }
            public virtual void Init(ServiceStack.Configuration.IAppSettings appSettings = default(ServiceStack.Configuration.IAppSettings)) => throw null;
            public System.Collections.Generic.HashSet<string> InvalidateJwtIds { get => throw null; set => throw null; }
            public System.DateTime? InvalidateRefreshTokensIssuedBefore { get => throw null; set => throw null; }
            public System.DateTime? InvalidateTokensIssuedBefore { get => throw null; set => throw null; }
            public override bool IsAuthorized(ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, ServiceStack.Authenticate request = default(ServiceStack.Authenticate)) => throw null;
            public bool IsJwtValid(ServiceStack.Web.IRequest req) => throw null;
            public bool IsJwtValid(ServiceStack.Web.IRequest req, string jwt) => throw null;
            public bool IsJwtValid(string jwt) => throw null;
            public string Issuer { get => throw null; set => throw null; }
            public JwtAuthProviderReader() => throw null;
            public JwtAuthProviderReader(ServiceStack.Configuration.IAppSettings appSettings) => throw null;
            public string KeyId { get => throw null; set => throw null; }
            public string LastJwtId() => throw null;
            public string LastRefreshJwtId() => throw null;
            public const string Name = default;
            public string NextJwtId() => throw null;
            public string NextRefreshJwtId() => throw null;
            public System.Action<ServiceStack.Auth.IAuthSession, ServiceStack.Text.JsonObject, ServiceStack.Web.IRequest> PopulateSessionFilter { get => throw null; set => throw null; }
            public System.Threading.Tasks.Task PreAuthenticateAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res) => throw null;
            public System.Func<System.Collections.Generic.Dictionary<string, string>, string> PreValidateJwtPayloadFilter { get => throw null; set => throw null; }
            public System.Security.Cryptography.RSAParameters? PrivateKey { get => throw null; set => throw null; }
            public string PrivateKeyXml { get => throw null; set => throw null; }
            public System.Security.Cryptography.RSAParameters? PublicKey { get => throw null; set => throw null; }
            public string PublicKeyXml { get => throw null; set => throw null; }
            public const string Realm = default;
            public override void Register(ServiceStack.IAppHost appHost, ServiceStack.AuthFeature feature) => throw null;
            public object RegisterResponseDecorator(ServiceStack.Auth.RegisterFilterContext ctx) => throw null;
            public bool RemoveInvalidTokenCookie { get => throw null; set => throw null; }
            public bool RequireHashAlgorithm { get => throw null; set => throw null; }
            public bool RequireSecureConnection { get => throw null; set => throw null; }
            public bool RequiresAudience { get => throw null; set => throw null; }
            public System.Func<ServiceStack.Web.IRequest, string> ResolveJwtId { get => throw null; set => throw null; }
            public System.Func<ServiceStack.Web.IRequest, string> ResolveRefreshJwtId { get => throw null; set => throw null; }
            public System.Func<System.DateTime, System.Int64> ResolveUnixTime { get => throw null; set => throw null; }
            public static System.Collections.Generic.Dictionary<string, System.Func<System.Security.Cryptography.RSAParameters, System.Byte[], System.Byte[]>> RsaSignAlgorithms;
            public static System.Collections.Generic.Dictionary<string, System.Func<System.Security.Cryptography.RSAParameters, System.Byte[], System.Byte[], bool>> RsaVerifyAlgorithms;
            public System.Collections.Generic.Dictionary<System.Type, string[]> ServiceRoutes { get => throw null; set => throw null; }
            public override string Type { get => throw null; }
            public static ServiceStack.RsaKeyLengths UseRsaKeyLength;
            public bool UseTokenCookie { get => throw null; set => throw null; }
            public System.Func<ServiceStack.Text.JsonObject, ServiceStack.Web.IRequest, bool> ValidateRefreshToken { get => throw null; set => throw null; }
            public System.Func<ServiceStack.Text.JsonObject, ServiceStack.Web.IRequest, bool> ValidateToken { get => throw null; set => throw null; }
            public virtual bool VerifyJwePayload(ServiceStack.Web.IRequest req, string[] parts, out System.Byte[] iv, out System.Byte[] cipherText, out System.Byte[] cryptKey) => throw null;
            public virtual bool VerifyPayload(ServiceStack.Web.IRequest req, string algorithm, System.Byte[] bytesToSign, System.Byte[] sentSignatureBytes) => throw null;
        }

        // Generated from `ServiceStack.Auth.JwtUtils` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class JwtUtils
        {
            public static void NotifyJwtCookiesUsed(ServiceStack.Web.IHttpResult httpResult) => throw null;
            public static ServiceStack.HttpResult ToTokenCookiesHttpResult(this ServiceStack.IHasBearerToken responseDto, ServiceStack.Web.IRequest req, string tokenCookie, System.DateTime expireTokenIn, string refreshTokenCookie, System.DateTime expireRefreshTokenIn, string referrerUrl) => throw null;
        }

        // Generated from `ServiceStack.Auth.LinkedInAuthProvider` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class LinkedInAuthProvider : ServiceStack.Auth.OAuth2Provider
        {
            protected override System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> CreateAuthInfoAsync(string accessToken, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public const string DefaultAccessTokenUrl = default;
            public const string DefaultAuthorizeUrl = default;
            public const string DefaultUserProfileUrl = default;
            public LinkedInAuthProvider(ServiceStack.Configuration.IAppSettings appSettings) : base(default(ServiceStack.Configuration.IAppSettings), default(string), default(string)) => throw null;
            public const string Name = default;
            public const string Realm = default;
        }

        // Generated from `ServiceStack.Auth.MicrosoftGraphAuthProvider` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class MicrosoftGraphAuthProvider : ServiceStack.Auth.OAuth2Provider
        {
            public string AppId { get => throw null; set => throw null; }
            public string AppSecret { get => throw null; set => throw null; }
            protected override System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> CreateAuthInfoAsync(string accessToken, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public static System.Func<string, string> DefaultPhotoUrl;
            public const string DefaultUserProfileUrl = default;
            protected override System.Threading.Tasks.Task<string> GetAccessTokenJsonAsync(string code, ServiceStack.Auth.AuthContext ctx, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public override void LoadUserOAuthProvider(ServiceStack.Auth.IAuthSession authSession, ServiceStack.Auth.IAuthTokens tokens) => throw null;
            public MicrosoftGraphAuthProvider(ServiceStack.Configuration.IAppSettings appSettings) : base(default(ServiceStack.Configuration.IAppSettings), default(string), default(string)) => throw null;
            public const string Name = default;
            public static System.Func<string, string> PhotoUrl { get => throw null; set => throw null; }
            public const string Realm = default;
            public bool SavePhoto { get => throw null; set => throw null; }
            public string SavePhotoSize { get => throw null; set => throw null; }
            public string Tenant { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Auth.MultiAuthEvents` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class MultiAuthEvents : ServiceStack.Auth.IAuthEvents
        {
            public System.Collections.Generic.List<ServiceStack.Auth.IAuthEvents> ChildEvents { get => throw null; set => throw null; }
            public System.Collections.Generic.List<ServiceStack.Auth.IAuthEventsAsync> ChildEventsAsync { get => throw null; set => throw null; }
            public MultiAuthEvents(System.Collections.Generic.IEnumerable<ServiceStack.Auth.IAuthEvents> authEvents = default(System.Collections.Generic.IEnumerable<ServiceStack.Auth.IAuthEvents>)) => throw null;
            public void OnAuthenticated(ServiceStack.Web.IRequest httpReq, ServiceStack.Auth.IAuthSession session, ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo) => throw null;
            public System.Threading.Tasks.Task OnAuthenticatedAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Auth.IAuthSession session, ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public void OnCreated(ServiceStack.Web.IRequest httpReq, ServiceStack.Auth.IAuthSession session) => throw null;
            public void OnLogout(ServiceStack.Web.IRequest httpReq, ServiceStack.Auth.IAuthSession session, ServiceStack.IServiceBase authService) => throw null;
            public System.Threading.Tasks.Task OnLogoutAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Auth.IAuthSession session, ServiceStack.IServiceBase authService, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public void OnRegistered(ServiceStack.Web.IRequest httpReq, ServiceStack.Auth.IAuthSession session, ServiceStack.IServiceBase registrationService) => throw null;
            public System.Threading.Tasks.Task OnRegisteredAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Auth.IAuthSession session, ServiceStack.IServiceBase registrationService, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public ServiceStack.Web.IHttpResult Validate(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo) => throw null;
            public System.Threading.Tasks.Task<ServiceStack.Web.IHttpResult> ValidateAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        }

        // Generated from `ServiceStack.Auth.NetCoreIdentityAuthProvider` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class NetCoreIdentityAuthProvider : ServiceStack.Auth.AuthProvider, ServiceStack.Auth.IAuthWithRequest, ServiceStack.IAuthPlugin
        {
            public System.Collections.Generic.List<string> AdminRoles { get => throw null; set => throw null; }
            public override System.Threading.Tasks.Task<object> AuthenticateAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Authenticate request, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public string AuthenticationType { get => throw null; set => throw null; }
            public bool AutoSignInSessions { get => throw null; set => throw null; }
            public System.Func<ServiceStack.Web.IRequest, bool> AutoSignInSessionsMatching { get => throw null; set => throw null; }
            public System.Func<System.Collections.Generic.List<System.Security.Claims.Claim>, ServiceStack.Auth.IAuthSession, ServiceStack.Web.IRequest, System.Security.Claims.ClaimsPrincipal> CreateClaimsPrincipal { get => throw null; set => throw null; }
            public bool DefaultAutoSignInSessionsMatching(ServiceStack.Web.IRequest req) => throw null;
            public string IdClaimType { get => throw null; set => throw null; }
            public System.Collections.Generic.List<string> IdClaimTypes { get => throw null; set => throw null; }
            public System.Collections.Generic.HashSet<string> IgnoreAutoSignInForExtensions { get => throw null; set => throw null; }
            public override bool IsAuthorized(ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, ServiceStack.Authenticate request = default(ServiceStack.Authenticate)) => throw null;
            public string Issuer { get => throw null; set => throw null; }
            public System.Collections.Generic.Dictionary<string, string> MapClaimsToSession { get => throw null; set => throw null; }
            public const string Name = default;
            public NetCoreIdentityAuthProvider(ServiceStack.Configuration.IAppSettings appSettings) => throw null;
            public bool OverrideHtmlRedirect { get => throw null; set => throw null; }
            public string PermissionClaimType { get => throw null; set => throw null; }
            public System.Action<ServiceStack.Auth.IAuthSession, System.Security.Claims.ClaimsPrincipal, ServiceStack.Web.IRequest> PopulateSessionFilter { get => throw null; set => throw null; }
            public virtual System.Threading.Tasks.Task PreAuthenticateAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res) => throw null;
            public const string Realm = default;
            public override void Register(ServiceStack.IAppHost appHost, ServiceStack.AuthFeature authFeature) => throw null;
            public System.Collections.Generic.List<string> RestrictToClientIds { get => throw null; set => throw null; }
            public string RoleClaimType { get => throw null; set => throw null; }
            public System.Threading.Tasks.Task SignInAuthenticatedSessions(ServiceStack.Host.NetCore.NetCoreRequest req) => throw null;
            public override string Type { get => throw null; }
        }

        // Generated from `ServiceStack.Auth.OAuth2Provider` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public abstract class OAuth2Provider : ServiceStack.Auth.OAuthProvider
        {
            protected virtual void AssertAccessTokenUrl() => throw null;
            protected virtual void AssertAuthorizeUrl() => throw null;
            protected override void AssertValidState() => throw null;
            public override System.Threading.Tasks.Task<object> AuthenticateAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Authenticate request, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            protected virtual System.Threading.Tasks.Task<object> AuthenticateWithAccessTokenAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, string accessToken, System.Collections.Generic.Dictionary<string, string> authInfo = default(System.Collections.Generic.Dictionary<string, string>), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            protected abstract System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> CreateAuthInfoAsync(string accessToken, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            protected virtual System.Threading.Tasks.Task<string> GetAccessTokenJsonAsync(string code, ServiceStack.Auth.AuthContext ctx, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            protected virtual string GetUserAuthName(ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo) => throw null;
            protected override System.Threading.Tasks.Task LoadUserAuthInfoAsync(ServiceStack.AuthUserSession userSession, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public override void LoadUserOAuthProvider(ServiceStack.Auth.IAuthSession authSession, ServiceStack.Auth.IAuthTokens tokens) => throw null;
            public OAuth2Provider(ServiceStack.Configuration.IAppSettings appSettings, string authRealm, string oAuthProvider) => throw null;
            public OAuth2Provider(ServiceStack.Configuration.IAppSettings appSettings, string authRealm, string oAuthProvider, string consumerKeyName, string consumerSecretName) => throw null;
            public System.Func<ServiceStack.Auth.IAuthSession, ServiceStack.Auth.IAuthTokens, string> ResolveUnknownDisplayName { get => throw null; set => throw null; }
            public string ResponseMode { get => throw null; set => throw null; }
            public string[] Scopes { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Auth.OAuth2ProviderSync` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public abstract class OAuth2ProviderSync : ServiceStack.Auth.OAuthProviderSync
        {
            protected virtual void AssertAccessTokenUrl() => throw null;
            protected virtual void AssertAuthorizeUrl() => throw null;
            protected override void AssertValidState() => throw null;
            public override object Authenticate(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Authenticate request) => throw null;
            protected virtual object AuthenticateWithAccessToken(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, string accessToken, System.Collections.Generic.Dictionary<string, string> authInfo = default(System.Collections.Generic.Dictionary<string, string>)) => throw null;
            protected abstract System.Collections.Generic.Dictionary<string, string> CreateAuthInfo(string accessToken);
            protected virtual string GetAccessTokenJson(string code) => throw null;
            protected virtual string GetUserAuthName(ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo) => throw null;
            protected override void LoadUserAuthInfo(ServiceStack.AuthUserSession userSession, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo) => throw null;
            public override void LoadUserOAuthProvider(ServiceStack.Auth.IAuthSession authSession, ServiceStack.Auth.IAuthTokens tokens) => throw null;
            public OAuth2ProviderSync(ServiceStack.Configuration.IAppSettings appSettings, string authRealm, string oAuthProvider) => throw null;
            public OAuth2ProviderSync(ServiceStack.Configuration.IAppSettings appSettings, string authRealm, string oAuthProvider, string consumerKeyName, string consumerSecretName) => throw null;
            public string ResponseMode { get => throw null; set => throw null; }
            public string[] Scopes { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Auth.OAuthAuthorizer` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class OAuthAuthorizer
        {
            public string AccessToken;
            public string AccessTokenSecret;
            public bool AcquireAccessToken(string requestTokenSecret, string authorizationToken, string authorizationVerifier) => throw null;
            public bool AcquireRequestToken() => throw null;
            public System.Collections.Generic.Dictionary<string, string> AuthInfo;
            public string AuthorizationToken;
            public string AuthorizationVerifier;
            public static string AuthorizeRequest(ServiceStack.Auth.OAuthProvider provider, string oauthToken, string oauthTokenSecret, string method, System.Uri uri, string data) => throw null;
            public static string AuthorizeRequest(string consumerKey, string consumerSecret, string oauthToken, string oauthTokenSecret, string method, System.Uri uri, string data) => throw null;
            public static void AuthorizeTwitPic(ServiceStack.Auth.OAuthProvider provider, System.Net.HttpWebRequest wc, string oauthToken, string oauthTokenSecret) => throw null;
            public OAuthAuthorizer(ServiceStack.Auth.IOAuthProvider provider) => throw null;
            public static bool OrderHeadersLexically;
            public string RequestToken;
            public string RequestTokenSecret;
            public string xAuthPassword;
            public string xAuthUsername;
        }

        // Generated from `ServiceStack.Auth.OAuthProvider` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public abstract class OAuthProvider : ServiceStack.Auth.AuthProvider, ServiceStack.Auth.IAuthProvider, ServiceStack.Auth.IOAuthProvider
        {
            public string AccessTokenUrl { get => throw null; set => throw null; }
            protected virtual void AssertConsumerKey() => throw null;
            protected virtual void AssertConsumerSecret() => throw null;
            protected virtual void AssertValidState() => throw null;
            public ServiceStack.Auth.IAuthHttpGateway AuthHttpGateway { get => throw null; set => throw null; }
            public abstract override System.Threading.Tasks.Task<object> AuthenticateAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Authenticate request, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
            public string AuthorizeUrl { get => throw null; set => throw null; }
            public string ConsumerKey { get => throw null; set => throw null; }
            protected string ConsumerKeyName;
            public string ConsumerSecret { get => throw null; set => throw null; }
            protected string ConsumerSecretName;
            protected ServiceStack.Auth.IAuthTokens Init(ServiceStack.IServiceBase authService, ref ServiceStack.Auth.IAuthSession session, ServiceStack.Authenticate request) => throw null;
            public override bool IsAuthorized(ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, ServiceStack.Authenticate request = default(ServiceStack.Authenticate)) => throw null;
            public string IssuerSigningKeysUrl { get => throw null; set => throw null; }
            public virtual void LoadUserOAuthProvider(ServiceStack.Auth.IAuthSession userSession, ServiceStack.Auth.IAuthTokens tokens) => throw null;
            public override System.Collections.Generic.Dictionary<string, string> Meta { get => throw null; }
            public OAuthProvider() => throw null;
            public OAuthProvider(ServiceStack.Configuration.IAppSettings appSettings, string authRealm, string oAuthProvider, string consumerKeyName = default(string), string consumerSecretName = default(string)) => throw null;
            public ServiceStack.Auth.OAuthAuthorizer OAuthUtils { get => throw null; set => throw null; }
            public string RequestTokenUrl { get => throw null; set => throw null; }
            public override string Type { get => throw null; }
            public string UserProfileUrl { get => throw null; set => throw null; }
            public System.Func<string, ServiceStack.Auth.AuthContext, System.Threading.Tasks.Task<bool>> VerifyAccessTokenAsync { get => throw null; set => throw null; }
            public string VerifyTokenUrl { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Auth.OAuthProviderSync` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public abstract class OAuthProviderSync : ServiceStack.Auth.AuthProviderSync, ServiceStack.Auth.IAuthProvider, ServiceStack.Auth.IOAuthProvider
        {
            public string AccessTokenUrl { get => throw null; set => throw null; }
            protected virtual void AssertConsumerKey() => throw null;
            protected virtual void AssertConsumerSecret() => throw null;
            protected virtual void AssertValidState() => throw null;
            public ServiceStack.Auth.IAuthHttpGateway AuthHttpGateway { get => throw null; set => throw null; }
            public abstract override object Authenticate(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Authenticate request);
            public string AuthorizeUrl { get => throw null; set => throw null; }
            public string ConsumerKey { get => throw null; set => throw null; }
            protected string ConsumerKeyName;
            public string ConsumerSecret { get => throw null; set => throw null; }
            protected string ConsumerSecretName;
            protected ServiceStack.Auth.IAuthTokens Init(ServiceStack.IServiceBase authService, ref ServiceStack.Auth.IAuthSession session, ServiceStack.Authenticate request) => throw null;
            public override bool IsAuthorized(ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, ServiceStack.Authenticate request = default(ServiceStack.Authenticate)) => throw null;
            public string IssuerSigningKeysUrl { get => throw null; set => throw null; }
            public virtual void LoadUserOAuthProvider(ServiceStack.Auth.IAuthSession userSession, ServiceStack.Auth.IAuthTokens tokens) => throw null;
            public override System.Collections.Generic.Dictionary<string, string> Meta { get => throw null; }
            public OAuthProviderSync() => throw null;
            public OAuthProviderSync(ServiceStack.Configuration.IAppSettings appSettings, string authRealm, string oAuthProvider) => throw null;
            public OAuthProviderSync(ServiceStack.Configuration.IAppSettings appSettings, string authRealm, string oAuthProvider, string consumerKeyName, string consumerSecretName) => throw null;
            public ServiceStack.Auth.OAuthAuthorizer OAuthUtils { get => throw null; set => throw null; }
            public string RequestTokenUrl { get => throw null; set => throw null; }
            public override string Type { get => throw null; }
            public string UserProfileUrl { get => throw null; set => throw null; }
            public System.Func<string, bool> VerifyAccessToken { get => throw null; set => throw null; }
            public string VerifyTokenUrl { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Auth.OAuthUtils` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class OAuthUtils
        {
            public static string PercentEncode(string s) => throw null;
        }

        // Generated from `ServiceStack.Auth.OdnoklassnikiAuthProvider` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class OdnoklassnikiAuthProvider : ServiceStack.Auth.OAuthProvider
        {
            public string ApplicationId { get => throw null; set => throw null; }
            public override System.Threading.Tasks.Task<object> AuthenticateAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Authenticate request, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            protected override System.Threading.Tasks.Task LoadUserAuthInfoAsync(ServiceStack.AuthUserSession userSession, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public override void LoadUserOAuthProvider(ServiceStack.Auth.IAuthSession authSession, ServiceStack.Auth.IAuthTokens tokens) => throw null;
            public const string Name = default;
            public OdnoklassnikiAuthProvider(ServiceStack.Configuration.IAppSettings appSettings) => throw null;
            public static string PreAuthUrl;
            public string PublicKey { get => throw null; set => throw null; }
            public static string Realm;
            public string SecretKey { get => throw null; set => throw null; }
            public static string TokenUrl;
        }

        // Generated from `ServiceStack.Auth.PasswordHasher` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class PasswordHasher : ServiceStack.Auth.IPasswordHasher
        {
            public const int DefaultIterationCount = default;
            public virtual string HashPassword(string password) => throw null;
            public int IterationCount { get => throw null; }
            public static ServiceStack.Logging.ILog Log;
            public PasswordHasher() => throw null;
            public PasswordHasher(int iterationCount) => throw null;
            public bool VerifyPassword(string hashedPassword, string providedPassword, out bool needsRehash) => throw null;
            public System.Byte Version { get => throw null; }
        }

        // Generated from `ServiceStack.Auth.Pbkdf2DeriveKeyDelegate` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public delegate System.Byte[] Pbkdf2DeriveKeyDelegate(string password, System.Byte[] salt, Microsoft.AspNetCore.Cryptography.KeyDerivation.KeyDerivationPrf prf, int iterationCount, int numBytesRequested);

        // Generated from `ServiceStack.Auth.Pbkdf2Provider` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class Pbkdf2Provider
        {
            public static ServiceStack.Auth.Pbkdf2DeriveKeyDelegate DeriveKey { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Auth.RedisAuthRepository` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class RedisAuthRepository : ServiceStack.Auth.RedisAuthRepository<ServiceStack.Auth.UserAuth, ServiceStack.Auth.UserAuthDetails>, ServiceStack.Auth.IAuthRepository, ServiceStack.Auth.IUserAuthRepository
        {
            public RedisAuthRepository(ServiceStack.Auth.IRedisClientManagerFacade factory) : base(default(ServiceStack.Auth.IRedisClientManagerFacade)) => throw null;
            public RedisAuthRepository(ServiceStack.Redis.IRedisClientsManager factory) : base(default(ServiceStack.Auth.IRedisClientManagerFacade)) => throw null;
        }

        // Generated from `ServiceStack.Auth.RedisAuthRepository<,>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class RedisAuthRepository<TUserAuth, TUserAuthDetails> : ServiceStack.Auth.IAuthRepository, ServiceStack.Auth.IAuthRepositoryAsync, ServiceStack.Auth.IClearable, ServiceStack.Auth.IClearableAsync, ServiceStack.Auth.ICustomUserAuth, ServiceStack.Auth.IManageApiKeys, ServiceStack.Auth.IManageApiKeysAsync, ServiceStack.Auth.IQueryUserAuth, ServiceStack.Auth.IQueryUserAuthAsync, ServiceStack.Auth.IUserAuthRepository, ServiceStack.Auth.IUserAuthRepositoryAsync where TUserAuth : class, ServiceStack.Auth.IUserAuth where TUserAuthDetails : class, ServiceStack.Auth.IUserAuthDetails
        {
            public virtual bool ApiKeyExists(string apiKey) => throw null;
            public virtual System.Threading.Tasks.Task<bool> ApiKeyExistsAsync(string apiKey, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public virtual void Clear() => throw null;
            public virtual System.Threading.Tasks.Task ClearAsync(System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public virtual ServiceStack.Auth.IUserAuthDetails CreateOrMergeAuthSession(ServiceStack.Auth.IAuthSession authSession, ServiceStack.Auth.IAuthTokens tokens) => throw null;
            public virtual System.Threading.Tasks.Task<ServiceStack.Auth.IUserAuthDetails> CreateOrMergeAuthSessionAsync(ServiceStack.Auth.IAuthSession authSession, ServiceStack.Auth.IAuthTokens tokens, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public ServiceStack.Auth.IUserAuth CreateUserAuth() => throw null;
            public virtual ServiceStack.Auth.IUserAuth CreateUserAuth(ServiceStack.Auth.IUserAuth newUser, string password) => throw null;
            public virtual System.Threading.Tasks.Task<ServiceStack.Auth.IUserAuth> CreateUserAuthAsync(ServiceStack.Auth.IUserAuth newUser, string password, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public ServiceStack.Auth.IUserAuthDetails CreateUserAuthDetails() => throw null;
            public virtual void DeleteUserAuth(string userAuthId) => throw null;
            public virtual System.Threading.Tasks.Task DeleteUserAuthAsync(string userAuthId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public virtual ServiceStack.Auth.ApiKey GetApiKey(string apiKey) => throw null;
            public virtual System.Threading.Tasks.Task<ServiceStack.Auth.ApiKey> GetApiKeyAsync(string apiKey, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public virtual System.Collections.Generic.List<ServiceStack.Auth.ApiKey> GetUserApiKeys(string userId) => throw null;
            public virtual System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceStack.Auth.ApiKey>> GetUserApiKeysAsync(string userId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public virtual ServiceStack.Auth.IUserAuth GetUserAuth(ServiceStack.Auth.IAuthSession authSession, ServiceStack.Auth.IAuthTokens tokens) => throw null;
            public virtual ServiceStack.Auth.IUserAuth GetUserAuth(string userAuthId) => throw null;
            public virtual System.Threading.Tasks.Task<ServiceStack.Auth.IUserAuth> GetUserAuthAsync(ServiceStack.Auth.IAuthSession authSession, ServiceStack.Auth.IAuthTokens tokens, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public virtual System.Threading.Tasks.Task<ServiceStack.Auth.IUserAuth> GetUserAuthAsync(string userAuthId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public virtual ServiceStack.Auth.IUserAuth GetUserAuthByUserName(string userNameOrEmail) => throw null;
            public virtual System.Threading.Tasks.Task<ServiceStack.Auth.IUserAuth> GetUserAuthByUserNameAsync(string userNameOrEmail, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public virtual System.Collections.Generic.List<ServiceStack.Auth.IUserAuthDetails> GetUserAuthDetails(string userAuthId) => throw null;
            public virtual System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceStack.Auth.IUserAuthDetails>> GetUserAuthDetailsAsync(string userAuthId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Collections.Generic.List<ServiceStack.Auth.IUserAuth> GetUserAuths(string orderBy = default(string), int? skip = default(int?), int? take = default(int?)) => throw null;
            public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceStack.Auth.IUserAuth>> GetUserAuthsAsync(string orderBy = default(string), int? skip = default(int?), int? take = default(int?), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public virtual void InitApiKeySchema() => throw null;
            public virtual System.Threading.Tasks.Task InitApiKeySchemaAsync(System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public virtual void LoadUserAuth(ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens) => throw null;
            public virtual System.Threading.Tasks.Task LoadUserAuthAsync(ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public string NamespacePrefix { get => throw null; set => throw null; }
            public virtual System.Collections.Generic.List<ServiceStack.Auth.IUserAuth> QueryUserAuths(System.Collections.Generic.List<ServiceStack.Auth.IUserAuth> results, string query = default(string), string orderBy = default(string), int? skip = default(int?), int? take = default(int?)) => throw null;
            public RedisAuthRepository(ServiceStack.Auth.IRedisClientManagerFacade factory) => throw null;
            public RedisAuthRepository(ServiceStack.Redis.IRedisClientsManager factory) => throw null;
            public virtual void SaveUserAuth(ServiceStack.Auth.IAuthSession authSession) => throw null;
            public void SaveUserAuth(ServiceStack.Auth.IUserAuth userAuth) => throw null;
            public virtual System.Threading.Tasks.Task SaveUserAuthAsync(ServiceStack.Auth.IAuthSession authSession, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task SaveUserAuthAsync(ServiceStack.Auth.IUserAuth userAuth, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Collections.Generic.List<ServiceStack.Auth.IUserAuth> SearchUserAuths(string query, string orderBy = default(string), int? skip = default(int?), int? take = default(int?)) => throw null;
            public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceStack.Auth.IUserAuth>> SearchUserAuthsAsync(string query, string orderBy = default(string), int? skip = default(int?), int? take = default(int?), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public virtual void StoreAll(System.Collections.Generic.IEnumerable<ServiceStack.Auth.ApiKey> apiKeys) => throw null;
            public virtual System.Threading.Tasks.Task StoreAllAsync(System.Collections.Generic.IEnumerable<ServiceStack.Auth.ApiKey> apiKeys, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public bool TryAuthenticate(System.Collections.Generic.Dictionary<string, string> digestHeaders, string privateKey, int nonceTimeOut, string sequence, out ServiceStack.Auth.IUserAuth userAuth) => throw null;
            public virtual bool TryAuthenticate(string userName, string password, out ServiceStack.Auth.IUserAuth userAuth) => throw null;
            public System.Threading.Tasks.Task<ServiceStack.Auth.IUserAuth> TryAuthenticateAsync(System.Collections.Generic.Dictionary<string, string> digestHeaders, string privateKey, int nonceTimeOut, string sequence, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public virtual System.Threading.Tasks.Task<ServiceStack.Auth.IUserAuth> TryAuthenticateAsync(string userName, string password, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public virtual ServiceStack.Auth.IUserAuth UpdateUserAuth(ServiceStack.Auth.IUserAuth existingUser, ServiceStack.Auth.IUserAuth newUser) => throw null;
            public virtual ServiceStack.Auth.IUserAuth UpdateUserAuth(ServiceStack.Auth.IUserAuth existingUser, ServiceStack.Auth.IUserAuth newUser, string password) => throw null;
            public virtual System.Threading.Tasks.Task<ServiceStack.Auth.IUserAuth> UpdateUserAuthAsync(ServiceStack.Auth.IUserAuth existingUser, ServiceStack.Auth.IUserAuth newUser, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public virtual System.Threading.Tasks.Task<ServiceStack.Auth.IUserAuth> UpdateUserAuthAsync(ServiceStack.Auth.IUserAuth existingUser, ServiceStack.Auth.IUserAuth newUser, string password, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        }

        // Generated from `ServiceStack.Auth.RedisClientManagerFacade` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class RedisClientManagerFacade : ServiceStack.Auth.IClearable, ServiceStack.Auth.IClearableAsync, ServiceStack.Auth.IRedisClientManagerFacade
        {
            public void Clear() => throw null;
            public System.Threading.Tasks.Task ClearAsync(System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public ServiceStack.Auth.IRedisClientFacade GetClient() => throw null;
            public System.Threading.Tasks.Task<ServiceStack.Auth.IRedisClientFacadeAsync> GetClientAsync(System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public RedisClientManagerFacade(ServiceStack.Redis.IRedisClientsManager redisManager) => throw null;
        }

        // Generated from `ServiceStack.Auth.RegenerateApiKeysService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class RegenerateApiKeysService : ServiceStack.Service
        {
            public System.Threading.Tasks.Task<object> Any(ServiceStack.RegenerateApiKeys request) => throw null;
            public RegenerateApiKeysService() => throw null;
        }

        // Generated from `ServiceStack.Auth.RegisterFilterContext` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class RegisterFilterContext
        {
            public string ReferrerUrl { get => throw null; set => throw null; }
            public ServiceStack.Register Register { get => throw null; set => throw null; }
            public RegisterFilterContext() => throw null;
            public ServiceStack.RegisterResponse RegisterResponse { get => throw null; set => throw null; }
            public ServiceStack.Auth.RegisterServiceBase RegisterService { get => throw null; set => throw null; }
            public ServiceStack.Web.IRequest Request { get => throw null; }
            public ServiceStack.Auth.IAuthSession Session { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Auth.RegisterService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class RegisterService : ServiceStack.Auth.RegisterUserAuthServiceBase
        {
            public static bool AllowUpdates { get => throw null; set => throw null; }
            public object Post(ServiceStack.Register request) => throw null;
            public System.Threading.Tasks.Task<object> PostAsync(ServiceStack.Register request) => throw null;
            public System.Threading.Tasks.Task<object> PutAsync(ServiceStack.Register request) => throw null;
            public RegisterService() => throw null;
            public object UpdateUserAuth(ServiceStack.Register request) => throw null;
            public System.Threading.Tasks.Task<object> UpdateUserAuthAsync(ServiceStack.Register request) => throw null;
            public static ServiceStack.Auth.ValidateFn ValidateFn { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Auth.RegisterServiceBase` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public abstract class RegisterServiceBase : ServiceStack.Service
        {
            protected virtual System.Threading.Tasks.Task<object> CreateRegisterResponse(ServiceStack.Auth.IAuthSession session, string userName, string password, bool? autoLogin = default(bool?)) => throw null;
            protected RegisterServiceBase() => throw null;
        }

        // Generated from `ServiceStack.Auth.RegisterUserAuthServiceBase` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public abstract class RegisterUserAuthServiceBase : ServiceStack.Auth.RegisterServiceBase
        {
            protected virtual System.Threading.Tasks.Task RegisterNewUserAsync(ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IUserAuth user) => throw null;
            protected RegisterUserAuthServiceBase() => throw null;
            public ServiceStack.FluentValidation.IValidator<ServiceStack.Register> RegistrationValidator { get => throw null; set => throw null; }
            protected virtual ServiceStack.Auth.IUserAuth ToUser(ServiceStack.Register request) => throw null;
            protected virtual System.Threading.Tasks.Task<bool> UserExistsAsync(ServiceStack.Auth.IAuthSession session) => throw null;
            protected virtual System.Threading.Tasks.Task ValidateAndThrowAsync(ServiceStack.Register request) => throw null;
        }

        // Generated from `ServiceStack.Auth.RegistrationValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class RegistrationValidator : ServiceStack.FluentValidation.AbstractValidator<ServiceStack.Register>
        {
            public RegistrationValidator() => throw null;
        }

        // Generated from `ServiceStack.Auth.SaltedHash` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class SaltedHash : ServiceStack.Auth.IHashProvider
        {
            public void GetHashAndSalt(System.Byte[] Data, out System.Byte[] Hash, out System.Byte[] Salt) => throw null;
            public void GetHashAndSaltString(string Data, out string Hash, out string Salt) => throw null;
            public SaltedHash() => throw null;
            public SaltedHash(System.Security.Cryptography.HashAlgorithm HashAlgorithm, int theSaltLength) => throw null;
            public bool VerifyHash(System.Byte[] Data, System.Byte[] Hash, System.Byte[] Salt) => throw null;
            public bool VerifyHashString(string Data, string Hash, string Salt) => throw null;
        }

        // Generated from `ServiceStack.Auth.SocialExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class SocialExtensions
        {
            public static string ToGravatarUrl(this string email, int size = default(int)) => throw null;
        }

        // Generated from `ServiceStack.Auth.TwitterAuthProvider` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class TwitterAuthProvider : ServiceStack.Auth.OAuthProvider
        {
            public override System.Threading.Tasks.Task<object> AuthenticateAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Authenticate request, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public const string DefaultAuthorizeUrl = default;
            protected override System.Threading.Tasks.Task LoadUserAuthInfoAsync(ServiceStack.AuthUserSession userSession, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public override void LoadUserOAuthProvider(ServiceStack.Auth.IAuthSession authSession, ServiceStack.Auth.IAuthTokens tokens) => throw null;
            public override System.Collections.Generic.Dictionary<string, string> Meta { get => throw null; }
            public const string Name = default;
            public static string Realm;
            public bool RetrieveEmail { get => throw null; set => throw null; }
            public TwitterAuthProvider(ServiceStack.Configuration.IAppSettings appSettings) => throw null;
        }

        // Generated from `ServiceStack.Auth.UnAssignRolesService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class UnAssignRolesService : ServiceStack.Service
        {
            public System.Threading.Tasks.Task<object> Post(ServiceStack.UnAssignRoles request) => throw null;
            public UnAssignRolesService() => throw null;
        }

        // Generated from `ServiceStack.Auth.UserAuth` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class UserAuth : ServiceStack.Auth.IUserAuth, ServiceStack.Auth.IUserAuthDetailsExtended, ServiceStack.IMeta
        {
            public virtual string Address { get => throw null; set => throw null; }
            public virtual string Address2 { get => throw null; set => throw null; }
            public virtual System.DateTime? BirthDate { get => throw null; set => throw null; }
            public virtual string BirthDateRaw { get => throw null; set => throw null; }
            public virtual string City { get => throw null; set => throw null; }
            public virtual string Company { get => throw null; set => throw null; }
            public virtual string Country { get => throw null; set => throw null; }
            public virtual System.DateTime CreatedDate { get => throw null; set => throw null; }
            public virtual string Culture { get => throw null; set => throw null; }
            public virtual string DigestHa1Hash { get => throw null; set => throw null; }
            public virtual string DisplayName { get => throw null; set => throw null; }
            public virtual string Email { get => throw null; set => throw null; }
            public virtual string FirstName { get => throw null; set => throw null; }
            public virtual string FullName { get => throw null; set => throw null; }
            public virtual string Gender { get => throw null; set => throw null; }
            public virtual int Id { get => throw null; set => throw null; }
            public virtual int InvalidLoginAttempts { get => throw null; set => throw null; }
            public virtual string Language { get => throw null; set => throw null; }
            public virtual System.DateTime? LastLoginAttempt { get => throw null; set => throw null; }
            public virtual string LastName { get => throw null; set => throw null; }
            public virtual System.DateTime? LockedDate { get => throw null; set => throw null; }
            public virtual string MailAddress { get => throw null; set => throw null; }
            public virtual System.Collections.Generic.Dictionary<string, string> Meta { get => throw null; set => throw null; }
            public virtual System.DateTime ModifiedDate { get => throw null; set => throw null; }
            public virtual string Nickname { get => throw null; set => throw null; }
            public virtual string PasswordHash { get => throw null; set => throw null; }
            public virtual System.Collections.Generic.List<string> Permissions { get => throw null; set => throw null; }
            public virtual string PhoneNumber { get => throw null; set => throw null; }
            public virtual string PostalCode { get => throw null; set => throw null; }
            public virtual string PrimaryEmail { get => throw null; set => throw null; }
            public virtual string RecoveryToken { get => throw null; set => throw null; }
            public virtual int? RefId { get => throw null; set => throw null; }
            public virtual string RefIdStr { get => throw null; set => throw null; }
            public virtual System.Collections.Generic.List<string> Roles { get => throw null; set => throw null; }
            public virtual string Salt { get => throw null; set => throw null; }
            public virtual string State { get => throw null; set => throw null; }
            public virtual string TimeZone { get => throw null; set => throw null; }
            public UserAuth() => throw null;
            public virtual string UserName { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Auth.UserAuthDetails` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class UserAuthDetails : ServiceStack.Auth.IAuthTokens, ServiceStack.Auth.IUserAuthDetails, ServiceStack.Auth.IUserAuthDetailsExtended, ServiceStack.IMeta
        {
            public virtual string AccessToken { get => throw null; set => throw null; }
            public virtual string AccessTokenSecret { get => throw null; set => throw null; }
            public virtual string Address { get => throw null; set => throw null; }
            public virtual string Address2 { get => throw null; set => throw null; }
            public virtual System.DateTime? BirthDate { get => throw null; set => throw null; }
            public virtual string BirthDateRaw { get => throw null; set => throw null; }
            public virtual string City { get => throw null; set => throw null; }
            public virtual string Company { get => throw null; set => throw null; }
            public virtual string Country { get => throw null; set => throw null; }
            public virtual System.DateTime CreatedDate { get => throw null; set => throw null; }
            public virtual string Culture { get => throw null; set => throw null; }
            public virtual string DisplayName { get => throw null; set => throw null; }
            public virtual string Email { get => throw null; set => throw null; }
            public virtual string FirstName { get => throw null; set => throw null; }
            public virtual string FullName { get => throw null; set => throw null; }
            public virtual string Gender { get => throw null; set => throw null; }
            public virtual int Id { get => throw null; set => throw null; }
            public virtual System.Collections.Generic.Dictionary<string, string> Items { get => throw null; set => throw null; }
            public virtual string Language { get => throw null; set => throw null; }
            public virtual string LastName { get => throw null; set => throw null; }
            public virtual string MailAddress { get => throw null; set => throw null; }
            public virtual System.Collections.Generic.Dictionary<string, string> Meta { get => throw null; set => throw null; }
            public virtual System.DateTime ModifiedDate { get => throw null; set => throw null; }
            public virtual string Nickname { get => throw null; set => throw null; }
            public virtual string PhoneNumber { get => throw null; set => throw null; }
            public virtual string PostalCode { get => throw null; set => throw null; }
            public virtual string Provider { get => throw null; set => throw null; }
            public virtual int? RefId { get => throw null; set => throw null; }
            public virtual string RefIdStr { get => throw null; set => throw null; }
            public virtual string RefreshToken { get => throw null; set => throw null; }
            public virtual System.DateTime? RefreshTokenExpiry { get => throw null; set => throw null; }
            public virtual string RequestToken { get => throw null; set => throw null; }
            public virtual string RequestTokenSecret { get => throw null; set => throw null; }
            public virtual string State { get => throw null; set => throw null; }
            public virtual string TimeZone { get => throw null; set => throw null; }
            public UserAuthDetails() => throw null;
            public virtual int UserAuthId { get => throw null; set => throw null; }
            public virtual string UserId { get => throw null; set => throw null; }
            public virtual string UserName { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Auth.UserAuthExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class UserAuthExtensions
        {
            public static System.Collections.Generic.List<System.Security.Claims.Claim> ConvertSessionToClaims(this ServiceStack.Auth.IAuthSession session, string issuer = default(string), string roleClaimType = default(string), string permissionClaimType = default(string)) => throw null;
            public static T Get<T>(this ServiceStack.IMeta instance) => throw null;
            public static void PopulateFromMap(this ServiceStack.Auth.IAuthSession session, System.Collections.Generic.IDictionary<string, string> map) => throw null;
            public static void PopulateMissing(this ServiceStack.Auth.IUserAuthDetails instance, ServiceStack.Auth.IAuthTokens tokens, bool overwriteReserved = default(bool)) => throw null;
            public static void PopulateMissingExtended(this ServiceStack.Auth.IUserAuthDetailsExtended instance, ServiceStack.Auth.IUserAuthDetailsExtended other, bool overwriteReserved = default(bool)) => throw null;
            public static void RecordInvalidLoginAttempt(this ServiceStack.Auth.IUserAuthRepository repo, ServiceStack.Auth.IUserAuth userAuth) => throw null;
            public static System.Threading.Tasks.Task RecordInvalidLoginAttemptAsync(this ServiceStack.Auth.IUserAuthRepositoryAsync repo, ServiceStack.Auth.IUserAuth userAuth, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public static void RecordSuccessfulLogin(this ServiceStack.Auth.IUserAuthRepository repo, ServiceStack.Auth.IUserAuth userAuth) => throw null;
            public static void RecordSuccessfulLogin(this ServiceStack.Auth.IUserAuthRepository repo, ServiceStack.Auth.IUserAuth userAuth, bool rehashPassword, string password) => throw null;
            public static System.Threading.Tasks.Task RecordSuccessfulLoginAsync(this ServiceStack.Auth.IUserAuthRepositoryAsync repo, ServiceStack.Auth.IUserAuth userAuth, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public static System.Threading.Tasks.Task RecordSuccessfulLoginAsync(this ServiceStack.Auth.IUserAuthRepositoryAsync repo, ServiceStack.Auth.IUserAuth userAuth, bool rehashPassword, string password, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public static T Set<T>(this ServiceStack.IMeta instance, T value) => throw null;
            public static ServiceStack.Auth.AuthTokens ToAuthTokens(this ServiceStack.Auth.IAuthTokens from) => throw null;
            public static bool TryGet<T>(this ServiceStack.IMeta instance, out T value) => throw null;
        }

        // Generated from `ServiceStack.Auth.UserAuthRepositoryAsyncManageRolesWrapper` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class UserAuthRepositoryAsyncManageRolesWrapper : ServiceStack.Auth.UserAuthRepositoryAsyncWrapper, ServiceStack.Auth.IManageRolesAsync
        {
            public System.Threading.Tasks.Task AssignRolesAsync(string userAuthId, System.Collections.Generic.ICollection<string> roles = default(System.Collections.Generic.ICollection<string>), System.Collections.Generic.ICollection<string> permissions = default(System.Collections.Generic.ICollection<string>), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetPermissionsAsync(string userAuthId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<System.Tuple<System.Collections.Generic.ICollection<string>, System.Collections.Generic.ICollection<string>>> GetRolesAndPermissionsAsync(string userAuthId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetRolesAsync(string userAuthId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<bool> HasPermissionAsync(string userAuthId, string permission, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<bool> HasRoleAsync(string userAuthId, string role, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task UnAssignRolesAsync(string userAuthId, System.Collections.Generic.ICollection<string> roles = default(System.Collections.Generic.ICollection<string>), System.Collections.Generic.ICollection<string> permissions = default(System.Collections.Generic.ICollection<string>), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public UserAuthRepositoryAsyncManageRolesWrapper(ServiceStack.Auth.IAuthRepository authRepo) : base(default(ServiceStack.Auth.IAuthRepository)) => throw null;
        }

        // Generated from `ServiceStack.Auth.UserAuthRepositoryAsyncWrapper` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class UserAuthRepositoryAsyncWrapper : ServiceStack.Auth.IAuthRepositoryAsync, ServiceStack.Auth.ICustomUserAuth, ServiceStack.Auth.IQueryUserAuthAsync, ServiceStack.Auth.IUserAuthRepositoryAsync, ServiceStack.IRequiresSchema
        {
            public ServiceStack.Auth.IAuthRepository AuthRepo { get => throw null; }
            public System.Threading.Tasks.Task<ServiceStack.Auth.IUserAuthDetails> CreateOrMergeAuthSessionAsync(ServiceStack.Auth.IAuthSession authSession, ServiceStack.Auth.IAuthTokens tokens, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public ServiceStack.Auth.IUserAuth CreateUserAuth() => throw null;
            public System.Threading.Tasks.Task<ServiceStack.Auth.IUserAuth> CreateUserAuthAsync(ServiceStack.Auth.IUserAuth newUser, string password, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public ServiceStack.Auth.IUserAuthDetails CreateUserAuthDetails() => throw null;
            public System.Threading.Tasks.Task DeleteUserAuthAsync(string userAuthId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<ServiceStack.Auth.IUserAuth> GetUserAuthAsync(ServiceStack.Auth.IAuthSession authSession, ServiceStack.Auth.IAuthTokens tokens, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<ServiceStack.Auth.IUserAuth> GetUserAuthAsync(string userAuthId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<ServiceStack.Auth.IUserAuth> GetUserAuthByUserNameAsync(string userNameOrEmail, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceStack.Auth.IUserAuthDetails>> GetUserAuthDetailsAsync(string userAuthId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceStack.Auth.IUserAuth>> GetUserAuthsAsync(string orderBy = default(string), int? skip = default(int?), int? take = default(int?), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public void InitSchema() => throw null;
            public System.Threading.Tasks.Task LoadUserAuthAsync(ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task SaveUserAuthAsync(ServiceStack.Auth.IAuthSession authSession, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task SaveUserAuthAsync(ServiceStack.Auth.IUserAuth userAuth, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceStack.Auth.IUserAuth>> SearchUserAuthsAsync(string query, string orderBy = default(string), int? skip = default(int?), int? take = default(int?), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<ServiceStack.Auth.IUserAuth> TryAuthenticateAsync(System.Collections.Generic.Dictionary<string, string> digestHeaders, string privateKey, int nonceTimeOut, string sequence, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<ServiceStack.Auth.IUserAuth> TryAuthenticateAsync(string userName, string password, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<ServiceStack.Auth.IUserAuth> UpdateUserAuthAsync(ServiceStack.Auth.IUserAuth existingUser, ServiceStack.Auth.IUserAuth newUser, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<ServiceStack.Auth.IUserAuth> UpdateUserAuthAsync(ServiceStack.Auth.IUserAuth existingUser, ServiceStack.Auth.IUserAuth newUser, string password, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public UserAuthRepositoryAsyncWrapper(ServiceStack.Auth.IAuthRepository authRepo) => throw null;
        }

        // Generated from `ServiceStack.Auth.UserAuthRepositoryAsyncWrapperExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class UserAuthRepositoryAsyncWrapperExtensions
        {
            public static ServiceStack.Auth.IAuthRepositoryAsync AsAsync(this ServiceStack.Auth.IAuthRepository authRepo) => throw null;
            public static bool TryGetNativeQueryAuth(this ServiceStack.Auth.IAuthRepository syncRepo, ServiceStack.Auth.IAuthRepositoryAsync asyncRepo, out ServiceStack.Auth.IQueryUserAuth queryUserAuth, out ServiceStack.Auth.IQueryUserAuthAsync queryUserAuthAsync) => throw null;
            public static ServiceStack.Auth.IAuthRepository UnwrapAuthRepository(this ServiceStack.Auth.IAuthRepositoryAsync asyncRepo) => throw null;
        }

        // Generated from `ServiceStack.Auth.UserAuthRepositoryExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class UserAuthRepositoryExtensions
        {
            public static void AssignRoles(this ServiceStack.Auth.IAuthRepository userAuthRepo, ServiceStack.Auth.IUserAuth userAuth, System.Collections.Generic.ICollection<string> roles = default(System.Collections.Generic.ICollection<string>), System.Collections.Generic.ICollection<string> permissions = default(System.Collections.Generic.ICollection<string>)) => throw null;
            public static void AssignRoles(this ServiceStack.Auth.IManageRoles manageRoles, int userAuthId, System.Collections.Generic.ICollection<string> roles = default(System.Collections.Generic.ICollection<string>), System.Collections.Generic.ICollection<string> permissions = default(System.Collections.Generic.ICollection<string>)) => throw null;
            public static System.Threading.Tasks.Task AssignRolesAsync(this ServiceStack.Auth.IAuthRepositoryAsync userAuthRepo, ServiceStack.Auth.IUserAuth userAuth, System.Collections.Generic.ICollection<string> roles = default(System.Collections.Generic.ICollection<string>), System.Collections.Generic.ICollection<string> permissions = default(System.Collections.Generic.ICollection<string>), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public static System.Threading.Tasks.Task AssignRolesAsync(this ServiceStack.Auth.IManageRolesAsync manageRoles, int userAuthId, System.Collections.Generic.ICollection<string> roles = default(System.Collections.Generic.ICollection<string>), System.Collections.Generic.ICollection<string> permissions = default(System.Collections.Generic.ICollection<string>), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public static ServiceStack.Auth.IUserAuth CreateUserAuth(this ServiceStack.Auth.IAuthRepository authRepo, ServiceStack.Auth.IUserAuth newUser, string password) => throw null;
            public static System.Threading.Tasks.Task<ServiceStack.Auth.IUserAuth> CreateUserAuthAsync(this ServiceStack.Auth.IAuthRepositoryAsync authRepo, ServiceStack.Auth.IUserAuth newUser, string password, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public static void DeleteUserAuth(this ServiceStack.Auth.IAuthRepository authRepo, string userAuthId) => throw null;
            public static void DeleteUserAuth(this ServiceStack.Auth.IUserAuthRepository authRepo, int userAuthId) => throw null;
            public static System.Threading.Tasks.Task DeleteUserAuthAsync(this ServiceStack.Auth.IAuthRepositoryAsync authRepo, string userAuthId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public static System.Threading.Tasks.Task DeleteUserAuthAsync(this ServiceStack.Auth.IUserAuthRepositoryAsync authRepo, int userAuthId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public static System.Collections.Generic.List<ServiceStack.Auth.IAuthTokens> GetAuthTokens(this ServiceStack.Auth.IAuthRepository repo, string userAuthId) => throw null;
            public static System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceStack.Auth.IAuthTokens>> GetAuthTokensAsync(this ServiceStack.Auth.IAuthRepositoryAsync repo, string userAuthId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public static System.Collections.Generic.ICollection<string> GetPermissions(this ServiceStack.Auth.IAuthRepository userAuthRepo, ServiceStack.Auth.IUserAuth userAuth) => throw null;
            public static System.Collections.Generic.ICollection<string> GetPermissions(this ServiceStack.Auth.IManageRoles manageRoles, int userAuthId) => throw null;
            public static System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetPermissionsAsync(this ServiceStack.Auth.IAuthRepositoryAsync userAuthRepo, ServiceStack.Auth.IUserAuth userAuth, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public static System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetPermissionsAsync(this ServiceStack.Auth.IManageRolesAsync manageRoles, int userAuthId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public static System.Collections.Generic.ICollection<string> GetRoles(this ServiceStack.Auth.IAuthRepository userAuthRepo, ServiceStack.Auth.IUserAuth userAuth) => throw null;
            public static System.Collections.Generic.ICollection<string> GetRoles(this ServiceStack.Auth.IManageRoles manageRoles, int userAuthId) => throw null;
            public static System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetRolesAsync(this ServiceStack.Auth.IAuthRepositoryAsync userAuthRepo, ServiceStack.Auth.IUserAuth userAuth, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public static System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetRolesAsync(this ServiceStack.Auth.IManageRolesAsync manageRoles, int userAuthId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public static ServiceStack.Auth.IUserAuth GetUserAuth(this ServiceStack.Auth.IAuthRepository authRepo, string userAuthId) => throw null;
            public static ServiceStack.Auth.IUserAuth GetUserAuth(this ServiceStack.Auth.IUserAuthRepository authRepo, int userAuthId) => throw null;
            public static System.Threading.Tasks.Task<ServiceStack.Auth.IUserAuth> GetUserAuthAsync(this ServiceStack.Auth.IAuthRepositoryAsync authRepo, string userAuthId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public static System.Threading.Tasks.Task<ServiceStack.Auth.IUserAuth> GetUserAuthAsync(this ServiceStack.Auth.IUserAuthRepositoryAsync authRepo, int userAuthId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public static System.Collections.Generic.List<ServiceStack.Auth.IUserAuthDetails> GetUserAuthDetails(this ServiceStack.Auth.IAuthRepository authRepo, int userAuthId) => throw null;
            public static System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceStack.Auth.IUserAuthDetails>> GetUserAuthDetailsAsync(this ServiceStack.Auth.IAuthRepositoryAsync authRepo, int userAuthId, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public static System.Collections.Generic.List<ServiceStack.Auth.IUserAuth> GetUserAuths(this ServiceStack.Auth.IAuthRepository authRepo, string orderBy = default(string), int? skip = default(int?), int? take = default(int?)) => throw null;
            public static System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceStack.Auth.IUserAuth>> GetUserAuthsAsync(this ServiceStack.Auth.IAuthRepositoryAsync authRepo, string orderBy = default(string), int? skip = default(int?), int? take = default(int?), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public static bool HasPermission(this ServiceStack.Auth.IManageRoles manageRoles, int userAuthId, string permission) => throw null;
            public static System.Threading.Tasks.Task<bool> HasPermissionAsync(this ServiceStack.Auth.IManageRolesAsync manageRoles, int userAuthId, string permission, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public static bool HasRole(this ServiceStack.Auth.IManageRoles manageRoles, int userAuthId, string role) => throw null;
            public static System.Threading.Tasks.Task<bool> HasRoleAsync(this ServiceStack.Auth.IManageRolesAsync manageRoles, int userAuthId, string role, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public static void PopulateSession(this ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IUserAuth userAuth, ServiceStack.Auth.IAuthRepository authRepo = default(ServiceStack.Auth.IAuthRepository)) => throw null;
            public static System.Threading.Tasks.Task PopulateSessionAsync(this ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IUserAuth userAuth, ServiceStack.Auth.IAuthRepositoryAsync authRepo = default(ServiceStack.Auth.IAuthRepositoryAsync), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public static System.Collections.Generic.List<ServiceStack.Auth.IUserAuth> SearchUserAuths(this ServiceStack.Auth.IAuthRepository authRepo, string query, string orderBy = default(string), int? skip = default(int?), int? take = default(int?)) => throw null;
            public static System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceStack.Auth.IUserAuth>> SearchUserAuthsAsync(this ServiceStack.Auth.IAuthRepositoryAsync authRepo, string query, string orderBy = default(string), int? skip = default(int?), int? take = default(int?), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public static void UnAssignRoles(this ServiceStack.Auth.IAuthRepository userAuthRepo, ServiceStack.Auth.IUserAuth userAuth, System.Collections.Generic.ICollection<string> roles = default(System.Collections.Generic.ICollection<string>), System.Collections.Generic.ICollection<string> permissions = default(System.Collections.Generic.ICollection<string>)) => throw null;
            public static void UnAssignRoles(this ServiceStack.Auth.IManageRoles manageRoles, int userAuthId, System.Collections.Generic.ICollection<string> roles = default(System.Collections.Generic.ICollection<string>), System.Collections.Generic.ICollection<string> permissions = default(System.Collections.Generic.ICollection<string>)) => throw null;
            public static System.Threading.Tasks.Task UnAssignRolesAsync(this ServiceStack.Auth.IAuthRepositoryAsync userAuthRepo, ServiceStack.Auth.IUserAuth userAuth, System.Collections.Generic.ICollection<string> roles = default(System.Collections.Generic.ICollection<string>), System.Collections.Generic.ICollection<string> permissions = default(System.Collections.Generic.ICollection<string>), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public static System.Threading.Tasks.Task UnAssignRolesAsync(this ServiceStack.Auth.IManageRolesAsync manageRoles, int userAuthId, System.Collections.Generic.ICollection<string> roles = default(System.Collections.Generic.ICollection<string>), System.Collections.Generic.ICollection<string> permissions = default(System.Collections.Generic.ICollection<string>), System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public static ServiceStack.Auth.IUserAuth UpdateUserAuth(this ServiceStack.Auth.IAuthRepository authRepo, ServiceStack.Auth.IUserAuth existingUser, ServiceStack.Auth.IUserAuth newUser) => throw null;
            public static ServiceStack.Auth.IUserAuth UpdateUserAuth(this ServiceStack.Auth.IAuthRepository authRepo, ServiceStack.Auth.IUserAuth existingUser, ServiceStack.Auth.IUserAuth newUser, string password) => throw null;
            public static System.Threading.Tasks.Task<ServiceStack.Auth.IUserAuth> UpdateUserAuthAsync(this ServiceStack.Auth.IAuthRepositoryAsync authRepo, ServiceStack.Auth.IUserAuth existingUser, ServiceStack.Auth.IUserAuth newUser, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public static System.Threading.Tasks.Task<ServiceStack.Auth.IUserAuth> UpdateUserAuthAsync(this ServiceStack.Auth.IAuthRepositoryAsync authRepo, ServiceStack.Auth.IUserAuth existingUser, ServiceStack.Auth.IUserAuth newUser, string password, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public static void ValidateNewUser(this ServiceStack.Auth.IUserAuth newUser) => throw null;
            public static void ValidateNewUser(this ServiceStack.Auth.IUserAuth newUser, string password) => throw null;
        }

        // Generated from `ServiceStack.Auth.UserAuthRole` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class UserAuthRole : ServiceStack.IMeta
        {
            public virtual System.DateTime CreatedDate { get => throw null; set => throw null; }
            public virtual int Id { get => throw null; set => throw null; }
            public virtual System.Collections.Generic.Dictionary<string, string> Meta { get => throw null; set => throw null; }
            public virtual System.DateTime ModifiedDate { get => throw null; set => throw null; }
            public virtual string Permission { get => throw null; set => throw null; }
            public virtual int? RefId { get => throw null; set => throw null; }
            public virtual string RefIdStr { get => throw null; set => throw null; }
            public virtual string Role { get => throw null; set => throw null; }
            public virtual int UserAuthId { get => throw null; set => throw null; }
            public UserAuthRole() => throw null;
        }

        // Generated from `ServiceStack.Auth.ValidateAsyncFn` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public delegate System.Threading.Tasks.Task<object> ValidateAsyncFn(ServiceStack.IServiceBase service, string httpMethod, object requestDto);

        // Generated from `ServiceStack.Auth.ValidateFn` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public delegate object ValidateFn(ServiceStack.IServiceBase service, string httpMethod, object requestDto);

        // Generated from `ServiceStack.Auth.VkAuthProvider` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class VkAuthProvider : ServiceStack.Auth.OAuthProvider
        {
            public string ApiVersion { get => throw null; set => throw null; }
            public string ApplicationId { get => throw null; set => throw null; }
            public override System.Threading.Tasks.Task<object> AuthenticateAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Authenticate request, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            protected virtual System.Threading.Tasks.Task<object> AuthenticateWithAccessTokenAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Auth.IAuthTokens tokens, string accessToken) => throw null;
            protected override System.Threading.Tasks.Task LoadUserAuthInfoAsync(ServiceStack.AuthUserSession userSession, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public override void LoadUserOAuthProvider(ServiceStack.Auth.IAuthSession authSession, ServiceStack.Auth.IAuthTokens tokens) => throw null;
            public const string Name = default;
            public static string PreAuthUrl;
            public static string Realm;
            public string Scope { get => throw null; set => throw null; }
            public string SecureKey { get => throw null; set => throw null; }
            public static string TokenUrl;
            public VkAuthProvider(ServiceStack.Configuration.IAppSettings appSettings) => throw null;
        }

        // Generated from `ServiceStack.Auth.YammerAuthProvider` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class YammerAuthProvider : ServiceStack.Auth.OAuthProvider
        {
            public override System.Threading.Tasks.Task<object> AuthenticateAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Authenticate request, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public string ClientId { get => throw null; set => throw null; }
            public string ClientSecret { get => throw null; set => throw null; }
            protected override System.Threading.Tasks.Task LoadUserAuthInfoAsync(ServiceStack.AuthUserSession userSession, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public override void LoadUserOAuthProvider(ServiceStack.Auth.IAuthSession authSession, ServiceStack.Auth.IAuthTokens tokens) => throw null;
            public const string Name = default;
            public string PreAuthUrl { get => throw null; set => throw null; }
            public YammerAuthProvider(ServiceStack.Configuration.IAppSettings appSettings) => throw null;
        }

        // Generated from `ServiceStack.Auth.YandexAuthProvider` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class YandexAuthProvider : ServiceStack.Auth.OAuthProvider
        {
            public string ApplicationId { get => throw null; set => throw null; }
            public string ApplicationPassword { get => throw null; set => throw null; }
            public override System.Threading.Tasks.Task<object> AuthenticateAsync(ServiceStack.IServiceBase authService, ServiceStack.Auth.IAuthSession session, ServiceStack.Authenticate request, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            protected override System.Threading.Tasks.Task LoadUserAuthInfoAsync(ServiceStack.AuthUserSession userSession, ServiceStack.Auth.IAuthTokens tokens, System.Collections.Generic.Dictionary<string, string> authInfo, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public override void LoadUserOAuthProvider(ServiceStack.Auth.IAuthSession authSession, ServiceStack.Auth.IAuthTokens tokens) => throw null;
            public const string Name = default;
            public static string PreAuthUrl;
            public static string Realm;
            public static string TokenUrl;
            public YandexAuthProvider(ServiceStack.Configuration.IAppSettings appSettings) => throw null;
        }

    }
    namespace Caching
    {
        // Generated from `ServiceStack.Caching.CacheClientAsyncExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class CacheClientAsyncExtensions
        {
            public static ServiceStack.Caching.ICacheClientAsync AsAsync(this ServiceStack.Caching.ICacheClient cache) => throw null;
            public static ServiceStack.Caching.ICacheClient AsSync(this ServiceStack.Caching.ICacheClientAsync cache) => throw null;
            public static ServiceStack.Caching.ICacheClient Unwrap(this ServiceStack.Caching.ICacheClientAsync cache) => throw null;
        }

        // Generated from `ServiceStack.Caching.CacheClientAsyncWrapper` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class CacheClientAsyncWrapper : ServiceStack.Caching.ICacheClientAsync, ServiceStack.Caching.IRemoveByPatternAsync, System.IAsyncDisposable
        {
            public System.Threading.Tasks.Task<bool> AddAsync<T>(string key, T value, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<bool> AddAsync<T>(string key, T value, System.DateTime expiresAt, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<bool> AddAsync<T>(string key, T value, System.TimeSpan expiresIn, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public ServiceStack.Caching.ICacheClient Cache { get => throw null; }
            public CacheClientAsyncWrapper(ServiceStack.Caching.ICacheClient cache) => throw null;
            public System.Threading.Tasks.Task<System.Int64> DecrementAsync(string key, System.UInt32 amount, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.ValueTask DisposeAsync() => throw null;
            public System.Threading.Tasks.Task FlushAllAsync(System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, T>> GetAllAsync<T>(System.Collections.Generic.IEnumerable<string> keys, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<T> GetAsync<T>(string key, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Collections.Generic.IAsyncEnumerable<string> GetKeysByPatternAsync(string pattern, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<System.TimeSpan?> GetTimeToLiveAsync(string key, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<System.Int64> IncrementAsync(string key, System.UInt32 amount, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task RemoveAllAsync(System.Collections.Generic.IEnumerable<string> keys, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<bool> RemoveAsync(string key, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task RemoveByPatternAsync(string pattern, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task RemoveByRegexAsync(string regex, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task RemoveExpiredEntriesAsync(System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<bool> ReplaceAsync<T>(string key, T value, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<bool> ReplaceAsync<T>(string key, T value, System.DateTime expiresAt, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<bool> ReplaceAsync<T>(string key, T value, System.TimeSpan expiresIn, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task SetAllAsync<T>(System.Collections.Generic.IDictionary<string, T> values, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<bool> SetAsync<T>(string key, T value, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<bool> SetAsync<T>(string key, T value, System.DateTime expiresAt, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<bool> SetAsync<T>(string key, T value, System.TimeSpan expiresIn, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        }

        // Generated from `ServiceStack.Caching.CacheClientWithPrefix` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class CacheClientWithPrefix : ServiceStack.Caching.ICacheClient, ServiceStack.Caching.ICacheClientExtended, ServiceStack.Caching.IRemoveByPattern, System.IDisposable
        {
            public bool Add<T>(string key, T value) => throw null;
            public bool Add<T>(string key, T value, System.DateTime expiresAt) => throw null;
            public bool Add<T>(string key, T value, System.TimeSpan expiresIn) => throw null;
            public CacheClientWithPrefix(ServiceStack.Caching.ICacheClient cache, string prefix) => throw null;
            public System.Int64 Decrement(string key, System.UInt32 amount) => throw null;
            public void Dispose() => throw null;
            public void FlushAll() => throw null;
            public T Get<T>(string key) => throw null;
            public System.Collections.Generic.IDictionary<string, T> GetAll<T>(System.Collections.Generic.IEnumerable<string> keys) => throw null;
            public System.Collections.Generic.IEnumerable<string> GetKeysByPattern(string pattern) => throw null;
            public System.TimeSpan? GetTimeToLive(string key) => throw null;
            public System.Int64 Increment(string key, System.UInt32 amount) => throw null;
            public string Prefix { get => throw null; }
            public bool Remove(string key) => throw null;
            public void RemoveAll(System.Collections.Generic.IEnumerable<string> keys) => throw null;
            public void RemoveByPattern(string pattern) => throw null;
            public void RemoveByRegex(string regex) => throw null;
            public void RemoveExpiredEntries() => throw null;
            public bool Replace<T>(string key, T value) => throw null;
            public bool Replace<T>(string key, T value, System.DateTime expiresAt) => throw null;
            public bool Replace<T>(string key, T value, System.TimeSpan expiresIn) => throw null;
            public bool Set<T>(string key, T value) => throw null;
            public bool Set<T>(string key, T value, System.DateTime expiresAt) => throw null;
            public bool Set<T>(string key, T value, System.TimeSpan expiresIn) => throw null;
            public void SetAll<T>(System.Collections.Generic.IDictionary<string, T> values) => throw null;
        }

        // Generated from `ServiceStack.Caching.CacheClientWithPrefixAsync` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class CacheClientWithPrefixAsync : ServiceStack.Caching.ICacheClientAsync, ServiceStack.Caching.IRemoveByPatternAsync, System.IAsyncDisposable
        {
            public System.Threading.Tasks.Task<bool> AddAsync<T>(string key, T value, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<bool> AddAsync<T>(string key, T value, System.DateTime expiresAt, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<bool> AddAsync<T>(string key, T value, System.TimeSpan expiresIn, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public CacheClientWithPrefixAsync(ServiceStack.Caching.ICacheClientAsync cache, string prefix) => throw null;
            public System.Threading.Tasks.Task<System.Int64> DecrementAsync(string key, System.UInt32 amount, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.ValueTask DisposeAsync() => throw null;
            public System.Threading.Tasks.Task FlushAllAsync(System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, T>> GetAllAsync<T>(System.Collections.Generic.IEnumerable<string> keys, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<T> GetAsync<T>(string key, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Collections.Generic.IAsyncEnumerable<string> GetKeysByPatternAsync(string pattern, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<System.TimeSpan?> GetTimeToLiveAsync(string key, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<System.Int64> IncrementAsync(string key, System.UInt32 amount, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public string Prefix { get => throw null; }
            public System.Threading.Tasks.Task RemoveAllAsync(System.Collections.Generic.IEnumerable<string> keys, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<bool> RemoveAsync(string key, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task RemoveByPatternAsync(string pattern, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task RemoveByRegexAsync(string regex, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task RemoveExpiredEntriesAsync(System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<bool> ReplaceAsync<T>(string key, T value, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<bool> ReplaceAsync<T>(string key, T value, System.DateTime expiresAt, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<bool> ReplaceAsync<T>(string key, T value, System.TimeSpan expiresIn, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task SetAllAsync<T>(System.Collections.Generic.IDictionary<string, T> values, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<bool> SetAsync<T>(string key, T value, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<bool> SetAsync<T>(string key, T value, System.DateTime expiresAt, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<bool> SetAsync<T>(string key, T value, System.TimeSpan expiresIn, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        }

        // Generated from `ServiceStack.Caching.CacheClientWithPrefixAsyncExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class CacheClientWithPrefixAsyncExtensions
        {
            public static ServiceStack.Caching.ICacheClientAsync WithPrefix(this ServiceStack.Caching.ICacheClientAsync cache, string prefix) => throw null;
        }

        // Generated from `ServiceStack.Caching.CacheClientWithPrefixExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class CacheClientWithPrefixExtensions
        {
            public static ServiceStack.Caching.ICacheClient WithPrefix(this ServiceStack.Caching.ICacheClient cache, string prefix) => throw null;
        }

        // Generated from `ServiceStack.Caching.MemoryCacheClient` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class MemoryCacheClient : ServiceStack.Caching.ICacheClient, ServiceStack.Caching.ICacheClientExtended, ServiceStack.Caching.IRemoveByPattern, System.IDisposable
        {
            public bool Add<T>(string key, T value) => throw null;
            public bool Add<T>(string key, T value, System.DateTime expiresAt) => throw null;
            public bool Add<T>(string key, T value, System.TimeSpan expiresIn) => throw null;
            public System.Int64 CleaningInterval { get => throw null; set => throw null; }
            public System.Int64 Decrement(string key, System.UInt32 amount) => throw null;
            public void Dispose() => throw null;
            public void FlushAll() => throw null;
            public bool FlushOnDispose { get => throw null; set => throw null; }
            public object Get(string key) => throw null;
            public object Get(string key, out System.Int64 lastModifiedTicks) => throw null;
            public T Get<T>(string key) => throw null;
            public System.Collections.Generic.IDictionary<string, T> GetAll<T>(System.Collections.Generic.IEnumerable<string> keys) => throw null;
            public System.Collections.Generic.IEnumerable<string> GetKeysByPattern(string pattern) => throw null;
            public System.Collections.Generic.List<string> GetKeysByRegex(string pattern) => throw null;
            public System.TimeSpan? GetTimeToLive(string key) => throw null;
            public System.Int64 Increment(string key, System.UInt32 amount) => throw null;
            public MemoryCacheClient() => throw null;
            public bool Remove(string key) => throw null;
            public void RemoveAll(System.Collections.Generic.IEnumerable<string> keys) => throw null;
            public void RemoveByPattern(string pattern) => throw null;
            public void RemoveByRegex(string pattern) => throw null;
            public void RemoveExpiredEntries() => throw null;
            public bool Replace<T>(string key, T value) => throw null;
            public bool Replace<T>(string key, T value, System.DateTime expiresAt) => throw null;
            public bool Replace<T>(string key, T value, System.TimeSpan expiresIn) => throw null;
            public bool Set<T>(string key, T value) => throw null;
            public bool Set<T>(string key, T value, System.DateTime expiresAt) => throw null;
            public bool Set<T>(string key, T value, System.TimeSpan expiresIn) => throw null;
            public void SetAll<T>(System.Collections.Generic.IDictionary<string, T> values) => throw null;
        }

        // Generated from `ServiceStack.Caching.MultiCacheClient` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class MultiCacheClient : ServiceStack.Caching.ICacheClient, ServiceStack.Caching.ICacheClientAsync, System.IAsyncDisposable, System.IDisposable
        {
            public bool Add<T>(string key, T value) => throw null;
            public bool Add<T>(string key, T value, System.DateTime expiresAt) => throw null;
            public bool Add<T>(string key, T value, System.TimeSpan expiresIn) => throw null;
            public System.Threading.Tasks.Task<bool> AddAsync<T>(string key, T value, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<bool> AddAsync<T>(string key, T value, System.DateTime expiresAt, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<bool> AddAsync<T>(string key, T value, System.TimeSpan expiresIn, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Int64 Decrement(string key, System.UInt32 amount) => throw null;
            public System.Threading.Tasks.Task<System.Int64> DecrementAsync(string key, System.UInt32 amount, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public void Dispose() => throw null;
            public System.Threading.Tasks.ValueTask DisposeAsync() => throw null;
            public void FlushAll() => throw null;
            public System.Threading.Tasks.Task FlushAllAsync(System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public T Get<T>(string key) => throw null;
            public System.Collections.Generic.IDictionary<string, T> GetAll<T>(System.Collections.Generic.IEnumerable<string> keys) => throw null;
            public System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, T>> GetAllAsync<T>(System.Collections.Generic.IEnumerable<string> keys, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<T> GetAsync<T>(string key, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Collections.Generic.IAsyncEnumerable<string> GetKeysByPatternAsync(string pattern, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<System.TimeSpan?> GetTimeToLiveAsync(string key, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Int64 Increment(string key, System.UInt32 amount) => throw null;
            public System.Threading.Tasks.Task<System.Int64> IncrementAsync(string key, System.UInt32 amount, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public MultiCacheClient(System.Collections.Generic.List<ServiceStack.Caching.ICacheClient> cacheClients, System.Collections.Generic.List<ServiceStack.Caching.ICacheClientAsync> cacheClientsAsync) => throw null;
            public MultiCacheClient(params ServiceStack.Caching.ICacheClient[] cacheClients) => throw null;
            public bool Remove(string key) => throw null;
            public void RemoveAll(System.Collections.Generic.IEnumerable<string> keys) => throw null;
            public System.Threading.Tasks.Task RemoveAllAsync(System.Collections.Generic.IEnumerable<string> keys, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<bool> RemoveAsync(string key, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task RemoveExpiredEntriesAsync(System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public bool Replace<T>(string key, T value) => throw null;
            public bool Replace<T>(string key, T value, System.DateTime expiresAt) => throw null;
            public bool Replace<T>(string key, T value, System.TimeSpan expiresIn) => throw null;
            public System.Threading.Tasks.Task<bool> ReplaceAsync<T>(string key, T value, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<bool> ReplaceAsync<T>(string key, T value, System.DateTime expiresAt, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<bool> ReplaceAsync<T>(string key, T value, System.TimeSpan expiresIn, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public bool Set<T>(string key, T value) => throw null;
            public bool Set<T>(string key, T value, System.DateTime expiresAt) => throw null;
            public bool Set<T>(string key, T value, System.TimeSpan expiresIn) => throw null;
            public void SetAll<T>(System.Collections.Generic.IDictionary<string, T> values) => throw null;
            public System.Threading.Tasks.Task SetAllAsync<T>(System.Collections.Generic.IDictionary<string, T> values, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<bool> SetAsync<T>(string key, T value, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<bool> SetAsync<T>(string key, T value, System.DateTime expiresAt, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<bool> SetAsync<T>(string key, T value, System.TimeSpan expiresIn, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        }

    }
    namespace Configuration
    {
        // Generated from `ServiceStack.Configuration.AppSettings` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class AppSettings : ServiceStack.Configuration.AppSettingsBase
        {
            public AppSettings(string tier = default(string)) : base(default(ServiceStack.Configuration.ISettings)) => throw null;
            public override string GetString(string name) => throw null;
        }

        // Generated from `ServiceStack.Configuration.AppSettingsBase` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class AppSettingsBase : ServiceStack.Configuration.IAppSettings, ServiceStack.Configuration.ISettings, ServiceStack.Configuration.ISettingsWriter
        {
            public AppSettingsBase(ServiceStack.Configuration.ISettings settings = default(ServiceStack.Configuration.ISettings)) => throw null;
            public virtual bool Exists(string key) => throw null;
            public string Get(string name) => throw null;
            public virtual T Get<T>(string name) => throw null;
            public virtual T Get<T>(string name, T defaultValue) => throw null;
            public virtual System.Collections.Generic.Dictionary<string, string> GetAll() => throw null;
            public virtual System.Collections.Generic.List<string> GetAllKeys() => throw null;
            public virtual System.Collections.Generic.IDictionary<string, string> GetDictionary(string key) => throw null;
            public virtual System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> GetKeyValuePairs(string key) => throw null;
            public virtual System.Collections.Generic.IList<string> GetList(string key) => throw null;
            public virtual string GetNullableString(string name) => throw null;
            public virtual string GetRequiredString(string name) => throw null;
            public virtual string GetString(string name) => throw null;
            protected void Init(ServiceStack.Configuration.ISettings settings) => throw null;
            public ServiceStack.Configuration.ParsingStrategyDelegate ParsingStrategy { get => throw null; set => throw null; }
            public virtual void Set<T>(string key, T value) => throw null;
            public string Tier { get => throw null; set => throw null; }
            protected ServiceStack.Configuration.ISettings settings;
            protected ServiceStack.Configuration.ISettingsWriter settingsWriter;
        }

        // Generated from `ServiceStack.Configuration.AppSettingsStrategy` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class AppSettingsStrategy
        {
            public static string CollapseNewLines(string originalSetting) => throw null;
        }

        // Generated from `ServiceStack.Configuration.AppSettingsUtils` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class AppSettingsUtils
        {
            public static string GetConnectionString(this ServiceStack.Configuration.IAppSettings appSettings, string name) => throw null;
            public static string GetNullableString(this ServiceStack.Configuration.IAppSettings settings, string name) => throw null;
            public static string GetRequiredString(this ServiceStack.Configuration.IAppSettings settings, string name) => throw null;
        }

        // Generated from `ServiceStack.Configuration.Config` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class Config
        {
            public Config() => throw null;
            public const string DefaultNamespace = default;
        }

        // Generated from `ServiceStack.Configuration.ConfigUtils` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class ConfigUtils
        {
            public ConfigUtils() => throw null;
            public static string GetAppSetting(string key) => throw null;
            public static string GetAppSetting(string key, string defaultValue) => throw null;
            public static T GetAppSetting<T>(string key, T defaultValue) => throw null;
            public static System.Collections.Generic.Dictionary<string, string> GetAppSettingsMap() => throw null;
            public static string GetConnectionString(string key) => throw null;
            public static System.Collections.Generic.Dictionary<string, string> GetDictionaryFromAppSetting(string key) => throw null;
            public static System.Collections.Generic.Dictionary<string, string> GetDictionaryFromAppSettingValue(string appSettingValue) => throw null;
            public static System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> GetKeyValuePairsFromAppSettingValue(string appSettingValue) => throw null;
            public static System.Collections.Generic.List<string> GetListFromAppSetting(string key) => throw null;
            public static System.Collections.Generic.List<string> GetListFromAppSettingValue(string appSettingValue) => throw null;
            public static string GetNullableAppSetting(string key) => throw null;
            public const System.Char ItemSeperator = default;
            public const System.Char KeyValueSeperator = default;
        }

        // Generated from `ServiceStack.Configuration.DictionarySettings` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class DictionarySettings : ServiceStack.Configuration.AppSettingsBase, ServiceStack.Configuration.ISettings
        {
            public DictionarySettings(System.Collections.Generic.Dictionary<string, string> map = default(System.Collections.Generic.Dictionary<string, string>)) : base(default(ServiceStack.Configuration.ISettings)) => throw null;
            public DictionarySettings(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>> map) : base(default(ServiceStack.Configuration.ISettings)) => throw null;
            public override System.Collections.Generic.Dictionary<string, string> GetAll() => throw null;
        }

        // Generated from `ServiceStack.Configuration.EnvironmentVariableSettings` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class EnvironmentVariableSettings : ServiceStack.Configuration.AppSettingsBase
        {
            public EnvironmentVariableSettings() : base(default(ServiceStack.Configuration.ISettings)) => throw null;
            public override string GetString(string name) => throw null;
        }

        // Generated from `ServiceStack.Configuration.ISettings` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface ISettings
        {
            string Get(string key);
            System.Collections.Generic.List<string> GetAllKeys();
        }

        // Generated from `ServiceStack.Configuration.ISettingsWriter` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface ISettingsWriter : ServiceStack.Configuration.ISettings
        {
            void Set<T>(string key, T value);
        }

        // Generated from `ServiceStack.Configuration.MultiAppSettings` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class MultiAppSettings : ServiceStack.Configuration.AppSettingsBase, ServiceStack.Configuration.ISettings
        {
            public ServiceStack.Configuration.IAppSettings[] AppSettings { get => throw null; }
            public override T Get<T>(string name) => throw null;
            public override T Get<T>(string name, T defaultValue) => throw null;
            public MultiAppSettings(params ServiceStack.Configuration.IAppSettings[] appSettings) : base(default(ServiceStack.Configuration.ISettings)) => throw null;
        }

        // Generated from `ServiceStack.Configuration.MultiAppSettingsBuilder` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class MultiAppSettingsBuilder
        {
            public ServiceStack.Configuration.MultiAppSettingsBuilder AddAppSettings() => throw null;
            public ServiceStack.Configuration.MultiAppSettingsBuilder AddAppSettings(string tier) => throw null;
            public ServiceStack.Configuration.MultiAppSettingsBuilder AddDictionarySettings(System.Collections.Generic.Dictionary<string, string> map) => throw null;
            public ServiceStack.Configuration.MultiAppSettingsBuilder AddEnvironmentalVariables() => throw null;
            public ServiceStack.Configuration.MultiAppSettingsBuilder AddEnvironmentalVariables(string tier) => throw null;
            public ServiceStack.Configuration.MultiAppSettingsBuilder AddNetCore(Microsoft.Extensions.Configuration.IConfiguration configuration) => throw null;
            public ServiceStack.Configuration.MultiAppSettingsBuilder AddTextFile(string path) => throw null;
            public ServiceStack.Configuration.MultiAppSettingsBuilder AddTextFile(string path, string delimeter) => throw null;
            public ServiceStack.Configuration.MultiAppSettingsBuilder AddTextFile(string path, string delimeter, string tier) => throw null;
            public ServiceStack.Configuration.IAppSettings Build() => throw null;
            public MultiAppSettingsBuilder(string tier = default(string)) => throw null;
        }

        // Generated from `ServiceStack.Configuration.ParsingStrategyDelegate` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public delegate string ParsingStrategyDelegate(string originalSetting);

        // Generated from `ServiceStack.Configuration.RoleNames` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class RoleNames
        {
            public const string Admin = default;
            public const string AllowAnon = default;
            public const string AllowAnyUser = default;
        }

        // Generated from `ServiceStack.Configuration.RuntimeAppSettings` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class RuntimeAppSettings : ServiceStack.Configuration.IRuntimeAppSettings
        {
            public T Get<T>(ServiceStack.Web.IRequest request, string name, T defaultValue) => throw null;
            public RuntimeAppSettings() => throw null;
            public System.Collections.Generic.Dictionary<string, System.Func<ServiceStack.Web.IRequest, object>> Settings { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Configuration.TextFileSettings` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class TextFileSettings : ServiceStack.Configuration.DictionarySettings
        {
            public TextFileSettings(string filePath, string delimiter = default(string)) : base(default(System.Collections.Generic.Dictionary<string, string>)) => throw null;
        }

    }
    namespace FluentValidation
    {
        // Generated from `ServiceStack.FluentValidation.AbstractValidator<>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public abstract class AbstractValidator<T> : ServiceStack.FluentValidation.IServiceStackValidator, ServiceStack.FluentValidation.IValidator, ServiceStack.FluentValidation.IValidator<T>, ServiceStack.IHasTypeValidators, ServiceStack.Web.IRequiresRequest, System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.IValidationRule>, System.Collections.IEnumerable
        {
            protected AbstractValidator() => throw null;
            protected void AddRule(ServiceStack.FluentValidation.IValidationRule rule) => throw null;
            bool ServiceStack.FluentValidation.IValidator.CanValidateInstancesOfType(System.Type type) => throw null;
            public ServiceStack.FluentValidation.CascadeMode CascadeMode { get => throw null; set => throw null; }
            public virtual ServiceStack.FluentValidation.IValidatorDescriptor CreateDescriptor() => throw null;
            protected virtual void EnsureInstanceNotNull(object instanceToValidate) => throw null;
            public virtual ServiceStack.IServiceGateway Gateway { get => throw null; }
            public System.Collections.Generic.IEnumerator<ServiceStack.FluentValidation.IValidationRule> GetEnumerator() => throw null;
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;
            public void Include(ServiceStack.FluentValidation.IValidator<T> rulesToInclude) => throw null;
            public void Include<TValidator>(System.Func<T, TValidator> rulesToInclude) where TValidator : ServiceStack.FluentValidation.IValidator<T> => throw null;
            protected virtual bool PreValidate(ServiceStack.FluentValidation.ValidationContext<T> context, ServiceStack.FluentValidation.Results.ValidationResult result) => throw null;
            protected virtual void RaiseValidationException(ServiceStack.FluentValidation.ValidationContext<T> context, ServiceStack.FluentValidation.Results.ValidationResult result) => throw null;
            public void RemovePropertyRules(System.Func<ServiceStack.FluentValidation.Internal.PropertyRule, bool> where) => throw null;
            public virtual ServiceStack.Web.IRequest Request { get => throw null; set => throw null; }
            public ServiceStack.FluentValidation.IRuleBuilderInitial<T, TProperty> RuleFor<TProperty>(System.Linq.Expressions.Expression<System.Func<T, TProperty>> expression) => throw null;
            public ServiceStack.FluentValidation.IRuleBuilderInitialCollection<T, TElement> RuleForEach<TElement>(System.Linq.Expressions.Expression<System.Func<T, System.Collections.Generic.IEnumerable<TElement>>> expression) => throw null;
            public void RuleSet(ServiceStack.ApplyTo appliesTo, System.Action action) => throw null;
            public void RuleSet(string ruleSetName, System.Action action) => throw null;
            public ServiceStack.FluentValidation.IRuleBuilderInitial<T, TTransformed> Transform<TProperty, TTransformed>(System.Linq.Expressions.Expression<System.Func<T, TProperty>> from, System.Func<T, TProperty, TTransformed> to) => throw null;
            public ServiceStack.FluentValidation.IRuleBuilderInitial<T, TTransformed> Transform<TProperty, TTransformed>(System.Linq.Expressions.Expression<System.Func<T, TProperty>> from, System.Func<TProperty, TTransformed> to) => throw null;
            public ServiceStack.FluentValidation.IRuleBuilderInitialCollection<T, TTransformed> TransformForEach<TElement, TTransformed>(System.Linq.Expressions.Expression<System.Func<T, System.Collections.Generic.IEnumerable<TElement>>> expression, System.Func<T, TElement, TTransformed> to) => throw null;
            public ServiceStack.FluentValidation.IRuleBuilderInitialCollection<T, TTransformed> TransformForEach<TElement, TTransformed>(System.Linq.Expressions.Expression<System.Func<T, System.Collections.Generic.IEnumerable<TElement>>> expression, System.Func<TElement, TTransformed> to) => throw null;
            public System.Collections.Generic.List<ServiceStack.ITypeValidator> TypeValidators { get => throw null; }
            public ServiceStack.FluentValidation.IConditionBuilder Unless(System.Func<T, ServiceStack.FluentValidation.ValidationContext<T>, bool> predicate, System.Action action) => throw null;
            public ServiceStack.FluentValidation.IConditionBuilder Unless(System.Func<T, bool> predicate, System.Action action) => throw null;
            public ServiceStack.FluentValidation.IConditionBuilder UnlessAsync(System.Func<T, System.Threading.CancellationToken, System.Threading.Tasks.Task<bool>> predicate, System.Action action) => throw null;
            public ServiceStack.FluentValidation.IConditionBuilder UnlessAsync(System.Func<T, ServiceStack.FluentValidation.ValidationContext<T>, System.Threading.CancellationToken, System.Threading.Tasks.Task<bool>> predicate, System.Action action) => throw null;
            ServiceStack.FluentValidation.Results.ValidationResult ServiceStack.FluentValidation.IValidator.Validate(ServiceStack.FluentValidation.IValidationContext context) => throw null;
            public ServiceStack.FluentValidation.Results.ValidationResult Validate(T instance) => throw null;
            public virtual ServiceStack.FluentValidation.Results.ValidationResult Validate(ServiceStack.FluentValidation.ValidationContext<T> context) => throw null;
            System.Threading.Tasks.Task<ServiceStack.FluentValidation.Results.ValidationResult> ServiceStack.FluentValidation.IValidator.ValidateAsync(ServiceStack.FluentValidation.IValidationContext context, System.Threading.CancellationToken cancellation) => throw null;
            public System.Threading.Tasks.Task<ServiceStack.FluentValidation.Results.ValidationResult> ValidateAsync(T instance, System.Threading.CancellationToken cancellation = default(System.Threading.CancellationToken)) => throw null;
            public virtual System.Threading.Tasks.Task<ServiceStack.FluentValidation.Results.ValidationResult> ValidateAsync(ServiceStack.FluentValidation.ValidationContext<T> context, System.Threading.CancellationToken cancellation = default(System.Threading.CancellationToken)) => throw null;
            public ServiceStack.FluentValidation.IConditionBuilder When(System.Func<T, ServiceStack.FluentValidation.ValidationContext<T>, bool> predicate, System.Action action) => throw null;
            public ServiceStack.FluentValidation.IConditionBuilder When(System.Func<T, bool> predicate, System.Action action) => throw null;
            public ServiceStack.FluentValidation.IConditionBuilder WhenAsync(System.Func<T, System.Threading.CancellationToken, System.Threading.Tasks.Task<bool>> predicate, System.Action action) => throw null;
            public ServiceStack.FluentValidation.IConditionBuilder WhenAsync(System.Func<T, ServiceStack.FluentValidation.ValidationContext<T>, System.Threading.CancellationToken, System.Threading.Tasks.Task<bool>> predicate, System.Action action) => throw null;
        }

        // Generated from `ServiceStack.FluentValidation.ApplyConditionTo` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public enum ApplyConditionTo
        {
            AllValidators,
            CurrentValidator,
        }

        // Generated from `ServiceStack.FluentValidation.AssemblyScanner` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class AssemblyScanner : System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.AssemblyScanner.AssemblyScanResult>, System.Collections.IEnumerable
        {
            // Generated from `ServiceStack.FluentValidation.AssemblyScanner+AssemblyScanResult` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class AssemblyScanResult
            {
                public AssemblyScanResult(System.Type interfaceType, System.Type validatorType) => throw null;
                public System.Type InterfaceType { get => throw null; set => throw null; }
                public System.Type ValidatorType { get => throw null; set => throw null; }
            }


            public AssemblyScanner(System.Collections.Generic.IEnumerable<System.Type> types) => throw null;
            public static ServiceStack.FluentValidation.AssemblyScanner FindValidatorsInAssemblies(System.Collections.Generic.IEnumerable<System.Reflection.Assembly> assemblies) => throw null;
            public static ServiceStack.FluentValidation.AssemblyScanner FindValidatorsInAssembly(System.Reflection.Assembly assembly) => throw null;
            public static ServiceStack.FluentValidation.AssemblyScanner FindValidatorsInAssemblyContaining(System.Type type) => throw null;
            public static ServiceStack.FluentValidation.AssemblyScanner FindValidatorsInAssemblyContaining<T>() => throw null;
            public void ForEach(System.Action<ServiceStack.FluentValidation.AssemblyScanner.AssemblyScanResult> action) => throw null;
            public System.Collections.Generic.IEnumerator<ServiceStack.FluentValidation.AssemblyScanner.AssemblyScanResult> GetEnumerator() => throw null;
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;
        }

        // Generated from `ServiceStack.FluentValidation.CascadeMode` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public enum CascadeMode
        {
            Continue,
            Stop,
            StopOnFirstFailure,
        }

        // Generated from `ServiceStack.FluentValidation.DefaultValidator<>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class DefaultValidator<T> : ServiceStack.FluentValidation.AbstractValidator<T>, ServiceStack.FluentValidation.IDefaultValidator
        {
            public DefaultValidator() => throw null;
        }

        // Generated from `ServiceStack.FluentValidation.DefaultValidatorExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class DefaultValidatorExtensions
        {
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> ChildRules<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder, System.Action<ServiceStack.FluentValidation.InlineValidator<TProperty>> action) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, string> CreditCard<T>(this ServiceStack.FluentValidation.IRuleBuilder<T, string> ruleBuilder) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderInitial<T, TProperty> Custom<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder, System.Action<TProperty, ServiceStack.FluentValidation.Validators.CustomContext> action) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderInitial<T, TProperty> CustomAsync<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder, System.Func<TProperty, ServiceStack.FluentValidation.Validators.CustomContext, System.Threading.CancellationToken, System.Threading.Tasks.Task> action) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, string> EmailAddress<T>(this ServiceStack.FluentValidation.IRuleBuilder<T, string> ruleBuilder, ServiceStack.FluentValidation.Validators.EmailValidationMode mode = default(ServiceStack.FluentValidation.Validators.EmailValidationMode)) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> Empty<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> Equal<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder, System.Linq.Expressions.Expression<System.Func<T, TProperty>> expression, System.Collections.IEqualityComparer comparer = default(System.Collections.IEqualityComparer)) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> Equal<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder, TProperty toCompare, System.Collections.IEqualityComparer comparer = default(System.Collections.IEqualityComparer)) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> ExclusiveBetween<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder, TProperty from, TProperty to) where TProperty : System.IComparable, System.IComparable<TProperty> => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty?> ExclusiveBetween<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty?> ruleBuilder, TProperty from, TProperty to) where TProperty : struct, System.IComparable, System.IComparable<TProperty> => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, System.Collections.Generic.IEnumerable<TElement>> ForEach<T, TElement>(this ServiceStack.FluentValidation.IRuleBuilder<T, System.Collections.Generic.IEnumerable<TElement>> ruleBuilder, System.Action<ServiceStack.FluentValidation.IRuleBuilderInitialCollection<System.Collections.Generic.IEnumerable<TElement>, TElement>> action) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> GreaterThan<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder, System.Linq.Expressions.Expression<System.Func<T, TProperty>> expression) where TProperty : System.IComparable, System.IComparable<TProperty> => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> GreaterThan<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder, System.Linq.Expressions.Expression<System.Func<T, TProperty?>> expression) where TProperty : struct, System.IComparable, System.IComparable<TProperty> => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> GreaterThan<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder, TProperty valueToCompare) where TProperty : System.IComparable, System.IComparable<TProperty> => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty?> GreaterThan<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty?> ruleBuilder, System.Linq.Expressions.Expression<System.Func<T, TProperty>> expression) where TProperty : struct, System.IComparable, System.IComparable<TProperty> => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty?> GreaterThan<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty?> ruleBuilder, System.Linq.Expressions.Expression<System.Func<T, TProperty?>> expression) where TProperty : struct, System.IComparable, System.IComparable<TProperty> => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty?> GreaterThan<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty?> ruleBuilder, TProperty valueToCompare) where TProperty : struct, System.IComparable, System.IComparable<TProperty> => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> GreaterThanOrEqualTo<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder, System.Linq.Expressions.Expression<System.Func<T, TProperty>> valueToCompare) where TProperty : System.IComparable, System.IComparable<TProperty> => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> GreaterThanOrEqualTo<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder, System.Linq.Expressions.Expression<System.Func<T, TProperty?>> valueToCompare) where TProperty : struct, System.IComparable, System.IComparable<TProperty> => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> GreaterThanOrEqualTo<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder, TProperty valueToCompare) where TProperty : System.IComparable, System.IComparable<TProperty> => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty?> GreaterThanOrEqualTo<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty?> ruleBuilder, System.Linq.Expressions.Expression<System.Func<T, TProperty>> valueToCompare) where TProperty : struct, System.IComparable, System.IComparable<TProperty> => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty?> GreaterThanOrEqualTo<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty?> ruleBuilder, System.Linq.Expressions.Expression<System.Func<T, TProperty?>> valueToCompare) where TProperty : struct, System.IComparable, System.IComparable<TProperty> => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty?> GreaterThanOrEqualTo<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty?> ruleBuilder, TProperty valueToCompare) where TProperty : struct, System.IComparable, System.IComparable<TProperty> => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> InclusiveBetween<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder, TProperty from, TProperty to) where TProperty : System.IComparable, System.IComparable<TProperty> => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty?> InclusiveBetween<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty?> ruleBuilder, TProperty from, TProperty to) where TProperty : struct, System.IComparable, System.IComparable<TProperty> => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, string> IsEnumName<T>(this ServiceStack.FluentValidation.IRuleBuilder<T, string> ruleBuilder, System.Type enumType, bool caseSensitive = default(bool)) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> IsInEnum<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, string> Length<T>(this ServiceStack.FluentValidation.IRuleBuilder<T, string> ruleBuilder, System.Func<T, int> exactLength) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, string> Length<T>(this ServiceStack.FluentValidation.IRuleBuilder<T, string> ruleBuilder, System.Func<T, int> min, System.Func<T, int> max) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, string> Length<T>(this ServiceStack.FluentValidation.IRuleBuilder<T, string> ruleBuilder, int exactLength) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, string> Length<T>(this ServiceStack.FluentValidation.IRuleBuilder<T, string> ruleBuilder, int min, int max) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> LessThan<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder, System.Linq.Expressions.Expression<System.Func<T, TProperty>> expression) where TProperty : System.IComparable, System.IComparable<TProperty> => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> LessThan<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder, System.Linq.Expressions.Expression<System.Func<T, TProperty?>> expression) where TProperty : struct, System.IComparable, System.IComparable<TProperty> => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> LessThan<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder, TProperty valueToCompare) where TProperty : System.IComparable, System.IComparable<TProperty> => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty?> LessThan<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty?> ruleBuilder, System.Linq.Expressions.Expression<System.Func<T, TProperty>> expression) where TProperty : struct, System.IComparable, System.IComparable<TProperty> => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty?> LessThan<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty?> ruleBuilder, System.Linq.Expressions.Expression<System.Func<T, TProperty?>> expression) where TProperty : struct, System.IComparable, System.IComparable<TProperty> => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty?> LessThan<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty?> ruleBuilder, TProperty valueToCompare) where TProperty : struct, System.IComparable, System.IComparable<TProperty> => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> LessThanOrEqualTo<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder, System.Linq.Expressions.Expression<System.Func<T, TProperty>> expression) where TProperty : System.IComparable, System.IComparable<TProperty> => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> LessThanOrEqualTo<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder, System.Linq.Expressions.Expression<System.Func<T, TProperty?>> expression) where TProperty : struct, System.IComparable, System.IComparable<TProperty> => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> LessThanOrEqualTo<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder, TProperty valueToCompare) where TProperty : System.IComparable, System.IComparable<TProperty> => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty?> LessThanOrEqualTo<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty?> ruleBuilder, System.Linq.Expressions.Expression<System.Func<T, TProperty>> expression) where TProperty : struct, System.IComparable, System.IComparable<TProperty> => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty?> LessThanOrEqualTo<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty?> ruleBuilder, System.Linq.Expressions.Expression<System.Func<T, TProperty?>> expression) where TProperty : struct, System.IComparable, System.IComparable<TProperty> => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty?> LessThanOrEqualTo<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty?> ruleBuilder, TProperty valueToCompare) where TProperty : struct, System.IComparable, System.IComparable<TProperty> => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, string> Matches<T>(this ServiceStack.FluentValidation.IRuleBuilder<T, string> ruleBuilder, System.Func<T, System.Text.RegularExpressions.Regex> regex) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, string> Matches<T>(this ServiceStack.FluentValidation.IRuleBuilder<T, string> ruleBuilder, System.Func<T, string> expression) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, string> Matches<T>(this ServiceStack.FluentValidation.IRuleBuilder<T, string> ruleBuilder, System.Func<T, string> expression, System.Text.RegularExpressions.RegexOptions options) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, string> Matches<T>(this ServiceStack.FluentValidation.IRuleBuilder<T, string> ruleBuilder, System.Text.RegularExpressions.Regex regex) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, string> Matches<T>(this ServiceStack.FluentValidation.IRuleBuilder<T, string> ruleBuilder, string expression) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, string> Matches<T>(this ServiceStack.FluentValidation.IRuleBuilder<T, string> ruleBuilder, string expression, System.Text.RegularExpressions.RegexOptions options) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, string> MaximumLength<T>(this ServiceStack.FluentValidation.IRuleBuilder<T, string> ruleBuilder, int maximumLength) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, string> MinimumLength<T>(this ServiceStack.FluentValidation.IRuleBuilder<T, string> ruleBuilder, int minimumLength) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> Must<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder, System.Func<T, TProperty, ServiceStack.FluentValidation.Validators.PropertyValidatorContext, bool> predicate) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> Must<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder, System.Func<T, TProperty, bool> predicate) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> Must<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder, System.Func<TProperty, bool> predicate) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> MustAsync<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder, System.Func<T, TProperty, System.Threading.CancellationToken, System.Threading.Tasks.Task<bool>> predicate) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> MustAsync<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder, System.Func<T, TProperty, ServiceStack.FluentValidation.Validators.PropertyValidatorContext, System.Threading.CancellationToken, System.Threading.Tasks.Task<bool>> predicate) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> MustAsync<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder, System.Func<TProperty, System.Threading.CancellationToken, System.Threading.Tasks.Task<bool>> predicate) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> NotEmpty<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> NotEqual<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder, System.Linq.Expressions.Expression<System.Func<T, TProperty>> expression, System.Collections.IEqualityComparer comparer = default(System.Collections.IEqualityComparer)) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> NotEqual<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder, TProperty toCompare, System.Collections.IEqualityComparer comparer = default(System.Collections.IEqualityComparer)) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> NotNull<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> Null<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, System.Decimal> ScalePrecision<T>(this ServiceStack.FluentValidation.IRuleBuilder<T, System.Decimal> ruleBuilder, int scale, int precision, bool ignoreTrailingZeros = default(bool)) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, System.Decimal?> ScalePrecision<T>(this ServiceStack.FluentValidation.IRuleBuilder<T, System.Decimal?> ruleBuilder, int scale, int precision, bool ignoreTrailingZeros = default(bool)) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> SetInheritanceValidator<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilder<T, TProperty> ruleBuilder, System.Action<ServiceStack.FluentValidation.Validators.PolymorphicValidator<T, TProperty>> validatorConfiguration) => throw null;
            public static ServiceStack.FluentValidation.Results.ValidationResult Validate<T>(this ServiceStack.FluentValidation.IValidator<T> validator, T instance, System.Action<ServiceStack.FluentValidation.Internal.ValidationStrategy<T>> options) => throw null;
            public static ServiceStack.FluentValidation.Results.ValidationResult Validate<T>(this ServiceStack.FluentValidation.IValidator<T> validator, T instance, ServiceStack.FluentValidation.Internal.IValidatorSelector selector = default(ServiceStack.FluentValidation.Internal.IValidatorSelector), string ruleSet = default(string)) => throw null;
            public static ServiceStack.FluentValidation.Results.ValidationResult Validate<T>(this ServiceStack.FluentValidation.IValidator<T> validator, T instance, params System.Linq.Expressions.Expression<System.Func<T, object>>[] propertyExpressions) => throw null;
            public static ServiceStack.FluentValidation.Results.ValidationResult Validate<T>(this ServiceStack.FluentValidation.IValidator<T> validator, T instance, params string[] properties) => throw null;
            public static void ValidateAndThrow<T>(this ServiceStack.FluentValidation.IValidator<T> validator, T instance) => throw null;
            public static void ValidateAndThrow<T>(this ServiceStack.FluentValidation.IValidator<T> validator, T instance, string ruleSet) => throw null;
            public static System.Threading.Tasks.Task ValidateAndThrowAsync<T>(this ServiceStack.FluentValidation.IValidator<T> validator, T instance, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) => throw null;
            public static System.Threading.Tasks.Task ValidateAndThrowAsync<T>(this ServiceStack.FluentValidation.IValidator<T> validator, T instance, string ruleSet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) => throw null;
            public static System.Threading.Tasks.Task<ServiceStack.FluentValidation.Results.ValidationResult> ValidateAsync<T>(this ServiceStack.FluentValidation.IValidator<T> validator, T instance, System.Action<ServiceStack.FluentValidation.Internal.ValidationStrategy<T>> options, System.Threading.CancellationToken cancellation = default(System.Threading.CancellationToken)) => throw null;
            public static System.Threading.Tasks.Task<ServiceStack.FluentValidation.Results.ValidationResult> ValidateAsync<T>(this ServiceStack.FluentValidation.IValidator<T> validator, T instance, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), ServiceStack.FluentValidation.Internal.IValidatorSelector selector = default(ServiceStack.FluentValidation.Internal.IValidatorSelector), string ruleSet = default(string)) => throw null;
            public static System.Threading.Tasks.Task<ServiceStack.FluentValidation.Results.ValidationResult> ValidateAsync<T>(this ServiceStack.FluentValidation.IValidator<T> validator, T instance, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), params System.Linq.Expressions.Expression<System.Func<T, object>>[] propertyExpressions) => throw null;
            public static System.Threading.Tasks.Task<ServiceStack.FluentValidation.Results.ValidationResult> ValidateAsync<T>(this ServiceStack.FluentValidation.IValidator<T> validator, T instance, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), params string[] properties) => throw null;
        }

        // Generated from `ServiceStack.FluentValidation.DefaultValidatorExtensionsServiceStack` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class DefaultValidatorExtensionsServiceStack
        {
            public static void ValidateAndThrow<T>(this ServiceStack.FluentValidation.IValidator<T> validator, T instance, ServiceStack.ApplyTo applyTo) => throw null;
            public static System.Threading.Tasks.Task ValidateAndThrowAsync<T>(this ServiceStack.FluentValidation.IValidator<T> validator, T instance, ServiceStack.ApplyTo applyTo, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        }

        // Generated from `ServiceStack.FluentValidation.DefaultValidatorOptions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class DefaultValidatorOptions
        {
            public static ServiceStack.FluentValidation.IRuleBuilderInitial<T, TProperty> Cascade<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilderInitial<T, TProperty> ruleBuilder, ServiceStack.FluentValidation.CascadeMode cascadeMode) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderInitialCollection<T, TProperty> Cascade<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilderInitialCollection<T, TProperty> ruleBuilder, ServiceStack.FluentValidation.CascadeMode cascadeMode) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> DependentRules<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> rule, System.Action action) => throw null;
            public static string GetStringForValidator<T>(this ServiceStack.FluentValidation.Resources.ILanguageManager languageManager) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> OnAnyFailure<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> rule, System.Action<T, System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure>> onFailure) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> OnAnyFailure<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> rule, System.Action<T> onFailure) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> OnFailure<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> rule, System.Action<T, ServiceStack.FluentValidation.Validators.PropertyValidatorContext, string> onFailure) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> OnFailure<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> rule, System.Action<T, ServiceStack.FluentValidation.Validators.PropertyValidatorContext> onFailure) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> OnFailure<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> rule, System.Action<T> onFailure) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderInitialCollection<T, TCollectionElement> OverrideIndexer<T, TCollectionElement>(this ServiceStack.FluentValidation.IRuleBuilderInitialCollection<T, TCollectionElement> rule, System.Func<T, System.Collections.Generic.IEnumerable<TCollectionElement>, TCollectionElement, int, string> callback) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> OverridePropertyName<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> rule, System.Linq.Expressions.Expression<System.Func<T, object>> expr) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> OverridePropertyName<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> rule, string propertyName) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> Unless<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> rule, System.Func<T, ServiceStack.FluentValidation.ValidationContext<T>, bool> predicate, ServiceStack.FluentValidation.ApplyConditionTo applyConditionTo = default(ServiceStack.FluentValidation.ApplyConditionTo)) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> Unless<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> rule, System.Func<T, bool> predicate, ServiceStack.FluentValidation.ApplyConditionTo applyConditionTo = default(ServiceStack.FluentValidation.ApplyConditionTo)) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> UnlessAsync<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> rule, System.Func<T, System.Threading.CancellationToken, System.Threading.Tasks.Task<bool>> predicate, ServiceStack.FluentValidation.ApplyConditionTo applyConditionTo = default(ServiceStack.FluentValidation.ApplyConditionTo)) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> UnlessAsync<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> rule, System.Func<T, ServiceStack.FluentValidation.ValidationContext<T>, System.Threading.CancellationToken, System.Threading.Tasks.Task<bool>> predicate, ServiceStack.FluentValidation.ApplyConditionTo applyConditionTo = default(ServiceStack.FluentValidation.ApplyConditionTo)) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> When<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> rule, System.Func<T, ServiceStack.FluentValidation.ValidationContext<T>, bool> predicate, ServiceStack.FluentValidation.ApplyConditionTo applyConditionTo = default(ServiceStack.FluentValidation.ApplyConditionTo)) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> When<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> rule, System.Func<T, bool> predicate, ServiceStack.FluentValidation.ApplyConditionTo applyConditionTo = default(ServiceStack.FluentValidation.ApplyConditionTo)) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> WhenAsync<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> rule, System.Func<T, System.Threading.CancellationToken, System.Threading.Tasks.Task<bool>> predicate, ServiceStack.FluentValidation.ApplyConditionTo applyConditionTo = default(ServiceStack.FluentValidation.ApplyConditionTo)) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> WhenAsync<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> rule, System.Func<T, ServiceStack.FluentValidation.ValidationContext<T>, System.Threading.CancellationToken, System.Threading.Tasks.Task<bool>> predicate, ServiceStack.FluentValidation.ApplyConditionTo applyConditionTo = default(ServiceStack.FluentValidation.ApplyConditionTo)) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderInitialCollection<T, TCollectionElement> Where<T, TCollectionElement>(this ServiceStack.FluentValidation.IRuleBuilderInitialCollection<T, TCollectionElement> rule, System.Func<TCollectionElement, bool> predicate) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> WithErrorCode<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> rule, string errorCode) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> WithMessage<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> rule, System.Func<T, TProperty, string> messageProvider) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> WithMessage<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> rule, System.Func<T, string> messageProvider) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> WithMessage<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> rule, string errorMessage) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> WithName<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> rule, System.Func<T, string> nameProvider) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> WithName<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> rule, string overridePropertyName) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> WithSeverity<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> rule, System.Func<T, ServiceStack.FluentValidation.Severity> severityProvider) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> WithSeverity<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> rule, System.Func<T, TProperty, ServiceStack.FluentValidation.Severity> severityProvider) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> WithSeverity<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> rule, ServiceStack.FluentValidation.Severity severity) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> WithState<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> rule, System.Func<T, TProperty, object> stateProvider) => throw null;
            public static ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> WithState<T, TProperty>(this ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> rule, System.Func<T, object> stateProvider) => throw null;
        }

        // Generated from `ServiceStack.FluentValidation.ICommonContext` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface ICommonContext
        {
            object InstanceToValidate { get; }
            ServiceStack.FluentValidation.ICommonContext ParentContext { get; }
            object PropertyValue { get; }
        }

        // Generated from `ServiceStack.FluentValidation.IConditionBuilder` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IConditionBuilder
        {
            void Otherwise(System.Action action);
        }

        // Generated from `ServiceStack.FluentValidation.IDefaultValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IDefaultValidator
        {
        }

        // Generated from `ServiceStack.FluentValidation.IParameterValidatorFactory` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IParameterValidatorFactory
        {
            ServiceStack.FluentValidation.IValidator GetValidator(System.Reflection.ParameterInfo parameterInfo);
        }

        // Generated from `ServiceStack.FluentValidation.IRuleBuilder<,>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IRuleBuilder<T, TProperty>
        {
            ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> SetValidator(ServiceStack.FluentValidation.Validators.IPropertyValidator validator);
            ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> SetValidator(ServiceStack.FluentValidation.IValidator<TProperty> validator, params string[] ruleSets);
            ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> SetValidator<TValidator>(System.Func<T, TProperty, TValidator> validatorProvider, params string[] ruleSets) where TValidator : ServiceStack.FluentValidation.IValidator<TProperty>;
            ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> SetValidator<TValidator>(System.Func<T, TValidator> validatorProvider, params string[] ruleSets) where TValidator : ServiceStack.FluentValidation.IValidator<TProperty>;
        }

        // Generated from `ServiceStack.FluentValidation.IRuleBuilderInitial<,>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IRuleBuilderInitial<T, TProperty> : ServiceStack.FluentValidation.IRuleBuilder<T, TProperty>, ServiceStack.FluentValidation.Internal.IConfigurable<ServiceStack.FluentValidation.Internal.PropertyRule, ServiceStack.FluentValidation.IRuleBuilderInitial<T, TProperty>>
        {
            ServiceStack.FluentValidation.IRuleBuilderInitial<T, TNew> Transform<TNew>(System.Func<TProperty, TNew> transformationFunc);
        }

        // Generated from `ServiceStack.FluentValidation.IRuleBuilderInitialCollection<,>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IRuleBuilderInitialCollection<T, TElement> : ServiceStack.FluentValidation.IRuleBuilder<T, TElement>, ServiceStack.FluentValidation.Internal.IConfigurable<ServiceStack.FluentValidation.Internal.CollectionPropertyRule<T, TElement>, ServiceStack.FluentValidation.IRuleBuilderInitialCollection<T, TElement>>
        {
            ServiceStack.FluentValidation.IRuleBuilderInitial<T, TNew> Transform<TNew>(System.Func<TElement, TNew> transformationFunc);
        }

        // Generated from `ServiceStack.FluentValidation.IRuleBuilderOptions<,>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IRuleBuilderOptions<T, TProperty> : ServiceStack.FluentValidation.IRuleBuilder<T, TProperty>, ServiceStack.FluentValidation.Internal.IConfigurable<ServiceStack.FluentValidation.Internal.PropertyRule, ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty>>
        {
        }

        // Generated from `ServiceStack.FluentValidation.IServiceStackValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IServiceStackValidator
        {
            void RemovePropertyRules(System.Func<ServiceStack.FluentValidation.Internal.PropertyRule, bool> where);
        }

        // Generated from `ServiceStack.FluentValidation.IValidationContext` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IValidationContext : ServiceStack.FluentValidation.ICommonContext
        {
            bool IsChildCollectionContext { get; }
            bool IsChildContext { get; }
            ServiceStack.FluentValidation.Internal.PropertyChain PropertyChain { get; }
            ServiceStack.Web.IRequest Request { get; set; }
            System.Collections.Generic.IDictionary<string, object> RootContextData { get; }
            ServiceStack.FluentValidation.Internal.IValidatorSelector Selector { get; }
        }

        // Generated from `ServiceStack.FluentValidation.IValidationRule` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IValidationRule
        {
            void ApplyAsyncCondition(System.Func<ServiceStack.FluentValidation.Validators.PropertyValidatorContext, System.Threading.CancellationToken, System.Threading.Tasks.Task<bool>> predicate, ServiceStack.FluentValidation.ApplyConditionTo applyConditionTo = default(ServiceStack.FluentValidation.ApplyConditionTo));
            void ApplyCondition(System.Func<ServiceStack.FluentValidation.Validators.PropertyValidatorContext, bool> predicate, ServiceStack.FluentValidation.ApplyConditionTo applyConditionTo = default(ServiceStack.FluentValidation.ApplyConditionTo));
            void ApplySharedAsyncCondition(System.Func<ServiceStack.FluentValidation.IValidationContext, System.Threading.CancellationToken, System.Threading.Tasks.Task<bool>> condition);
            void ApplySharedCondition(System.Func<ServiceStack.FluentValidation.IValidationContext, bool> condition);
            string[] RuleSets { get; set; }
            System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> Validate(ServiceStack.FluentValidation.IValidationContext context);
            System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure>> ValidateAsync(ServiceStack.FluentValidation.IValidationContext context, System.Threading.CancellationToken cancellation);
            System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Validators.IPropertyValidator> Validators { get; }
        }

        // Generated from `ServiceStack.FluentValidation.IValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IValidator
        {
            bool CanValidateInstancesOfType(System.Type type);
            ServiceStack.FluentValidation.IValidatorDescriptor CreateDescriptor();
            ServiceStack.FluentValidation.Results.ValidationResult Validate(ServiceStack.FluentValidation.IValidationContext context);
            System.Threading.Tasks.Task<ServiceStack.FluentValidation.Results.ValidationResult> ValidateAsync(ServiceStack.FluentValidation.IValidationContext context, System.Threading.CancellationToken cancellation = default(System.Threading.CancellationToken));
        }

        // Generated from `ServiceStack.FluentValidation.IValidator<>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IValidator<T> : ServiceStack.FluentValidation.IValidator
        {
            ServiceStack.FluentValidation.CascadeMode CascadeMode { get; set; }
            ServiceStack.FluentValidation.Results.ValidationResult Validate(T instance);
            System.Threading.Tasks.Task<ServiceStack.FluentValidation.Results.ValidationResult> ValidateAsync(T instance, System.Threading.CancellationToken cancellation = default(System.Threading.CancellationToken));
        }

        // Generated from `ServiceStack.FluentValidation.IValidatorDescriptor` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IValidatorDescriptor
        {
            System.Linq.ILookup<string, ServiceStack.FluentValidation.Validators.IPropertyValidator> GetMembersWithValidators();
            string GetName(string property);
            System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.IValidationRule> GetRulesForMember(string name);
            System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Validators.IPropertyValidator> GetValidatorsForMember(string name);
        }

        // Generated from `ServiceStack.FluentValidation.IValidatorFactory` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IValidatorFactory
        {
            ServiceStack.FluentValidation.IValidator GetValidator(System.Type type);
            ServiceStack.FluentValidation.IValidator<T> GetValidator<T>();
        }

        // Generated from `ServiceStack.FluentValidation.InlineValidator<>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class InlineValidator<T> : ServiceStack.FluentValidation.AbstractValidator<T>
        {
            public void Add<TProperty>(System.Func<ServiceStack.FluentValidation.InlineValidator<T>, ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty>> ruleCreator) => throw null;
            public InlineValidator() => throw null;
        }

        // Generated from `ServiceStack.FluentValidation.PropertyValidatorOptions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class PropertyValidatorOptions
        {
            public void ApplyAsyncCondition(System.Func<ServiceStack.FluentValidation.Validators.PropertyValidatorContext, System.Threading.CancellationToken, System.Threading.Tasks.Task<bool>> condition) => throw null;
            public void ApplyCondition(System.Func<ServiceStack.FluentValidation.Validators.PropertyValidatorContext, bool> condition) => throw null;
            public System.Func<ServiceStack.FluentValidation.Validators.PropertyValidatorContext, System.Threading.CancellationToken, System.Threading.Tasks.Task<bool>> AsyncCondition { get => throw null; set => throw null; }
            public System.Func<ServiceStack.FluentValidation.Validators.PropertyValidatorContext, bool> Condition { get => throw null; set => throw null; }
            public System.Func<ServiceStack.FluentValidation.Validators.PropertyValidatorContext, object> CustomStateProvider { get => throw null; set => throw null; }
            public string ErrorCode { get => throw null; set => throw null; }
            public ServiceStack.FluentValidation.Resources.IStringSource ErrorCodeSource { get => throw null; set => throw null; }
            public ServiceStack.FluentValidation.Resources.IStringSource ErrorMessageSource { get => throw null; set => throw null; }
            protected virtual string GetDefaultMessageTemplate() => throw null;
            public string GetErrorMessageTemplate(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
            public bool HasAsyncCondition { get => throw null; }
            public bool HasCondition { get => throw null; }
            public PropertyValidatorOptions() => throw null;
            public void SetErrorMessage(System.Func<ServiceStack.FluentValidation.Validators.PropertyValidatorContext, string> errorFactory) => throw null;
            public void SetErrorMessage(string errorMessage) => throw null;
            public System.Func<ServiceStack.FluentValidation.Validators.PropertyValidatorContext, ServiceStack.FluentValidation.Severity> SeverityProvider { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.FluentValidation.Severity` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public enum Severity
        {
            Error,
            Info,
            Warning,
        }

        // Generated from `ServiceStack.FluentValidation.ValidationContext<>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class ValidationContext<T> : ServiceStack.FluentValidation.ICommonContext, ServiceStack.FluentValidation.IValidationContext
        {
            public ServiceStack.FluentValidation.ValidationContext<TNew> CloneForChildCollectionValidator<TNew>(TNew instanceToValidate, bool preserveParentContext = default(bool)) => throw null;
            public ServiceStack.FluentValidation.ValidationContext<TChild> CloneForChildValidator<TChild>(TChild instanceToValidate, bool preserveParentContext = default(bool), ServiceStack.FluentValidation.Internal.IValidatorSelector selector = default(ServiceStack.FluentValidation.Internal.IValidatorSelector)) => throw null;
            public static ServiceStack.FluentValidation.ValidationContext<T> CreateWithOptions(T instanceToValidate, System.Action<ServiceStack.FluentValidation.Internal.ValidationStrategy<T>> options) => throw null;
            public static ServiceStack.FluentValidation.ValidationContext<T> GetFromNonGenericContext(ServiceStack.FluentValidation.IValidationContext context) => throw null;
            public T InstanceToValidate { get => throw null; set => throw null; }
            object ServiceStack.FluentValidation.ICommonContext.InstanceToValidate { get => throw null; }
            public virtual bool IsChildCollectionContext { get => throw null; set => throw null; }
            public virtual bool IsChildContext { get => throw null; set => throw null; }
            ServiceStack.FluentValidation.ICommonContext ServiceStack.FluentValidation.ICommonContext.ParentContext { get => throw null; }
            public ServiceStack.FluentValidation.Internal.PropertyChain PropertyChain { get => throw null; set => throw null; }
            object ServiceStack.FluentValidation.ICommonContext.PropertyValue { get => throw null; }
            public ServiceStack.Web.IRequest Request { get => throw null; set => throw null; }
            public System.Collections.Generic.IDictionary<string, object> RootContextData { get => throw null; set => throw null; }
            public ServiceStack.FluentValidation.Internal.IValidatorSelector Selector { get => throw null; set => throw null; }
            public bool ThrowOnFailures { get => throw null; set => throw null; }
            public ValidationContext(T instanceToValidate) => throw null;
            public ValidationContext(T instanceToValidate, ServiceStack.FluentValidation.Internal.PropertyChain propertyChain, ServiceStack.FluentValidation.Internal.IValidatorSelector validatorSelector) => throw null;
        }

        // Generated from `ServiceStack.FluentValidation.ValidationErrors` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class ValidationErrors
        {
            public const string CreditCard = default;
            public const string Email = default;
            public const string Empty = default;
            public const string Enum = default;
            public const string Equal = default;
            public const string ExclusiveBetween = default;
            public const string GreaterThan = default;
            public const string GreaterThanOrEqual = default;
            public const string InclusiveBetween = default;
            public const string Length = default;
            public const string LessThan = default;
            public const string LessThanOrEqual = default;
            public const string NotEmpty = default;
            public const string NotEqual = default;
            public const string NotNull = default;
            public const string Null = default;
            public const string Predicate = default;
            public const string RegularExpression = default;
            public const string ScalePrecision = default;
        }

        // Generated from `ServiceStack.FluentValidation.ValidationException` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class ValidationException : System.Exception, ServiceStack.Model.IResponseStatusConvertible
        {
            public System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> Errors { get => throw null; set => throw null; }
            public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) => throw null;
            public ServiceStack.ResponseStatus ToResponseStatus() => throw null;
            public ValidationException(System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> errors) => throw null;
            public ValidationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) => throw null;
            public ValidationException(string message) => throw null;
            public ValidationException(string message, System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> errors) => throw null;
            public ValidationException(string message, System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> errors, bool appendDefaultMessage) => throw null;
        }

        // Generated from `ServiceStack.FluentValidation.ValidatorConfiguration` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class ValidatorConfiguration
        {
            public ServiceStack.FluentValidation.CascadeMode CascadeMode { get => throw null; set => throw null; }
            public bool DisableAccessorCache { get => throw null; set => throw null; }
            public System.Func<System.Type, System.Reflection.MemberInfo, System.Linq.Expressions.LambdaExpression, string> DisplayNameResolver { get => throw null; set => throw null; }
            public System.Func<ServiceStack.FluentValidation.Validators.PropertyValidator, string> ErrorCodeResolver { get => throw null; set => throw null; }
            public ServiceStack.FluentValidation.Resources.ILanguageManager LanguageManager { get => throw null; set => throw null; }
            public System.Func<ServiceStack.FluentValidation.Internal.MessageFormatter> MessageFormatterFactory { get => throw null; set => throw null; }
            public string PropertyChainSeparator { get => throw null; set => throw null; }
            public System.Func<System.Type, System.Reflection.MemberInfo, System.Linq.Expressions.LambdaExpression, string> PropertyNameResolver { get => throw null; set => throw null; }
            public ValidatorConfiguration() => throw null;
            public ServiceStack.FluentValidation.ValidatorSelectorOptions ValidatorSelectors { get => throw null; }
        }

        // Generated from `ServiceStack.FluentValidation.ValidatorDescriptor<>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class ValidatorDescriptor<T> : ServiceStack.FluentValidation.IValidatorDescriptor
        {
            // Generated from `ServiceStack.FluentValidation.ValidatorDescriptor<>+RulesetMetadata` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class RulesetMetadata
            {
                public string Name { get => throw null; set => throw null; }
                public System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Internal.PropertyRule> Rules { get => throw null; set => throw null; }
                public RulesetMetadata(string name, System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Internal.PropertyRule> rules) => throw null;
            }


            public virtual System.Linq.ILookup<string, ServiceStack.FluentValidation.Validators.IPropertyValidator> GetMembersWithValidators() => throw null;
            public virtual string GetName(System.Linq.Expressions.Expression<System.Func<T, object>> propertyExpression) => throw null;
            public virtual string GetName(string property) => throw null;
            public System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.ValidatorDescriptor<T>.RulesetMetadata> GetRulesByRuleset() => throw null;
            public System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.IValidationRule> GetRulesForMember(string name) => throw null;
            public System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Validators.IPropertyValidator> GetValidatorsForMember(string name) => throw null;
            public System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Validators.IPropertyValidator> GetValidatorsForMember<TValue>(ServiceStack.FluentValidation.Internal.MemberAccessor<T, TValue> accessor) => throw null;
            protected System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.IValidationRule> Rules { get => throw null; set => throw null; }
            public ValidatorDescriptor(System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.IValidationRule> ruleBuilders) => throw null;
        }

        // Generated from `ServiceStack.FluentValidation.ValidatorFactoryBase` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public abstract class ValidatorFactoryBase : ServiceStack.FluentValidation.IValidatorFactory
        {
            public abstract ServiceStack.FluentValidation.IValidator CreateInstance(System.Type validatorType);
            public ServiceStack.FluentValidation.IValidator GetValidator(System.Type type) => throw null;
            public ServiceStack.FluentValidation.IValidator<T> GetValidator<T>() => throw null;
            protected ValidatorFactoryBase() => throw null;
        }

        // Generated from `ServiceStack.FluentValidation.ValidatorOptions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class ValidatorOptions
        {
            public static ServiceStack.FluentValidation.CascadeMode CascadeMode { get => throw null; set => throw null; }
            public static bool DisableAccessorCache { get => throw null; set => throw null; }
            public static System.Func<System.Type, System.Reflection.MemberInfo, System.Linq.Expressions.LambdaExpression, string> DisplayNameResolver { get => throw null; set => throw null; }
            public static System.Func<ServiceStack.FluentValidation.Validators.PropertyValidator, string> ErrorCodeResolver { get => throw null; set => throw null; }
            public static ServiceStack.FluentValidation.ValidatorConfiguration Global { get => throw null; }
            public static ServiceStack.FluentValidation.Resources.ILanguageManager LanguageManager { get => throw null; set => throw null; }
            public static System.Func<ServiceStack.FluentValidation.Internal.MessageFormatter> MessageFormatterFactory { get => throw null; set => throw null; }
            public static string PropertyChainSeparator { get => throw null; set => throw null; }
            public static System.Func<System.Type, System.Reflection.MemberInfo, System.Linq.Expressions.LambdaExpression, string> PropertyNameResolver { get => throw null; set => throw null; }
            public static ServiceStack.FluentValidation.ValidatorSelectorOptions ValidatorSelectors { get => throw null; }
        }

        // Generated from `ServiceStack.FluentValidation.ValidatorSelectorOptions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class ValidatorSelectorOptions
        {
            public System.Func<ServiceStack.FluentValidation.Internal.IValidatorSelector> DefaultValidatorSelectorFactory { get => throw null; set => throw null; }
            public System.Func<string[], ServiceStack.FluentValidation.Internal.IValidatorSelector> MemberNameValidatorSelectorFactory { get => throw null; set => throw null; }
            public System.Func<string[], ServiceStack.FluentValidation.Internal.IValidatorSelector> RulesetValidatorSelectorFactory { get => throw null; set => throw null; }
            public ValidatorSelectorOptions() => throw null;
        }

        namespace Attributes
        {
            // Generated from `ServiceStack.FluentValidation.Attributes.AttributedValidatorFactory` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class AttributedValidatorFactory : ServiceStack.FluentValidation.IParameterValidatorFactory, ServiceStack.FluentValidation.IValidatorFactory
            {
                public AttributedValidatorFactory() => throw null;
                public AttributedValidatorFactory(System.Func<System.Type, ServiceStack.FluentValidation.IValidator> instanceFactory) => throw null;
                public virtual ServiceStack.FluentValidation.IValidator GetValidator(System.Reflection.ParameterInfo parameterInfo) => throw null;
                public virtual ServiceStack.FluentValidation.IValidator GetValidator(System.Type type) => throw null;
                public ServiceStack.FluentValidation.IValidator<T> GetValidator<T>() => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Attributes.ValidatorAttribute` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class ValidatorAttribute : System.Attribute
            {
                public ValidatorAttribute(System.Type validatorType) => throw null;
                public System.Type ValidatorType { get => throw null; }
            }

        }
        namespace Internal
        {
            // Generated from `ServiceStack.FluentValidation.Internal.AccessorCache<>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public static class AccessorCache<T>
            {
                public static void Clear() => throw null;
                public static System.Func<T, TProperty> GetCachedAccessor<TProperty>(System.Reflection.MemberInfo member, System.Linq.Expressions.Expression<System.Func<T, TProperty>> expression, bool bypassCache = default(bool)) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Internal.CollectionPropertyRule<,>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class CollectionPropertyRule<T, TElement> : ServiceStack.FluentValidation.Internal.PropertyRule
            {
                public CollectionPropertyRule(System.Reflection.MemberInfo member, System.Func<object, object> propertyFunc, System.Linq.Expressions.LambdaExpression expression, System.Func<ServiceStack.FluentValidation.CascadeMode> cascadeModeThunk, System.Type typeToValidate, System.Type containerType) : base(default(System.Reflection.MemberInfo), default(System.Func<object, object>), default(System.Linq.Expressions.LambdaExpression), default(System.Func<ServiceStack.FluentValidation.CascadeMode>), default(System.Type), default(System.Type)) => throw null;
                public static ServiceStack.FluentValidation.Internal.CollectionPropertyRule<T, TElement> Create(System.Linq.Expressions.Expression<System.Func<T, System.Collections.Generic.IEnumerable<TElement>>> expression, System.Func<ServiceStack.FluentValidation.CascadeMode> cascadeModeThunk) => throw null;
                public System.Func<TElement, bool> Filter { get => throw null; set => throw null; }
                public System.Func<object, System.Collections.Generic.IEnumerable<TElement>, TElement, int, string> IndexBuilder { get => throw null; set => throw null; }
                protected override System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> InvokePropertyValidator(ServiceStack.FluentValidation.IValidationContext context, ServiceStack.FluentValidation.Validators.IPropertyValidator validator, string propertyName) => throw null;
                protected override System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure>> InvokePropertyValidatorAsync(ServiceStack.FluentValidation.IValidationContext context, ServiceStack.FluentValidation.Validators.IPropertyValidator validator, string propertyName, System.Threading.CancellationToken cancellation) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Internal.Comparer` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public static class Comparer
            {
                public static int GetComparisonResult(System.IComparable value, System.IComparable valueToCompare) => throw null;
                public static bool GetEqualsResult(System.IComparable value, System.IComparable valueToCompare) => throw null;
                public static bool TryCompare(System.IComparable value, System.IComparable valueToCompare, out int result) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Internal.DefaultValidatorSelector` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class DefaultValidatorSelector : ServiceStack.FluentValidation.Internal.IValidatorSelector
            {
                public bool CanExecute(ServiceStack.FluentValidation.IValidationRule rule, string propertyPath, ServiceStack.FluentValidation.IValidationContext context) => throw null;
                public DefaultValidatorSelector() => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Internal.Extensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public static class Extensions
            {
                public static System.Func<object, object> CoerceToNonGeneric<T, TProperty>(this System.Func<T, TProperty> func) => throw null;
                public static System.Action<object> CoerceToNonGeneric<T>(this System.Action<T> action) => throw null;
                public static System.Func<object, System.Threading.CancellationToken, System.Threading.Tasks.Task<bool>> CoerceToNonGeneric<T>(this System.Func<T, System.Threading.CancellationToken, System.Threading.Tasks.Task<bool>> func) => throw null;
                public static System.Func<object, System.Text.RegularExpressions.Regex> CoerceToNonGeneric<T>(this System.Func<T, System.Text.RegularExpressions.Regex> func) => throw null;
                public static System.Func<object, System.Threading.Tasks.Task<bool>> CoerceToNonGeneric<T>(this System.Func<T, System.Threading.Tasks.Task<bool>> func) => throw null;
                public static System.Func<object, bool> CoerceToNonGeneric<T>(this System.Func<T, bool> func) => throw null;
                public static System.Func<object, int> CoerceToNonGeneric<T>(this System.Func<T, int> func) => throw null;
                public static System.Func<object, System.Int64> CoerceToNonGeneric<T>(this System.Func<T, System.Int64> func) => throw null;
                public static System.Func<object, string> CoerceToNonGeneric<T>(this System.Func<T, string> func) => throw null;
                public static System.Reflection.MemberInfo GetMember(this System.Linq.Expressions.LambdaExpression expression) => throw null;
                public static System.Reflection.MemberInfo GetMember<T, TProperty>(this System.Linq.Expressions.Expression<System.Func<T, TProperty>> expression) => throw null;
                public static bool IsAsync(this ServiceStack.FluentValidation.IValidationContext ctx) => throw null;
                public static bool IsParameterExpression(this System.Linq.Expressions.LambdaExpression expression) => throw null;
                public static string SplitPascalCase(this string input) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Internal.IConfigurable<,>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public interface IConfigurable<TConfiguration, TNext>
            {
                TNext Configure(System.Action<TConfiguration> configurator);
            }

            // Generated from `ServiceStack.FluentValidation.Internal.IExposesParentValidator<>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            internal interface IExposesParentValidator<T>
            {
            }

            // Generated from `ServiceStack.FluentValidation.Internal.IIncludeRule` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public interface IIncludeRule
            {
            }

            // Generated from `ServiceStack.FluentValidation.Internal.IValidatorSelector` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public interface IValidatorSelector
            {
                bool CanExecute(ServiceStack.FluentValidation.IValidationRule rule, string propertyPath, ServiceStack.FluentValidation.IValidationContext context);
            }

            // Generated from `ServiceStack.FluentValidation.Internal.IncludeRule<>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class IncludeRule<T> : ServiceStack.FluentValidation.Internal.PropertyRule, ServiceStack.FluentValidation.Internal.IIncludeRule
            {
                public static ServiceStack.FluentValidation.Internal.IncludeRule<T> Create(ServiceStack.FluentValidation.IValidator<T> validator, System.Func<ServiceStack.FluentValidation.CascadeMode> cascadeModeThunk) => throw null;
                public static ServiceStack.FluentValidation.Internal.IncludeRule<T> Create<TValidator>(System.Func<T, TValidator> func, System.Func<ServiceStack.FluentValidation.CascadeMode> cascadeModeThunk) where TValidator : ServiceStack.FluentValidation.IValidator<T> => throw null;
                public IncludeRule(System.Func<ServiceStack.FluentValidation.ICommonContext, ServiceStack.FluentValidation.IValidator<T>> func, System.Func<ServiceStack.FluentValidation.CascadeMode> cascadeModeThunk, System.Type typeToValidate, System.Type containerType, System.Type validatorType) : base(default(System.Reflection.MemberInfo), default(System.Func<object, object>), default(System.Linq.Expressions.LambdaExpression), default(System.Func<ServiceStack.FluentValidation.CascadeMode>), default(System.Type), default(System.Type)) => throw null;
                public IncludeRule(ServiceStack.FluentValidation.IValidator<T> validator, System.Func<ServiceStack.FluentValidation.CascadeMode> cascadeModeThunk, System.Type typeToValidate, System.Type containerType) : base(default(System.Reflection.MemberInfo), default(System.Func<object, object>), default(System.Linq.Expressions.LambdaExpression), default(System.Func<ServiceStack.FluentValidation.CascadeMode>), default(System.Type), default(System.Type)) => throw null;
                public override System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> Validate(ServiceStack.FluentValidation.IValidationContext context) => throw null;
                public override System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure>> ValidateAsync(ServiceStack.FluentValidation.IValidationContext context, System.Threading.CancellationToken cancellation) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Internal.MemberAccessor<,>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class MemberAccessor<TObject, TValue>
            {
                protected bool Equals(ServiceStack.FluentValidation.Internal.MemberAccessor<TObject, TValue> other) => throw null;
                public override bool Equals(object obj) => throw null;
                public TValue Get(TObject target) => throw null;
                public override int GetHashCode() => throw null;
                public System.Reflection.MemberInfo Member { get => throw null; set => throw null; }
                public MemberAccessor(System.Linq.Expressions.Expression<System.Func<TObject, TValue>> getExpression, bool writeable) => throw null;
                public void Set(TObject target, TValue value) => throw null;
                public static implicit operator ServiceStack.FluentValidation.Internal.MemberAccessor<TObject, TValue>(System.Linq.Expressions.Expression<System.Func<TObject, TValue>> @this) => throw null;
                public static implicit operator System.Linq.Expressions.Expression<System.Func<TObject, TValue>>(ServiceStack.FluentValidation.Internal.MemberAccessor<TObject, TValue> @this) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Internal.MemberNameValidatorSelector` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class MemberNameValidatorSelector : ServiceStack.FluentValidation.Internal.IValidatorSelector
            {
                public bool CanExecute(ServiceStack.FluentValidation.IValidationRule rule, string propertyPath, ServiceStack.FluentValidation.IValidationContext context) => throw null;
                public static ServiceStack.FluentValidation.Internal.MemberNameValidatorSelector FromExpressions<T>(params System.Linq.Expressions.Expression<System.Func<T, object>>[] propertyExpressions) => throw null;
                public MemberNameValidatorSelector(System.Collections.Generic.IEnumerable<string> memberNames) => throw null;
                public System.Collections.Generic.IEnumerable<string> MemberNames { get => throw null; }
                public static string[] MemberNamesFromExpressions<T>(params System.Linq.Expressions.Expression<System.Func<T, object>>[] propertyExpressions) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Internal.MessageBuilderContext` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class MessageBuilderContext : ServiceStack.FluentValidation.ICommonContext
            {
                public string DisplayName { get => throw null; }
                public ServiceStack.FluentValidation.Resources.IStringSource ErrorSource { get => throw null; }
                public string GetDefaultMessage() => throw null;
                public object InstanceToValidate { get => throw null; }
                public MessageBuilderContext(ServiceStack.FluentValidation.Validators.PropertyValidatorContext innerContext, ServiceStack.FluentValidation.Validators.IPropertyValidator propertyValidator) => throw null;
                public MessageBuilderContext(ServiceStack.FluentValidation.Validators.PropertyValidatorContext innerContext, ServiceStack.FluentValidation.Resources.IStringSource errorSource, ServiceStack.FluentValidation.Validators.IPropertyValidator propertyValidator) => throw null;
                public ServiceStack.FluentValidation.Internal.MessageFormatter MessageFormatter { get => throw null; }
                public ServiceStack.FluentValidation.IValidationContext ParentContext { get => throw null; }
                ServiceStack.FluentValidation.ICommonContext ServiceStack.FluentValidation.ICommonContext.ParentContext { get => throw null; }
                public string PropertyName { get => throw null; }
                public ServiceStack.FluentValidation.Validators.IPropertyValidator PropertyValidator { get => throw null; }
                public object PropertyValue { get => throw null; }
                public ServiceStack.FluentValidation.Internal.PropertyRule Rule { get => throw null; }
                public static implicit operator ServiceStack.FluentValidation.Validators.PropertyValidatorContext(ServiceStack.FluentValidation.Internal.MessageBuilderContext ctx) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Internal.MessageFormatter` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class MessageFormatter
            {
                public object[] AdditionalArguments { get => throw null; }
                public ServiceStack.FluentValidation.Internal.MessageFormatter AppendAdditionalArguments(params object[] additionalArgs) => throw null;
                public ServiceStack.FluentValidation.Internal.MessageFormatter AppendArgument(string name, object value) => throw null;
                public ServiceStack.FluentValidation.Internal.MessageFormatter AppendPropertyName(string name) => throw null;
                public ServiceStack.FluentValidation.Internal.MessageFormatter AppendPropertyValue(object value) => throw null;
                public virtual string BuildMessage(string messageTemplate) => throw null;
                public MessageFormatter() => throw null;
                public System.Collections.Generic.Dictionary<string, object> PlaceholderValues { get => throw null; }
                public const string PropertyName = default;
                public const string PropertyValue = default;
                protected virtual string ReplacePlaceholdersWithValues(string template, System.Collections.Generic.IDictionary<string, object> values) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Internal.PropertyChain` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class PropertyChain
            {
                public void Add(System.Reflection.MemberInfo member) => throw null;
                public void Add(string propertyName) => throw null;
                public void AddIndexer(object indexer, bool surroundWithBrackets = default(bool)) => throw null;
                public string BuildPropertyName(string propertyName) => throw null;
                public int Count { get => throw null; }
                public static ServiceStack.FluentValidation.Internal.PropertyChain FromExpression(System.Linq.Expressions.LambdaExpression expression) => throw null;
                public bool IsChildChainOf(ServiceStack.FluentValidation.Internal.PropertyChain parentChain) => throw null;
                public PropertyChain() => throw null;
                public PropertyChain(System.Collections.Generic.IEnumerable<string> memberNames) => throw null;
                public PropertyChain(ServiceStack.FluentValidation.Internal.PropertyChain parent) => throw null;
                public override string ToString() => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Internal.PropertyRule` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class PropertyRule : ServiceStack.FluentValidation.IValidationRule
            {
                public void AddValidator(ServiceStack.FluentValidation.Validators.IPropertyValidator validator) => throw null;
                public void ApplyAsyncCondition(System.Func<ServiceStack.FluentValidation.Validators.PropertyValidatorContext, System.Threading.CancellationToken, System.Threading.Tasks.Task<bool>> predicate, ServiceStack.FluentValidation.ApplyConditionTo applyConditionTo = default(ServiceStack.FluentValidation.ApplyConditionTo)) => throw null;
                public void ApplyCondition(System.Func<ServiceStack.FluentValidation.Validators.PropertyValidatorContext, bool> predicate, ServiceStack.FluentValidation.ApplyConditionTo applyConditionTo = default(ServiceStack.FluentValidation.ApplyConditionTo)) => throw null;
                public void ApplySharedAsyncCondition(System.Func<ServiceStack.FluentValidation.IValidationContext, System.Threading.CancellationToken, System.Threading.Tasks.Task<bool>> condition) => throw null;
                public void ApplySharedCondition(System.Func<ServiceStack.FluentValidation.IValidationContext, bool> condition) => throw null;
                public System.Func<ServiceStack.FluentValidation.IValidationContext, System.Threading.CancellationToken, System.Threading.Tasks.Task<bool>> AsyncCondition { get => throw null; }
                public ServiceStack.FluentValidation.CascadeMode CascadeMode { get => throw null; set => throw null; }
                public void ClearValidators() => throw null;
                public System.Func<ServiceStack.FluentValidation.IValidationContext, bool> Condition { get => throw null; }
                public static ServiceStack.FluentValidation.Internal.PropertyRule Create<T, TProperty>(System.Linq.Expressions.Expression<System.Func<T, TProperty>> expression) => throw null;
                public static ServiceStack.FluentValidation.Internal.PropertyRule Create<T, TProperty>(System.Linq.Expressions.Expression<System.Func<T, TProperty>> expression, System.Func<ServiceStack.FluentValidation.CascadeMode> cascadeModeThunk, bool bypassCache = default(bool)) => throw null;
                public ServiceStack.FluentValidation.Validators.IPropertyValidator CurrentValidator { get => throw null; }
                public System.Collections.Generic.List<ServiceStack.FluentValidation.IValidationRule> DependentRules { get => throw null; }
                public ServiceStack.FluentValidation.Resources.IStringSource DisplayName { get => throw null; set => throw null; }
                public System.Linq.Expressions.LambdaExpression Expression { get => throw null; }
                public string GetDisplayName() => throw null;
                public string GetDisplayName(ServiceStack.FluentValidation.ICommonContext context) => throw null;
                public bool HasAsyncCondition { get => throw null; }
                public bool HasCondition { get => throw null; }
                protected virtual System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> InvokePropertyValidator(ServiceStack.FluentValidation.IValidationContext context, ServiceStack.FluentValidation.Validators.IPropertyValidator validator, string propertyName) => throw null;
                protected virtual System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure>> InvokePropertyValidatorAsync(ServiceStack.FluentValidation.IValidationContext context, ServiceStack.FluentValidation.Validators.IPropertyValidator validator, string propertyName, System.Threading.CancellationToken cancellation) => throw null;
                public System.Reflection.MemberInfo Member { get => throw null; }
                public System.Func<ServiceStack.FluentValidation.Internal.MessageBuilderContext, string> MessageBuilder { get => throw null; set => throw null; }
                public System.Action<object, System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure>> OnFailure { get => throw null; set => throw null; }
                public System.Func<object, object> PropertyFunc { get => throw null; }
                public string PropertyName { get => throw null; set => throw null; }
                public PropertyRule(System.Reflection.MemberInfo member, System.Func<object, object> propertyFunc, System.Linq.Expressions.LambdaExpression expression, System.Func<ServiceStack.FluentValidation.CascadeMode> cascadeModeThunk, System.Type typeToValidate, System.Type containerType) => throw null;
                public void RemoveValidator(ServiceStack.FluentValidation.Validators.IPropertyValidator original) => throw null;
                public void ReplaceValidator(ServiceStack.FluentValidation.Validators.IPropertyValidator original, ServiceStack.FluentValidation.Validators.IPropertyValidator newValidator) => throw null;
                public string[] RuleSets { get => throw null; set => throw null; }
                public void SetDisplayName(System.Func<ServiceStack.FluentValidation.IValidationContext, string> factory) => throw null;
                public void SetDisplayName(string name) => throw null;
                public System.Func<object, object> Transformer { get => throw null; set => throw null; }
                public System.Type TypeToValidate { get => throw null; }
                public virtual System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> Validate(ServiceStack.FluentValidation.IValidationContext context) => throw null;
                public virtual System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure>> ValidateAsync(ServiceStack.FluentValidation.IValidationContext context, System.Threading.CancellationToken cancellation) => throw null;
                public System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Validators.IPropertyValidator> Validators { get => throw null; }
            }

            // Generated from `ServiceStack.FluentValidation.Internal.RuleBuilder<,>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class RuleBuilder<T, TProperty> : ServiceStack.FluentValidation.IRuleBuilder<T, TProperty>, ServiceStack.FluentValidation.IRuleBuilderInitial<T, TProperty>, ServiceStack.FluentValidation.IRuleBuilderInitialCollection<T, TProperty>, ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty>, ServiceStack.FluentValidation.Internal.IConfigurable<ServiceStack.FluentValidation.Internal.CollectionPropertyRule<T, TProperty>, ServiceStack.FluentValidation.IRuleBuilderInitialCollection<T, TProperty>>, ServiceStack.FluentValidation.Internal.IConfigurable<ServiceStack.FluentValidation.Internal.PropertyRule, ServiceStack.FluentValidation.IRuleBuilderInitial<T, TProperty>>, ServiceStack.FluentValidation.Internal.IConfigurable<ServiceStack.FluentValidation.Internal.PropertyRule, ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty>>
            {
                ServiceStack.FluentValidation.IRuleBuilderInitialCollection<T, TProperty> ServiceStack.FluentValidation.Internal.IConfigurable<ServiceStack.FluentValidation.Internal.CollectionPropertyRule<T, TProperty>, ServiceStack.FluentValidation.IRuleBuilderInitialCollection<T, TProperty>>.Configure(System.Action<ServiceStack.FluentValidation.Internal.CollectionPropertyRule<T, TProperty>> configurator) => throw null;
                ServiceStack.FluentValidation.IRuleBuilderInitial<T, TProperty> ServiceStack.FluentValidation.Internal.IConfigurable<ServiceStack.FluentValidation.Internal.PropertyRule, ServiceStack.FluentValidation.IRuleBuilderInitial<T, TProperty>>.Configure(System.Action<ServiceStack.FluentValidation.Internal.PropertyRule> configurator) => throw null;
                ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> ServiceStack.FluentValidation.Internal.IConfigurable<ServiceStack.FluentValidation.Internal.PropertyRule, ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty>>.Configure(System.Action<ServiceStack.FluentValidation.Internal.PropertyRule> configurator) => throw null;
                public ServiceStack.FluentValidation.IValidator<T> ParentValidator { get => throw null; }
                public ServiceStack.FluentValidation.Internal.PropertyRule Rule { get => throw null; }
                public RuleBuilder(ServiceStack.FluentValidation.Internal.PropertyRule rule, ServiceStack.FluentValidation.IValidator<T> parent) => throw null;
                public ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> SetValidator(ServiceStack.FluentValidation.Validators.IPropertyValidator validator) => throw null;
                public ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> SetValidator(ServiceStack.FluentValidation.IValidator<TProperty> validator, params string[] ruleSets) => throw null;
                public ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> SetValidator<TValidator>(System.Func<ServiceStack.FluentValidation.ICommonContext, TValidator> validatorProvider) where TValidator : ServiceStack.FluentValidation.IValidator<TProperty> => throw null;
                public ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> SetValidator<TValidator>(System.Func<T, TProperty, TValidator> validatorProvider, params string[] ruleSets) where TValidator : ServiceStack.FluentValidation.IValidator<TProperty> => throw null;
                public ServiceStack.FluentValidation.IRuleBuilderOptions<T, TProperty> SetValidator<TValidator>(System.Func<T, TValidator> validatorProvider, params string[] ruleSets) where TValidator : ServiceStack.FluentValidation.IValidator<TProperty> => throw null;
                public ServiceStack.FluentValidation.IRuleBuilderInitial<T, TNew> Transform<TNew>(System.Func<TProperty, TNew> transformationFunc) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Internal.RulesetValidatorSelector` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class RulesetValidatorSelector : ServiceStack.FluentValidation.Internal.IValidatorSelector
            {
                public virtual bool CanExecute(ServiceStack.FluentValidation.IValidationRule rule, string propertyPath, ServiceStack.FluentValidation.IValidationContext context) => throw null;
                public const string DefaultRuleSetName = default;
                protected bool IsIncludeRule(ServiceStack.FluentValidation.IValidationRule rule) => throw null;
                public string[] RuleSets { get => throw null; }
                public RulesetValidatorSelector(params string[] rulesetsToExecute) => throw null;
                public const string WildcardRuleSetName = default;
            }

            // Generated from `ServiceStack.FluentValidation.Internal.ValidationStrategy<>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class ValidationStrategy<T>
            {
                public ServiceStack.FluentValidation.Internal.ValidationStrategy<T> IncludeAllRuleSets() => throw null;
                public ServiceStack.FluentValidation.Internal.ValidationStrategy<T> IncludeProperties(params System.Linq.Expressions.Expression<System.Func<T, object>>[] propertyExpressions) => throw null;
                public ServiceStack.FluentValidation.Internal.ValidationStrategy<T> IncludeProperties(params string[] properties) => throw null;
                public ServiceStack.FluentValidation.Internal.ValidationStrategy<T> IncludeRuleSets(params string[] ruleSets) => throw null;
                public ServiceStack.FluentValidation.Internal.ValidationStrategy<T> IncludeRulesNotInRuleSet() => throw null;
                public ServiceStack.FluentValidation.Internal.ValidationStrategy<T> ThrowOnFailures() => throw null;
                public ServiceStack.FluentValidation.Internal.ValidationStrategy<T> UseCustomSelector(ServiceStack.FluentValidation.Internal.IValidatorSelector selector) => throw null;
            }

        }
        namespace Resources
        {
            // Generated from `ServiceStack.FluentValidation.Resources.FluentValidationMessageFormatException` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class FluentValidationMessageFormatException : System.Exception
            {
                public FluentValidationMessageFormatException(string message) => throw null;
                public FluentValidationMessageFormatException(string message, System.Exception innerException) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Resources.IContextAwareStringSource` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public interface IContextAwareStringSource
            {
            }

            // Generated from `ServiceStack.FluentValidation.Resources.ILanguageManager` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public interface ILanguageManager
            {
                System.Globalization.CultureInfo Culture { get; set; }
                bool Enabled { get; set; }
                string GetString(string key, System.Globalization.CultureInfo culture = default(System.Globalization.CultureInfo));
            }

            // Generated from `ServiceStack.FluentValidation.Resources.IStringSource` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public interface IStringSource
            {
                string GetString(ServiceStack.FluentValidation.ICommonContext context);
            }

            // Generated from `ServiceStack.FluentValidation.Resources.Language` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public abstract class Language
            {
                public virtual string GetTranslation(string key) => throw null;
                protected Language() => throw null;
                public abstract string Name { get; }
                public virtual void Translate(string key, string message) => throw null;
                public void Translate<T>(string message) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Resources.LanguageManager` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class LanguageManager : ServiceStack.FluentValidation.Resources.ILanguageManager
            {
                public void AddTranslation(string language, string key, string message) => throw null;
                public void Clear() => throw null;
                public System.Globalization.CultureInfo Culture { get => throw null; set => throw null; }
                public bool Enabled { get => throw null; set => throw null; }
                public virtual string GetString(string key, System.Globalization.CultureInfo culture = default(System.Globalization.CultureInfo)) => throw null;
                public LanguageManager() => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Resources.LanguageStringSource` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class LanguageStringSource : ServiceStack.FluentValidation.Resources.IStringSource
            {
                public virtual string GetString(ServiceStack.FluentValidation.ICommonContext context) => throw null;
                public LanguageStringSource(System.Func<ServiceStack.FluentValidation.ICommonContext, string> errorCodeFunc, string fallbackKey) => throw null;
                public LanguageStringSource(string key) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Resources.LazyStringSource` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class LazyStringSource : ServiceStack.FluentValidation.Resources.IStringSource
            {
                public string GetString(ServiceStack.FluentValidation.ICommonContext context) => throw null;
                public LazyStringSource(System.Func<ServiceStack.FluentValidation.ICommonContext, string> stringProvider) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Resources.StaticStringSource` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class StaticStringSource : ServiceStack.FluentValidation.Resources.IStringSource
            {
                public string GetString(ServiceStack.FluentValidation.ICommonContext context) => throw null;
                public StaticStringSource(string message) => throw null;
            }

        }
        namespace Results
        {
            // Generated from `ServiceStack.FluentValidation.Results.ValidationFailure` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class ValidationFailure
            {
                public object AttemptedValue { get => throw null; set => throw null; }
                public object CustomState { get => throw null; set => throw null; }
                public string ErrorCode { get => throw null; set => throw null; }
                public static System.Collections.Generic.Dictionary<string, string> ErrorCodeAliases;
                public static System.Func<string, string> ErrorCodeResolver { get => throw null; set => throw null; }
                public string ErrorMessage { get => throw null; set => throw null; }
                public object[] FormattedMessageArguments { get => throw null; set => throw null; }
                public System.Collections.Generic.Dictionary<string, object> FormattedMessagePlaceholderValues { get => throw null; set => throw null; }
                public string PropertyName { get => throw null; set => throw null; }
                public static string ServiceStackErrorCodeResolver(string errorCode) => throw null;
                public ServiceStack.FluentValidation.Severity Severity { get => throw null; set => throw null; }
                public override string ToString() => throw null;
                public ValidationFailure(string propertyName, string errorMessage) => throw null;
                public ValidationFailure(string propertyName, string errorMessage, object attemptedValue) => throw null;
                public ValidationFailure(string propertyName, string error, object attemptedValue, string errorCode) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Results.ValidationResult` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class ValidationResult
            {
                public System.Collections.Generic.IList<ServiceStack.FluentValidation.Results.ValidationFailure> Errors { get => throw null; }
                public virtual bool IsValid { get => throw null; }
                public ServiceStack.Web.IRequest Request { get => throw null; set => throw null; }
                public string[] RuleSetsExecuted { get => throw null; set => throw null; }
                public override string ToString() => throw null;
                public string ToString(string separator) => throw null;
                public ValidationResult() => throw null;
                public ValidationResult(System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> failures) => throw null;
            }

        }
        namespace TestHelper
        {
            // Generated from `ServiceStack.FluentValidation.TestHelper.ITestPropertyChain<>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public interface ITestPropertyChain<TValue>
            {
                ServiceStack.FluentValidation.TestHelper.ITestPropertyChain<TValue1> Property<TValue1>(System.Linq.Expressions.Expression<System.Func<TValue, TValue1>> memberAccessor);
                System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> ShouldHaveValidationError();
                void ShouldNotHaveValidationError();
            }

            // Generated from `ServiceStack.FluentValidation.TestHelper.IValidationResultTester` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public interface IValidationResultTester
            {
                System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> ShouldHaveValidationError(System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo> properties);
                void ShouldNotHaveValidationError(System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo> properties);
            }

            // Generated from `ServiceStack.FluentValidation.TestHelper.TestValidationResult<>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class TestValidationResult<T> : ServiceStack.FluentValidation.Results.ValidationResult where T : class
            {
                public System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> ShouldHaveValidationErrorFor(string propertyName) => throw null;
                public System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> ShouldHaveValidationErrorFor<TProperty>(System.Linq.Expressions.Expression<System.Func<T, TProperty>> memberAccessor) => throw null;
                public void ShouldNotHaveValidationErrorFor(string propertyName) => throw null;
                public void ShouldNotHaveValidationErrorFor<TProperty>(System.Linq.Expressions.Expression<System.Func<T, TProperty>> memberAccessor) => throw null;
                public TestValidationResult(ServiceStack.FluentValidation.Results.ValidationResult validationResult) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.TestHelper.ValidationTestException` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class ValidationTestException : System.Exception
            {
                public System.Collections.Generic.List<ServiceStack.FluentValidation.Results.ValidationFailure> Errors { get => throw null; }
                public ValidationTestException(string message) => throw null;
                public ValidationTestException(string message, System.Collections.Generic.List<ServiceStack.FluentValidation.Results.ValidationFailure> errors) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.TestHelper.ValidationTestExtension` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public static class ValidationTestExtension
            {
                public static System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> ShouldHaveAnyValidationError<T>(this ServiceStack.FluentValidation.TestHelper.TestValidationResult<T> testValidationResult) where T : class => throw null;
                public static void ShouldHaveChildValidator<T, TProperty>(this ServiceStack.FluentValidation.IValidator<T> validator, System.Linq.Expressions.Expression<System.Func<T, TProperty>> expression, System.Type childValidatorType) => throw null;
                public static System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> ShouldHaveValidationErrorFor<T, TValue>(this ServiceStack.FluentValidation.IValidator<T> validator, System.Linq.Expressions.Expression<System.Func<T, TValue>> expression, T objectToTest, string ruleSet = default(string)) where T : class => throw null;
                public static System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> ShouldHaveValidationErrorFor<T, TValue>(this ServiceStack.FluentValidation.IValidator<T> validator, System.Linq.Expressions.Expression<System.Func<T, TValue>> expression, TValue value, string ruleSet = default(string)) where T : class, new() => throw null;
                public static System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure>> ShouldHaveValidationErrorForAsync<T, TValue>(this ServiceStack.FluentValidation.IValidator<T> validator, System.Linq.Expressions.Expression<System.Func<T, TValue>> expression, T objectToTest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), string ruleSet = default(string)) where T : class => throw null;
                public static System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure>> ShouldHaveValidationErrorForAsync<T, TValue>(this ServiceStack.FluentValidation.IValidator<T> validator, System.Linq.Expressions.Expression<System.Func<T, TValue>> expression, TValue value, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), string ruleSet = default(string)) where T : class, new() => throw null;
                public static void ShouldNotHaveAnyValidationErrors<T>(this ServiceStack.FluentValidation.TestHelper.TestValidationResult<T> testValidationResult) where T : class => throw null;
                public static void ShouldNotHaveValidationErrorFor<T, TValue>(this ServiceStack.FluentValidation.IValidator<T> validator, System.Linq.Expressions.Expression<System.Func<T, TValue>> expression, T objectToTest, string ruleSet = default(string)) where T : class => throw null;
                public static void ShouldNotHaveValidationErrorFor<T, TValue>(this ServiceStack.FluentValidation.IValidator<T> validator, System.Linq.Expressions.Expression<System.Func<T, TValue>> expression, TValue value, string ruleSet = default(string)) where T : class, new() => throw null;
                public static System.Threading.Tasks.Task ShouldNotHaveValidationErrorForAsync<T, TValue>(this ServiceStack.FluentValidation.IValidator<T> validator, System.Linq.Expressions.Expression<System.Func<T, TValue>> expression, T objectToTest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), string ruleSet = default(string)) where T : class => throw null;
                public static System.Threading.Tasks.Task ShouldNotHaveValidationErrorForAsync<T, TValue>(this ServiceStack.FluentValidation.IValidator<T> validator, System.Linq.Expressions.Expression<System.Func<T, TValue>> expression, TValue value, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), string ruleSet = default(string)) where T : class, new() => throw null;
                public static ServiceStack.FluentValidation.TestHelper.TestValidationResult<T> TestValidate<T>(this ServiceStack.FluentValidation.IValidator<T> validator, T objectToTest, System.Action<ServiceStack.FluentValidation.Internal.ValidationStrategy<T>> options) where T : class => throw null;
                public static ServiceStack.FluentValidation.TestHelper.TestValidationResult<T> TestValidate<T>(this ServiceStack.FluentValidation.IValidator<T> validator, T objectToTest, string ruleSet = default(string)) where T : class => throw null;
                public static System.Threading.Tasks.Task<ServiceStack.FluentValidation.TestHelper.TestValidationResult<T>> TestValidateAsync<T>(this ServiceStack.FluentValidation.IValidator<T> validator, T objectToTest, System.Action<ServiceStack.FluentValidation.Internal.ValidationStrategy<T>> options, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) where T : class => throw null;
                public static System.Threading.Tasks.Task<ServiceStack.FluentValidation.TestHelper.TestValidationResult<T>> TestValidateAsync<T>(this ServiceStack.FluentValidation.IValidator<T> validator, T objectToTest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken), string ruleSet = default(string)) where T : class => throw null;
                public static System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> When(this System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> failures, System.Func<ServiceStack.FluentValidation.Results.ValidationFailure, bool> failurePredicate, string exceptionMessage = default(string)) => throw null;
                public static System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> WhenAll(this System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> failures, System.Func<ServiceStack.FluentValidation.Results.ValidationFailure, bool> failurePredicate, string exceptionMessage = default(string)) => throw null;
                public static System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> WithCustomState(this System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> failures, object expectedCustomState) => throw null;
                public static System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> WithErrorCode(this System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> failures, string expectedErrorCode) => throw null;
                public static System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> WithErrorMessage(this System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> failures, string expectedErrorMessage) => throw null;
                public static System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> WithMessageArgument<T>(this System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> failures, string argumentKey, T argumentValue) => throw null;
                public static System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> WithSeverity(this System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> failures, ServiceStack.FluentValidation.Severity expectedSeverity) => throw null;
                public static System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> WithoutCustomState(this System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> failures, object unexpectedCustomState) => throw null;
                public static System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> WithoutErrorCode(this System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> failures, string unexpectedErrorCode) => throw null;
                public static System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> WithoutErrorMessage(this System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> failures, string unexpectedErrorMessage) => throw null;
                public static System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> WithoutSeverity(this System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> failures, ServiceStack.FluentValidation.Severity unexpectedSeverity) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.TestHelper.ValidatorTester<,>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class ValidatorTester<T, TValue> where T : class
            {
                public void ValidateError(T instanceToValidate) => throw null;
                public void ValidateNoError(T instanceToValidate) => throw null;
                public ValidatorTester(System.Linq.Expressions.Expression<System.Func<T, TValue>> expression, ServiceStack.FluentValidation.IValidator<T> validator, TValue value) => throw null;
            }

        }
        namespace Validators
        {
            // Generated from `ServiceStack.FluentValidation.Validators.AbstractComparisonValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public abstract class AbstractComparisonValidator : ServiceStack.FluentValidation.Validators.PropertyValidator, ServiceStack.FluentValidation.Validators.IComparisonValidator, ServiceStack.FluentValidation.Validators.IPropertyValidator
            {
                protected AbstractComparisonValidator(System.Func<object, object> valueToCompareFunc, System.Reflection.MemberInfo member, string memberDisplayName) => throw null;
                protected AbstractComparisonValidator(System.Func<object, object> valueToCompareFunc, System.Reflection.MemberInfo member, string memberDisplayName, ServiceStack.FluentValidation.Resources.IStringSource errorSource) => throw null;
                protected AbstractComparisonValidator(System.IComparable value) => throw null;
                protected AbstractComparisonValidator(System.IComparable value, ServiceStack.FluentValidation.Resources.IStringSource errorSource) => throw null;
                public abstract ServiceStack.FluentValidation.Validators.Comparison Comparison { get; }
                public System.IComparable GetComparableValue(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context, object value) => throw null;
                public System.IComparable GetComparisonValue(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
                public abstract bool IsValid(System.IComparable value, System.IComparable valueToCompare);
                protected override bool IsValid(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
                public System.Reflection.MemberInfo MemberToCompare { get => throw null; set => throw null; }
                public object ValueToCompare { get => throw null; set => throw null; }
            }

            // Generated from `ServiceStack.FluentValidation.Validators.AspNetCoreCompatibleEmailValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class AspNetCoreCompatibleEmailValidator : ServiceStack.FluentValidation.Validators.PropertyValidator, ServiceStack.FluentValidation.Validators.IEmailValidator
            {
                public AspNetCoreCompatibleEmailValidator() => throw null;
                protected override string GetDefaultMessageTemplate() => throw null;
                protected override bool IsValid(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Validators.AsyncPredicateValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class AsyncPredicateValidator : ServiceStack.FluentValidation.Validators.PropertyValidator
            {
                public AsyncPredicateValidator(System.Func<object, object, ServiceStack.FluentValidation.Validators.PropertyValidatorContext, System.Threading.CancellationToken, System.Threading.Tasks.Task<bool>> predicate) => throw null;
                protected override string GetDefaultMessageTemplate() => throw null;
                protected override bool IsValid(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
                protected override System.Threading.Tasks.Task<bool> IsValidAsync(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context, System.Threading.CancellationToken cancellation) => throw null;
                public override bool ShouldValidateAsynchronously(ServiceStack.FluentValidation.IValidationContext context) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Validators.AsyncValidatorBase` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public abstract class AsyncValidatorBase : ServiceStack.FluentValidation.Validators.PropertyValidator
            {
                protected AsyncValidatorBase() => throw null;
                protected AsyncValidatorBase(ServiceStack.FluentValidation.Resources.IStringSource errorSource) => throw null;
                protected AsyncValidatorBase(string errorMessage) => throw null;
                protected override bool IsValid(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
                protected abstract override System.Threading.Tasks.Task<bool> IsValidAsync(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context, System.Threading.CancellationToken cancellation);
                public override bool ShouldValidateAsynchronously(ServiceStack.FluentValidation.IValidationContext context) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Validators.ChildValidatorAdaptor<,>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class ChildValidatorAdaptor<T, TProperty> : ServiceStack.FluentValidation.Validators.NoopPropertyValidator, ServiceStack.FluentValidation.Validators.IChildValidatorAdaptor
            {
                public ChildValidatorAdaptor(System.Func<ServiceStack.FluentValidation.ICommonContext, ServiceStack.FluentValidation.IValidator<TProperty>> validatorProvider, System.Type validatorType) => throw null;
                public ChildValidatorAdaptor(ServiceStack.FluentValidation.IValidator<TProperty> validator, System.Type validatorType) => throw null;
                protected virtual ServiceStack.FluentValidation.IValidationContext CreateNewValidationContextForChildValidator(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context, ServiceStack.FluentValidation.IValidator<TProperty> validator) => throw null;
                protected ServiceStack.FluentValidation.IValidationContext CreateNewValidationContextForChildValidator(object instanceToValidate, ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
                public virtual ServiceStack.FluentValidation.IValidator<TProperty> GetValidator(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
                public string[] RuleSets { get => throw null; set => throw null; }
                public override bool ShouldValidateAsynchronously(ServiceStack.FluentValidation.IValidationContext context) => throw null;
                public override System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> Validate(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
                public override System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure>> ValidateAsync(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context, System.Threading.CancellationToken cancellation) => throw null;
                public System.Type ValidatorType { get => throw null; }
            }

            // Generated from `ServiceStack.FluentValidation.Validators.Comparison` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public enum Comparison
            {
                Equal,
                GreaterThan,
                GreaterThanOrEqual,
                LessThan,
                LessThanOrEqual,
                NotEqual,
            }

            // Generated from `ServiceStack.FluentValidation.Validators.CreditCardValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class CreditCardValidator : ServiceStack.FluentValidation.Validators.PropertyValidator
            {
                public CreditCardValidator() => throw null;
                protected override string GetDefaultMessageTemplate() => throw null;
                protected override bool IsValid(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Validators.CustomContext` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class CustomContext : ServiceStack.FluentValidation.ICommonContext
            {
                public void AddFailure(ServiceStack.FluentValidation.Results.ValidationFailure failure) => throw null;
                public void AddFailure(string errorMessage) => throw null;
                public void AddFailure(string propertyName, string errorMessage) => throw null;
                public CustomContext(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
                public string DisplayName { get => throw null; }
                public object InstanceToValidate { get => throw null; }
                public ServiceStack.FluentValidation.Internal.MessageFormatter MessageFormatter { get => throw null; }
                public ServiceStack.FluentValidation.IValidationContext ParentContext { get => throw null; }
                ServiceStack.FluentValidation.ICommonContext ServiceStack.FluentValidation.ICommonContext.ParentContext { get => throw null; }
                public string PropertyName { get => throw null; }
                public object PropertyValue { get => throw null; }
                public ServiceStack.FluentValidation.Internal.PropertyRule Rule { get => throw null; }
            }

            // Generated from `ServiceStack.FluentValidation.Validators.CustomValidator<>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class CustomValidator<T> : ServiceStack.FluentValidation.Validators.PropertyValidator
            {
                public CustomValidator(System.Action<T, ServiceStack.FluentValidation.Validators.CustomContext> action) => throw null;
                public CustomValidator(System.Func<T, ServiceStack.FluentValidation.Validators.CustomContext, System.Threading.CancellationToken, System.Threading.Tasks.Task> asyncAction) => throw null;
                protected override bool IsValid(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
                public override bool ShouldValidateAsynchronously(ServiceStack.FluentValidation.IValidationContext context) => throw null;
                public override System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> Validate(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
                public override System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure>> ValidateAsync(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context, System.Threading.CancellationToken cancellation) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Validators.EmailValidationMode` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public enum EmailValidationMode
            {
                AspNetCoreCompatible,
                Net4xRegex,
            }

            // Generated from `ServiceStack.FluentValidation.Validators.EmailValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class EmailValidator : ServiceStack.FluentValidation.Validators.PropertyValidator, ServiceStack.FluentValidation.Validators.IEmailValidator, ServiceStack.FluentValidation.Validators.IPropertyValidator, ServiceStack.FluentValidation.Validators.IRegularExpressionValidator
            {
                public EmailValidator() => throw null;
                public string Expression { get => throw null; }
                protected override string GetDefaultMessageTemplate() => throw null;
                protected override bool IsValid(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Validators.EmptyValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class EmptyValidator : ServiceStack.FluentValidation.Validators.PropertyValidator, ServiceStack.FluentValidation.Validators.IEmptyValidator, ServiceStack.FluentValidation.Validators.IPropertyValidator
            {
                public EmptyValidator(object defaultValueForType) => throw null;
                protected override string GetDefaultMessageTemplate() => throw null;
                protected override bool IsValid(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Validators.EnumValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class EnumValidator : ServiceStack.FluentValidation.Validators.PropertyValidator
            {
                public EnumValidator(System.Type enumType) => throw null;
                protected override string GetDefaultMessageTemplate() => throw null;
                protected override bool IsValid(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Validators.EqualValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class EqualValidator : ServiceStack.FluentValidation.Validators.PropertyValidator, ServiceStack.FluentValidation.Validators.IComparisonValidator, ServiceStack.FluentValidation.Validators.IPropertyValidator
            {
                protected bool Compare(object comparisonValue, object propertyValue) => throw null;
                public ServiceStack.FluentValidation.Validators.Comparison Comparison { get => throw null; }
                public EqualValidator(System.Func<object, object> comparisonProperty, System.Reflection.MemberInfo member, string memberDisplayName, System.Collections.IEqualityComparer comparer = default(System.Collections.IEqualityComparer)) => throw null;
                public EqualValidator(object valueToCompare, System.Collections.IEqualityComparer comparer = default(System.Collections.IEqualityComparer)) => throw null;
                protected override string GetDefaultMessageTemplate() => throw null;
                protected override bool IsValid(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
                public System.Reflection.MemberInfo MemberToCompare { get => throw null; set => throw null; }
                public object ValueToCompare { get => throw null; set => throw null; }
            }

            // Generated from `ServiceStack.FluentValidation.Validators.ExactLengthValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class ExactLengthValidator : ServiceStack.FluentValidation.Validators.LengthValidator
            {
                public ExactLengthValidator(System.Func<object, int> length) : base(default(System.Func<object, int>), default(System.Func<object, int>)) => throw null;
                public ExactLengthValidator(int length) : base(default(System.Func<object, int>), default(System.Func<object, int>)) => throw null;
                protected override string GetDefaultMessageTemplate() => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Validators.ExclusiveBetweenValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class ExclusiveBetweenValidator : ServiceStack.FluentValidation.Validators.PropertyValidator, ServiceStack.FluentValidation.Validators.IBetweenValidator, ServiceStack.FluentValidation.Validators.IPropertyValidator
            {
                public ExclusiveBetweenValidator(System.IComparable from, System.IComparable to) => throw null;
                public System.IComparable From { get => throw null; }
                protected override string GetDefaultMessageTemplate() => throw null;
                protected override bool IsValid(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
                public System.IComparable To { get => throw null; }
            }

            // Generated from `ServiceStack.FluentValidation.Validators.GreaterThanOrEqualValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class GreaterThanOrEqualValidator : ServiceStack.FluentValidation.Validators.AbstractComparisonValidator
            {
                public override ServiceStack.FluentValidation.Validators.Comparison Comparison { get => throw null; }
                protected override string GetDefaultMessageTemplate() => throw null;
                public GreaterThanOrEqualValidator(System.Func<object, object> valueToCompareFunc, System.Reflection.MemberInfo member, string memberDisplayName) : base(default(System.IComparable)) => throw null;
                public GreaterThanOrEqualValidator(System.IComparable value) : base(default(System.IComparable)) => throw null;
                public override bool IsValid(System.IComparable value, System.IComparable valueToCompare) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Validators.GreaterThanValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class GreaterThanValidator : ServiceStack.FluentValidation.Validators.AbstractComparisonValidator
            {
                public override ServiceStack.FluentValidation.Validators.Comparison Comparison { get => throw null; }
                protected override string GetDefaultMessageTemplate() => throw null;
                public GreaterThanValidator(System.Func<object, object> valueToCompareFunc, System.Reflection.MemberInfo member, string memberDisplayName) : base(default(System.IComparable)) => throw null;
                public GreaterThanValidator(System.IComparable value) : base(default(System.IComparable)) => throw null;
                public override bool IsValid(System.IComparable value, System.IComparable valueToCompare) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Validators.IBetweenValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public interface IBetweenValidator : ServiceStack.FluentValidation.Validators.IPropertyValidator
            {
                System.IComparable From { get; }
                System.IComparable To { get; }
            }

            // Generated from `ServiceStack.FluentValidation.Validators.IChildValidatorAdaptor` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public interface IChildValidatorAdaptor
            {
                System.Type ValidatorType { get; }
            }

            // Generated from `ServiceStack.FluentValidation.Validators.IComparisonValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public interface IComparisonValidator : ServiceStack.FluentValidation.Validators.IPropertyValidator
            {
                ServiceStack.FluentValidation.Validators.Comparison Comparison { get; }
                System.Reflection.MemberInfo MemberToCompare { get; }
                object ValueToCompare { get; }
            }

            // Generated from `ServiceStack.FluentValidation.Validators.IEmailValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public interface IEmailValidator
            {
            }

            // Generated from `ServiceStack.FluentValidation.Validators.IEmptyValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public interface IEmptyValidator : ServiceStack.FluentValidation.Validators.IPropertyValidator
            {
            }

            // Generated from `ServiceStack.FluentValidation.Validators.ILengthValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public interface ILengthValidator : ServiceStack.FluentValidation.Validators.IPropertyValidator
            {
                int Max { get; }
                int Min { get; }
            }

            // Generated from `ServiceStack.FluentValidation.Validators.INotEmptyValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public interface INotEmptyValidator : ServiceStack.FluentValidation.Validators.IPropertyValidator
            {
            }

            // Generated from `ServiceStack.FluentValidation.Validators.INotNullValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public interface INotNullValidator : ServiceStack.FluentValidation.Validators.IPropertyValidator
            {
            }

            // Generated from `ServiceStack.FluentValidation.Validators.INullValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public interface INullValidator : ServiceStack.FluentValidation.Validators.IPropertyValidator
            {
            }

            // Generated from `ServiceStack.FluentValidation.Validators.IPredicateValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public interface IPredicateValidator : ServiceStack.FluentValidation.Validators.IPropertyValidator
            {
            }

            // Generated from `ServiceStack.FluentValidation.Validators.IPropertyValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public interface IPropertyValidator
            {
                ServiceStack.FluentValidation.PropertyValidatorOptions Options { get; }
                bool ShouldValidateAsynchronously(ServiceStack.FluentValidation.IValidationContext context);
                System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> Validate(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context);
                System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure>> ValidateAsync(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context, System.Threading.CancellationToken cancellation);
            }

            // Generated from `ServiceStack.FluentValidation.Validators.IRegularExpressionValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public interface IRegularExpressionValidator : ServiceStack.FluentValidation.Validators.IPropertyValidator
            {
                string Expression { get; }
            }

            // Generated from `ServiceStack.FluentValidation.Validators.InclusiveBetweenValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class InclusiveBetweenValidator : ServiceStack.FluentValidation.Validators.PropertyValidator, ServiceStack.FluentValidation.Validators.IBetweenValidator, ServiceStack.FluentValidation.Validators.IPropertyValidator
            {
                public System.IComparable From { get => throw null; }
                protected override string GetDefaultMessageTemplate() => throw null;
                public InclusiveBetweenValidator(System.IComparable from, System.IComparable to) => throw null;
                protected override bool IsValid(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
                public System.IComparable To { get => throw null; }
            }

            // Generated from `ServiceStack.FluentValidation.Validators.LengthValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class LengthValidator : ServiceStack.FluentValidation.Validators.PropertyValidator, ServiceStack.FluentValidation.Validators.ILengthValidator, ServiceStack.FluentValidation.Validators.IPropertyValidator
            {
                protected override string GetDefaultMessageTemplate() => throw null;
                protected override bool IsValid(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
                public LengthValidator(System.Func<object, int> min, System.Func<object, int> max) => throw null;
                public LengthValidator(int min, int max) => throw null;
                public int Max { get => throw null; }
                public System.Func<object, int> MaxFunc { get => throw null; set => throw null; }
                public int Min { get => throw null; }
                public System.Func<object, int> MinFunc { get => throw null; set => throw null; }
            }

            // Generated from `ServiceStack.FluentValidation.Validators.LessThanOrEqualValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class LessThanOrEqualValidator : ServiceStack.FluentValidation.Validators.AbstractComparisonValidator
            {
                public override ServiceStack.FluentValidation.Validators.Comparison Comparison { get => throw null; }
                protected override string GetDefaultMessageTemplate() => throw null;
                public override bool IsValid(System.IComparable value, System.IComparable valueToCompare) => throw null;
                public LessThanOrEqualValidator(System.Func<object, object> valueToCompareFunc, System.Reflection.MemberInfo member, string memberDisplayName) : base(default(System.IComparable)) => throw null;
                public LessThanOrEqualValidator(System.IComparable value) : base(default(System.IComparable)) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Validators.LessThanValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class LessThanValidator : ServiceStack.FluentValidation.Validators.AbstractComparisonValidator
            {
                public override ServiceStack.FluentValidation.Validators.Comparison Comparison { get => throw null; }
                protected override string GetDefaultMessageTemplate() => throw null;
                public override bool IsValid(System.IComparable value, System.IComparable valueToCompare) => throw null;
                public LessThanValidator(System.Func<object, object> valueToCompareFunc, System.Reflection.MemberInfo member, string memberDisplayName) : base(default(System.IComparable)) => throw null;
                public LessThanValidator(System.IComparable value) : base(default(System.IComparable)) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Validators.MaximumLengthValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class MaximumLengthValidator : ServiceStack.FluentValidation.Validators.LengthValidator
            {
                protected override string GetDefaultMessageTemplate() => throw null;
                public MaximumLengthValidator(System.Func<object, int> max) : base(default(System.Func<object, int>), default(System.Func<object, int>)) => throw null;
                public MaximumLengthValidator(int max) : base(default(System.Func<object, int>), default(System.Func<object, int>)) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Validators.MinimumLengthValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class MinimumLengthValidator : ServiceStack.FluentValidation.Validators.LengthValidator
            {
                protected override string GetDefaultMessageTemplate() => throw null;
                public MinimumLengthValidator(System.Func<object, int> min) : base(default(System.Func<object, int>), default(System.Func<object, int>)) => throw null;
                public MinimumLengthValidator(int min) : base(default(System.Func<object, int>), default(System.Func<object, int>)) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Validators.NoopPropertyValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public abstract class NoopPropertyValidator : ServiceStack.FluentValidation.Validators.IPropertyValidator
            {
                protected NoopPropertyValidator() => throw null;
                public ServiceStack.FluentValidation.PropertyValidatorOptions Options { get => throw null; }
                public virtual bool ShouldValidateAsynchronously(ServiceStack.FluentValidation.IValidationContext context) => throw null;
                public abstract System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> Validate(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context);
                public virtual System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure>> ValidateAsync(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context, System.Threading.CancellationToken cancellation) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Validators.NotEmptyValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class NotEmptyValidator : ServiceStack.FluentValidation.Validators.PropertyValidator, ServiceStack.FluentValidation.Validators.INotEmptyValidator, ServiceStack.FluentValidation.Validators.IPropertyValidator
            {
                protected override string GetDefaultMessageTemplate() => throw null;
                protected override bool IsValid(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
                public NotEmptyValidator(object defaultValueForType) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Validators.NotEqualValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class NotEqualValidator : ServiceStack.FluentValidation.Validators.PropertyValidator, ServiceStack.FluentValidation.Validators.IComparisonValidator, ServiceStack.FluentValidation.Validators.IPropertyValidator
            {
                protected bool Compare(object comparisonValue, object propertyValue) => throw null;
                public ServiceStack.FluentValidation.Validators.Comparison Comparison { get => throw null; }
                protected override string GetDefaultMessageTemplate() => throw null;
                protected override bool IsValid(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
                public System.Reflection.MemberInfo MemberToCompare { get => throw null; set => throw null; }
                public NotEqualValidator(System.Func<object, object> func, System.Reflection.MemberInfo memberToCompare, string memberDisplayName, System.Collections.IEqualityComparer equalityComparer = default(System.Collections.IEqualityComparer)) => throw null;
                public NotEqualValidator(object comparisonValue, System.Collections.IEqualityComparer equalityComparer = default(System.Collections.IEqualityComparer)) => throw null;
                public object ValueToCompare { get => throw null; set => throw null; }
            }

            // Generated from `ServiceStack.FluentValidation.Validators.NotNullValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class NotNullValidator : ServiceStack.FluentValidation.Validators.PropertyValidator, ServiceStack.FluentValidation.Validators.INotNullValidator, ServiceStack.FluentValidation.Validators.IPropertyValidator
            {
                protected override string GetDefaultMessageTemplate() => throw null;
                protected override bool IsValid(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
                public NotNullValidator() => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Validators.NullValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class NullValidator : ServiceStack.FluentValidation.Validators.PropertyValidator, ServiceStack.FluentValidation.Validators.INullValidator, ServiceStack.FluentValidation.Validators.IPropertyValidator
            {
                protected override string GetDefaultMessageTemplate() => throw null;
                protected override bool IsValid(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
                public NullValidator() => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Validators.OnFailureValidator<>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class OnFailureValidator<T> : ServiceStack.FluentValidation.Validators.NoopPropertyValidator, ServiceStack.FluentValidation.Validators.IChildValidatorAdaptor
            {
                public OnFailureValidator(ServiceStack.FluentValidation.Validators.IPropertyValidator innerValidator, System.Action<T, ServiceStack.FluentValidation.Validators.PropertyValidatorContext, string> onFailure) => throw null;
                public override bool ShouldValidateAsynchronously(ServiceStack.FluentValidation.IValidationContext context) => throw null;
                public override System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> Validate(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
                public override System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure>> ValidateAsync(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context, System.Threading.CancellationToken cancellation) => throw null;
                public System.Type ValidatorType { get => throw null; }
            }

            // Generated from `ServiceStack.FluentValidation.Validators.PolymorphicValidator<,>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class PolymorphicValidator<T, TProperty> : ServiceStack.FluentValidation.Validators.ChildValidatorAdaptor<T, TProperty>
            {
                protected ServiceStack.FluentValidation.Validators.PolymorphicValidator<T, TProperty> Add(System.Type subclassType, ServiceStack.FluentValidation.IValidator validator, params string[] ruleSets) => throw null;
                public ServiceStack.FluentValidation.Validators.PolymorphicValidator<T, TProperty> Add<TDerived>(System.Func<T, ServiceStack.FluentValidation.IValidator<TDerived>> validatorFactory, params string[] ruleSets) where TDerived : TProperty => throw null;
                public ServiceStack.FluentValidation.Validators.PolymorphicValidator<T, TProperty> Add<TDerived>(System.Func<T, TDerived, ServiceStack.FluentValidation.IValidator<TDerived>> validatorFactory, params string[] ruleSets) where TDerived : TProperty => throw null;
                public ServiceStack.FluentValidation.Validators.PolymorphicValidator<T, TProperty> Add<TDerived>(ServiceStack.FluentValidation.IValidator<TDerived> derivedValidator, params string[] ruleSets) where TDerived : TProperty => throw null;
                protected override ServiceStack.FluentValidation.IValidationContext CreateNewValidationContextForChildValidator(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context, ServiceStack.FluentValidation.IValidator<TProperty> validator) => throw null;
                public override ServiceStack.FluentValidation.IValidator<TProperty> GetValidator(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
                public PolymorphicValidator() : base(default(ServiceStack.FluentValidation.IValidator<TProperty>), default(System.Type)) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Validators.PredicateValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class PredicateValidator : ServiceStack.FluentValidation.Validators.PropertyValidator, ServiceStack.FluentValidation.Validators.IPredicateValidator, ServiceStack.FluentValidation.Validators.IPropertyValidator
            {
                // Generated from `ServiceStack.FluentValidation.Validators.PredicateValidator+Predicate` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
                public delegate bool Predicate(object instanceToValidate, object propertyValue, ServiceStack.FluentValidation.Validators.PropertyValidatorContext propertyValidatorContext);


                protected override string GetDefaultMessageTemplate() => throw null;
                protected override bool IsValid(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
                public PredicateValidator(ServiceStack.FluentValidation.Validators.PredicateValidator.Predicate predicate) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Validators.PropertyValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public abstract class PropertyValidator : ServiceStack.FluentValidation.PropertyValidatorOptions, ServiceStack.FluentValidation.Validators.IPropertyValidator
            {
                protected virtual ServiceStack.FluentValidation.Results.ValidationFailure CreateValidationError(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
                protected abstract bool IsValid(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context);
                protected virtual System.Threading.Tasks.Task<bool> IsValidAsync(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context, System.Threading.CancellationToken cancellation) => throw null;
                protected string Localized(string fallbackKey) => throw null;
                public ServiceStack.FluentValidation.PropertyValidatorOptions Options { get => throw null; }
                protected virtual void PrepareMessageFormatterForValidationError(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
                protected PropertyValidator() => throw null;
                protected PropertyValidator(ServiceStack.FluentValidation.Resources.IStringSource errorMessageSource) => throw null;
                protected PropertyValidator(string errorMessage) => throw null;
                public virtual bool ShouldValidateAsynchronously(ServiceStack.FluentValidation.IValidationContext context) => throw null;
                public virtual System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure> Validate(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
                public virtual System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure>> ValidateAsync(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context, System.Threading.CancellationToken cancellation) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Validators.PropertyValidatorContext` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class PropertyValidatorContext : ServiceStack.FluentValidation.ICommonContext
            {
                public string DisplayName { get => throw null; }
                public object InstanceToValidate { get => throw null; }
                public ServiceStack.FluentValidation.Internal.MessageFormatter MessageFormatter { get => throw null; }
                public ServiceStack.FluentValidation.IValidationContext ParentContext { get => throw null; set => throw null; }
                ServiceStack.FluentValidation.ICommonContext ServiceStack.FluentValidation.ICommonContext.ParentContext { get => throw null; }
                public string PropertyName { get => throw null; set => throw null; }
                public PropertyValidatorContext(ServiceStack.FluentValidation.IValidationContext parentContext, ServiceStack.FluentValidation.Internal.PropertyRule rule, string propertyName) => throw null;
                public PropertyValidatorContext(ServiceStack.FluentValidation.IValidationContext parentContext, ServiceStack.FluentValidation.Internal.PropertyRule rule, string propertyName, System.Lazy<object> propertyValueAccessor) => throw null;
                public PropertyValidatorContext(ServiceStack.FluentValidation.IValidationContext parentContext, ServiceStack.FluentValidation.Internal.PropertyRule rule, string propertyName, object propertyValue) => throw null;
                public object PropertyValue { get => throw null; }
                public ServiceStack.FluentValidation.Internal.PropertyRule Rule { get => throw null; set => throw null; }
            }

            // Generated from `ServiceStack.FluentValidation.Validators.RegularExpressionValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class RegularExpressionValidator : ServiceStack.FluentValidation.Validators.PropertyValidator, ServiceStack.FluentValidation.Validators.IPropertyValidator, ServiceStack.FluentValidation.Validators.IRegularExpressionValidator
            {
                public string Expression { get => throw null; }
                protected override string GetDefaultMessageTemplate() => throw null;
                protected override bool IsValid(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
                public RegularExpressionValidator(System.Func<object, System.Text.RegularExpressions.Regex> regexFunc) => throw null;
                public RegularExpressionValidator(System.Func<object, string> expressionFunc) => throw null;
                public RegularExpressionValidator(System.Func<object, string> expression, System.Text.RegularExpressions.RegexOptions options) => throw null;
                public RegularExpressionValidator(System.Text.RegularExpressions.Regex regex) => throw null;
                public RegularExpressionValidator(string expression) => throw null;
                public RegularExpressionValidator(string expression, System.Text.RegularExpressions.RegexOptions options) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Validators.ScalePrecisionValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class ScalePrecisionValidator : ServiceStack.FluentValidation.Validators.PropertyValidator
            {
                protected override string GetDefaultMessageTemplate() => throw null;
                public bool IgnoreTrailingZeros { get => throw null; set => throw null; }
                protected override bool IsValid(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
                public int Precision { get => throw null; set => throw null; }
                public int Scale { get => throw null; set => throw null; }
                public ScalePrecisionValidator(int scale, int precision) => throw null;
            }

            // Generated from `ServiceStack.FluentValidation.Validators.StringEnumValidator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class StringEnumValidator : ServiceStack.FluentValidation.Validators.PropertyValidator
            {
                protected override string GetDefaultMessageTemplate() => throw null;
                protected override bool IsValid(ServiceStack.FluentValidation.Validators.PropertyValidatorContext context) => throw null;
                public StringEnumValidator(System.Type enumType, bool caseSensitive) => throw null;
            }

        }
    }
    namespace Formats
    {
        // Generated from `ServiceStack.Formats.CsvFormat` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class CsvFormat : ServiceStack.IPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
        {
            public CsvFormat() => throw null;
            public string Id { get => throw null; set => throw null; }
            public void Register(ServiceStack.IAppHost appHost) => throw null;
            public void SerializeToStream(ServiceStack.Web.IRequest req, object request, System.IO.Stream stream) => throw null;
        }

        // Generated from `ServiceStack.Formats.HtmlFormat` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class HtmlFormat : ServiceStack.IPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
        {
            public string DefaultResolveTemplate(ServiceStack.Web.IRequest req) => throw null;
            public HtmlFormat() => throw null;
            public static string HtmlTitleFormat;
            public static bool Humanize;
            public string Id { get => throw null; set => throw null; }
            public System.Collections.Generic.Dictionary<string, string> PathTemplates { get => throw null; set => throw null; }
            public void Register(ServiceStack.IAppHost appHost) => throw null;
            public static string ReplaceTokens(string html, ServiceStack.Web.IRequest req) => throw null;
            public System.Func<ServiceStack.Web.IRequest, string> ResolveTemplate { get => throw null; set => throw null; }
            public System.Threading.Tasks.Task SerializeToStreamAsync(ServiceStack.Web.IRequest req, object response, System.IO.Stream outputStream) => throw null;
            public static string TitleFormat;
        }

        // Generated from `ServiceStack.Formats.XmlSerializerFormat` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class XmlSerializerFormat : ServiceStack.IPlugin
        {
            public static object Deserialize(System.Type type, System.IO.Stream stream) => throw null;
            public void Register(ServiceStack.IAppHost appHost) => throw null;
            public static void Serialize(ServiceStack.Web.IRequest req, object response, System.IO.Stream stream) => throw null;
            public XmlSerializerFormat() => throw null;
        }

    }
    namespace Host
    {
        // Generated from `ServiceStack.Host.ActionContext` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class ActionContext
        {
            public ActionContext() => throw null;
            public const string AnyAction = default;
            public static string AnyFormatKey(string format, string requestDtoName) => throw null;
            public static string AnyKey(string requestDtoName) => throw null;
            public const string AnyMethod = default;
            public string Id { get => throw null; set => throw null; }
            public static string Key(string method, string requestDtoName) => throw null;
            public ServiceStack.Web.IRequestFilterBase[] RequestFilters { get => throw null; set => throw null; }
            public System.Type RequestType { get => throw null; set => throw null; }
            public ServiceStack.Web.IResponseFilterBase[] ResponseFilters { get => throw null; set => throw null; }
            public ServiceStack.Host.ActionInvokerFn ServiceAction { get => throw null; set => throw null; }
            public System.Type ServiceType { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Host.ActionInvokerFn` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public delegate object ActionInvokerFn(object instance, object request);

        // Generated from `ServiceStack.Host.ActionMethod` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class ActionMethod
        {
            public ActionMethod(System.Reflection.MethodInfo methodInfo) => throw null;
            public object[] AllAttributes() => throw null;
            public T[] AllAttributes<T>() => throw null;
            public const string Async = default;
            public const string AsyncUpper = default;
            public object[] GetCustomAttributes(bool inherit) => throw null;
            public System.Reflection.ParameterInfo[] GetParameters() => throw null;
            public bool IsAsync { get => throw null; }
            public bool IsGenericMethod { get => throw null; }
            public System.Reflection.MethodInfo MethodInfo { get => throw null; }
            public string Name { get => throw null; }
            public string NameUpper { get => throw null; }
            public System.Type RequestType { get => throw null; }
            public System.Type ReturnType { get => throw null; }
        }

        // Generated from `ServiceStack.Host.BasicHttpRequest` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class BasicHttpRequest : ServiceStack.Host.BasicRequest, ServiceStack.Configuration.IResolver, ServiceStack.Web.IHttpRequest, ServiceStack.Web.IRequest
        {
            public string Accept { get => throw null; set => throw null; }
            public BasicHttpRequest() : base(default(ServiceStack.Messaging.IMessage), default(ServiceStack.RequestAttributes)) => throw null;
            public BasicHttpRequest(object requestDto, ServiceStack.RequestAttributes requestAttributes = default(ServiceStack.RequestAttributes)) : base(default(ServiceStack.Messaging.IMessage), default(ServiceStack.RequestAttributes)) => throw null;
            public string HttpMethod { get => throw null; set => throw null; }
            public ServiceStack.Web.IHttpResponse HttpResponse { get => throw null; set => throw null; }
            public string XForwardedFor { get => throw null; set => throw null; }
            public int? XForwardedPort { get => throw null; set => throw null; }
            public string XForwardedProtocol { get => throw null; set => throw null; }
            public string XRealIp { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Host.BasicHttpResponse` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class BasicHttpResponse : ServiceStack.Host.BasicResponse, ServiceStack.Web.IHttpResponse, ServiceStack.Web.IResponse
        {
            public BasicHttpResponse(ServiceStack.Host.BasicRequest requestContext) : base(default(ServiceStack.Host.BasicRequest)) => throw null;
            public void ClearCookies() => throw null;
            public ServiceStack.Web.ICookies Cookies { get => throw null; }
            public void SetCookie(System.Net.Cookie cookie) => throw null;
        }

        // Generated from `ServiceStack.Host.BasicRequest` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class BasicRequest : ServiceStack.Configuration.IHasResolver, ServiceStack.Configuration.IResolver, ServiceStack.IHasServiceScope, ServiceStack.IO.IHasVirtualFiles, ServiceStack.Web.IRequest, System.IServiceProvider
        {
            public string AbsoluteUri { get => throw null; set => throw null; }
            public string[] AcceptTypes { get => throw null; set => throw null; }
            public string Authorization { get => throw null; set => throw null; }
            public BasicRequest(ServiceStack.Messaging.IMessage message = default(ServiceStack.Messaging.IMessage), ServiceStack.RequestAttributes requestAttributes = default(ServiceStack.RequestAttributes)) => throw null;
            public BasicRequest(object requestDto, ServiceStack.RequestAttributes requestAttributes = default(ServiceStack.RequestAttributes)) => throw null;
            public string CompressionType { get => throw null; set => throw null; }
            public System.Int64 ContentLength { get => throw null; }
            public string ContentType { get => throw null; set => throw null; }
            public System.Collections.Generic.IDictionary<string, System.Net.Cookie> Cookies { get => throw null; set => throw null; }
            public object Dto { get => throw null; set => throw null; }
            public ServiceStack.Web.IHttpFile[] Files { get => throw null; set => throw null; }
            public System.Collections.Specialized.NameValueCollection FormData { get => throw null; set => throw null; }
            public ServiceStack.IO.IVirtualDirectory GetDirectory() => throw null;
            public ServiceStack.IO.IVirtualFile GetFile() => throw null;
            public string GetHeader(string headerName) => throw null;
            public string GetRawBody() => throw null;
            public System.Threading.Tasks.Task<string> GetRawBodyAsync() => throw null;
            public object GetService(System.Type serviceType) => throw null;
            public bool HasExplicitResponseContentType { get => throw null; set => throw null; }
            public System.Collections.Specialized.NameValueCollection Headers { get => throw null; set => throw null; }
            public System.IO.Stream InputStream { get => throw null; set => throw null; }
            public bool IsDirectory { get => throw null; set => throw null; }
            public bool IsFile { get => throw null; set => throw null; }
            public bool IsLocal { get => throw null; set => throw null; }
            public bool IsSecureConnection { get => throw null; set => throw null; }
            public System.Collections.Generic.Dictionary<string, object> Items { get => throw null; set => throw null; }
            public ServiceStack.Messaging.IMessage Message { get => throw null; set => throw null; }
            public string OperationName { get => throw null; set => throw null; }
            public string OriginalPathInfo { get => throw null; }
            public object OriginalRequest { get => throw null; set => throw null; }
            public string PathInfo { get => throw null; set => throw null; }
            public ServiceStack.Host.BasicRequest PopulateWith(ServiceStack.Web.IRequest request) => throw null;
            public System.Collections.Specialized.NameValueCollection QueryString { get => throw null; set => throw null; }
            public string RawUrl { get => throw null; set => throw null; }
            public string RemoteIp { get => throw null; set => throw null; }
            public ServiceStack.RequestAttributes RequestAttributes { get => throw null; set => throw null; }
            public ServiceStack.Web.IRequestPreferences RequestPreferences { get => throw null; }
            public ServiceStack.Configuration.IResolver Resolver { get => throw null; set => throw null; }
            public ServiceStack.Web.IResponse Response { get => throw null; set => throw null; }
            public string ResponseContentType { get => throw null; set => throw null; }
            public Microsoft.Extensions.DependencyInjection.IServiceScope ServiceScope { get => throw null; set => throw null; }
            public T TryResolve<T>() => throw null;
            public System.Uri UrlReferrer { get => throw null; set => throw null; }
            public bool UseBufferedStream { get => throw null; set => throw null; }
            public string UserAgent { get => throw null; set => throw null; }
            public string UserHostAddress { get => throw null; set => throw null; }
            public string Verb { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Host.BasicResponse` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class BasicResponse : ServiceStack.Web.IHasHeaders, ServiceStack.Web.IResponse
        {
            public void AddHeader(string name, string value) => throw null;
            public BasicResponse(ServiceStack.Host.BasicRequest requestContext) => throw null;
            public void Close() => throw null;
            public System.Threading.Tasks.Task CloseAsync(System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public string ContentType { get => throw null; set => throw null; }
            public object Dto { get => throw null; set => throw null; }
            public void End() => throw null;
            public void Flush() => throw null;
            public System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public string GetHeader(string name) => throw null;
            public bool HasStarted { get => throw null; set => throw null; }
            public System.Collections.Generic.Dictionary<string, string> Headers { get => throw null; }
            public bool IsClosed { get => throw null; set => throw null; }
            public System.Collections.Generic.Dictionary<string, object> Items { get => throw null; }
            public bool KeepAlive { get => throw null; set => throw null; }
            public object OriginalResponse { get => throw null; set => throw null; }
            public System.IO.Stream OutputStream { get => throw null; }
            public void Redirect(string url) => throw null;
            public void RemoveHeader(string name) => throw null;
            public ServiceStack.Web.IRequest Request { get => throw null; }
            public void SetContentLength(System.Int64 contentLength) => throw null;
            public int StatusCode { get => throw null; set => throw null; }
            public string StatusDescription { get => throw null; set => throw null; }
            public bool UseBufferedStream { get => throw null; set => throw null; }
            public void Write(string text) => throw null;
        }

        // Generated from `ServiceStack.Host.ContainerResolveCache` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class ContainerResolveCache : ServiceStack.Configuration.ITypeFactory
        {
            public ContainerResolveCache(Funq.Container container) => throw null;
            public object CreateInstance(ServiceStack.Configuration.IResolver resolver, System.Type type) => throw null;
            public object CreateInstance(ServiceStack.Configuration.IResolver resolver, System.Type type, bool tryResolve) => throw null;
        }

        // Generated from `ServiceStack.Host.ContentTypes` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class ContentTypes : ServiceStack.Web.IContentTypeReader, ServiceStack.Web.IContentTypeWriter, ServiceStack.Web.IContentTypes
        {
            public System.Collections.Generic.Dictionary<string, ServiceStack.Web.StreamDeserializerDelegate> ContentTypeDeserializers;
            public System.Collections.Generic.Dictionary<string, ServiceStack.Web.StreamDeserializerDelegateAsync> ContentTypeDeserializersAsync;
            public System.Collections.Generic.Dictionary<string, string> ContentTypeFormats { get => throw null; }
            public System.Collections.Generic.Dictionary<string, ServiceStack.Web.StreamSerializerDelegate> ContentTypeSerializers;
            public System.Collections.Generic.Dictionary<string, ServiceStack.Web.StreamSerializerDelegateAsync> ContentTypeSerializersAsync;
            public System.Collections.Generic.Dictionary<string, ServiceStack.Web.StringDeserializerDelegate> ContentTypeStringDeserializers;
            public System.Collections.Generic.Dictionary<string, ServiceStack.Web.StringSerializerDelegate> ContentTypeStringSerializers;
            public ContentTypes() => throw null;
            public object DeserializeFromStream(string contentType, System.Type type, System.IO.Stream fromStream) => throw null;
            public object DeserializeFromString(string contentType, System.Type type, string request) => throw null;
            public string GetFormatContentType(string format) => throw null;
            public ServiceStack.Web.StreamDeserializerDelegate GetStreamDeserializer(string contentType) => throw null;
            public ServiceStack.Web.StreamDeserializerDelegateAsync GetStreamDeserializerAsync(string contentType) => throw null;
            public ServiceStack.Web.StreamSerializerDelegate GetStreamSerializer(string contentType) => throw null;
            public ServiceStack.Web.StreamSerializerDelegateAsync GetStreamSerializerAsync(string contentType) => throw null;
            public static ServiceStack.Host.ContentTypes Instance;
            public static System.Collections.Generic.HashSet<string> KnownFormats;
            public void Register(string contentType, ServiceStack.Web.StreamSerializerDelegate streamSerializer, ServiceStack.Web.StreamDeserializerDelegate streamDeserializer) => throw null;
            public void RegisterAsync(string contentType, ServiceStack.Web.StreamSerializerDelegateAsync streamSerializer, ServiceStack.Web.StreamDeserializerDelegateAsync streamDeserializer) => throw null;
            public void Remove(string contentType) => throw null;
            public System.Byte[] SerializeToBytes(ServiceStack.Web.IRequest req, object response) => throw null;
            public System.Threading.Tasks.Task SerializeToStreamAsync(ServiceStack.Web.IRequest req, object response, System.IO.Stream responseStream) => throw null;
            public string SerializeToString(ServiceStack.Web.IRequest req, object response) => throw null;
            public string SerializeToString(ServiceStack.Web.IRequest req, object response, string contentType) => throw null;
            public static System.Threading.Tasks.Task SerializeUnknownContentType(ServiceStack.Web.IRequest req, object response, System.IO.Stream stream) => throw null;
            public void SetContentTypeDeserializer(string contentType, ServiceStack.Web.StreamDeserializerDelegate streamDeserializer) => throw null;
            public void SetContentTypeSerializer(string contentType, ServiceStack.Web.StreamSerializerDelegate streamSerializer) => throw null;
            public static ServiceStack.Web.StreamDeserializerDelegateAsync UnknownContentTypeDeserializer { get => throw null; set => throw null; }
            public static ServiceStack.Web.StreamSerializerDelegateAsync UnknownContentTypeSerializer { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Host.Cookies` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class Cookies : ServiceStack.Web.ICookies
        {
            public void AddPermanentCookie(string cookieName, string cookieValue, bool? secureOnly = default(bool?)) => throw null;
            public void AddSessionCookie(string cookieName, string cookieValue, bool? secureOnly = default(bool?)) => throw null;
            public Cookies(ServiceStack.Web.IHttpResponse httpRes) => throw null;
            public void DeleteCookie(string cookieName) => throw null;
            public const string RootPath = default;
        }

        // Generated from `ServiceStack.Host.CookiesExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class CookiesExtensions
        {
            public static string AsHeaderValue(this System.Net.Cookie cookie) => throw null;
            public static Microsoft.AspNetCore.Http.CookieOptions ToCookieOptions(this System.Net.Cookie cookie) => throw null;
        }

        // Generated from `ServiceStack.Host.DataBinder` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class DataBinder
        {
            public DataBinder() => throw null;
            public static object Eval(object container, string expression) => throw null;
            public static string Eval(object container, string expression, string format) => throw null;
            public static object GetDataItem(object container) => throw null;
            public static object GetDataItem(object container, out bool foundDataItem) => throw null;
            public static object GetIndexedPropertyValue(object container, string expr) => throw null;
            public static string GetIndexedPropertyValue(object container, string expr, string format) => throw null;
            public static object GetPropertyValue(object container, string propName) => throw null;
            public static string GetPropertyValue(object container, string propName, string format) => throw null;
        }

        // Generated from `ServiceStack.Host.DefaultHttpHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class DefaultHttpHandler : ServiceStack.Host.IHttpHandler
        {
            public DefaultHttpHandler() => throw null;
        }

        // Generated from `ServiceStack.Host.FallbackRestPathDelegate` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public delegate ServiceStack.Host.RestPath FallbackRestPathDelegate(ServiceStack.Web.IHttpRequest httpReq);

        // Generated from `ServiceStack.Host.HandleGatewayExceptionAsyncDelegate` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public delegate System.Threading.Tasks.Task HandleGatewayExceptionAsyncDelegate(ServiceStack.Web.IRequest httpReq, object request, System.Exception ex);

        // Generated from `ServiceStack.Host.HandleGatewayExceptionDelegate` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public delegate void HandleGatewayExceptionDelegate(ServiceStack.Web.IRequest httpReq, object request, System.Exception ex);

        // Generated from `ServiceStack.Host.HandleServiceExceptionAsyncDelegate` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public delegate System.Threading.Tasks.Task<object> HandleServiceExceptionAsyncDelegate(ServiceStack.Web.IRequest httpReq, object request, System.Exception ex);

        // Generated from `ServiceStack.Host.HandleServiceExceptionDelegate` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public delegate object HandleServiceExceptionDelegate(ServiceStack.Web.IRequest httpReq, object request, System.Exception ex);

        // Generated from `ServiceStack.Host.HandleUncaughtExceptionAsyncDelegate` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public delegate System.Threading.Tasks.Task HandleUncaughtExceptionAsyncDelegate(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, string operationName, System.Exception ex);

        // Generated from `ServiceStack.Host.HandleUncaughtExceptionDelegate` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public delegate void HandleUncaughtExceptionDelegate(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, string operationName, System.Exception ex);

        // Generated from `ServiceStack.Host.HtmlString` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class HtmlString : ServiceStack.Host.IHtmlString
        {
            public HtmlString(string value) => throw null;
            public string ToHtmlString() => throw null;
            public override string ToString() => throw null;
        }

        // Generated from `ServiceStack.Host.HttpException` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class HttpException : System.Exception
        {
            public HttpException() => throw null;
            public HttpException(int statusCode, string statusDescription) => throw null;
            public HttpException(string message) => throw null;
            public HttpException(string message, System.Exception innerException) => throw null;
            public int StatusCode { get => throw null; }
            public string StatusDescription { get => throw null; }
        }

        // Generated from `ServiceStack.Host.HttpFile` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class HttpFile : ServiceStack.Web.IHttpFile
        {
            public System.Int64 ContentLength { get => throw null; set => throw null; }
            public string ContentType { get => throw null; set => throw null; }
            public string FileName { get => throw null; set => throw null; }
            public HttpFile() => throw null;
            public System.IO.Stream InputStream { get => throw null; set => throw null; }
            public string Name { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Host.HttpHandlerResolverDelegate` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public delegate ServiceStack.Host.IHttpHandler HttpHandlerResolverDelegate(string httpMethod, string pathInfo, string filePath);

        // Generated from `ServiceStack.Host.HttpRequestAuthentication` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class HttpRequestAuthentication
        {
            public static string GetAuthSecret(this ServiceStack.Web.IRequest httpReq) => throw null;
            public static string GetAuthorization(this ServiceStack.Web.IRequest req) => throw null;
            public static string GetBasicAuth(this ServiceStack.Web.IRequest req) => throw null;
            public static System.Collections.Generic.KeyValuePair<string, string>? GetBasicAuthUserAndPassword(this ServiceStack.Web.IRequest httpReq) => throw null;
            public static string GetBearerToken(this ServiceStack.Web.IRequest req) => throw null;
            public static string GetCookieValue(this ServiceStack.Web.IRequest httpReq, string cookieName) => throw null;
            public static System.Collections.Generic.Dictionary<string, string> GetDigestAuth(this ServiceStack.Web.IRequest httpReq) => throw null;
            public static string GetItemStringValue(this ServiceStack.Web.IRequest httpReq, string itemName) => throw null;
            public static string GetJwtRefreshToken(this ServiceStack.Web.IRequest req) => throw null;
            public static string GetJwtToken(this ServiceStack.Web.IRequest req) => throw null;
        }

        // Generated from `ServiceStack.Host.HttpResponseStreamWrapper` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class HttpResponseStreamWrapper : ServiceStack.Web.IHasHeaders, ServiceStack.Web.IHttpResponse, ServiceStack.Web.IResponse
        {
            public void AddHeader(string name, string value) => throw null;
            public void ClearCookies() => throw null;
            public void Close() => throw null;
            public System.Threading.Tasks.Task CloseAsync(System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public string ContentType { get => throw null; set => throw null; }
            public ServiceStack.Web.ICookies Cookies { get => throw null; set => throw null; }
            public object Dto { get => throw null; set => throw null; }
            public void End() => throw null;
            public void Flush() => throw null;
            public System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public void ForceClose() => throw null;
            public string GetHeader(string name) => throw null;
            public bool HasStarted { get => throw null; set => throw null; }
            public System.Collections.Generic.Dictionary<string, string> Headers { get => throw null; set => throw null; }
            public HttpResponseStreamWrapper(System.IO.Stream stream, ServiceStack.Web.IRequest request) => throw null;
            public bool IsClosed { get => throw null; set => throw null; }
            public System.Collections.Generic.Dictionary<string, object> Items { get => throw null; set => throw null; }
            public bool KeepAlive { get => throw null; set => throw null; }
            public bool KeepOpen { get => throw null; set => throw null; }
            public object OriginalResponse { get => throw null; }
            public System.IO.Stream OutputStream { get => throw null; set => throw null; }
            public void Redirect(string url) => throw null;
            public void RemoveHeader(string name) => throw null;
            public ServiceStack.Web.IRequest Request { get => throw null; set => throw null; }
            public void SetContentLength(System.Int64 contentLength) => throw null;
            public void SetCookie(System.Net.Cookie cookie) => throw null;
            public int StatusCode { get => throw null; set => throw null; }
            public string StatusDescription { get => throw null; set => throw null; }
            public bool UseBufferedStream { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Host.IHasBufferedStream` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IHasBufferedStream
        {
            System.IO.MemoryStream BufferedStream { get; }
        }

        // Generated from `ServiceStack.Host.IHtmlString` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IHtmlString
        {
            string ToHtmlString();
        }

        // Generated from `ServiceStack.Host.IHttpAsyncHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IHttpAsyncHandler : ServiceStack.Host.IHttpHandler
        {
            System.Threading.Tasks.Task Middleware(Microsoft.AspNetCore.Http.HttpContext context, System.Func<System.Threading.Tasks.Task> next);
        }

        // Generated from `ServiceStack.Host.IHttpHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IHttpHandler
        {
        }

        // Generated from `ServiceStack.Host.IHttpHandlerFactory` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IHttpHandlerFactory
        {
        }

        // Generated from `ServiceStack.Host.IServiceExec` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IServiceExec
        {
            object Execute(ServiceStack.Web.IRequest requestContext, object instance, object request);
        }

        // Generated from `ServiceStack.Host.ITypedFilter` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface ITypedFilter
        {
            void Invoke(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object dto);
        }

        // Generated from `ServiceStack.Host.ITypedFilter<>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface ITypedFilter<T>
        {
            void Invoke(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, T dto);
        }

        // Generated from `ServiceStack.Host.ITypedFilterAsync` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface ITypedFilterAsync
        {
            System.Threading.Tasks.Task InvokeAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object dto);
        }

        // Generated from `ServiceStack.Host.ITypedFilterAsync<>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface ITypedFilterAsync<T>
        {
            System.Threading.Tasks.Task InvokeAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, T dto);
        }

        // Generated from `ServiceStack.Host.InMemoryRollingRequestLogger` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class InMemoryRollingRequestLogger : ServiceStack.Web.IRequestLogger
        {
            protected ServiceStack.RequestLogEntry CreateEntry(ServiceStack.Web.IRequest request, object requestDto, object response, System.TimeSpan requestDuration, System.Type requestType) => throw null;
            public System.Func<System.DateTime> CurrentDateFn { get => throw null; set => throw null; }
            public const int DefaultCapacity = default;
            public bool EnableErrorTracking { get => throw null; set => throw null; }
            public bool EnableRequestBodyTracking { get => throw null; set => throw null; }
            public bool EnableResponseTracking { get => throw null; set => throw null; }
            public bool EnableSessionTracking { get => throw null; set => throw null; }
            public System.Type[] ExcludeRequestDtoTypes { get => throw null; set => throw null; }
            protected bool ExcludeRequestType(System.Type requestType) => throw null;
            public System.Type[] ExcludeResponseTypes { get => throw null; set => throw null; }
            public virtual System.Collections.Generic.List<ServiceStack.RequestLogEntry> GetLatestLogs(int? take) => throw null;
            public System.Type[] HideRequestBodyForRequestDtoTypes { get => throw null; set => throw null; }
            public System.Func<object, bool> IgnoreFilter { get => throw null; set => throw null; }
            protected InMemoryRollingRequestLogger() => throw null;
            public InMemoryRollingRequestLogger(int? capacity = default(int?)) => throw null;
            public bool LimitToServiceRequests { get => throw null; set => throw null; }
            public virtual void Log(ServiceStack.Web.IRequest request, object requestDto, object response, System.TimeSpan requestDuration) => throw null;
            public System.Func<ServiceStack.Web.IRequest, bool> RequestBodyTrackingFilter { get => throw null; set => throw null; }
            public System.Action<ServiceStack.Web.IRequest, ServiceStack.RequestLogEntry> RequestLogFilter { get => throw null; set => throw null; }
            public string[] RequiredRoles { get => throw null; set => throw null; }
            public System.Func<ServiceStack.Web.IRequest, bool> ResponseTrackingFilter { get => throw null; set => throw null; }
            public System.Collections.Generic.Dictionary<string, string> SerializableItems(System.Collections.Generic.Dictionary<string, object> items) => throw null;
            public virtual bool ShouldSkip(ServiceStack.Web.IRequest req, object requestDto) => throw null;
            public System.Func<ServiceStack.Web.IRequest, bool> SkipLogging { get => throw null; set => throw null; }
            public static object ToSerializableErrorResponse(object response) => throw null;
            protected int capacity;
            protected System.Collections.Concurrent.ConcurrentQueue<ServiceStack.RequestLogEntry> logEntries;
        }

        // Generated from `ServiceStack.Host.InstanceExecFn` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public delegate object InstanceExecFn(ServiceStack.Web.IRequest requestContext, object instance, object request);

        // Generated from `ServiceStack.Host.MetadataTypeExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class MetadataTypeExtensions
        {
            public static System.Collections.Generic.HashSet<string> CollectionTypes;
            public static bool ExcludesFeature(this System.Type type, ServiceStack.Feature feature) => throw null;
            public static bool ForceInclude(this ServiceStack.MetadataTypesConfig config, ServiceStack.MetadataType type) => throw null;
            public static bool ForceInclude(this ServiceStack.MetadataTypesConfig config, System.Type type) => throw null;
            public static string GetParamType(this ServiceStack.ApiMemberAttribute attr, System.Type type, string verb) => throw null;
            public static string GetParamType(this ServiceStack.MetadataPropertyType prop, ServiceStack.MetadataType type, ServiceStack.Host.Operation op) => throw null;
            public static bool Has(this ServiceStack.Feature feature, ServiceStack.Feature flag) => throw null;
            public static bool IsAbstract(this ServiceStack.MetadataType type) => throw null;
            public static bool IsArray(this ServiceStack.MetadataPropertyType prop) => throw null;
            public static bool IsCollection(this ServiceStack.MetadataPropertyType prop) => throw null;
            public static bool IsInterface(this ServiceStack.MetadataType type) => throw null;
            public static System.Collections.Generic.List<T> NullIfEmpty<T>(this System.Collections.Generic.List<T> value) => throw null;
            public static bool? NullIfFalse(this bool value) => throw null;
            public static int? NullIfMinValue(this int value) => throw null;
            public static System.Collections.Generic.Dictionary<string, string[]> ToMetadataServiceRoutes(this System.Collections.Generic.Dictionary<System.Type, string[]> serviceRoutes, System.Action<System.Collections.Generic.Dictionary<string, string[]>> filter = default(System.Action<System.Collections.Generic.Dictionary<string, string[]>>)) => throw null;
        }

        // Generated from `ServiceStack.Host.Operation` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class Operation : System.ICloneable
        {
            public System.Collections.Generic.List<string> Actions { get => throw null; set => throw null; }
            public ServiceStack.Host.Operation AddPermission(string permission) => throw null;
            public void AddRequestPropertyValidationRules(System.Collections.Generic.List<ServiceStack.FluentValidation.IValidationRule> propertyValidators) => throw null;
            public void AddRequestTypeValidationRules(System.Collections.Generic.List<ServiceStack.ITypeValidator> typeValidators) => throw null;
            public ServiceStack.Host.Operation AddRole(string role) => throw null;
            public ServiceStack.Host.Operation Clone() => throw null;
            object System.ICloneable.Clone() => throw null;
            public System.Type DataModelType { get => throw null; }
            public ServiceStack.ApiCss ExplorerCss { get => throw null; set => throw null; }
            public System.Collections.Generic.List<ServiceStack.InputInfo> FormLayout { get => throw null; set => throw null; }
            public bool IsOneWay { get => throw null; }
            public ServiceStack.ApiCss LocodeCss { get => throw null; set => throw null; }
            public string Method { get => throw null; set => throw null; }
            public string Name { get => throw null; }
            public Operation() => throw null;
            public System.Collections.Generic.List<ServiceStack.Web.IRequestFilterBase> RequestFilterAttributes { get => throw null; set => throw null; }
            public System.Collections.Generic.HashSet<System.Type> RequestPropertyAttributes { get => throw null; set => throw null; }
            public System.Collections.Generic.List<ServiceStack.FluentValidation.IValidationRule> RequestPropertyValidationRules { get => throw null; set => throw null; }
            public System.Type RequestType { get => throw null; set => throw null; }
            public System.Collections.Generic.List<ServiceStack.ITypeValidator> RequestTypeValidationRules { get => throw null; set => throw null; }
            public System.Collections.Generic.List<string> RequiredPermissions { get => throw null; set => throw null; }
            public System.Collections.Generic.List<string> RequiredRoles { get => throw null; set => throw null; }
            public System.Collections.Generic.List<string> RequiresAnyPermission { get => throw null; set => throw null; }
            public System.Collections.Generic.List<string> RequiresAnyRole { get => throw null; set => throw null; }
            public bool RequiresAuthentication { get => throw null; set => throw null; }
            public System.Collections.Generic.List<ServiceStack.Web.IResponseFilterBase> ResponseFilterAttributes { get => throw null; set => throw null; }
            public System.Type ResponseType { get => throw null; set => throw null; }
            public ServiceStack.RestrictAttribute RestrictTo { get => throw null; set => throw null; }
            public bool ReturnsVoid { get => throw null; }
            public System.Collections.Generic.List<ServiceStack.Host.RestPath> Routes { get => throw null; set => throw null; }
            public System.Type ServiceType { get => throw null; set => throw null; }
            public System.Collections.Generic.List<ServiceStack.TagAttribute> Tags { get => throw null; set => throw null; }
            public System.Type ViewModelType { get => throw null; }
        }

        // Generated from `ServiceStack.Host.OperationDto` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class OperationDto
        {
            public System.Collections.Generic.List<string> Actions { get => throw null; set => throw null; }
            public string Name { get => throw null; set => throw null; }
            public OperationDto() => throw null;
            public string ResponseName { get => throw null; set => throw null; }
            public System.Collections.Generic.List<string> RestrictTo { get => throw null; set => throw null; }
            public System.Collections.Generic.List<string> Routes { get => throw null; set => throw null; }
            public string ServiceName { get => throw null; set => throw null; }
            public System.Collections.Generic.List<string> Tags { get => throw null; set => throw null; }
            public System.Collections.Generic.List<string> VisibleTo { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Host.RequestPreferences` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class RequestPreferences : ServiceStack.Web.IRequestPreferences
        {
            public string AcceptEncoding { get => throw null; }
            public bool AcceptsBrotli { get => throw null; }
            public bool AcceptsDeflate { get => throw null; }
            public bool AcceptsGzip { get => throw null; }
            public RequestPreferences(ServiceStack.Web.IRequest httpRequest) => throw null;
        }

        // Generated from `ServiceStack.Host.RestHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class RestHandler : ServiceStack.Host.Handlers.ServiceStackHandlerBase, ServiceStack.Host.Handlers.IRequestHttpHandler
        {
            public static object CreateRequest(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IRestPath restPath, System.Collections.Generic.Dictionary<string, string> requestParams, object requestDto) => throw null;
            public static System.Threading.Tasks.Task<object> CreateRequestAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IRestPath restPath) => throw null;
            public static System.Threading.Tasks.Task<object> CreateRequestAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IRestPath restPath, System.Collections.Generic.Dictionary<string, string> requestParams) => throw null;
            public System.Threading.Tasks.Task<object> CreateRequestAsync(ServiceStack.Web.IRequest httpReq, string operationName) => throw null;
            public static ServiceStack.Web.IRestPath FindMatchingRestPath(ServiceStack.Web.IHttpRequest httpReq, out string contentType) => throw null;
            public static ServiceStack.Web.IRestPath FindMatchingRestPath(string httpMethod, string pathInfo, out string contentType) => throw null;
            public ServiceStack.Web.IRestPath GetRestPath(ServiceStack.Web.IHttpRequest httpReq) => throw null;
            public static string GetSanitizedPathInfo(string pathInfo, out string contentType) => throw null;
            public override System.Threading.Tasks.Task ProcessRequestAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse httpRes, string operationName) => throw null;
            public string ResponseContentType { get => throw null; set => throw null; }
            public RestHandler() => throw null;
            public ServiceStack.Web.IRestPath RestPath { get => throw null; set => throw null; }
            public override bool RunAsAsync() => throw null;
        }

        // Generated from `ServiceStack.Host.RestPath` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class RestPath : ServiceStack.Web.IRestPath
        {
            public void AfterInit() => throw null;
            public string AllowedVerbs { get => throw null; }
            public bool AllowsAllVerbs { get => throw null; }
            public static System.Func<ServiceStack.Host.RestPath, string, string[], int> CalculateMatchScore { get => throw null; set => throw null; }
            public object CreateRequest(string pathInfo) => throw null;
            public object CreateRequest(string pathInfo, System.Collections.Generic.Dictionary<string, string> queryStringAndFormData, object fromInstance) => throw null;
            public string FirstMatchHashKey { get => throw null; set => throw null; }
            public static System.Collections.Generic.IEnumerable<string> GetFirstMatchHashKeys(string[] pathPartsForMatching) => throw null;
            public static System.Collections.Generic.IEnumerable<string> GetFirstMatchWildCardHashKeys(string[] pathPartsForMatching) => throw null;
            public override int GetHashCode() => throw null;
            public static string[] GetPathPartsForMatching(string pathInfo) => throw null;
            public System.Func<ServiceStack.Web.IHttpRequest, bool> GetRequestRule() => throw null;
            public bool IsMatch(ServiceStack.Web.IHttpRequest httpReq) => throw null;
            public bool IsMatch(string httpMethod, string[] withPathInfoParts, out int wildcardMatchCount) => throw null;
            public bool IsValid { get => throw null; set => throw null; }
            public bool IsVariable(string name) => throw null;
            public bool IsWildCardPath { get => throw null; set => throw null; }
            public string MatchRule { get => throw null; set => throw null; }
            public int MatchScore(string httpMethod, string[] withPathInfoParts) => throw null;
            public string Notes { get => throw null; set => throw null; }
            public string Path { get => throw null; }
            public int PathComponentsCount { get => throw null; set => throw null; }
            public int Priority { get => throw null; set => throw null; }
            public System.Type RequestType { get => throw null; }
            public RestPath(System.Type requestType, string path) => throw null;
            public RestPath(System.Type requestType, string path, string verbs, string summary = default(string), string notes = default(string), string matchRule = default(string)) => throw null;
            public string Summary { get => throw null; set => throw null; }
            public ServiceStack.RestRoute ToRestRoute() => throw null;
            public int TotalComponentsCount { get => throw null; set => throw null; }
            public string UniqueMatchHashKey { get => throw null; }
            public int VariableArgsCount { get => throw null; set => throw null; }
            public string[] Verbs { get => throw null; }
        }

        // Generated from `ServiceStack.Host.RouteNamingConvention` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class RouteNamingConvention
        {
            public static System.Collections.Generic.List<string> AttributeNamesToMatch;
            public static System.Collections.Generic.List<string> PropertyNamesToMatch;
            public static void WithMatchingAttributes(ServiceStack.Web.IServiceRoutes routes, System.Type requestType, string allowedVerbs) => throw null;
            public static void WithMatchingPropertyNames(ServiceStack.Web.IServiceRoutes routes, System.Type requestType, string allowedVerbs) => throw null;
            public static void WithRequestDtoName(ServiceStack.Web.IServiceRoutes routes, System.Type requestType, string allowedVerbs) => throw null;
        }

        // Generated from `ServiceStack.Host.RouteNamingConventionDelegate` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public delegate void RouteNamingConventionDelegate(ServiceStack.Web.IServiceRoutes routes, System.Type requestType, string allowedVerbs);

        // Generated from `ServiceStack.Host.ServiceController` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class ServiceController : ServiceStack.Web.IServiceController, ServiceStack.Web.IServiceExecutor
        {
            public void AfterInit() => throw null;
            public object ApplyResponseFilters(object response, ServiceStack.Web.IRequest req) => throw null;
            public void AssertServiceRestrictions(System.Type requestType, ServiceStack.RequestAttributes actualAttributes) => throw null;
            public string DefaultOperationsNamespace { get => throw null; set => throw null; }
            public object Execute(ServiceStack.Web.IRequest req, bool applyFilters) => throw null;
            public object Execute(object requestDto) => throw null;
            public virtual object Execute(object requestDto, ServiceStack.Web.IRequest req) => throw null;
            public object Execute(object requestDto, ServiceStack.Web.IRequest req, bool applyFilters) => throw null;
            public virtual System.Threading.Tasks.Task<object> ExecuteAsync(object requestDto, ServiceStack.Web.IRequest req) => throw null;
            public object ExecuteMessage(ServiceStack.Messaging.IMessage mqMessage) => throw null;
            public object ExecuteMessage(ServiceStack.Messaging.IMessage dto, ServiceStack.Web.IRequest req) => throw null;
            public System.Threading.Tasks.Task<object> ExecuteMessageAsync(ServiceStack.Messaging.IMessage mqMessage, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<object> ExecuteMessageAsync(ServiceStack.Messaging.IMessage dto, ServiceStack.Web.IRequest req, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public System.Threading.Tasks.Task<object> GatewayExecuteAsync(object requestDto, ServiceStack.Web.IRequest req, bool applyFilters) => throw null;
            public ServiceStack.Web.IRestPath GetRestPathForRequest(string httpMethod, string pathInfo) => throw null;
            public ServiceStack.Host.RestPath GetRestPathForRequest(string httpMethod, string pathInfo, ServiceStack.Web.IHttpRequest httpReq) => throw null;
            public virtual ServiceStack.Host.ServiceExecFn GetService(System.Type requestType) => throw null;
            public bool HasService(System.Type requestType) => throw null;
            public ServiceStack.Host.ServiceController Init() => throw null;
            public static bool IsServiceAction(ServiceStack.Host.ActionMethod mi) => throw null;
            public static bool IsServiceAction(string actionName, System.Type requestType) => throw null;
            public static bool IsServiceType(System.Type serviceType) => throw null;
            public void RegisterRestPath(ServiceStack.Host.RestPath restPath) => throw null;
            public void RegisterRestPaths(System.Type requestType) => throw null;
            public void RegisterService(ServiceStack.Configuration.ITypeFactory serviceFactoryFn, System.Type serviceType) => throw null;
            public void RegisterService(System.Type serviceType) => throw null;
            public void RegisterServiceExecutor(System.Type requestType, System.Type serviceType, ServiceStack.Configuration.ITypeFactory serviceFactoryFn) => throw null;
            public void RegisterServicesInAssembly(System.Reflection.Assembly assembly) => throw null;
            public System.Collections.Generic.Dictionary<System.Type, System.Func<ServiceStack.Web.IRequest, object>> RequestTypeFactoryMap { get => throw null; set => throw null; }
            public void ResetServiceExecCachesIfNeeded(System.Type serviceType, System.Type requestType) => throw null;
            public System.Func<System.Collections.Generic.IEnumerable<System.Type>> ResolveServicesFn { get => throw null; set => throw null; }
            public System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<ServiceStack.Host.RestPath>> RestPathMap;
            public ServiceController(ServiceStack.ServiceStackHost appHost) => throw null;
            public ServiceController(ServiceStack.ServiceStackHost appHost, System.Func<System.Collections.Generic.IEnumerable<System.Type>> resolveServicesFn) => throw null;
            public ServiceController(ServiceStack.ServiceStackHost appHost, params System.Reflection.Assembly[] assembliesWithServices) => throw null;
        }

        // Generated from `ServiceStack.Host.ServiceExecExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class ServiceExecExtensions
        {
            public static System.Collections.Generic.List<ServiceStack.Host.ActionMethod> GetActions(this System.Type serviceType) => throw null;
            public static System.Collections.Generic.List<ServiceStack.Host.ActionMethod> GetRequestActions(this System.Type serviceType, System.Type requestType) => throw null;
            public static string GetVerbs(this System.Type serviceType) => throw null;
        }

        // Generated from `ServiceStack.Host.ServiceExecFn` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public delegate System.Threading.Tasks.Task<object> ServiceExecFn(ServiceStack.Web.IRequest requestContext, object request);

        // Generated from `ServiceStack.Host.ServiceMetadata` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class ServiceMetadata
        {
            public void Add(System.Type serviceType, System.Type requestType, System.Type responseType) => throw null;
            public static void AddReferencedTypes(System.Collections.Generic.HashSet<System.Type> to, System.Type type) => throw null;
            public void AfterInit() => throw null;
            public bool CanAccess(ServiceStack.Format format, string operationName) => throw null;
            public bool CanAccess(ServiceStack.Web.IRequest httpReq, ServiceStack.Format format, string operationName) => throw null;
            public bool CanAccess(ServiceStack.RequestAttributes reqAttrs, ServiceStack.Format format, string operationName) => throw null;
            public System.Collections.Generic.List<System.Action<ServiceStack.MetadataType>> ConfigureMetadataTypes { get => throw null; set => throw null; }
            public System.Collections.Generic.List<System.Action<ServiceStack.Host.Operation>> ConfigureOperations { get => throw null; set => throw null; }
            public object CreateRequestDto(System.Type requestType, object dto) => throw null;
            public object CreateRequestFromUrl(string relativeOrAbsoluteUrl, string method = default(string)) => throw null;
            public System.Type FindDtoType(string typeName) => throw null;
            public ServiceStack.Host.RestPath FindRoute(string pathInfo, string method = default(string)) => throw null;
            public System.Collections.Generic.HashSet<System.Type> ForceInclude { get => throw null; set => throw null; }
            public System.Collections.Generic.HashSet<System.Type> GetAllDtos() => throw null;
            public System.Collections.Generic.List<string> GetAllOperationNames() => throw null;
            public System.Collections.Generic.List<System.Type> GetAllOperationTypes() => throw null;
            public System.Collections.Generic.List<string> GetAllPermissions() => throw null;
            public System.Collections.Generic.List<string> GetAllRoles() => throw null;
            public System.Collections.Generic.List<ServiceStack.Host.ActionMethod> GetImplementedActions(System.Type serviceType, System.Type requestType) => throw null;
            public System.Collections.Generic.List<ServiceStack.MetadataType> GetMetadataTypesForOperation(ServiceStack.Web.IRequest httpReq, ServiceStack.Host.Operation op) => throw null;
            public ServiceStack.Host.Operation GetOperation(System.Type requestType) => throw null;
            public System.Collections.Generic.List<System.Reflection.Assembly> GetOperationAssemblies() => throw null;
            public System.Collections.Generic.List<ServiceStack.Host.OperationDto> GetOperationDtos() => throw null;
            public System.Collections.Generic.List<string> GetOperationNamesForMetadata(ServiceStack.Web.IRequest httpReq) => throw null;
            public System.Collections.Generic.List<string> GetOperationNamesForMetadata(ServiceStack.Web.IRequest httpReq, ServiceStack.Format format) => throw null;
            public System.Type GetOperationType(string operationTypeName) => throw null;
            public System.Collections.Generic.List<ServiceStack.Host.Operation> GetOperationsByTag(string tag) => throw null;
            public System.Collections.Generic.List<ServiceStack.Host.Operation> GetOperationsByTags(string[] tags) => throw null;
            public System.Type GetRequestType(string requestDtoName) => throw null;
            public System.Type GetResponseTypeByRequest(System.Type requestType) => throw null;
            public System.Type GetServiceTypeByRequest(System.Type requestType) => throw null;
            public System.Type GetServiceTypeByResponse(System.Type responseType) => throw null;
            public bool HasImplementation(ServiceStack.Host.Operation operation, ServiceStack.Format format) => throw null;
            public bool IsAuthorized(ServiceStack.Host.Operation operation, ServiceStack.Web.IRequest req, ServiceStack.Auth.IAuthSession session) => throw null;
            public System.Threading.Tasks.Task<bool> IsAuthorizedAsync(ServiceStack.Host.Operation operation, ServiceStack.Web.IRequest req, ServiceStack.Auth.IAuthSession session) => throw null;
            public static bool IsDtoType(System.Type type) => throw null;
            public bool IsVisible(ServiceStack.Web.IRequest httpReq, ServiceStack.Format format, string operationName) => throw null;
            public bool IsVisible(ServiceStack.Web.IRequest httpReq, ServiceStack.Host.Operation operation) => throw null;
            public bool IsVisible(ServiceStack.Web.IRequest httpReq, System.Type requestType) => throw null;
            public System.Collections.Generic.Dictionary<string, ServiceStack.Host.Operation> OperationNamesMap { get => throw null; set => throw null; }
            public System.Collections.Generic.IEnumerable<ServiceStack.Host.Operation> Operations { get => throw null; }
            public System.Collections.Generic.Dictionary<System.Type, ServiceStack.Host.Operation> OperationsMap { get => throw null; set => throw null; }
            public System.Collections.Generic.Dictionary<System.Type, ServiceStack.Host.Operation> OperationsResponseMap { get => throw null; set => throw null; }
            public System.Collections.Generic.HashSet<System.Type> RequestTypes { get => throw null; set => throw null; }
            public System.Collections.Generic.HashSet<System.Type> ResponseTypes { get => throw null; set => throw null; }
            public ServiceMetadata(System.Collections.Generic.List<ServiceStack.Host.RestPath> restPaths) => throw null;
            public System.Collections.Generic.HashSet<System.Type> ServiceTypes { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Host.ServiceMetadataExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class ServiceMetadataExtensions
        {
            public static System.Collections.Generic.List<ServiceStack.ApiMemberAttribute> GetApiMembers(this System.Type operationType) => throw null;
            public static System.Collections.Generic.List<System.Reflection.Assembly> GetAssemblies(this ServiceStack.Host.Operation operation) => throw null;
            public static ServiceStack.Host.OperationDto ToOperationDto(this ServiceStack.Host.Operation operation) => throw null;
        }

        // Generated from `ServiceStack.Host.ServiceRequestExec<,>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class ServiceRequestExec<TService, TRequest> : ServiceStack.Host.IServiceExec
        {
            public object Execute(ServiceStack.Web.IRequest requestContext, object instance, object request) => throw null;
            public ServiceRequestExec() => throw null;
        }

        // Generated from `ServiceStack.Host.ServiceRoutes` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class ServiceRoutes : ServiceStack.Web.IServiceRoutes
        {
            public ServiceStack.Web.IServiceRoutes Add(System.Type requestType, string restPath, string verbs) => throw null;
            public ServiceStack.Web.IServiceRoutes Add(System.Type requestType, string restPath, string verbs, int priority) => throw null;
            public ServiceStack.Web.IServiceRoutes Add(System.Type requestType, string restPath, string verbs, string summary, string notes) => throw null;
            public ServiceStack.Web.IServiceRoutes Add(System.Type requestType, string restPath, string verbs, string summary, string notes, string matches) => throw null;
            public ServiceStack.Web.IServiceRoutes Add<TRequest>(string restPath) => throw null;
            public ServiceStack.Web.IServiceRoutes Add<TRequest>(string restPath, string verbs) => throw null;
            public ServiceRoutes(ServiceStack.ServiceStackHost appHost) => throw null;
        }

        // Generated from `ServiceStack.Host.ServiceRunner<>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class ServiceRunner<TRequest> : ServiceStack.Web.IServiceRunner, ServiceStack.Web.IServiceRunner<TRequest>
        {
            protected ServiceStack.Host.ActionContext ActionContext;
            public virtual object AfterEachRequest(ServiceStack.Web.IRequest req, TRequest request, object response, object service) => throw null;
            protected ServiceStack.IAppHost AppHost;
            public virtual void BeforeEachRequest(ServiceStack.Web.IRequest req, TRequest request, object service) => throw null;
            public virtual object Execute(ServiceStack.Web.IRequest req, object instance, ServiceStack.Messaging.IMessage<TRequest> request) => throw null;
            public virtual object Execute(ServiceStack.Web.IRequest req, object instance, TRequest requestDto) => throw null;
            public virtual System.Threading.Tasks.Task<object> ExecuteAsync(ServiceStack.Web.IRequest req, object instance, TRequest requestDto) => throw null;
            public object ExecuteOneWay(ServiceStack.Web.IRequest req, object instance, TRequest requestDto) => throw null;
            public virtual System.Threading.Tasks.Task<object> HandleExceptionAsync(ServiceStack.Web.IRequest req, TRequest requestDto, System.Exception ex) => throw null;
            public virtual System.Threading.Tasks.Task<object> HandleExceptionAsync(ServiceStack.Web.IRequest req, TRequest requestDto, System.Exception ex, object service) => throw null;
            protected static ServiceStack.Logging.ILog Log;
            protected System.Threading.Tasks.Task<object> ManagedHandleExceptionAsync(ServiceStack.Web.IRequest req, TRequest requestDto, System.Exception ex, object service) => throw null;
            public virtual object OnAfterExecute(ServiceStack.Web.IRequest req, object response) => throw null;
            public virtual object OnAfterExecute(ServiceStack.Web.IRequest req, object response, object service) => throw null;
            public virtual void OnBeforeExecute(ServiceStack.Web.IRequest req, TRequest request) => throw null;
            public virtual void OnBeforeExecute(ServiceStack.Web.IRequest req, TRequest request, object service) => throw null;
            public object Process(ServiceStack.Web.IRequest requestContext, object instance, object request) => throw null;
            protected ServiceStack.Web.IRequestFilterBase[] RequestFilters;
            public T ResolveService<T>(ServiceStack.Web.IRequest requestContext) => throw null;
            protected ServiceStack.Web.IResponseFilterBase[] ResponseFilters;
            protected ServiceStack.Host.ActionInvokerFn ServiceAction;
            public ServiceRunner(ServiceStack.IAppHost appHost, ServiceStack.Host.ActionContext actionContext) => throw null;
        }

        // Generated from `ServiceStack.Host.StreamSerializerResolverDelegate` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public delegate bool StreamSerializerResolverDelegate(ServiceStack.Web.IRequest requestContext, object dto, ServiceStack.Web.IResponse httpRes);

        // Generated from `ServiceStack.Host.TypedFilter<>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class TypedFilter<T> : ServiceStack.Host.ITypedFilter
        {
            public void Invoke(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object dto) => throw null;
            public TypedFilter(System.Action<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, T> action) => throw null;
        }

        // Generated from `ServiceStack.Host.TypedFilterAsync<>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class TypedFilterAsync<T> : ServiceStack.Host.ITypedFilterAsync
        {
            public System.Threading.Tasks.Task InvokeAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object dto) => throw null;
            public TypedFilterAsync(System.Func<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, T, System.Threading.Tasks.Task> action) => throw null;
        }

        // Generated from `ServiceStack.Host.VoidActionInvokerFn` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public delegate void VoidActionInvokerFn(object instance, object request);

        // Generated from `ServiceStack.Host.XsdMetadata` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class XsdMetadata
        {
            public bool Flash { get => throw null; set => throw null; }
            public static System.Type GetBaseTypeWithTheSameName(System.Type type) => throw null;
            public System.Collections.Generic.List<string> GetOneWayOperationNames(ServiceStack.Format format, System.Collections.Generic.HashSet<System.Type> soapTypes) => throw null;
            public System.Collections.Generic.List<string> GetReplyOperationNames(ServiceStack.Format format, System.Collections.Generic.HashSet<System.Type> soapTypes) => throw null;
            public ServiceStack.Host.ServiceMetadata Metadata { get => throw null; set => throw null; }
            public XsdMetadata(ServiceStack.Host.ServiceMetadata metadata, bool flash = default(bool)) => throw null;
        }

        namespace Handlers
        {
            // Generated from `ServiceStack.Host.Handlers.CustomActionHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class CustomActionHandler : ServiceStack.Host.Handlers.HttpAsyncTaskHandler
            {
                public System.Action<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse> Action { get => throw null; set => throw null; }
                public CustomActionHandler(System.Action<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse> action) => throw null;
                public override void ProcessRequest(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, string operationName) => throw null;
            }

            // Generated from `ServiceStack.Host.Handlers.CustomActionHandlerAsync` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class CustomActionHandlerAsync : ServiceStack.Host.Handlers.HttpAsyncTaskHandler
            {
                public System.Func<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, System.Threading.Tasks.Task> Action { get => throw null; set => throw null; }
                public CustomActionHandlerAsync(System.Func<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, System.Threading.Tasks.Task> action) => throw null;
                public override System.Threading.Tasks.Task ProcessRequestAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, string operationName) => throw null;
            }

            // Generated from `ServiceStack.Host.Handlers.CustomResponseHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class CustomResponseHandler : ServiceStack.Host.Handlers.HttpAsyncTaskHandler
            {
                public System.Func<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, object> Action { get => throw null; set => throw null; }
                public CustomResponseHandler(System.Func<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, object> action, string operationName = default(string)) => throw null;
                public override void ProcessRequest(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, string operationName) => throw null;
            }

            // Generated from `ServiceStack.Host.Handlers.CustomResponseHandlerAsync` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class CustomResponseHandlerAsync : ServiceStack.Host.Handlers.HttpAsyncTaskHandler
            {
                public System.Func<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, System.Threading.Tasks.Task<object>> Action { get => throw null; set => throw null; }
                public CustomResponseHandlerAsync(System.Func<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, System.Threading.Tasks.Task<object>> action, string operationName = default(string)) => throw null;
                public override System.Threading.Tasks.Task ProcessRequestAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, string operationName) => throw null;
            }

            // Generated from `ServiceStack.Host.Handlers.ForbiddenHttpHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class ForbiddenHttpHandler : ServiceStack.Host.Handlers.HttpAsyncTaskHandler
            {
                protected System.Text.StringBuilder CreateForbiddenResponseTextBody(ServiceStack.Web.IRequest request) => throw null;
                public string DefaultHandler { get => throw null; set => throw null; }
                public string DefaultRootFileName { get => throw null; set => throw null; }
                public ForbiddenHttpHandler() => throw null;
                public override bool IsReusable { get => throw null; }
                public override System.Threading.Tasks.Task ProcessRequestAsync(ServiceStack.Web.IRequest request, ServiceStack.Web.IResponse response, string operationName) => throw null;
                public override bool RunAsAsync() => throw null;
                public string WebHostPhysicalPath { get => throw null; set => throw null; }
                public string WebHostUrl { get => throw null; set => throw null; }
            }

            // Generated from `ServiceStack.Host.Handlers.GenericHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class GenericHandler : ServiceStack.Host.Handlers.ServiceStackHandlerBase, ServiceStack.Host.Handlers.IRequestHttpHandler
            {
                public ServiceStack.RequestAttributes ContentTypeAttribute { get => throw null; set => throw null; }
                public System.Threading.Tasks.Task<object> CreateRequestAsync(ServiceStack.Web.IRequest req, string operationName) => throw null;
                public GenericHandler(string contentType, ServiceStack.RequestAttributes handlerAttributes, ServiceStack.Feature format) => throw null;
                public string HandlerContentType { get => throw null; set => throw null; }
                public override System.Threading.Tasks.Task ProcessRequestAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, string operationName) => throw null;
                public override bool RunAsAsync() => throw null;
            }

            // Generated from `ServiceStack.Host.Handlers.HttpAsyncTaskHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public abstract class HttpAsyncTaskHandler : ServiceStack.Host.Handlers.IServiceStackHandler, ServiceStack.Host.IHttpAsyncHandler, ServiceStack.Host.IHttpHandler
            {
                protected virtual System.Threading.Tasks.Task CreateProcessRequestTask(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, string operationName) => throw null;
                protected System.Threading.Tasks.Task HandleException(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, string operationName, System.Exception ex) => throw null;
                protected HttpAsyncTaskHandler() => throw null;
                public virtual bool IsReusable { get => throw null; }
                public virtual System.Threading.Tasks.Task Middleware(Microsoft.AspNetCore.Http.HttpContext context, System.Func<System.Threading.Tasks.Task> next) => throw null;
                public virtual void ProcessRequest(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, string operationName) => throw null;
                public virtual System.Threading.Tasks.Task ProcessRequestAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, string operationName) => throw null;
                public string RequestName { get => throw null; set => throw null; }
                public virtual bool RunAsAsync() => throw null;
            }

            // Generated from `ServiceStack.Host.Handlers.IRequestHttpHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public interface IRequestHttpHandler
            {
                System.Threading.Tasks.Task<object> CreateRequestAsync(ServiceStack.Web.IRequest req, string operationName);
                System.Threading.Tasks.Task<object> GetResponseAsync(ServiceStack.Web.IRequest httpReq, object request);
                System.Threading.Tasks.Task HandleResponse(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, object response);
                string RequestName { get; }
            }

            // Generated from `ServiceStack.Host.Handlers.IServiceStackHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public interface IServiceStackHandler
            {
                void ProcessRequest(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, string operationName);
                System.Threading.Tasks.Task ProcessRequestAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, string operationName);
                string RequestName { get; }
            }

            // Generated from `ServiceStack.Host.Handlers.JsonOneWayHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class JsonOneWayHandler : ServiceStack.Host.Handlers.GenericHandler
            {
                public JsonOneWayHandler() : base(default(string), default(ServiceStack.RequestAttributes), default(ServiceStack.Feature)) => throw null;
            }

            // Generated from `ServiceStack.Host.Handlers.JsonReplyHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class JsonReplyHandler : ServiceStack.Host.Handlers.GenericHandler
            {
                public JsonReplyHandler() : base(default(string), default(ServiceStack.RequestAttributes), default(ServiceStack.Feature)) => throw null;
            }

            // Generated from `ServiceStack.Host.Handlers.JsvOneWayHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class JsvOneWayHandler : ServiceStack.Host.Handlers.GenericHandler
            {
                public JsvOneWayHandler() : base(default(string), default(ServiceStack.RequestAttributes), default(ServiceStack.Feature)) => throw null;
            }

            // Generated from `ServiceStack.Host.Handlers.JsvReplyHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class JsvReplyHandler : ServiceStack.Host.Handlers.GenericHandler
            {
                public JsvReplyHandler() : base(default(string), default(ServiceStack.RequestAttributes), default(ServiceStack.Feature)) => throw null;
                public override System.Threading.Tasks.Task ProcessRequestAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, string operationName) => throw null;
            }

            // Generated from `ServiceStack.Host.Handlers.NotFoundHttpHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class NotFoundHttpHandler : ServiceStack.Host.Handlers.HttpAsyncTaskHandler
            {
                public string DefaultHandler { get => throw null; set => throw null; }
                public string DefaultRootFileName { get => throw null; set => throw null; }
                public override bool IsReusable { get => throw null; }
                public NotFoundHttpHandler() => throw null;
                public override System.Threading.Tasks.Task ProcessRequestAsync(ServiceStack.Web.IRequest request, ServiceStack.Web.IResponse response, string operationName) => throw null;
                public string WebHostPhysicalPath { get => throw null; set => throw null; }
                public string WebHostUrl { get => throw null; set => throw null; }
            }

            // Generated from `ServiceStack.Host.Handlers.RedirectHttpHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class RedirectHttpHandler : ServiceStack.Host.Handlers.HttpAsyncTaskHandler
            {
                public string AbsoluteUrl { get => throw null; set => throw null; }
                public static string MakeRelative(string relativeUrl) => throw null;
                public override System.Threading.Tasks.Task ProcessRequestAsync(ServiceStack.Web.IRequest request, ServiceStack.Web.IResponse response, string operationName) => throw null;
                public RedirectHttpHandler() => throw null;
                public string RelativeUrl { get => throw null; set => throw null; }
                public System.Net.HttpStatusCode StatusCode { get => throw null; set => throw null; }
            }

            // Generated from `ServiceStack.Host.Handlers.RequestHandlerInfo` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class RequestHandlerInfo
            {
                public string HandlerType { get => throw null; set => throw null; }
                public string OperationName { get => throw null; set => throw null; }
                public string PathInfo { get => throw null; set => throw null; }
                public RequestHandlerInfo() => throw null;
            }

            // Generated from `ServiceStack.Host.Handlers.RequestInfo` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class RequestInfo
            {
                public RequestInfo() => throw null;
            }

            // Generated from `ServiceStack.Host.Handlers.RequestInfoHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class RequestInfoHandler : ServiceStack.Host.Handlers.HttpAsyncTaskHandler
            {
                public static ServiceStack.Host.Handlers.RequestInfoResponse GetRequestInfo(ServiceStack.Web.IRequest httpReq) => throw null;
                public static ServiceStack.Host.Handlers.RequestHandlerInfo LastRequestInfo;
                public override System.Threading.Tasks.Task ProcessRequestAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, string operationName) => throw null;
                public ServiceStack.Host.Handlers.RequestInfoResponse RequestInfo { get => throw null; set => throw null; }
                public RequestInfoHandler() => throw null;
                public static System.Collections.Generic.Dictionary<string, string> ToDictionary(System.Collections.Specialized.NameValueCollection nvc) => throw null;
                public static string ToString(System.Collections.Specialized.NameValueCollection nvc) => throw null;
            }

            // Generated from `ServiceStack.Host.Handlers.RequestInfoResponse` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class RequestInfoResponse
            {
                public string AbsoluteUri { get => throw null; set => throw null; }
                public System.Collections.Generic.List<string> AcceptTypes { get => throw null; set => throw null; }
                public System.Collections.Generic.List<string> AllOperationNames { get => throw null; set => throw null; }
                public string ApplicationBaseUrl { get => throw null; set => throw null; }
                public string ApplicationPath { get => throw null; set => throw null; }
                public string ApplicationVirtualPath { get => throw null; set => throw null; }
                public System.Collections.Generic.List<ServiceStack.ResponseStatus> AsyncErrors { get => throw null; set => throw null; }
                public System.Int64 ContentLength { get => throw null; set => throw null; }
                public string ContentRootDirectoryPath { get => throw null; set => throw null; }
                public string ContentType { get => throw null; set => throw null; }
                public string CurrentDirectory { get => throw null; set => throw null; }
                public string Date { get => throw null; set => throw null; }
                public string DebugString { get => throw null; set => throw null; }
                public string ErrorCode { get => throw null; set => throw null; }
                public string ErrorMessage { get => throw null; set => throw null; }
                public System.Collections.Generic.Dictionary<string, string> FormData { get => throw null; set => throw null; }
                public string GetLeftPath { get => throw null; set => throw null; }
                public string GetPathUrl { get => throw null; set => throw null; }
                public string HandlerFactoryArgs { get => throw null; set => throw null; }
                public string HandlerFactoryPath { get => throw null; set => throw null; }
                public System.Collections.Generic.Dictionary<string, string> Headers { get => throw null; set => throw null; }
                public string Host { get => throw null; set => throw null; }
                public string HostType { get => throw null; set => throw null; }
                public string HttpMethod { get => throw null; set => throw null; }
                public string Ipv4Addresses { get => throw null; set => throw null; }
                public string Ipv6Addresses { get => throw null; set => throw null; }
                public ServiceStack.Host.Handlers.RequestHandlerInfo LastRequestInfo { get => throw null; set => throw null; }
                public System.Collections.Generic.Dictionary<string, string> LogonUserInfo { get => throw null; set => throw null; }
                public string OperationName { get => throw null; set => throw null; }
                public System.Collections.Generic.List<string> OperationNames { get => throw null; set => throw null; }
                public string OriginalPathInfo { get => throw null; set => throw null; }
                public string Path { get => throw null; set => throw null; }
                public string PathInfo { get => throw null; set => throw null; }
                public System.Collections.Generic.List<string> PluginsLoaded { get => throw null; set => throw null; }
                public System.Collections.Generic.Dictionary<string, string> QueryString { get => throw null; set => throw null; }
                public string RawUrl { get => throw null; set => throw null; }
                public string RequestAttributes { get => throw null; set => throw null; }
                public RequestInfoResponse() => throw null;
                public System.Collections.Generic.Dictionary<string, string> RequestResponseMap { get => throw null; set => throw null; }
                public string ResolveAbsoluteUrl { get => throw null; set => throw null; }
                public string ResponseContentType { get => throw null; set => throw null; }
                public string RootDirectoryPath { get => throw null; set => throw null; }
                public string ServiceName { get => throw null; set => throw null; }
                public System.Collections.Generic.List<ServiceStack.ResponseStatus> StartUpErrors { get => throw null; set => throw null; }
                public string StartedAt { get => throw null; set => throw null; }
                public System.Collections.Generic.Dictionary<string, string> Stats { get => throw null; set => throw null; }
                public int Status { get => throw null; set => throw null; }
                public bool StripApplicationVirtualPath { get => throw null; set => throw null; }
                public string Url { get => throw null; set => throw null; }
                public string Usage { get => throw null; set => throw null; }
                public string UserHostAddress { get => throw null; set => throw null; }
                public string VirtualAbsolutePathRoot { get => throw null; set => throw null; }
                public string VirtualAppRelativePathRoot { get => throw null; set => throw null; }
                public System.Collections.Generic.List<string> VirtualPathProviderFiles { get => throw null; set => throw null; }
                public string WebHostUrl { get => throw null; set => throw null; }
            }

            // Generated from `ServiceStack.Host.Handlers.ServiceStackHandlerBase` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public abstract class ServiceStackHandlerBase : ServiceStack.Host.Handlers.HttpAsyncTaskHandler
            {
                protected bool AssertAccess(ServiceStack.Web.IHttpRequest httpReq, ServiceStack.Web.IHttpResponse httpRes, ServiceStack.Feature feature, string operationName) => throw null;
                protected static void AssertOperationExists(string operationName, System.Type type) => throw null;
                protected static System.Threading.Tasks.Task<object> CreateContentTypeRequestAsync(ServiceStack.Web.IRequest httpReq, System.Type requestType, string contentType) => throw null;
                public static System.Threading.Tasks.Task<object> DeserializeHttpRequestAsync(System.Type operationType, ServiceStack.Web.IRequest httpReq, string contentType) => throw null;
                protected static object ExecuteService(object request, ServiceStack.Web.IRequest httpReq) => throw null;
                protected static object GetCustomRequestFromBinder(ServiceStack.Web.IRequest httpReq, System.Type requestType) => throw null;
                public static System.Type GetOperationType(string operationName) => throw null;
                public virtual System.Threading.Tasks.Task<object> GetResponseAsync(ServiceStack.Web.IRequest httpReq, object request) => throw null;
                public System.Threading.Tasks.Task HandleResponse(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, object response) => throw null;
                public ServiceStack.RequestAttributes HandlerAttributes { get => throw null; set => throw null; }
                public override bool IsReusable { get => throw null; }
                protected ServiceStackHandlerBase() => throw null;
                public void UpdateResponseContentType(ServiceStack.Web.IRequest httpReq, object response) => throw null;
                public System.Threading.Tasks.Task WriteDebugResponse(ServiceStack.Web.IResponse httpRes, object response) => throw null;
            }

            // Generated from `ServiceStack.Host.Handlers.StaticContentHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class StaticContentHandler : ServiceStack.Host.Handlers.HttpAsyncTaskHandler
            {
                public override System.Threading.Tasks.Task ProcessRequestAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, string operationName) => throw null;
                public StaticContentHandler(System.Byte[] bytes, string contentType) => throw null;
                public StaticContentHandler(System.IO.Stream stream, string contentType) => throw null;
                public StaticContentHandler(string textContents, string contentType) => throw null;
            }

            // Generated from `ServiceStack.Host.Handlers.StaticFileHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class StaticFileHandler : ServiceStack.Host.Handlers.HttpAsyncTaskHandler
            {
                public int BufferSize { get => throw null; set => throw null; }
                public static int DefaultBufferSize;
                public override bool IsReusable { get => throw null; }
                public static bool MonoDirectoryExists(string dirPath, string appFilePath) => throw null;
                public override System.Threading.Tasks.Task ProcessRequestAsync(ServiceStack.Web.IRequest request, ServiceStack.Web.IResponse response, string operationName) => throw null;
                public static System.Action<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, ServiceStack.IO.IVirtualFile> ResponseFilter { get => throw null; set => throw null; }
                public static void SetDefaultFile(string defaultFilePath, System.Byte[] defaultFileContents, System.DateTime defaultFileModified) => throw null;
                public StaticFileHandler() => throw null;
                public StaticFileHandler(ServiceStack.IO.IVirtualDirectory virtualDir) => throw null;
                public StaticFileHandler(ServiceStack.IO.IVirtualFile virtualFile) => throw null;
                public StaticFileHandler(string virtualPath) => throw null;
                public ServiceStack.IO.IVirtualNode VirtualNode { get => throw null; set => throw null; }
            }

            // Generated from `ServiceStack.Host.Handlers.XmlOneWayHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class XmlOneWayHandler : ServiceStack.Host.Handlers.GenericHandler
            {
                public XmlOneWayHandler() : base(default(string), default(ServiceStack.RequestAttributes), default(ServiceStack.Feature)) => throw null;
            }

            // Generated from `ServiceStack.Host.Handlers.XmlReplyHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class XmlReplyHandler : ServiceStack.Host.Handlers.GenericHandler
            {
                public XmlReplyHandler() : base(default(string), default(ServiceStack.RequestAttributes), default(ServiceStack.Feature)) => throw null;
            }

        }
        namespace NetCore
        {
            // Generated from `ServiceStack.Host.NetCore.NetCoreRequest` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class NetCoreRequest : ServiceStack.Configuration.IHasResolver, ServiceStack.Configuration.IResolver, ServiceStack.Host.IHasBufferedStream, ServiceStack.IHasTraceId, ServiceStack.IO.IHasVirtualFiles, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId, ServiceStack.Web.IHttpRequest, ServiceStack.Web.IRequest, System.IServiceProvider
            {
                public string AbsoluteUri { get => throw null; }
                public string Accept { get => throw null; }
                public string[] AcceptTypes { get => throw null; }
                public string Authorization { get => throw null; }
                public System.IO.MemoryStream BufferedStream { get => throw null; set => throw null; }
                public System.Int64 ContentLength { get => throw null; }
                public string ContentType { get => throw null; }
                public System.Collections.Generic.IDictionary<string, System.Net.Cookie> Cookies { get => throw null; }
                public object Dto { get => throw null; set => throw null; }
                public ServiceStack.Web.IHttpFile[] Files { get => throw null; }
                public System.Collections.Specialized.NameValueCollection FormData { get => throw null; }
                public ServiceStack.IO.IVirtualDirectory GetDirectory() => throw null;
                public ServiceStack.IO.IVirtualFile GetFile() => throw null;
                public string GetRawBody() => throw null;
                public System.Threading.Tasks.Task<string> GetRawBodyAsync() => throw null;
                public object GetService(System.Type serviceType) => throw null;
                public bool HasExplicitResponseContentType { get => throw null; set => throw null; }
                public System.Collections.Specialized.NameValueCollection Headers { get => throw null; }
                public Microsoft.AspNetCore.Http.HttpContext HttpContext { get => throw null; }
                public string HttpMethod { get => throw null; }
                public Microsoft.AspNetCore.Http.HttpRequest HttpRequest { get => throw null; }
                public ServiceStack.Web.IHttpResponse HttpResponse { get => throw null; }
                public string Id { get => throw null; }
                public System.IO.Stream InputStream { get => throw null; }
                public bool IsDirectory { get => throw null; }
                public bool IsFile { get => throw null; }
                public bool IsLocal { get => throw null; }
                public bool IsSecureConnection { get => throw null; }
                public System.Collections.Generic.Dictionary<string, object> Items { get => throw null; }
                public NetCoreRequest(Microsoft.AspNetCore.Http.HttpContext context, string operationName, ServiceStack.RequestAttributes attrs = default(ServiceStack.RequestAttributes), string pathInfo = default(string)) => throw null;
                public string OperationName { get => throw null; set => throw null; }
                public string OriginalPathInfo { get => throw null; }
                public object OriginalRequest { get => throw null; }
                public string PathInfo { get => throw null; }
                public System.Collections.Specialized.NameValueCollection QueryString { get => throw null; }
                public string RawUrl { get => throw null; }
                public string RemoteIp { get => throw null; }
                public ServiceStack.RequestAttributes RequestAttributes { get => throw null; set => throw null; }
                public ServiceStack.Web.IRequestPreferences RequestPreferences { get => throw null; }
                public ServiceStack.Configuration.IResolver Resolver { get => throw null; set => throw null; }
                public ServiceStack.Web.IResponse Response { get => throw null; }
                public string ResponseContentType { get => throw null; set => throw null; }
                public string TraceId { get => throw null; }
                public T TryResolve<T>() => throw null;
                public System.Uri UrlReferrer { get => throw null; }
                public bool UseBufferedStream { get => throw null; set => throw null; }
                public string UserAgent { get => throw null; }
                public string UserHostAddress { get => throw null; }
                public string Verb { get => throw null; }
                public string XForwardedFor { get => throw null; }
                public int? XForwardedPort { get => throw null; }
                public string XForwardedProtocol { get => throw null; }
                public string XRealIp { get => throw null; }
                public static ServiceStack.Logging.ILog log;
            }

            // Generated from `ServiceStack.Host.NetCore.NetCoreResponse` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class NetCoreResponse : ServiceStack.Web.IHasHeaders, ServiceStack.Web.IHttpResponse, ServiceStack.Web.IResponse
            {
                public void AddHeader(string name, string value) => throw null;
                public System.IO.MemoryStream BufferedStream { get => throw null; set => throw null; }
                public void ClearCookies() => throw null;
                public void Close() => throw null;
                public System.Threading.Tasks.Task CloseAsync(System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
                public string ContentType { get => throw null; set => throw null; }
                public ServiceStack.Web.ICookies Cookies { get => throw null; }
                public object Dto { get => throw null; set => throw null; }
                public void End() => throw null;
                public void Flush() => throw null;
                public System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
                public string GetHeader(string name) => throw null;
                public bool HasStarted { get => throw null; }
                public System.Collections.Generic.Dictionary<string, string> Headers { get => throw null; }
                public Microsoft.AspNetCore.Http.HttpContext HttpContext { get => throw null; }
                public Microsoft.AspNetCore.Http.HttpResponse HttpResponse { get => throw null; }
                public bool IsClosed { get => throw null; }
                public System.Collections.Generic.Dictionary<string, object> Items { get => throw null; set => throw null; }
                public bool KeepAlive { get => throw null; set => throw null; }
                public NetCoreResponse(ServiceStack.Host.NetCore.NetCoreRequest request, Microsoft.AspNetCore.Http.HttpResponse response) => throw null;
                public object OriginalResponse { get => throw null; }
                public System.IO.Stream OutputStream { get => throw null; }
                public void Redirect(string url) => throw null;
                public void RemoveHeader(string name) => throw null;
                public ServiceStack.Web.IRequest Request { get => throw null; }
                public void SetContentLength(System.Int64 contentLength) => throw null;
                public void SetCookie(System.Net.Cookie cookie) => throw null;
                public int StatusCode { get => throw null; set => throw null; }
                public string StatusDescription { get => throw null; set => throw null; }
                public bool UseBufferedStream { get => throw null; set => throw null; }
            }

        }
    }
    namespace Html
    {
        // Generated from `ServiceStack.Html.BasicHtmlMinifier` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class BasicHtmlMinifier : ServiceStack.ICompressor
        {
            public BasicHtmlMinifier() => throw null;
            public string Compress(string html) => throw null;
            public static string MinifyHtml(string html) => throw null;
        }

        // Generated from `ServiceStack.Html.CssMinifier` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class CssMinifier : ServiceStack.ICompressor
        {
            public string Compress(string source) => throw null;
            public CssMinifier() => throw null;
            public static string MinifyCss(string css) => throw null;
        }

        // Generated from `ServiceStack.Html.HtmlCompressor` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class HtmlCompressor : ServiceStack.ICompressor
        {
            public static string ALL_TAGS;
            public static string BLOCK_TAGS_MAX;
            public static string BLOCK_TAGS_MIN;
            public string Compress(string html) => throw null;
            public bool CompressCss;
            public bool CompressJavaScript;
            public ServiceStack.ICompressor CssCompressor;
            public bool Enabled;
            public bool GenerateStatistics;
            public HtmlCompressor() => throw null;
            public ServiceStack.ICompressor JavaScriptCompressor;
            public static System.Text.RegularExpressions.Regex PHP_TAG_PATTERN;
            public bool PreserveLineBreaks;
            public System.Collections.Generic.List<System.Text.RegularExpressions.Regex> PreservePatterns;
            public bool RemoveComments;
            public bool RemoveFormAttributes;
            public bool RemoveHttpProtocol;
            public bool RemoveHttpsProtocol;
            public bool RemoveInputAttributes;
            public bool RemoveIntertagSpaces;
            public bool RemoveJavaScriptProtocol;
            public bool RemoveLinkAttributes;
            public bool RemoveMultiSpaces;
            public bool RemoveQuotes;
            public bool RemoveScriptAttributes;
            public bool RemoveStyleAttributes;
            public string RemoveSurroundingSpaces;
            public static System.Text.RegularExpressions.Regex SERVER_SCRIPT_TAG_PATTERN;
            public static System.Text.RegularExpressions.Regex SERVER_SIDE_INCLUDE_PATTERN;
            public bool SimpleBooleanAttributes;
            public bool SimpleDoctype;
            public ServiceStack.Html.HtmlCompressorStatistics Statistics;
        }

        // Generated from `ServiceStack.Html.HtmlCompressorExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class HtmlCompressorExtensions
        {
            public static void AddPreservePattern(this ServiceStack.Html.HtmlCompressor compressor, params System.Text.RegularExpressions.Regex[] regexes) => throw null;
        }

        // Generated from `ServiceStack.Html.HtmlCompressorStatistics` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class HtmlCompressorStatistics
        {
            public ServiceStack.Html.HtmlMetrics CompressedMetrics;
            public HtmlCompressorStatistics() => throw null;
            public ServiceStack.Html.HtmlMetrics OriginalMetrics;
            public int PreservedSize;
            public System.Int64 Time;
            public override string ToString() => throw null;
        }

        // Generated from `ServiceStack.Html.HtmlContextExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class HtmlContextExtensions
        {
            public static ServiceStack.Web.IRequest GetHttpRequest(this ServiceStack.Html.IHtmlContext html) => throw null;
        }

        // Generated from `ServiceStack.Html.HtmlMetrics` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class HtmlMetrics
        {
            public int EmptyChars;
            public int Filesize;
            public HtmlMetrics() => throw null;
            public int InlineEventSize;
            public int InlineScriptSize;
            public int InlineStyleSize;
            public override string ToString() => throw null;
        }

        // Generated from `ServiceStack.Html.HtmlStringExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class HtmlStringExtensions
        {
            public static ServiceStack.Host.IHtmlString AsRaw(this ServiceStack.IHtmlString htmlString) => throw null;
        }

        // Generated from `ServiceStack.Html.IHtmlContext` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IHtmlContext
        {
            ServiceStack.Web.IHttpRequest HttpRequest { get; }
        }

        // Generated from `ServiceStack.Html.IViewEngine` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IViewEngine
        {
            bool HasView(string viewName, ServiceStack.Web.IRequest httpReq = default(ServiceStack.Web.IRequest));
            System.Threading.Tasks.Task<bool> ProcessRequestAsync(ServiceStack.Web.IRequest req, object dto, System.IO.Stream outputStream);
            string RenderPartial(string pageName, object model, bool renderHtml, System.IO.StreamWriter writer = default(System.IO.StreamWriter), ServiceStack.Html.IHtmlContext htmlHelper = default(ServiceStack.Html.IHtmlContext));
        }

        // Generated from `ServiceStack.Html.JSMinifier` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class JSMinifier : ServiceStack.ICompressor
        {
            public string Compress(string js) => throw null;
            public JSMinifier() => throw null;
            public static string MinifyJs(string js, bool ignoreErrors = default(bool)) => throw null;
        }

        // Generated from `ServiceStack.Html.Minifiers` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class Minifiers
        {
            public static ServiceStack.ICompressor Css;
            public static ServiceStack.ICompressor Html;
            public static ServiceStack.ICompressor HtmlAdvanced;
            public static ServiceStack.ICompressor JavaScript;
        }

        // Generated from `ServiceStack.Html.Minify` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        [System.Flags]
        public enum Minify
        {
            Css,
            Html,
            HtmlAdvanced,
            JavaScript,
        }

    }
    namespace HtmlModules
    {
        // Generated from `ServiceStack.HtmlModules.ApplyToLineContaining` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class ApplyToLineContaining : ServiceStack.HtmlModules.HtmlModuleLine
        {
            public ApplyToLineContaining(string token, System.Func<System.ReadOnlyMemory<System.Char>, System.ReadOnlyMemory<System.Char>> fn, ServiceStack.Run behaviour = default(ServiceStack.Run)) => throw null;
            public string Token { get => throw null; }
            public override System.ReadOnlyMemory<System.Char> Transform(System.ReadOnlyMemory<System.Char> line) => throw null;
        }

        // Generated from `ServiceStack.HtmlModules.FileHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class FileHandler : ServiceStack.HtmlModules.IHtmlModulesHandler
        {
            public System.ReadOnlyMemory<System.Byte> Execute(ServiceStack.HtmlModuleContext ctx, string path) => throw null;
            public FileHandler(string name) => throw null;
            public string Name { get => throw null; }
            public System.Func<ServiceStack.HtmlModuleContext, ServiceStack.IO.IVirtualPathProvider> VirtualFilesResolver { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.HtmlModules.FileTransformerOptions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class FileTransformerOptions
        {
            public System.Collections.Generic.List<ServiceStack.HtmlModules.HtmlModuleBlock> BlockTransformers { get => throw null; set => throw null; }
            public FileTransformerOptions() => throw null;
            public System.Collections.Generic.List<ServiceStack.HtmlModules.HtmlModuleBlock> FilesTransformers { get => throw null; set => throw null; }
            public System.Collections.Generic.List<ServiceStack.HtmlModules.HtmlModuleLine> LineTransformers { get => throw null; set => throw null; }
            public ServiceStack.HtmlModules.FileTransformerOptions Without(ServiceStack.Run behavior) => throw null;
        }

        // Generated from `ServiceStack.HtmlModules.FilesHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class FilesHandler : ServiceStack.HtmlModules.IHtmlModulesHandler
        {
            public System.ReadOnlyMemory<System.Byte> Execute(ServiceStack.HtmlModuleContext ctx, string paths) => throw null;
            public FilesHandler(string name) => throw null;
            public string Name { get => throw null; }
            public System.Func<ServiceStack.HtmlModuleContext, ServiceStack.IO.IVirtualPathProvider> VirtualFilesResolver { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.HtmlModules.FilesTransformer` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class FilesTransformer
        {
            public ServiceStack.HtmlModules.FilesTransformer Clone(System.Action<ServiceStack.HtmlModules.FilesTransformer> with = default(System.Action<ServiceStack.HtmlModules.FilesTransformer>)) => throw null;
            public void CopyAll(ServiceStack.IO.IVirtualFiles source, ServiceStack.IO.IVirtualFiles target, bool cleanTarget = default(bool), System.Func<ServiceStack.IO.IVirtualFile, bool> ignore = default(System.Func<ServiceStack.IO.IVirtualFile, bool>), System.Action<ServiceStack.IO.IVirtualFile, string> afterCopy = default(System.Action<ServiceStack.IO.IVirtualFile, string>)) => throw null;
            public static System.Collections.Generic.List<ServiceStack.HtmlModules.HtmlModuleLine> CssLineTransformers { get => throw null; }
            public static ServiceStack.HtmlModules.FilesTransformer Default { get => throw null; }
            public static ServiceStack.HtmlModules.FilesTransformer Defaults(bool? debugMode = default(bool?), System.Action<ServiceStack.HtmlModules.FilesTransformer> with = default(System.Action<ServiceStack.HtmlModules.FilesTransformer>)) => throw null;
            public System.Collections.Generic.Dictionary<string, ServiceStack.HtmlModules.FileTransformerOptions> FileExtensions { get => throw null; set => throw null; }
            public FilesTransformer() => throw null;
            public ServiceStack.HtmlModules.FileTransformerOptions GetExt(string fileExt) => throw null;
            public static System.Collections.Generic.List<ServiceStack.HtmlModules.HtmlModuleLine> HtmlLineTransformers { get => throw null; }
            public static System.Collections.Generic.List<ServiceStack.HtmlModules.HtmlModuleLine> JsLineTransformers { get => throw null; }
            public static ServiceStack.HtmlModules.FilesTransformer None { get => throw null; }
            public string ReadAll(ServiceStack.IO.IVirtualFile file) => throw null;
            public static void RecreateDirectory(string dirPath, int timeoutMs = default(int)) => throw null;
            public ServiceStack.HtmlModules.FilesTransformer Without(ServiceStack.Run behaviour) => throw null;
        }

        // Generated from `ServiceStack.HtmlModules.FilesTransformerUtils` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class FilesTransformerUtils
        {
            public static ServiceStack.HtmlModules.FilesTransformer Defaults(System.Action<ServiceStack.HtmlModules.FilesTransformer> with = default(System.Action<ServiceStack.HtmlModules.FilesTransformer>)) => throw null;
            public static ServiceStack.HtmlModules.FilesTransformer Minify(this ServiceStack.HtmlModules.FilesTransformer options, ServiceStack.Html.Minify minify, ServiceStack.Run behavior = default(ServiceStack.Run)) => throw null;
        }

        // Generated from `ServiceStack.HtmlModules.GatewayHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class GatewayHandler : ServiceStack.HtmlModules.IHtmlModulesHandler
        {
            public System.ReadOnlyMemory<System.Byte> Execute(ServiceStack.HtmlModuleContext ctx, string args) => throw null;
            public GatewayHandler(string name) => throw null;
            public string Name { get => throw null; }
        }

        // Generated from `ServiceStack.HtmlModules.HtmlHandlerFragment` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class HtmlHandlerFragment : ServiceStack.HtmlModules.IHtmlModuleFragment
        {
            public string Args { get => throw null; }
            public HtmlHandlerFragment(string token, string args, System.Func<ServiceStack.HtmlModuleContext, string, System.ReadOnlyMemory<System.Byte>> fn) => throw null;
            public string Token { get => throw null; }
            public System.Threading.Tasks.Task WriteToAsync(ServiceStack.HtmlModuleContext ctx, System.IO.Stream responseStream, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        }

        // Generated from `ServiceStack.HtmlModules.HtmlModuleBlock` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public abstract class HtmlModuleBlock
        {
            public ServiceStack.Run Behaviour { get => throw null; set => throw null; }
            public string EndTag { get => throw null; }
            protected HtmlModuleBlock(ServiceStack.Run behaviour) => throw null;
            protected HtmlModuleBlock(string startTag, string endTag, ServiceStack.Run behaviour = default(ServiceStack.Run)) => throw null;
            public string StartTag { get => throw null; }
            public virtual string Transform(System.Collections.Generic.List<string> lines) => throw null;
            public virtual string Transform(string block) => throw null;
        }

        // Generated from `ServiceStack.HtmlModules.HtmlModuleLine` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public abstract class HtmlModuleLine
        {
            public ServiceStack.Run Behaviour { get => throw null; set => throw null; }
            protected HtmlModuleLine() => throw null;
            public abstract System.ReadOnlyMemory<System.Char> Transform(System.ReadOnlyMemory<System.Char> line);
        }

        // Generated from `ServiceStack.HtmlModules.HtmlTextFragment` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class HtmlTextFragment : ServiceStack.HtmlModules.IHtmlModuleFragment
        {
            public HtmlTextFragment(System.ReadOnlyMemory<System.Char> text) => throw null;
            public HtmlTextFragment(string text) => throw null;
            public System.ReadOnlyMemory<System.Char> Text { get => throw null; }
            public System.ReadOnlyMemory<System.Byte> TextUtf8 { get => throw null; }
            public System.Threading.Tasks.Task WriteToAsync(ServiceStack.HtmlModuleContext ctx, System.IO.Stream responseStream, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        }

        // Generated from `ServiceStack.HtmlModules.HtmlTokenFragment` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class HtmlTokenFragment : ServiceStack.HtmlModules.IHtmlModuleFragment
        {
            public HtmlTokenFragment(string token, System.Func<ServiceStack.HtmlModuleContext, System.ReadOnlyMemory<System.Byte>> fn) => throw null;
            public string Token { get => throw null; }
            public System.Threading.Tasks.Task WriteToAsync(ServiceStack.HtmlModuleContext ctx, System.IO.Stream responseStream, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
        }

        // Generated from `ServiceStack.HtmlModules.IHtmlModuleFragment` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IHtmlModuleFragment
        {
            System.Threading.Tasks.Task WriteToAsync(ServiceStack.HtmlModuleContext ctx, System.IO.Stream responseStream, System.Threading.CancellationToken token = default(System.Threading.CancellationToken));
        }

        // Generated from `ServiceStack.HtmlModules.IHtmlModulesHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IHtmlModulesHandler
        {
            System.ReadOnlyMemory<System.Byte> Execute(ServiceStack.HtmlModuleContext ctx, string args);
            string Name { get; }
        }

        // Generated from `ServiceStack.HtmlModules.MinifyBlock` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class MinifyBlock : ServiceStack.HtmlModules.HtmlModuleBlock
        {
            public ServiceStack.ICompressor Compressor { get => throw null; }
            public System.Func<string, string> Convert { get => throw null; set => throw null; }
            public System.Collections.Generic.List<ServiceStack.HtmlModules.HtmlModuleLine> LineTransformers { get => throw null; set => throw null; }
            public MinifyBlock(ServiceStack.ICompressor compressor, ServiceStack.Run behaviour = default(ServiceStack.Run)) : base(default(ServiceStack.Run)) => throw null;
            public MinifyBlock(string startTag, string endTag, ServiceStack.ICompressor compressor, ServiceStack.Run behaviour = default(ServiceStack.Run)) : base(default(ServiceStack.Run)) => throw null;
            public override string Transform(string block) => throw null;
        }

        // Generated from `ServiceStack.HtmlModules.RawBlock` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class RawBlock : ServiceStack.HtmlModules.HtmlModuleBlock
        {
            public RawBlock(string startTag, string endTag, ServiceStack.Run behaviour = default(ServiceStack.Run)) : base(default(ServiceStack.Run)) => throw null;
        }

        // Generated from `ServiceStack.HtmlModules.RemoveBlock` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class RemoveBlock : ServiceStack.HtmlModules.HtmlModuleBlock
        {
            public RemoveBlock(string startTag, string endTag, ServiceStack.Run behaviour = default(ServiceStack.Run)) : base(default(ServiceStack.Run)) => throw null;
            public override string Transform(string block) => throw null;
        }

        // Generated from `ServiceStack.HtmlModules.RemoveLineContaining` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class RemoveLineContaining : ServiceStack.HtmlModules.HtmlModuleLine
        {
            public RemoveLineContaining(string[] tokens, ServiceStack.Run behaviour = default(ServiceStack.Run)) => throw null;
            public RemoveLineContaining(string token, ServiceStack.Run behaviour = default(ServiceStack.Run)) => throw null;
            public string[] Tokens { get => throw null; }
            public override System.ReadOnlyMemory<System.Char> Transform(System.ReadOnlyMemory<System.Char> line) => throw null;
        }

        // Generated from `ServiceStack.HtmlModules.RemoveLineEndingWith` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class RemoveLineEndingWith : ServiceStack.HtmlModules.HtmlModuleLine
        {
            public bool IgnoreWhiteSpace { get => throw null; }
            public RemoveLineEndingWith(string[] prefixes, bool ignoreWhiteSpace = default(bool), ServiceStack.Run behaviour = default(ServiceStack.Run)) => throw null;
            public RemoveLineEndingWith(string suffix, bool ignoreWhiteSpace = default(bool), ServiceStack.Run behaviour = default(ServiceStack.Run)) => throw null;
            public string[] Suffixes { get => throw null; }
            public override System.ReadOnlyMemory<System.Char> Transform(System.ReadOnlyMemory<System.Char> line) => throw null;
        }

        // Generated from `ServiceStack.HtmlModules.RemoveLineStartingWith` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class RemoveLineStartingWith : ServiceStack.HtmlModules.HtmlModuleLine
        {
            public bool IgnoreWhiteSpace { get => throw null; }
            public string[] Prefixes { get => throw null; }
            public RemoveLineStartingWith(string[] prefixes, bool ignoreWhiteSpace = default(bool), ServiceStack.Run behaviour = default(ServiceStack.Run)) => throw null;
            public RemoveLineStartingWith(string prefix, bool ignoreWhiteSpace = default(bool), ServiceStack.Run behaviour = default(ServiceStack.Run)) => throw null;
            public override System.ReadOnlyMemory<System.Char> Transform(System.ReadOnlyMemory<System.Char> line) => throw null;
        }

        // Generated from `ServiceStack.HtmlModules.RemoveLineWithOnlyWhitespace` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class RemoveLineWithOnlyWhitespace : ServiceStack.HtmlModules.HtmlModuleLine
        {
            public RemoveLineWithOnlyWhitespace(ServiceStack.Run behaviour = default(ServiceStack.Run)) => throw null;
            public override System.ReadOnlyMemory<System.Char> Transform(System.ReadOnlyMemory<System.Char> line) => throw null;
        }

        // Generated from `ServiceStack.HtmlModules.RemovePrefixesFromLine` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class RemovePrefixesFromLine : ServiceStack.HtmlModules.HtmlModuleLine
        {
            public bool IgnoreWhiteSpace { get => throw null; }
            public string[] Prefixes { get => throw null; }
            public RemovePrefixesFromLine(string[] prefixes, bool ignoreWhiteSpace = default(bool), ServiceStack.Run behaviour = default(ServiceStack.Run)) => throw null;
            public RemovePrefixesFromLine(string prefix, bool ignoreWhiteSpace = default(bool), ServiceStack.Run behaviour = default(ServiceStack.Run)) => throw null;
            public override System.ReadOnlyMemory<System.Char> Transform(System.ReadOnlyMemory<System.Char> line) => throw null;
        }

        // Generated from `ServiceStack.HtmlModules.SharedFolder` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class SharedFolder : ServiceStack.HtmlModules.IHtmlModulesHandler
        {
            public string DefaultExt { get => throw null; }
            public System.ReadOnlyMemory<System.Byte> Execute(ServiceStack.HtmlModuleContext ctx, string files) => throw null;
            public string Name { get => throw null; }
            public string SharedDir { get => throw null; set => throw null; }
            public SharedFolder(string name, string sharedDir, string defaultExt) => throw null;
        }

    }
    namespace Internal
    {
        // Generated from `ServiceStack.Internal.IServiceStackAsyncDisposable` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        internal interface IServiceStackAsyncDisposable
        {
        }

    }
    namespace Messaging
    {
        // Generated from `ServiceStack.Messaging.BackgroundMqClient` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class BackgroundMqClient : ServiceStack.IOneWayClient, ServiceStack.Messaging.IMessageProducer, ServiceStack.Messaging.IMessageQueueClient, System.IDisposable
        {
            public void Ack(ServiceStack.Messaging.IMessage message) => throw null;
            public BackgroundMqClient(ServiceStack.Messaging.BackgroundMqService mqService) => throw null;
            public ServiceStack.Messaging.IMessage<T> CreateMessage<T>(object mqResponse) => throw null;
            public void Dispose() => throw null;
            public ServiceStack.Messaging.IMessage<T> Get<T>(string queueName, System.TimeSpan? timeout = default(System.TimeSpan?)) => throw null;
            public ServiceStack.Messaging.IMessage<T> GetAsync<T>(string queueName) => throw null;
            public string GetTempQueueName() => throw null;
            public void Nak(ServiceStack.Messaging.IMessage message, bool requeue, System.Exception exception = default(System.Exception)) => throw null;
            public void Notify(string queueName, ServiceStack.Messaging.IMessage message) => throw null;
            public void Publish(string queueName, ServiceStack.Messaging.IMessage message) => throw null;
            public void Publish<T>(ServiceStack.Messaging.IMessage<T> message) => throw null;
            public void Publish<T>(T messageBody) => throw null;
            public void SendAllOneWay(System.Collections.Generic.IEnumerable<object> requests) => throw null;
            public void SendOneWay(object requestDto) => throw null;
            public void SendOneWay(string queueName, object requestDto) => throw null;
        }

        // Generated from `ServiceStack.Messaging.BackgroundMqCollection<>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class BackgroundMqCollection<T> : ServiceStack.Messaging.IMqCollection, System.IDisposable
        {
            public void Add(string queueName, ServiceStack.Messaging.IMessage message) => throw null;
            public BackgroundMqCollection(ServiceStack.Messaging.BackgroundMqClient mqClient, ServiceStack.Messaging.IMessageHandlerFactory handlerFactory, int threadCount, int outQMaxSize) => throw null;
            public void Clear(string queueName) => throw null;
            public ServiceStack.Messaging.IMqWorker CreateWorker(string mqName) => throw null;
            public void Dispose() => throw null;
            public string GetDescription() => throw null;
            public System.Collections.Generic.Dictionary<string, System.Int64> GetDescriptionMap() => throw null;
            public ServiceStack.Messaging.IMessageHandlerFactory HandlerFactory { get => throw null; }
            public ServiceStack.Messaging.BackgroundMqClient MqClient { get => throw null; }
            public int OutQMaxSize { get => throw null; set => throw null; }
            public System.Type QueueType { get => throw null; }
            public int ThreadCount { get => throw null; }
            public bool TryTake(string queueName, out ServiceStack.Messaging.IMessage message) => throw null;
            public bool TryTake(string queueName, out ServiceStack.Messaging.IMessage message, System.TimeSpan timeout) => throw null;
        }

        // Generated from `ServiceStack.Messaging.BackgroundMqMessageFactory` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class BackgroundMqMessageFactory : ServiceStack.Messaging.IMessageFactory, ServiceStack.Messaging.IMessageQueueClientFactory, System.IDisposable
        {
            public BackgroundMqMessageFactory(ServiceStack.Messaging.BackgroundMqClient mqClient) => throw null;
            public ServiceStack.Messaging.IMessageProducer CreateMessageProducer() => throw null;
            public ServiceStack.Messaging.IMessageQueueClient CreateMessageQueueClient() => throw null;
            public void Dispose() => throw null;
        }

        // Generated from `ServiceStack.Messaging.BackgroundMqService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class BackgroundMqService : ServiceStack.Messaging.IMessageService, System.IDisposable
        {
            public BackgroundMqService() => throw null;
            protected ServiceStack.Messaging.IMessageHandlerFactory CreateMessageHandlerFactory<T>(System.Func<ServiceStack.Messaging.IMessage<T>, object> processMessageFn, System.Action<ServiceStack.Messaging.IMessageHandler, ServiceStack.Messaging.IMessage<T>, System.Exception> processExceptionEx) => throw null;
            public bool DisablePriorityQueues { set => throw null; }
            public bool DisablePublishingResponses { set => throw null; }
            public bool DisablePublishingToOutq { set => throw null; }
            public void Dispose() => throw null;
            public bool EnablePriorityQueues { set => throw null; }
            public ServiceStack.Messaging.IMessage<T> Get<T>(string queueName, System.TimeSpan? timeout = default(System.TimeSpan?)) => throw null;
            public ServiceStack.Messaging.IMqWorker[] GetAllWorkers() => throw null;
            public ServiceStack.Messaging.IMqCollection GetCollection(System.Type type) => throw null;
            public ServiceStack.Messaging.IMessageHandlerStats GetStats() => throw null;
            public string GetStatsDescription() => throw null;
            public string GetStatus() => throw null;
            public ServiceStack.Messaging.IMqWorker[] GetWorkers(string queueName) => throw null;
            public ServiceStack.Messaging.IMessageFactory MessageFactory { get => throw null; }
            public void Notify(string queueName, ServiceStack.Messaging.IMessage message) => throw null;
            public System.Collections.Generic.List<System.Action<string, ServiceStack.Messaging.IMessage>> OutHandlers { get => throw null; }
            public int OutQMaxSize { get => throw null; set => throw null; }
            public string[] PriorityQueuesWhitelist { get => throw null; set => throw null; }
            public void Publish(string queueName, ServiceStack.Messaging.IMessage message) => throw null;
            public string[] PublishResponsesWhitelist { get => throw null; set => throw null; }
            public string[] PublishToOutqWhitelist { get => throw null; set => throw null; }
            public void RegisterHandler<T>(System.Func<ServiceStack.Messaging.IMessage<T>, object> processMessageFn) => throw null;
            public void RegisterHandler<T>(System.Func<ServiceStack.Messaging.IMessage<T>, object> processMessageFn, System.Action<ServiceStack.Messaging.IMessageHandler, ServiceStack.Messaging.IMessage<T>, System.Exception> processExceptionEx) => throw null;
            public void RegisterHandler<T>(System.Func<ServiceStack.Messaging.IMessage<T>, object> processMessageFn, System.Action<ServiceStack.Messaging.IMessageHandler, ServiceStack.Messaging.IMessage<T>, System.Exception> processExceptionEx, int noOfThreads) => throw null;
            public void RegisterHandler<T>(System.Func<ServiceStack.Messaging.IMessage<T>, object> processMessageFn, int noOfThreads) => throw null;
            public System.Collections.Generic.List<System.Type> RegisteredTypes { get => throw null; }
            public System.Func<ServiceStack.Messaging.IMessage, ServiceStack.Messaging.IMessage> RequestFilter { get => throw null; set => throw null; }
            public System.Func<object, object> ResponseFilter { get => throw null; set => throw null; }
            public int RetryCount { get => throw null; set => throw null; }
            public void Start() => throw null;
            public void Stop() => throw null;
            public ServiceStack.Messaging.IMessage<T> TryGet<T>(string queueName) => throw null;
        }

        // Generated from `ServiceStack.Messaging.BackgroundMqWorker` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class BackgroundMqWorker : ServiceStack.Messaging.IMqWorker, System.IDisposable
        {
            public BackgroundMqWorker(string queueName, System.Collections.Concurrent.BlockingCollection<ServiceStack.Messaging.IMessage> queue, ServiceStack.Messaging.BackgroundMqClient mqClient, ServiceStack.Messaging.IMessageHandler handler) => throw null;
            public void Dispose() => throw null;
            public ServiceStack.Messaging.IMessageHandlerStats GetStats() => throw null;
            public string QueueName { get => throw null; }
            public void Stop() => throw null;
        }

        // Generated from `ServiceStack.Messaging.IMessageHandlerDisposer` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IMessageHandlerDisposer
        {
            void DisposeMessageHandler(ServiceStack.Messaging.IMessageHandler messageHandler);
        }

        // Generated from `ServiceStack.Messaging.IMessageHandlerFactory` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IMessageHandlerFactory
        {
            ServiceStack.Messaging.IMessageHandler CreateMessageHandler();
        }

        // Generated from `ServiceStack.Messaging.IMqCollection` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IMqCollection : System.IDisposable
        {
            void Add(string queueName, ServiceStack.Messaging.IMessage message);
            void Clear(string queueName);
            ServiceStack.Messaging.IMqWorker CreateWorker(string mqName);
            string GetDescription();
            System.Collections.Generic.Dictionary<string, System.Int64> GetDescriptionMap();
            System.Type QueueType { get; }
            int ThreadCount { get; }
            bool TryTake(string queueName, out ServiceStack.Messaging.IMessage message);
            bool TryTake(string queueName, out ServiceStack.Messaging.IMessage message, System.TimeSpan timeout);
        }

        // Generated from `ServiceStack.Messaging.IMqWorker` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IMqWorker : System.IDisposable
        {
            ServiceStack.Messaging.IMessageHandlerStats GetStats();
            string QueueName { get; }
            void Stop();
        }

        // Generated from `ServiceStack.Messaging.InMemoryTransientMessageFactory` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class InMemoryTransientMessageFactory : ServiceStack.Messaging.IMessageFactory, ServiceStack.Messaging.IMessageQueueClientFactory, System.IDisposable
        {
            public ServiceStack.Messaging.IMessageProducer CreateMessageProducer() => throw null;
            public ServiceStack.Messaging.IMessageQueueClient CreateMessageQueueClient() => throw null;
            public ServiceStack.Messaging.IMessageService CreateMessageService() => throw null;
            public void Dispose() => throw null;
            public InMemoryTransientMessageFactory() => throw null;
            public InMemoryTransientMessageFactory(ServiceStack.Messaging.InMemoryTransientMessageService transientMessageService) => throw null;
        }

        // Generated from `ServiceStack.Messaging.InMemoryTransientMessageService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class InMemoryTransientMessageService : ServiceStack.Messaging.TransientMessageServiceBase
        {
            public InMemoryTransientMessageService() => throw null;
            public InMemoryTransientMessageService(ServiceStack.Messaging.InMemoryTransientMessageFactory factory) => throw null;
            public override ServiceStack.Messaging.IMessageFactory MessageFactory { get => throw null; }
            public ServiceStack.Messaging.MessageQueueClientFactory MessageQueueFactory { get => throw null; }
        }

        // Generated from `ServiceStack.Messaging.MessageHandler<>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class MessageHandler<T> : ServiceStack.Messaging.IMessageHandler, System.IDisposable
        {
            public const int DefaultRetryCount = default;
            public void Dispose() => throw null;
            public ServiceStack.Messaging.IMessageHandlerStats GetStats() => throw null;
            public System.DateTime? LastMessageProcessed { get => throw null; set => throw null; }
            public MessageHandler(ServiceStack.Messaging.IMessageService messageService, System.Func<ServiceStack.Messaging.IMessage<T>, object> processMessageFn) => throw null;
            public MessageHandler(ServiceStack.Messaging.IMessageService messageService, System.Func<ServiceStack.Messaging.IMessage<T>, object> processMessageFn, System.Action<ServiceStack.Messaging.IMessageHandler, ServiceStack.Messaging.IMessage<T>, System.Exception> processInExceptionFn, int retryCount) => throw null;
            public System.Type MessageType { get => throw null; }
            public ServiceStack.Messaging.IMessageQueueClient MqClient { get => throw null; set => throw null; }
            public void Process(ServiceStack.Messaging.IMessageQueueClient mqClient) => throw null;
            public void ProcessMessage(ServiceStack.Messaging.IMessageQueueClient mqClient, ServiceStack.Messaging.IMessage<T> message) => throw null;
            public void ProcessMessage(ServiceStack.Messaging.IMessageQueueClient mqClient, object mqResponse) => throw null;
            public int ProcessQueue(ServiceStack.Messaging.IMessageQueueClient mqClient, string queueName, System.Func<bool> doNext = default(System.Func<bool>)) => throw null;
            public string[] ProcessQueueNames { get => throw null; set => throw null; }
            public string[] PublishResponsesWhitelist { get => throw null; set => throw null; }
            public string[] PublishToOutqWhitelist { get => throw null; set => throw null; }
            public System.Func<string, ServiceStack.IOneWayClient> ReplyClientFactory { get => throw null; set => throw null; }
            public int TotalMessagesFailed { get => throw null; set => throw null; }
            public int TotalMessagesProcessed { get => throw null; set => throw null; }
            public int TotalNormalMessagesReceived { get => throw null; set => throw null; }
            public int TotalOutMessagesReceived { get => throw null; set => throw null; }
            public int TotalPriorityMessagesReceived { get => throw null; set => throw null; }
            public int TotalRetries { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Messaging.MessageHandlerFactory<>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class MessageHandlerFactory<T> : ServiceStack.Messaging.IMessageHandlerFactory
        {
            public ServiceStack.Messaging.IMessageHandler CreateMessageHandler() => throw null;
            public const int DefaultRetryCount = default;
            public MessageHandlerFactory(ServiceStack.Messaging.IMessageService messageService, System.Func<ServiceStack.Messaging.IMessage<T>, object> processMessageFn) => throw null;
            public MessageHandlerFactory(ServiceStack.Messaging.IMessageService messageService, System.Func<ServiceStack.Messaging.IMessage<T>, object> processMessageFn, System.Action<ServiceStack.Messaging.IMessageHandler, ServiceStack.Messaging.IMessage<T>, System.Exception> processExceptionEx) => throw null;
            public string[] PublishResponsesWhitelist { get => throw null; set => throw null; }
            public string[] PublishToOutqWhitelist { get => throw null; set => throw null; }
            public System.Func<ServiceStack.Messaging.IMessage, ServiceStack.Messaging.IMessage> RequestFilter { get => throw null; set => throw null; }
            public System.Func<object, object> ResponseFilter { get => throw null; set => throw null; }
            public int RetryCount { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Messaging.TransientMessageServiceBase` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public abstract class TransientMessageServiceBase : ServiceStack.Messaging.IMessageHandlerDisposer, ServiceStack.Messaging.IMessageService, System.IDisposable
        {
            protected ServiceStack.Messaging.IMessageHandlerFactory CreateMessageHandlerFactory<T>(System.Func<ServiceStack.Messaging.IMessage<T>, object> processMessageFn, System.Action<ServiceStack.Messaging.IMessageHandler, ServiceStack.Messaging.IMessage<T>, System.Exception> processExceptionEx) => throw null;
            public const int DefaultRetryCount = default;
            public virtual void Dispose() => throw null;
            public virtual void DisposeMessageHandler(ServiceStack.Messaging.IMessageHandler messageHandler) => throw null;
            public ServiceStack.Messaging.IMessageHandlerStats GetStats() => throw null;
            public string GetStatsDescription() => throw null;
            public string GetStatus() => throw null;
            public abstract ServiceStack.Messaging.IMessageFactory MessageFactory { get; }
            public int PoolSize { get => throw null; set => throw null; }
            public void RegisterHandler<T>(System.Func<ServiceStack.Messaging.IMessage<T>, object> processMessageFn) => throw null;
            public void RegisterHandler<T>(System.Func<ServiceStack.Messaging.IMessage<T>, object> processMessageFn, System.Action<ServiceStack.Messaging.IMessageHandler, ServiceStack.Messaging.IMessage<T>, System.Exception> processExceptionEx) => throw null;
            public void RegisterHandler<T>(System.Func<ServiceStack.Messaging.IMessage<T>, object> processMessageFn, System.Action<ServiceStack.Messaging.IMessageHandler, ServiceStack.Messaging.IMessage<T>, System.Exception> processExceptionEx, int noOfThreads) => throw null;
            public void RegisterHandler<T>(System.Func<ServiceStack.Messaging.IMessage<T>, object> processMessageFn, int noOfThreads) => throw null;
            public System.Collections.Generic.List<System.Type> RegisteredTypes { get => throw null; }
            public System.TimeSpan? RequestTimeOut { get => throw null; set => throw null; }
            public int RetryCount { get => throw null; set => throw null; }
            public virtual void Start() => throw null;
            public virtual void Stop() => throw null;
            protected TransientMessageServiceBase() => throw null;
            protected TransientMessageServiceBase(int retryAttempts, System.TimeSpan? requestTimeOut) => throw null;
        }

        // Generated from `ServiceStack.Messaging.WorkerOperation` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class WorkerOperation
        {
            public const string ControlCommand = default;
            public const int NoOp = default;
            public const int Reset = default;
            public const int Restart = default;
            public const int Stop = default;
        }

    }
    namespace Metadata
    {
        // Generated from `ServiceStack.Metadata.BaseMetadataHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public abstract class BaseMetadataHandler : ServiceStack.Host.Handlers.HttpAsyncTaskHandler
        {
            protected bool AssertAccess(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, string operationName) => throw null;
            protected BaseMetadataHandler() => throw null;
            public string ContentFormat { get => throw null; set => throw null; }
            public string ContentType { get => throw null; set => throw null; }
            protected abstract string CreateMessage(System.Type dtoType);
            public virtual string CreateResponse(System.Type type) => throw null;
            public abstract ServiceStack.Format Format { get; }
            protected virtual System.Threading.Tasks.Task ProcessOperationsAsync(System.IO.Stream writer, ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes) => throw null;
            public override System.Threading.Tasks.Task ProcessRequestAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, string operationName) => throw null;
            protected virtual System.Threading.Tasks.Task RenderOperationAsync(System.IO.Stream output, ServiceStack.Web.IRequest httpReq, string operationName, string requestMessage, string responseMessage, string metadataHtml, ServiceStack.Host.Operation operation) => throw null;
            protected virtual System.Threading.Tasks.Task RenderOperationsAsync(System.IO.Stream output, ServiceStack.Web.IRequest httpReq, ServiceStack.Host.ServiceMetadata metadata) => throw null;
        }

        // Generated from `ServiceStack.Metadata.BaseSoapMetadataHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public abstract class BaseSoapMetadataHandler : ServiceStack.Metadata.BaseMetadataHandler
        {
            protected BaseSoapMetadataHandler() => throw null;
            public string OperationName { get => throw null; set => throw null; }
            public override System.Threading.Tasks.Task ProcessRequestAsync(ServiceStack.Web.IRequest httpReq, ServiceStack.Web.IResponse httpRes, string operationName) => throw null;
        }

        // Generated from `ServiceStack.Metadata.CustomMetadataHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class CustomMetadataHandler : ServiceStack.Metadata.BaseMetadataHandler
        {
            protected override string CreateMessage(System.Type dtoType) => throw null;
            public CustomMetadataHandler(string contentType, string format) => throw null;
            public override ServiceStack.Format Format { get => throw null; }
        }

        // Generated from `ServiceStack.Metadata.IndexMetadataHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class IndexMetadataHandler : ServiceStack.Metadata.BaseSoapMetadataHandler
        {
            protected override string CreateMessage(System.Type dtoType) => throw null;
            public override ServiceStack.Format Format { get => throw null; }
            public IndexMetadataHandler() => throw null;
        }

        // Generated from `ServiceStack.Metadata.IndexOperationsControl` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class IndexOperationsControl
        {
            public System.Func<string, ServiceStack.Host.Operation> GetOperation { get => throw null; set => throw null; }
            public IndexOperationsControl() => throw null;
            public ServiceStack.Metadata.MetadataPagesConfig MetadataConfig { get => throw null; set => throw null; }
            public System.Collections.Generic.List<string> OperationNames { get => throw null; set => throw null; }
            public System.Threading.Tasks.Task RenderAsync(System.IO.Stream output) => throw null;
            public string RenderRow(string operationName) => throw null;
            public ServiceStack.Web.IRequest Request { get => throw null; set => throw null; }
            public string Title { get => throw null; set => throw null; }
            public System.Collections.Generic.Dictionary<string, string> ToAbsoluteUrls(System.Collections.Generic.Dictionary<string, string> linksMap) => throw null;
            public int XsdServiceTypesIndex { get => throw null; set => throw null; }
            public System.Collections.Generic.IDictionary<int, string> Xsds { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Metadata.JsonMetadataHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class JsonMetadataHandler : ServiceStack.Metadata.BaseMetadataHandler
        {
            protected override string CreateMessage(System.Type dtoType) => throw null;
            public override ServiceStack.Format Format { get => throw null; }
            public JsonMetadataHandler() => throw null;
        }

        // Generated from `ServiceStack.Metadata.JsvMetadataHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class JsvMetadataHandler : ServiceStack.Metadata.BaseMetadataHandler
        {
            protected override string CreateMessage(System.Type dtoType) => throw null;
            public override ServiceStack.Format Format { get => throw null; }
            public JsvMetadataHandler() => throw null;
        }

        // Generated from `ServiceStack.Metadata.MetadataConfig` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class MetadataConfig
        {
            public string AsyncOneWayUri { get => throw null; set => throw null; }
            public ServiceStack.Metadata.MetadataConfig Create(string format, string name = default(string)) => throw null;
            public string DefaultMetadataUri { get => throw null; set => throw null; }
            public string Format { get => throw null; set => throw null; }
            public MetadataConfig(string format, string name, string syncReplyUri, string asyncOneWayUri, string defaultMetadataUri) => throw null;
            public string Name { get => throw null; set => throw null; }
            public string SyncReplyUri { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Metadata.MetadataPagesConfig` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class MetadataPagesConfig
        {
            public bool AlwaysHideInMetadata(string operationName) => throw null;
            public System.Collections.Generic.List<ServiceStack.Metadata.MetadataConfig> AvailableFormatConfigs { get => throw null; set => throw null; }
            public bool CanAccess(ServiceStack.Format format, string operation) => throw null;
            public bool CanAccess(ServiceStack.Web.IRequest httpRequest, ServiceStack.Format format, string operation) => throw null;
            public ServiceStack.Metadata.MetadataConfig GetMetadataConfig(string format) => throw null;
            public bool IsVisible(ServiceStack.Web.IRequest httpRequest, ServiceStack.Format format, string operation) => throw null;
            public MetadataPagesConfig(ServiceStack.Host.ServiceMetadata metadata, ServiceStack.Metadata.ServiceEndpointsMetadataConfig metadataConfig, System.Collections.Generic.HashSet<string> ignoredFormats, System.Collections.Generic.List<string> contentTypeFormats) => throw null;
        }

        // Generated from `ServiceStack.Metadata.OperationControl` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class OperationControl
        {
            public string ContentFormat { get => throw null; set => throw null; }
            public string ContentType { get => throw null; set => throw null; }
            public ServiceStack.Format Format { set => throw null; }
            public virtual string GetHttpRequestTemplate() => throw null;
            public string HostName { get => throw null; set => throw null; }
            public ServiceStack.Web.IRequest HttpRequest { get => throw null; set => throw null; }
            public virtual string HttpRequestTemplateWithBody(string httpMethod) => throw null;
            public virtual string HttpRequestTemplateWithoutBody(string httpMethod) => throw null;
            public virtual string HttpResponseTemplate { get => throw null; }
            public ServiceStack.Metadata.ServiceEndpointsMetadataConfig MetadataConfig { get => throw null; set => throw null; }
            public string MetadataHtml { get => throw null; set => throw null; }
            public ServiceStack.Host.Operation Operation { get => throw null; set => throw null; }
            public OperationControl() => throw null;
            public string OperationName { get => throw null; set => throw null; }
            public virtual System.Threading.Tasks.Task RenderAsync(System.IO.Stream output) => throw null;
            public string RequestMessage { get => throw null; set => throw null; }
            public virtual string RequestUri { get => throw null; }
            public string ResponseMessage { get => throw null; set => throw null; }
            public virtual string ResponseTemplate { get => throw null; }
            public string Title { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Metadata.ServiceEndpointsMetadataConfig` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class ServiceEndpointsMetadataConfig
        {
            public static ServiceStack.Metadata.ServiceEndpointsMetadataConfig Create(string serviceStackHandlerPrefix) => throw null;
            public ServiceStack.Metadata.MetadataConfig Custom { get => throw null; set => throw null; }
            public string DefaultMetadataUri { get => throw null; set => throw null; }
            public ServiceStack.Metadata.MetadataConfig GetEndpointConfig(string format) => throw null;
            public ServiceStack.Metadata.SoapMetadataConfig Soap11 { get => throw null; set => throw null; }
            public ServiceStack.Metadata.SoapMetadataConfig Soap12 { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Metadata.Soap11WsdlTemplate` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class Soap11WsdlTemplate : ServiceStack.Metadata.WsdlTemplateBase
        {
            protected override string OneWayActionsTemplate { get => throw null; }
            protected override string OneWayBindingContainerTemplate { get => throw null; }
            protected override string OneWayEndpointUriTemplate { get => throw null; }
            protected override string ReplyActionsTemplate { get => throw null; }
            protected override string ReplyBindingContainerTemplate { get => throw null; }
            protected override string ReplyEndpointUriTemplate { get => throw null; }
            public Soap11WsdlTemplate() => throw null;
            public override string WsdlName { get => throw null; }
        }

        // Generated from `ServiceStack.Metadata.Soap12WsdlTemplate` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class Soap12WsdlTemplate : ServiceStack.Metadata.WsdlTemplateBase
        {
            protected override string OneWayActionsTemplate { get => throw null; }
            protected override string OneWayBindingContainerTemplate { get => throw null; }
            protected override string OneWayEndpointUriTemplate { get => throw null; }
            protected override string ReplyActionsTemplate { get => throw null; }
            protected override string ReplyBindingContainerTemplate { get => throw null; }
            protected override string ReplyEndpointUriTemplate { get => throw null; }
            public Soap12WsdlTemplate() => throw null;
            public override string WsdlName { get => throw null; }
        }

        // Generated from `ServiceStack.Metadata.SoapMetadataConfig` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class SoapMetadataConfig : ServiceStack.Metadata.MetadataConfig
        {
            public SoapMetadataConfig(string format, string name, string syncReplyUri, string asyncOneWayUri, string defaultMetadataUri, string wsdlMetadataUri) : base(default(string), default(string), default(string), default(string), default(string)) => throw null;
            public string WsdlMetadataUri { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Metadata.WsdlTemplateBase` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public abstract class WsdlTemplateBase
        {
            protected virtual string OneWayActionsTemplate { get => throw null; }
            protected abstract string OneWayBindingContainerTemplate { get; }
            public string OneWayEndpointUri { get => throw null; set => throw null; }
            protected abstract string OneWayEndpointUriTemplate { get; }
            protected virtual string OneWayMessagesTemplate { get => throw null; }
            public System.Collections.Generic.IList<string> OneWayOperationNames { get => throw null; set => throw null; }
            protected virtual string OneWayOperationsTemplate { get => throw null; }
            public string RepeaterTemplate(string template, System.Collections.Generic.IEnumerable<string> dataSource) => throw null;
            public string RepeaterTemplate(string template, object arg0, System.Collections.Generic.IEnumerable<string> dataSource) => throw null;
            protected virtual string ReplyActionsTemplate { get => throw null; }
            protected abstract string ReplyBindingContainerTemplate { get; }
            public string ReplyEndpointUri { get => throw null; set => throw null; }
            protected abstract string ReplyEndpointUriTemplate { get; }
            protected virtual string ReplyMessagesTemplate { get => throw null; }
            public System.Collections.Generic.IList<string> ReplyOperationNames { get => throw null; set => throw null; }
            protected virtual string ReplyOperationsTemplate { get => throw null; }
            public string ServiceName { get => throw null; set => throw null; }
            public override string ToString() => throw null;
            public abstract string WsdlName { get; }
            protected WsdlTemplateBase() => throw null;
            public string Xsd { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Metadata.XmlMetadataHandler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class XmlMetadataHandler : ServiceStack.Metadata.BaseMetadataHandler
        {
            protected override string CreateMessage(System.Type dtoType) => throw null;
            public override ServiceStack.Format Format { get => throw null; }
            public XmlMetadataHandler() => throw null;
        }

    }
    namespace MiniProfiler
    {
        // Generated from `ServiceStack.MiniProfiler.HtmlString` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class HtmlString : ServiceStack.Host.IHtmlString, ServiceStack.IHtmlString
        {
            public static ServiceStack.MiniProfiler.HtmlString Empty;
            public HtmlString(string value) => throw null;
            public string ToHtmlString() => throw null;
            public override string ToString() => throw null;
        }

        // Generated from `ServiceStack.MiniProfiler.IProfiler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface IProfiler
        {
            ServiceStack.IHtmlString RenderIncludes(ServiceStack.MiniProfiler.RenderPosition? position = default(ServiceStack.MiniProfiler.RenderPosition?), bool? showTrivial = default(bool?), bool? showTimeWithChildren = default(bool?), int? maxTracesToShow = default(int?), bool xhtml = default(bool), bool? showControls = default(bool?));
            ServiceStack.MiniProfiler.IProfiler Start();
            System.IDisposable Step(string name);
            void Stop();
        }

        // Generated from `ServiceStack.MiniProfiler.NullProfiler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class NullProfiler : ServiceStack.MiniProfiler.IProfiler
        {
            public static ServiceStack.MiniProfiler.NullProfiler Instance;
            public NullProfiler() => throw null;
            public ServiceStack.IHtmlString RenderIncludes(ServiceStack.MiniProfiler.RenderPosition? position = default(ServiceStack.MiniProfiler.RenderPosition?), bool? showTrivial = default(bool?), bool? showTimeWithChildren = default(bool?), int? maxTracesToShow = default(int?), bool xhtml = default(bool), bool? showControls = default(bool?)) => throw null;
            public ServiceStack.MiniProfiler.IProfiler Start() => throw null;
            public System.IDisposable Step(string name) => throw null;
            public void Stop() => throw null;
        }

        // Generated from `ServiceStack.MiniProfiler.Profiler` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class Profiler
        {
            public static ServiceStack.MiniProfiler.IProfiler Current { get => throw null; set => throw null; }
            public static ServiceStack.IHtmlString RenderIncludes(ServiceStack.MiniProfiler.RenderPosition? position = default(ServiceStack.MiniProfiler.RenderPosition?), bool? showTrivial = default(bool?), bool? showTimeWithChildren = default(bool?), int? maxTracesToShow = default(int?), bool xhtml = default(bool), bool? showControls = default(bool?)) => throw null;
            public static ServiceStack.MiniProfiler.IProfiler Start() => throw null;
            public static System.IDisposable Step(string name) => throw null;
            public static void Stop() => throw null;
        }

        // Generated from `ServiceStack.MiniProfiler.RenderPosition` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public enum RenderPosition
        {
            Left,
            Right,
        }

    }
    namespace NativeTypes
    {
        // Generated from `ServiceStack.NativeTypes.AddCodeDelegate` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public delegate string AddCodeDelegate(System.Collections.Generic.List<ServiceStack.MetadataType> allTypes, ServiceStack.MetadataTypesConfig config);

        // Generated from `ServiceStack.NativeTypes.CreateTypeOptions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class CreateTypeOptions
        {
            public CreateTypeOptions() => throw null;
            public System.Func<string> ImplementsFn { get => throw null; set => throw null; }
            public bool IsNestedType { get => throw null; set => throw null; }
            public bool IsRequest { get => throw null; set => throw null; }
            public bool IsResponse { get => throw null; set => throw null; }
            public bool IsType { get => throw null; set => throw null; }
            public ServiceStack.MetadataOperationType Op { get => throw null; set => throw null; }
            public System.Collections.Generic.List<ServiceStack.MetadataRoute> Routes { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.NativeTypes.ILangGenerator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface ILangGenerator
        {
            System.Collections.Generic.List<string> AddQueryParamOptions { get; set; }
            string GetCode(ServiceStack.MetadataTypes metadata, ServiceStack.Web.IRequest request, ServiceStack.NativeTypes.INativeTypesMetadata nativeTypes);
            bool WithoutOptions { get; set; }
        }

        // Generated from `ServiceStack.NativeTypes.INativeTypesMetadata` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public interface INativeTypesMetadata
        {
            ServiceStack.MetadataTypesConfig GetConfig(ServiceStack.NativeTypes.NativeTypesBase req);
            ServiceStack.NativeTypes.MetadataTypesGenerator GetGenerator();
            ServiceStack.MetadataTypes GetMetadataTypes(ServiceStack.Web.IRequest req, ServiceStack.MetadataTypesConfig config = default(ServiceStack.MetadataTypesConfig), System.Func<ServiceStack.Host.Operation, bool> predicate = default(System.Func<ServiceStack.Host.Operation, bool>));
        }

        // Generated from `ServiceStack.NativeTypes.LangGeneratorExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class LangGeneratorExtensions
        {
            public static string GenerateSourceCode(this System.Collections.Generic.List<ServiceStack.MetadataType> metadataTypes, string lang, ServiceStack.Web.IRequest req, System.Action<ServiceStack.NativeTypes.ILangGenerator> configure = default(System.Action<ServiceStack.NativeTypes.ILangGenerator>)) => throw null;
            public static string GenerateSourceCode(this ServiceStack.MetadataTypes metadataTypes, ServiceStack.MetadataTypesConfig typesConfig, string lang, ServiceStack.Web.IRequest req, System.Action<ServiceStack.NativeTypes.ILangGenerator> configure = default(System.Action<ServiceStack.NativeTypes.ILangGenerator>)) => throw null;
        }

        // Generated from `ServiceStack.NativeTypes.MetadataExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class MetadataExtensions
        {
            public static System.Collections.Generic.List<ServiceStack.MetadataType> CreateSortedTypeList(this System.Collections.Generic.List<ServiceStack.MetadataType> allTypes) => throw null;
            public static void Emit(this ServiceStack.NativeTypes.StringBuilderWrapper sb, ServiceStack.MetadataPropertyType propType, ServiceStack.Lang lang) => throw null;
            public static void Emit(this ServiceStack.NativeTypes.StringBuilderWrapper sb, ServiceStack.MetadataType type, ServiceStack.Lang lang) => throw null;
            public static System.Collections.Generic.List<ServiceStack.MetadataType> GetAllMetadataTypes(this ServiceStack.MetadataTypes metadata) => throw null;
            public static System.Collections.Generic.IEnumerable<ServiceStack.MetadataType> GetAllTypes(this ServiceStack.MetadataTypes metadata) => throw null;
            public static System.Collections.Generic.List<ServiceStack.MetadataType> GetAllTypesOrdered(this ServiceStack.MetadataTypes metadata) => throw null;
            public static string GetAttributeName(this System.Attribute attr) => throw null;
            public static System.Collections.Generic.HashSet<string> GetDefaultNamespaces(this ServiceStack.MetadataTypesConfig config, ServiceStack.MetadataTypes metadata) => throw null;
            public static System.Collections.Generic.IEnumerable<ServiceStack.MetadataType> GetDepTypes(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> deps, System.Collections.Generic.Dictionary<string, ServiceStack.MetadataType> typesMap, System.Collections.Generic.HashSet<string> considered, ServiceStack.MetadataType type) => throw null;
            public static System.Type[] GetDirectInterfaces(this System.Type type) => throw null;
            public static string GetEnumMemberValue(this ServiceStack.MetadataType type, int i) => throw null;
            public static System.Collections.Generic.List<string> GetIncludeList(ServiceStack.MetadataTypes metadata, ServiceStack.MetadataTypesConfig config) => throw null;
            public static System.Collections.Generic.HashSet<string> GetReferencedTypeNames(this ServiceStack.MetadataType type, ServiceStack.MetadataTypes metadataTypes) => throw null;
            public static string GetTypeName(this ServiceStack.MetadataPropertyType prop, ServiceStack.MetadataTypesConfig config, System.Collections.Generic.List<ServiceStack.MetadataType> allTypes) => throw null;
            public static System.Collections.Generic.List<string> GetValues(this System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> map, string key) => throw null;
            public static bool IgnoreSystemType(this ServiceStack.MetadataType type) => throw null;
            public static bool IgnoreType(this ServiceStack.MetadataType type, ServiceStack.MetadataTypesConfig config, System.Collections.Generic.List<string> overrideIncludeType = default(System.Collections.Generic.List<string>)) => throw null;
            public static bool IsServiceStackType(this System.Type type) => throw null;
            public static System.Collections.Generic.List<ServiceStack.MetadataType> OrderTypesByDeps(this System.Collections.Generic.List<ServiceStack.MetadataType> types) => throw null;
            public static System.Collections.Generic.List<ServiceStack.MetadataPropertyType> PopulatePrimaryKey(this System.Collections.Generic.List<ServiceStack.MetadataPropertyType> props) => throw null;
            public static void Push(this System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> map, string key, string value) => throw null;
            public static string QuotedSafeValue(this string value) => throw null;
            public static System.Collections.Generic.List<string> RemoveIgnoredTypes(this ServiceStack.MetadataTypes metadata, ServiceStack.MetadataTypesConfig config) => throw null;
            public static void RemoveIgnoredTypesForNet(this ServiceStack.MetadataTypes metadata, ServiceStack.MetadataTypesConfig config) => throw null;
            public static string SafeComment(this string comment) => throw null;
            public static string SafeToken(this string token) => throw null;
            public static string SafeValue(this string value) => throw null;
            public static string SanitizeType(this string typeName) => throw null;
            public static string StripGenericType(string type, string subType) => throw null;
            public static ServiceStack.MetadataAttribute ToMetadataAttribute(this ServiceStack.MetadataRoute route) => throw null;
            public static ServiceStack.MetadataType ToMetadataType(this ServiceStack.MetadataTypeName type) => throw null;
            public static ServiceStack.MetadataTypeName ToMetadataTypeName(this ServiceStack.MetadataType type) => throw null;
            public static string ToPrettyName(this System.Type type) => throw null;
        }

        // Generated from `ServiceStack.NativeTypes.MetadataTypesGenerator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class MetadataTypesGenerator
        {
            public static System.Collections.Generic.Dictionary<System.Type, System.Func<System.Attribute, ServiceStack.MetadataAttribute>> AttributeConverters { get => throw null; }
            public static System.Reflection.FieldInfo GetEnumMember(System.Type type, string name) => throw null;
            public static System.Reflection.PropertyInfo[] GetInstancePublicProperties(System.Type type) => throw null;
            public ServiceStack.MetadataTypes GetMetadataTypes(ServiceStack.Web.IRequest req, System.Func<ServiceStack.Host.Operation, bool> predicate = default(System.Func<ServiceStack.Host.Operation, bool>)) => throw null;
            public System.Collections.Generic.HashSet<string> GetNamespacesUsed(System.Type type) => throw null;
            public bool IncludeAttrsFilter(System.Attribute x) => throw null;
            public MetadataTypesGenerator(ServiceStack.Host.ServiceMetadata meta, ServiceStack.MetadataTypesConfig config) => throw null;
            public System.Collections.Generic.List<ServiceStack.MetadataPropertyType> NonDefaultProperties(System.Attribute attr) => throw null;
            public System.Collections.Generic.List<System.Reflection.PropertyInfo> Properties(System.Attribute attr) => throw null;
            public static string PropertyStringValue(System.Reflection.PropertyInfo pi, object value) => throw null;
            public static string PropertyValue(System.Reflection.PropertyInfo pi, object instance, object ignoreIfValue = default(object)) => throw null;
            public ServiceStack.MetadataAttribute ToAttribute(System.Attribute attr) => throw null;
            public System.Collections.Generic.List<ServiceStack.MetadataAttribute> ToAttributes(System.Collections.Generic.IEnumerable<System.Attribute> attrs) => throw null;
            public System.Collections.Generic.List<ServiceStack.MetadataAttribute> ToAttributes(object[] attrs) => throw null;
            public System.Collections.Generic.List<ServiceStack.MetadataAttribute> ToAttributes(System.Type type) => throw null;
            public static ServiceStack.MetadataDataMember ToDataMember(System.Runtime.Serialization.DataMemberAttribute attr) => throw null;
            public ServiceStack.MetadataType ToFlattenedType(System.Type type) => throw null;
            public static string[] ToGenericArgs(System.Type propType) => throw null;
            public ServiceStack.MetadataAttribute ToMetadataAttribute(System.Attribute attr) => throw null;
            public System.Collections.Generic.List<ServiceStack.MetadataPropertyType> ToProperties(System.Type type) => throw null;
            public ServiceStack.MetadataPropertyType ToProperty(System.Reflection.ParameterInfo pi) => throw null;
            public ServiceStack.MetadataPropertyType ToProperty(System.Reflection.PropertyInfo pi, object instance = default(object), System.Collections.Generic.Dictionary<string, object> ignoreValues = default(System.Collections.Generic.Dictionary<string, object>)) => throw null;
            public ServiceStack.MetadataType ToType(System.Type type) => throw null;
            public ServiceStack.MetadataTypeName ToTypeName(System.Type type) => throw null;
        }

        // Generated from `ServiceStack.NativeTypes.NativeTypesBase` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class NativeTypesBase
        {
            public bool? AddDataContractAttributes { get => throw null; set => throw null; }
            public string AddDefaultXmlNamespace { get => throw null; set => throw null; }
            public bool? AddDescriptionAsComments { get => throw null; set => throw null; }
            public bool? AddGeneratedCodeAttributes { get => throw null; set => throw null; }
            public int? AddImplicitVersion { get => throw null; set => throw null; }
            public bool? AddIndexesToDataMembers { get => throw null; set => throw null; }
            public bool? AddModelExtensions { get => throw null; set => throw null; }
            public System.Collections.Generic.List<string> AddNamespaces { get => throw null; set => throw null; }
            public bool? AddPropertyAccessors { get => throw null; set => throw null; }
            public bool? AddResponseStatus { get => throw null; set => throw null; }
            public bool? AddReturnMarker { get => throw null; set => throw null; }
            public bool? AddServiceStackTypes { get => throw null; set => throw null; }
            public string BaseClass { get => throw null; set => throw null; }
            public string BaseUrl { get => throw null; set => throw null; }
            public string DataClass { get => throw null; set => throw null; }
            public string DataClassJson { get => throw null; set => throw null; }
            public System.Collections.Generic.List<string> DefaultImports { get => throw null; set => throw null; }
            public System.Collections.Generic.List<string> DefaultNamespaces { get => throw null; set => throw null; }
            public bool? ExcludeGenericBaseTypes { get => throw null; set => throw null; }
            public bool? ExcludeNamespace { get => throw null; set => throw null; }
            public System.Collections.Generic.List<string> ExcludeTypes { get => throw null; set => throw null; }
            public bool? ExportAsTypes { get => throw null; set => throw null; }
            public bool? ExportValueTypes { get => throw null; set => throw null; }
            public string GlobalNamespace { get => throw null; set => throw null; }
            public System.Collections.Generic.List<string> IncludeTypes { get => throw null; set => throw null; }
            public bool? InitializeCollections { get => throw null; set => throw null; }
            public bool? MakeDataContractsExtensible { get => throw null; set => throw null; }
            public bool? MakeInternal { get => throw null; set => throw null; }
            public bool? MakePartial { get => throw null; set => throw null; }
            public bool? MakePropertiesOptional { get => throw null; set => throw null; }
            public bool? MakeVirtual { get => throw null; set => throw null; }
            public NativeTypesBase() => throw null;
            public string Package { get => throw null; set => throw null; }
            public bool? SettersReturnThis { get => throw null; set => throw null; }
            public System.Collections.Generic.List<string> TreatTypesAsStrings { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.NativeTypes.NativeTypesMetadata` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class NativeTypesMetadata : ServiceStack.NativeTypes.INativeTypesMetadata
        {
            public ServiceStack.MetadataTypesConfig GetConfig(ServiceStack.NativeTypes.NativeTypesBase req) => throw null;
            public ServiceStack.NativeTypes.MetadataTypesGenerator GetGenerator() => throw null;
            public ServiceStack.NativeTypes.MetadataTypesGenerator GetGenerator(ServiceStack.MetadataTypesConfig config) => throw null;
            public ServiceStack.MetadataTypes GetMetadataTypes(ServiceStack.Web.IRequest req, ServiceStack.MetadataTypesConfig config = default(ServiceStack.MetadataTypesConfig), System.Func<ServiceStack.Host.Operation, bool> predicate = default(System.Func<ServiceStack.Host.Operation, bool>)) => throw null;
            public NativeTypesMetadata(ServiceStack.Host.ServiceMetadata meta, ServiceStack.MetadataTypesConfig defaults) => throw null;
            public static System.Collections.Generic.List<string> TrimArgs(System.Collections.Generic.List<string> from) => throw null;
        }

        // Generated from `ServiceStack.NativeTypes.NativeTypesService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class NativeTypesService : ServiceStack.Service
        {
            public object Any(ServiceStack.NativeTypes.TypeLinks request) => throw null;
            public object Any(ServiceStack.NativeTypes.TypesCSharp request) => throw null;
            public object Any(ServiceStack.NativeTypes.TypesCommonJs request) => throw null;
            public object Any(ServiceStack.NativeTypes.TypesDart request) => throw null;
            public object Any(ServiceStack.NativeTypes.TypesFSharp request) => throw null;
            public object Any(ServiceStack.NativeTypes.TypesJava request) => throw null;
            public object Any(ServiceStack.NativeTypes.TypesKotlin request) => throw null;
            public ServiceStack.MetadataTypes Any(ServiceStack.NativeTypes.TypesMetadata request) => throw null;
            public object Any(ServiceStack.NativeTypes.TypesPython request) => throw null;
            public object Any(ServiceStack.NativeTypes.TypesSwift request) => throw null;
            public object Any(ServiceStack.NativeTypes.TypesTypeScript request) => throw null;
            public object Any(ServiceStack.NativeTypes.TypesTypeScriptDefinition request) => throw null;
            public object Any(ServiceStack.NativeTypes.TypesVbNet request) => throw null;
            public static System.Collections.Generic.List<System.Type> BuiltInClientDtos;
            public static System.Collections.Generic.List<System.Type> BuiltinInterfaces;
            public string GenerateTypeScript(ServiceStack.NativeTypes.NativeTypesBase request, ServiceStack.MetadataTypesConfig typesConfig) => throw null;
            public ServiceStack.NativeTypes.INativeTypesMetadata NativeTypesMetadata { get => throw null; set => throw null; }
            public NativeTypesService() => throw null;
            public ServiceStack.MetadataTypes ResolveMetadataTypes(ServiceStack.MetadataTypesConfig typesConfig) => throw null;
            public static ServiceStack.MetadataTypes ResolveMetadataTypes(ServiceStack.MetadataTypesConfig typesConfig, ServiceStack.NativeTypes.INativeTypesMetadata nativeTypesMetadata, ServiceStack.Web.IRequest req) => throw null;
            public static System.Collections.Generic.List<System.Type> ReturnInterfaces;
            public static System.Collections.Generic.List<System.Action<ServiceStack.Web.IRequest, System.Collections.Generic.Dictionary<string, string>>> TypeLinksFilters { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.NativeTypes.StringBuilderWrapper` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class StringBuilderWrapper
        {
            public void AppendLine(string str = default(string)) => throw null;
            public ServiceStack.NativeTypes.StringBuilderWrapper Indent() => throw null;
            public int Length { get => throw null; }
            public StringBuilderWrapper(System.Text.StringBuilder sb, int indent = default(int)) => throw null;
            public override string ToString() => throw null;
            public ServiceStack.NativeTypes.StringBuilderWrapper UnIndent() => throw null;
        }

        // Generated from `ServiceStack.NativeTypes.TypeFilterDelegate` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public delegate string TypeFilterDelegate(string typeName, string[] genericArgs);

        // Generated from `ServiceStack.NativeTypes.TypeLinks` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class TypeLinks : ServiceStack.NativeTypes.NativeTypesBase, ServiceStack.IReturn, ServiceStack.IReturn<System.Collections.Generic.Dictionary<string, string>>
        {
            public TypeLinks() => throw null;
        }

        // Generated from `ServiceStack.NativeTypes.TypesCSharp` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class TypesCSharp : ServiceStack.NativeTypes.NativeTypesBase
        {
            public TypesCSharp() => throw null;
        }

        // Generated from `ServiceStack.NativeTypes.TypesCommonJs` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class TypesCommonJs : ServiceStack.NativeTypes.NativeTypesBase
        {
            public bool? Cache { get => throw null; set => throw null; }
            public TypesCommonJs() => throw null;
        }

        // Generated from `ServiceStack.NativeTypes.TypesDart` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class TypesDart : ServiceStack.NativeTypes.NativeTypesBase
        {
            public TypesDart() => throw null;
        }

        // Generated from `ServiceStack.NativeTypes.TypesFSharp` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class TypesFSharp : ServiceStack.NativeTypes.NativeTypesBase
        {
            public TypesFSharp() => throw null;
        }

        // Generated from `ServiceStack.NativeTypes.TypesJava` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class TypesJava : ServiceStack.NativeTypes.NativeTypesBase
        {
            public TypesJava() => throw null;
        }

        // Generated from `ServiceStack.NativeTypes.TypesKotlin` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class TypesKotlin : ServiceStack.NativeTypes.NativeTypesBase
        {
            public TypesKotlin() => throw null;
        }

        // Generated from `ServiceStack.NativeTypes.TypesMetadata` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class TypesMetadata : ServiceStack.NativeTypes.NativeTypesBase
        {
            public TypesMetadata() => throw null;
        }

        // Generated from `ServiceStack.NativeTypes.TypesPython` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class TypesPython : ServiceStack.NativeTypes.NativeTypesBase
        {
            public TypesPython() => throw null;
        }

        // Generated from `ServiceStack.NativeTypes.TypesSwift` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class TypesSwift : ServiceStack.NativeTypes.NativeTypesBase
        {
            public TypesSwift() => throw null;
        }

        // Generated from `ServiceStack.NativeTypes.TypesSwift4` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class TypesSwift4 : ServiceStack.NativeTypes.NativeTypesBase
        {
            public TypesSwift4() => throw null;
        }

        // Generated from `ServiceStack.NativeTypes.TypesTypeScript` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class TypesTypeScript : ServiceStack.NativeTypes.NativeTypesBase
        {
            public TypesTypeScript() => throw null;
        }

        // Generated from `ServiceStack.NativeTypes.TypesTypeScriptDefinition` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class TypesTypeScriptDefinition : ServiceStack.NativeTypes.NativeTypesBase
        {
            public TypesTypeScriptDefinition() => throw null;
        }

        // Generated from `ServiceStack.NativeTypes.TypesVbNet` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class TypesVbNet : ServiceStack.NativeTypes.NativeTypesBase
        {
            public TypesVbNet() => throw null;
        }

        namespace CSharp
        {
            // Generated from `ServiceStack.NativeTypes.CSharp.CSharpGenerator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class CSharpGenerator : ServiceStack.NativeTypes.ILangGenerator
            {
                public static ServiceStack.NativeTypes.AddCodeDelegate AddCodeFilter { get => throw null; set => throw null; }
                public void AddProperties(ServiceStack.NativeTypes.StringBuilderWrapper sb, ServiceStack.MetadataType type, bool includeResponseStatus) => throw null;
                public System.Collections.Generic.List<string> AddQueryParamOptions { get => throw null; set => throw null; }
                public bool AppendAttributes(ServiceStack.NativeTypes.StringBuilderWrapper sb, System.Collections.Generic.List<ServiceStack.MetadataAttribute> attributes) => throw null;
                public bool AppendComments(ServiceStack.NativeTypes.StringBuilderWrapper sb, string desc) => throw null;
                public void AppendDataContract(ServiceStack.NativeTypes.StringBuilderWrapper sb, ServiceStack.MetadataDataContract dcMeta) => throw null;
                public bool AppendDataMember(ServiceStack.NativeTypes.StringBuilderWrapper sb, ServiceStack.MetadataDataMember dmMeta, int dataMemberIndex) => throw null;
                public static System.Collections.Generic.Dictionary<string, string[]> AttributeConstructorArgs { get => throw null; set => throw null; }
                public CSharpGenerator(ServiceStack.MetadataTypesConfig config) => throw null;
                public static System.Collections.Generic.List<ServiceStack.MetadataType> DefaultFilterTypes(System.Collections.Generic.List<ServiceStack.MetadataType> types) => throw null;
                public static System.Func<System.Collections.Generic.List<ServiceStack.MetadataType>, System.Collections.Generic.List<ServiceStack.MetadataType>> FilterTypes;
                public string GetCode(ServiceStack.MetadataTypes metadata, ServiceStack.Web.IRequest request, ServiceStack.NativeTypes.INativeTypesMetadata nativeTypes) => throw null;
                public string GetPropertyName(string name) => throw null;
                public virtual string GetPropertyType(ServiceStack.MetadataPropertyType prop) => throw null;
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataType> InnerTypeFilter { get => throw null; set => throw null; }
                public static ServiceStack.NativeTypes.AddCodeDelegate InsertCodeFilter { get => throw null; set => throw null; }
                public static string NameOnly(string type, bool includeNested = default(bool)) => throw null;
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataPropertyType, ServiceStack.MetadataType> PostPropertyFilter { get => throw null; set => throw null; }
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataType> PostTypeFilter { get => throw null; set => throw null; }
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataPropertyType, ServiceStack.MetadataType> PrePropertyFilter { get => throw null; set => throw null; }
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataType> PreTypeFilter { get => throw null; set => throw null; }
                public static System.Func<ServiceStack.NativeTypes.CSharp.CSharpGenerator, ServiceStack.MetadataType, ServiceStack.MetadataPropertyType, string> PropertyTypeFilter { get => throw null; set => throw null; }
                public string Type(ServiceStack.MetadataTypeName typeName, bool includeNested = default(bool)) => throw null;
                public string Type(string type, string[] genericArgs, bool includeNested = default(bool)) => throw null;
                public static string TypeAlias(string type, bool includeNested = default(bool)) => throw null;
                public static System.Collections.Generic.Dictionary<string, string> TypeAliases;
                public static ServiceStack.NativeTypes.TypeFilterDelegate TypeFilter { get => throw null; set => throw null; }
                public string TypeValue(string type, string value) => throw null;
                public static bool UseNullableAnnotations { set => throw null; }
                public bool WithoutOptions { get => throw null; set => throw null; }
            }

            // Generated from `ServiceStack.NativeTypes.CSharp.CSharpGeneratorExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public static class CSharpGeneratorExtensions
            {
                public static ServiceStack.MetadataTypeName GetInherits(this ServiceStack.MetadataType type) => throw null;
            }

        }
        namespace Dart
        {
            // Generated from `ServiceStack.NativeTypes.Dart.DartGenerator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class DartGenerator : ServiceStack.NativeTypes.ILangGenerator
            {
                public static ServiceStack.NativeTypes.AddCodeDelegate AddCodeFilter { get => throw null; set => throw null; }
                public void AddProperties(ServiceStack.NativeTypes.StringBuilderWrapper sb, ServiceStack.MetadataType type, bool includeResponseStatus) => throw null;
                public System.Collections.Generic.List<string> AddQueryParamOptions { get => throw null; set => throw null; }
                public bool AppendAttributes(ServiceStack.NativeTypes.StringBuilderWrapper sb, System.Collections.Generic.List<ServiceStack.MetadataAttribute> attributes) => throw null;
                public bool AppendComments(ServiceStack.NativeTypes.StringBuilderWrapper sb, string desc) => throw null;
                public void AppendDataContract(ServiceStack.NativeTypes.StringBuilderWrapper sb, ServiceStack.MetadataDataContract dcMeta) => throw null;
                public bool AppendDataMember(ServiceStack.NativeTypes.StringBuilderWrapper sb, ServiceStack.MetadataDataMember dmMeta, int dataMemberIndex) => throw null;
                public static System.Collections.Generic.HashSet<string> ArrayTypes;
                public string ConvertFromCSharp(ServiceStack.TextNode node) => throw null;
                public DartGenerator(ServiceStack.MetadataTypesConfig config) => throw null;
                public string DartLiteral(string typeName) => throw null;
                public static System.Collections.Generic.Dictionary<string, string> DartToJsonConverters;
                public static System.Collections.Generic.List<ServiceStack.MetadataType> DefaultFilterTypes(System.Collections.Generic.List<ServiceStack.MetadataType> types) => throw null;
                public static System.Collections.Generic.List<string> DefaultImports;
                public static System.Collections.Generic.HashSet<string> DictionaryTypes;
                public static System.Func<System.Collections.Generic.List<ServiceStack.MetadataType>, System.Collections.Generic.List<ServiceStack.MetadataType>> FilterTypes;
                public static bool GenerateServiceStackTypes { get => throw null; }
                public string GenericArg(string arg) => throw null;
                public string GetCode(ServiceStack.MetadataTypes metadata, ServiceStack.Web.IRequest request, ServiceStack.NativeTypes.INativeTypesMetadata nativeTypes) => throw null;
                public string GetPropertyName(string name) => throw null;
                public virtual string GetPropertyType(ServiceStack.MetadataPropertyType prop) => throw null;
                public static System.Collections.Generic.HashSet<string> IgnoreTypeInfosFor;
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataType> InnerTypeFilter { get => throw null; set => throw null; }
                public static ServiceStack.NativeTypes.AddCodeDelegate InsertCodeFilter { get => throw null; set => throw null; }
                public string NameOnly(string type) => throw null;
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataPropertyType, ServiceStack.MetadataType> PostPropertyFilter { get => throw null; set => throw null; }
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataType> PostTypeFilter { get => throw null; set => throw null; }
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataPropertyType, ServiceStack.MetadataType> PrePropertyFilter { get => throw null; set => throw null; }
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataType> PreTypeFilter { get => throw null; set => throw null; }
                public static System.Func<ServiceStack.NativeTypes.Dart.DartGenerator, ServiceStack.MetadataType, ServiceStack.MetadataPropertyType, string> PropertyTypeFilter { get => throw null; set => throw null; }
                public string RawGenericArg(string arg) => throw null;
                public string RawGenericType(string type, string[] genericArgs) => throw null;
                public string RawType(ServiceStack.TextNode node) => throw null;
                public void RegisterPropertyType(ServiceStack.MetadataPropertyType prop, string dartType) => throw null;
                public static System.Collections.Generic.HashSet<string> SetTypes;
                public string Type(ServiceStack.MetadataTypeName typeName) => throw null;
                public string Type(string type, string[] genericArgs) => throw null;
                public static System.Collections.Generic.Dictionary<string, string> TypeAliases;
                public static ServiceStack.NativeTypes.TypeFilterDelegate TypeFilter { get => throw null; set => throw null; }
                public string TypeValue(string type, string value) => throw null;
                public bool UseTypeConversion(ServiceStack.MetadataPropertyType prop) => throw null;
                public bool WithoutOptions { get => throw null; set => throw null; }
            }

            // Generated from `ServiceStack.NativeTypes.Dart.DartGeneratorExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public static class DartGeneratorExtensions
            {
                public static System.Collections.Generic.HashSet<string> DartKeyWords;
                public static bool HasEnumFlags(ServiceStack.MetadataType type) => throw null;
                public static string InDeclarationType(this string type) => throw null;
                public static bool IsKeyWord(string name) => throw null;
                public static string PropertyName(this string name) => throw null;
                public static string PropertyStyle(this string name) => throw null;
            }

        }
        namespace FSharp
        {
            // Generated from `ServiceStack.NativeTypes.FSharp.FSharpGenerator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class FSharpGenerator : ServiceStack.NativeTypes.ILangGenerator
            {
                public static ServiceStack.NativeTypes.AddCodeDelegate AddCodeFilter { get => throw null; set => throw null; }
                public void AddProperties(ServiceStack.NativeTypes.StringBuilderWrapper sb, ServiceStack.MetadataType type, bool includeResponseStatus) => throw null;
                public System.Collections.Generic.List<string> AddQueryParamOptions { get => throw null; set => throw null; }
                public bool AppendAttributes(ServiceStack.NativeTypes.StringBuilderWrapper sb, System.Collections.Generic.List<ServiceStack.MetadataAttribute> attributes) => throw null;
                public bool AppendComments(ServiceStack.NativeTypes.StringBuilderWrapper sb, string desc) => throw null;
                public void AppendDataContract(ServiceStack.NativeTypes.StringBuilderWrapper sb, ServiceStack.MetadataDataContract dcMeta) => throw null;
                public bool AppendDataMember(ServiceStack.NativeTypes.StringBuilderWrapper sb, ServiceStack.MetadataDataMember dmMeta, int dataMemberIndex) => throw null;
                public static System.Collections.Generic.List<ServiceStack.MetadataType> DefaultFilterTypes(System.Collections.Generic.List<ServiceStack.MetadataType> types) => throw null;
                public static System.Collections.Generic.HashSet<string> ExportMarkerInterfaces { get => throw null; }
                public FSharpGenerator(ServiceStack.MetadataTypesConfig config) => throw null;
                public static System.Func<System.Collections.Generic.List<ServiceStack.MetadataType>, System.Collections.Generic.List<ServiceStack.MetadataType>> FilterTypes;
                public string GetCode(ServiceStack.MetadataTypes metadata, ServiceStack.Web.IRequest request, ServiceStack.NativeTypes.INativeTypesMetadata nativeTypes) => throw null;
                public string GetPropertyName(string name) => throw null;
                public virtual string GetPropertyType(ServiceStack.MetadataPropertyType prop) => throw null;
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataType> InnerTypeFilter { get => throw null; set => throw null; }
                public static ServiceStack.NativeTypes.AddCodeDelegate InsertCodeFilter { get => throw null; set => throw null; }
                public string NameOnly(string type) => throw null;
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataPropertyType, ServiceStack.MetadataType> PostPropertyFilter { get => throw null; set => throw null; }
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataType> PostTypeFilter { get => throw null; set => throw null; }
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataPropertyType, ServiceStack.MetadataType> PrePropertyFilter { get => throw null; set => throw null; }
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataType> PreTypeFilter { get => throw null; set => throw null; }
                public static System.Func<ServiceStack.NativeTypes.FSharp.FSharpGenerator, ServiceStack.MetadataType, ServiceStack.MetadataPropertyType, string> PropertyTypeFilter { get => throw null; set => throw null; }
                public string Type(ServiceStack.MetadataTypeName typeName) => throw null;
                public string Type(string type, string[] genericArgs) => throw null;
                public static System.Collections.Generic.Dictionary<string, string> TypeAliases;
                public static ServiceStack.NativeTypes.TypeFilterDelegate TypeFilter { get => throw null; set => throw null; }
                public string TypeValue(string type, string value) => throw null;
                public bool WithoutOptions { get => throw null; set => throw null; }
            }

            // Generated from `ServiceStack.NativeTypes.FSharp.FSharpGeneratorExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public static class FSharpGeneratorExtensions
            {
                public static bool Contains(this System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> map, string key, string value) => throw null;
            }

        }
        namespace Java
        {
            // Generated from `ServiceStack.NativeTypes.Java.JavaGenerator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class JavaGenerator : ServiceStack.NativeTypes.ILangGenerator
            {
                public static ServiceStack.NativeTypes.AddCodeDelegate AddCodeFilter { get => throw null; set => throw null; }
                public static bool AddGsonImport { set => throw null; }
                public void AddProperties(ServiceStack.NativeTypes.StringBuilderWrapper sb, ServiceStack.MetadataType type, bool includeResponseStatus, bool addPropertyAccessors, string settersReturnType) => throw null;
                public System.Collections.Generic.List<string> AddQueryParamOptions { get => throw null; set => throw null; }
                public bool AppendAttributes(ServiceStack.NativeTypes.StringBuilderWrapper sb, System.Collections.Generic.List<ServiceStack.MetadataAttribute> attributes) => throw null;
                public bool AppendComments(ServiceStack.NativeTypes.StringBuilderWrapper sb, string desc) => throw null;
                public void AppendDataContract(ServiceStack.NativeTypes.StringBuilderWrapper sb, ServiceStack.MetadataDataContract dcMeta) => throw null;
                public bool AppendDataMember(ServiceStack.NativeTypes.StringBuilderWrapper sb, ServiceStack.MetadataDataMember dmMeta, int dataMemberIndex) => throw null;
                public static System.Collections.Concurrent.ConcurrentDictionary<string, string> ArrayAliases;
                public static System.Collections.Generic.HashSet<string> ArrayTypes;
                public string ConvertFromCSharp(ServiceStack.TextNode node) => throw null;
                public static System.Collections.Generic.List<ServiceStack.MetadataType> DefaultFilterTypes(System.Collections.Generic.List<ServiceStack.MetadataType> types) => throw null;
                public static string DefaultGlobalNamespace;
                public static System.Collections.Generic.List<string> DefaultImports;
                public static System.Collections.Generic.HashSet<string> DictionaryTypes;
                public static System.Func<System.Collections.Generic.List<ServiceStack.MetadataType>, System.Collections.Generic.List<ServiceStack.MetadataType>> FilterTypes;
                public static string GSonAnnotationsNamespace;
                public static string GSonReflectNamespace;
                public string GenericArg(string arg) => throw null;
                public string GetCode(ServiceStack.MetadataTypes metadata, ServiceStack.Web.IRequest request, ServiceStack.NativeTypes.INativeTypesMetadata nativeTypes) => throw null;
                public string GetPropertyName(string name) => throw null;
                public virtual string GetPropertyType(ServiceStack.MetadataPropertyType prop) => throw null;
                public static System.Collections.Generic.HashSet<string> IgnoreTypeNames;
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataType> InnerTypeFilter { get => throw null; set => throw null; }
                public static ServiceStack.NativeTypes.AddCodeDelegate InsertCodeFilter { get => throw null; set => throw null; }
                public JavaGenerator(ServiceStack.MetadataTypesConfig config) => throw null;
                public static string JavaIoNamespace;
                public string NameOnly(string type) => throw null;
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataPropertyType, ServiceStack.MetadataType> PostPropertyFilter { get => throw null; set => throw null; }
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataType> PostTypeFilter { get => throw null; set => throw null; }
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataPropertyType, ServiceStack.MetadataType> PrePropertyFilter { get => throw null; set => throw null; }
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataType> PreTypeFilter { get => throw null; set => throw null; }
                public static System.Func<ServiceStack.NativeTypes.Java.JavaGenerator, ServiceStack.MetadataType, ServiceStack.MetadataPropertyType, string> PropertyTypeFilter { get => throw null; set => throw null; }
                public string Type(ServiceStack.MetadataTypeName typeName) => throw null;
                public string Type(string type, string[] genericArgs) => throw null;
                public static System.Collections.Concurrent.ConcurrentDictionary<string, string> TypeAliases;
                public static ServiceStack.NativeTypes.TypeFilterDelegate TypeFilter { get => throw null; set => throw null; }
                public string TypeValue(string type, string value) => throw null;
                public bool WithoutOptions { get => throw null; set => throw null; }
            }

            // Generated from `ServiceStack.NativeTypes.Java.JavaGeneratorExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public static class JavaGeneratorExtensions
            {
                public static ServiceStack.NativeTypes.StringBuilderWrapper AppendPropertyAccessor(this ServiceStack.NativeTypes.StringBuilderWrapper sb, string type, string fieldName, string settersReturnThis) => throw null;
                public static ServiceStack.NativeTypes.StringBuilderWrapper AppendPropertyAccessor(this ServiceStack.NativeTypes.StringBuilderWrapper sb, string type, string fieldName, string accessorName, string settersReturnThis) => throw null;
                public static string InheritedType(this string type) => throw null;
                public static bool IsKeyWord(this string name) => throw null;
                public static System.Collections.Generic.HashSet<string> JavaKeyWords;
                public static string PropertyStyle(this string name) => throw null;
                public static ServiceStack.MetadataAttribute ToMetadataAttribute(this ServiceStack.MetadataRoute route) => throw null;
            }

        }
        namespace Kotlin
        {
            // Generated from `ServiceStack.NativeTypes.Kotlin.KotlinGenerator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class KotlinGenerator : ServiceStack.NativeTypes.ILangGenerator
            {
                public static ServiceStack.NativeTypes.AddCodeDelegate AddCodeFilter { get => throw null; set => throw null; }
                public static bool AddGsonImport { set => throw null; }
                public void AddProperties(ServiceStack.NativeTypes.StringBuilderWrapper sb, ServiceStack.MetadataType type, bool initCollections, bool includeResponseStatus) => throw null;
                public System.Collections.Generic.List<string> AddQueryParamOptions { get => throw null; set => throw null; }
                public bool AppendAttributes(ServiceStack.NativeTypes.StringBuilderWrapper sb, System.Collections.Generic.List<ServiceStack.MetadataAttribute> attributes) => throw null;
                public bool AppendComments(ServiceStack.NativeTypes.StringBuilderWrapper sb, string desc) => throw null;
                public void AppendDataContract(ServiceStack.NativeTypes.StringBuilderWrapper sb, ServiceStack.MetadataDataContract dcMeta) => throw null;
                public bool AppendDataMember(ServiceStack.NativeTypes.StringBuilderWrapper sb, ServiceStack.MetadataDataMember dmMeta, int dataMemberIndex) => throw null;
                public static System.Collections.Concurrent.ConcurrentDictionary<string, string> ArrayAliases;
                public static System.Collections.Generic.HashSet<string> ArrayTypes;
                public string ConvertFromCSharp(ServiceStack.TextNode node) => throw null;
                public static System.Collections.Generic.List<ServiceStack.MetadataType> DefaultFilterTypes(System.Collections.Generic.List<ServiceStack.MetadataType> types) => throw null;
                public static System.Collections.Generic.List<string> DefaultImports;
                public static System.Collections.Generic.HashSet<string> DictionaryTypes;
                public static System.Func<System.Collections.Generic.List<ServiceStack.MetadataType>, System.Collections.Generic.List<ServiceStack.MetadataType>> FilterTypes;
                public static string GSonAnnotationsNamespace;
                public static string GSonReflectNamespace;
                public string GenericArg(string arg) => throw null;
                public string GetCode(ServiceStack.MetadataTypes metadata, ServiceStack.Web.IRequest request, ServiceStack.NativeTypes.INativeTypesMetadata nativeTypes) => throw null;
                public string GetPropertyName(string name) => throw null;
                public virtual string GetPropertyType(ServiceStack.MetadataPropertyType prop) => throw null;
                public static System.Collections.Generic.HashSet<string> IgnoreTypeNames;
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataType> InnerTypeFilter { get => throw null; set => throw null; }
                public static ServiceStack.NativeTypes.AddCodeDelegate InsertCodeFilter { get => throw null; set => throw null; }
                public static string JavaIoNamespace;
                public KotlinGenerator(ServiceStack.MetadataTypesConfig config) => throw null;
                public string NameOnly(string type) => throw null;
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataPropertyType, ServiceStack.MetadataType> PostPropertyFilter { get => throw null; set => throw null; }
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataType> PostTypeFilter { get => throw null; set => throw null; }
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataPropertyType, ServiceStack.MetadataType> PrePropertyFilter { get => throw null; set => throw null; }
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataType> PreTypeFilter { get => throw null; set => throw null; }
                public static System.Func<ServiceStack.NativeTypes.Kotlin.KotlinGenerator, ServiceStack.MetadataType, ServiceStack.MetadataPropertyType, string> PropertyTypeFilter { get => throw null; set => throw null; }
                public string Type(ServiceStack.MetadataTypeName typeName) => throw null;
                public string Type(string type, string[] genericArgs) => throw null;
                public static System.Collections.Concurrent.ConcurrentDictionary<string, string> TypeAliases;
                public static ServiceStack.NativeTypes.TypeFilterDelegate TypeFilter { get => throw null; set => throw null; }
                public string TypeValue(string type, string value) => throw null;
                public bool WithoutOptions { get => throw null; set => throw null; }
            }

            // Generated from `ServiceStack.NativeTypes.Kotlin.KotlinGeneratorExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public static class KotlinGeneratorExtensions
            {
                public static ServiceStack.NativeTypes.StringBuilderWrapper AppendPropertyAccessor(this ServiceStack.NativeTypes.StringBuilderWrapper sb, string type, string fieldName, string settersReturnThis) => throw null;
                public static ServiceStack.NativeTypes.StringBuilderWrapper AppendPropertyAccessor(this ServiceStack.NativeTypes.StringBuilderWrapper sb, string type, string fieldName, string accessorName, string settersReturnThis) => throw null;
                public static string InheritedType(this string type) => throw null;
                public static bool IsKeyWord(this string name) => throw null;
                public static System.Collections.Generic.HashSet<string> KotlinKeyWords;
                public static string PropertyStyle(this string name) => throw null;
                public static ServiceStack.MetadataAttribute ToMetadataAttribute(this ServiceStack.MetadataRoute route) => throw null;
            }

        }
        namespace Python
        {
            // Generated from `ServiceStack.NativeTypes.Python.PythonGenerator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class PythonGenerator : ServiceStack.NativeTypes.ILangGenerator
            {
                public static ServiceStack.NativeTypes.AddCodeDelegate AddCodeFilter { get => throw null; set => throw null; }
                public void AddProperties(ServiceStack.NativeTypes.StringBuilderWrapper sb, ServiceStack.MetadataType type, bool includeResponseStatus) => throw null;
                public System.Collections.Generic.List<string> AddQueryParamOptions { get => throw null; set => throw null; }
                public System.Collections.Generic.HashSet<string> AddedDeclarations { get => throw null; set => throw null; }
                public System.Collections.Generic.List<ServiceStack.MetadataType> AllTypes { get => throw null; set => throw null; }
                public static System.Collections.Generic.HashSet<string> AllowedKeyTypes;
                public bool AppendAttributes(ServiceStack.NativeTypes.StringBuilderWrapper sb, System.Collections.Generic.List<ServiceStack.MetadataAttribute> attributes) => throw null;
                public bool AppendComments(ServiceStack.NativeTypes.StringBuilderWrapper sb, string desc) => throw null;
                public void AppendDataContract(ServiceStack.NativeTypes.StringBuilderWrapper sb, ServiceStack.MetadataDataContract dcMeta) => throw null;
                public bool AppendDataMember(ServiceStack.NativeTypes.StringBuilderWrapper sb, ServiceStack.MetadataDataMember dmMeta, int dataMemberIndex) => throw null;
                public bool AppendTripleDocs(ServiceStack.NativeTypes.StringBuilderWrapper sb, string desc) => throw null;
                public static System.Collections.Generic.HashSet<string> ArrayTypes;
                public string ClassType(string typeName, string extend, out string[] genericArgs) => throw null;
                public ServiceStack.MetadataTypesConfig Config;
                public string ConvertFromCSharp(ServiceStack.TextNode node) => throw null;
                public static System.Func<string, string> CookedDeclarationTypeFilter { get => throw null; set => throw null; }
                public static System.Func<string, string> CookedTypeFilter { get => throw null; set => throw null; }
                public string DataClass { get => throw null; set => throw null; }
                public string DataClassJson { get => throw null; set => throw null; }
                public string DeclarationType(string type, string[] genericArgs, out string addDeclaration) => throw null;
                public static ServiceStack.NativeTypes.TypeFilterDelegate DeclarationTypeFilter { get => throw null; set => throw null; }
                public static System.Collections.Generic.List<ServiceStack.MetadataType> DefaultFilterTypes(System.Collections.Generic.List<ServiceStack.MetadataType> types) => throw null;
                public static System.Collections.Generic.List<string> DefaultImports;
                public static bool? DefaultIsPropertyOptional(ServiceStack.NativeTypes.Python.PythonGenerator generator, ServiceStack.MetadataType type, ServiceStack.MetadataPropertyType prop) => throw null;
                public static System.Collections.Generic.Dictionary<string, string> DefaultValues;
                public static System.Collections.Generic.HashSet<string> DictionaryTypes;
                public static System.Func<System.Collections.Generic.List<ServiceStack.MetadataType>, System.Collections.Generic.List<ServiceStack.MetadataType>> FilterTypes { get => throw null; set => throw null; }
                public static bool GenerateServiceStackTypes { get => throw null; }
                public string GenericArg(string arg) => throw null;
                public string GetCode(ServiceStack.MetadataTypes metadata, ServiceStack.Web.IRequest request, ServiceStack.NativeTypes.INativeTypesMetadata nativeTypes) => throw null;
                public string GetPropertyName(string name) => throw null;
                public virtual string GetPropertyType(ServiceStack.MetadataPropertyType prop, out bool isNullable) => throw null;
                public static bool IgnoreAllAttributes { get => throw null; set => throw null; }
                public static System.Collections.Generic.HashSet<string> IgnoreAttributes { get => throw null; set => throw null; }
                public static System.Collections.Generic.HashSet<string> IgnoreReturnMarkersForSubTypesOf;
                public static System.Collections.Generic.HashSet<string> IgnoreTypeInfosFor;
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataType> InnerTypeFilter { get => throw null; set => throw null; }
                public static ServiceStack.NativeTypes.AddCodeDelegate InsertCodeFilter { get => throw null; set => throw null; }
                public static System.Func<ServiceStack.NativeTypes.Python.PythonGenerator, ServiceStack.MetadataType, ServiceStack.MetadataPropertyType, bool?> IsPropertyOptional { get => throw null; set => throw null; }
                public static System.Collections.Generic.HashSet<string> KeyWords;
                public string NameOnly(string type) => throw null;
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataPropertyType, ServiceStack.MetadataType> PostPropertyFilter { get => throw null; set => throw null; }
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataType> PostTypeFilter { get => throw null; set => throw null; }
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataPropertyType, ServiceStack.MetadataType> PrePropertyFilter { get => throw null; set => throw null; }
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataType> PreTypeFilter { get => throw null; set => throw null; }
                public static System.Func<ServiceStack.NativeTypes.Python.PythonGenerator, ServiceStack.MetadataType, ServiceStack.MetadataPropertyType, string> PropertyTypeFilter { get => throw null; set => throw null; }
                public PythonGenerator(ServiceStack.MetadataTypesConfig config) => throw null;
                public static System.Func<string, string> ReturnMarkerFilter { get => throw null; set => throw null; }
                public static System.Collections.Generic.Dictionary<string, string> ReturnTypeAliases;
                public static ServiceStack.Text.TextCase TextCase { get => throw null; set => throw null; }
                public string Type(ServiceStack.MetadataTypeName typeName) => throw null;
                public string Type(string type, string[] genericArgs) => throw null;
                public static System.Collections.Generic.Dictionary<string, string> TypeAliases;
                public static ServiceStack.NativeTypes.TypeFilterDelegate TypeFilter { get => throw null; set => throw null; }
                public string TypeValue(string type, string value) => throw null;
                public bool WithoutOptions { get => throw null; set => throw null; }
            }

            // Generated from `ServiceStack.NativeTypes.Python.PythonGeneratorExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public static class PythonGeneratorExtensions
            {
                public static ServiceStack.TextNode ParsePythonTypeIntoNodes(this string typeDef) => throw null;
                public static string PropertyStyle(this string name) => throw null;
            }

        }
        namespace Swift
        {
            // Generated from `ServiceStack.NativeTypes.Swift.SwiftGenerator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class SwiftGenerator : ServiceStack.NativeTypes.ILangGenerator
            {
                public static ServiceStack.NativeTypes.AddCodeDelegate AddCodeFilter { get => throw null; set => throw null; }
                public static string AddGenericConstraints(string typeDef) => throw null;
                public void AddProperties(ServiceStack.NativeTypes.StringBuilderWrapper sb, ServiceStack.MetadataType type, bool initCollections, bool includeResponseStatus) => throw null;
                public System.Collections.Generic.List<string> AddQueryParamOptions { get => throw null; set => throw null; }
                public bool AppendAttributes(ServiceStack.NativeTypes.StringBuilderWrapper sb, System.Collections.Generic.List<ServiceStack.MetadataAttribute> attributes) => throw null;
                public bool AppendComments(ServiceStack.NativeTypes.StringBuilderWrapper sb, string desc) => throw null;
                public void AppendDataContract(ServiceStack.NativeTypes.StringBuilderWrapper sb, ServiceStack.MetadataDataContract dcMeta) => throw null;
                public bool AppendDataMember(ServiceStack.NativeTypes.StringBuilderWrapper sb, ServiceStack.MetadataDataMember dmMeta, int dataMemberIndex) => throw null;
                public static System.Collections.Generic.HashSet<string> ArrayTypes;
                public static string CSharpStyleEnums(string enumName) => throw null;
                public string ConvertFromCSharp(ServiceStack.TextNode node) => throw null;
                public static System.Collections.Concurrent.ConcurrentDictionary<string, ServiceStack.NativeTypes.Swift.SwiftTypeConverter> Converters;
                public static System.Collections.Generic.List<ServiceStack.MetadataType> DefaultFilterTypes(System.Collections.Generic.List<ServiceStack.MetadataType> types) => throw null;
                public static System.Collections.Generic.List<string> DefaultImports;
                public static System.Collections.Generic.HashSet<string> DictionaryTypes;
                public static System.Func<string, string> EnumNameStrategy { get => throw null; set => throw null; }
                public static System.Func<System.Collections.Generic.List<ServiceStack.MetadataType>, System.Collections.Generic.List<ServiceStack.MetadataType>> FilterTypes;
                public ServiceStack.MetadataType FindType(ServiceStack.MetadataTypeName typeName) => throw null;
                public ServiceStack.MetadataType FindType(string typeName, string typeNamespace, params string[] genericArgs) => throw null;
                public string GenericArg(string arg) => throw null;
                public string GetCode(ServiceStack.MetadataTypes metadata, ServiceStack.Web.IRequest request, ServiceStack.NativeTypes.INativeTypesMetadata nativeTypes) => throw null;
                public System.Collections.Generic.List<ServiceStack.MetadataPropertyType> GetProperties(ServiceStack.MetadataType type) => throw null;
                public string GetPropertyName(string name) => throw null;
                public virtual string GetPropertyType(ServiceStack.MetadataPropertyType prop) => throw null;
                public static bool IgnoreArrayReturnTypes;
                public static System.Collections.Generic.HashSet<string> IgnorePropertyNames;
                public static System.Collections.Generic.HashSet<string> IgnorePropertyTypeNames;
                public static System.Collections.Generic.HashSet<string> IgnoreTypeNames;
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataType> InnerTypeFilter { get => throw null; set => throw null; }
                public static ServiceStack.NativeTypes.AddCodeDelegate InsertCodeFilter { get => throw null; set => throw null; }
                public string NameOnly(string type) => throw null;
                public static System.Collections.Generic.HashSet<string> OverrideInitForBaseClasses;
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataPropertyType, ServiceStack.MetadataType> PostPropertyFilter { get => throw null; set => throw null; }
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataType> PostTypeFilter { get => throw null; set => throw null; }
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataPropertyType, ServiceStack.MetadataType> PrePropertyFilter { get => throw null; set => throw null; }
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataType> PreTypeFilter { get => throw null; set => throw null; }
                public static System.Func<ServiceStack.NativeTypes.Swift.SwiftGenerator, ServiceStack.MetadataType, ServiceStack.MetadataPropertyType, string> PropertyTypeFilter { get => throw null; set => throw null; }
                public string ReturnType(string type, string[] genericArgs) => throw null;
                public SwiftGenerator(ServiceStack.MetadataTypesConfig config) => throw null;
                public static string SwiftStyleEnums(string enumName) => throw null;
                public string Type(ServiceStack.MetadataTypeName typeName) => throw null;
                public string Type(string type, string[] genericArgs) => throw null;
                public static System.Collections.Concurrent.ConcurrentDictionary<string, string> TypeAliases;
                public static ServiceStack.NativeTypes.TypeFilterDelegate TypeFilter { get => throw null; set => throw null; }
                public string TypeValue(string type, string value) => throw null;
                public bool WithoutOptions { get => throw null; set => throw null; }
            }

            // Generated from `ServiceStack.NativeTypes.Swift.SwiftGeneratorExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public static class SwiftGeneratorExtensions
            {
                public static string InheritedType(this string type) => throw null;
                public static string PropertyStyle(this string name) => throw null;
                public static System.Collections.Generic.HashSet<string> SwiftKeyWords;
                public static string UnescapeReserved(this string name) => throw null;
            }

            // Generated from `ServiceStack.NativeTypes.Swift.SwiftTypeConverter` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class SwiftTypeConverter
            {
                public string Attribute { get => throw null; set => throw null; }
                public string DecodeMethod { get => throw null; set => throw null; }
                public string EncodeMethod { get => throw null; set => throw null; }
                public SwiftTypeConverter() => throw null;
            }

        }
        namespace TypeScript
        {
            // Generated from `ServiceStack.NativeTypes.TypeScript.CommonJsGenerator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class CommonJsGenerator : ServiceStack.NativeTypes.ILangGenerator
            {
                public static ServiceStack.NativeTypes.AddCodeDelegate AddCodeFilter { get => throw null; set => throw null; }
                public System.Collections.Generic.List<string> AddQueryParamOptions { get => throw null; set => throw null; }
                public System.Collections.Generic.HashSet<string> AddedDeclarations { get => throw null; set => throw null; }
                public System.Collections.Generic.List<ServiceStack.MetadataType> AllTypes { get => throw null; set => throw null; }
                public static int BatchSize { get => throw null; set => throw null; }
                public CommonJsGenerator(ServiceStack.MetadataTypesConfig config) => throw null;
                public ServiceStack.MetadataTypesConfig Config;
                public static string CreateEmptyClass(string name) => throw null;
                public string DeclarationType(string type, string[] genericArgs, out string addDeclaration) => throw null;
                public static System.Collections.Generic.List<ServiceStack.MetadataType> DefaultFilterTypes(System.Collections.Generic.List<ServiceStack.MetadataType> types) => throw null;
                public string DictionaryDeclaration { get => throw null; set => throw null; }
                public static System.Func<System.Collections.Generic.List<ServiceStack.MetadataType>, System.Collections.Generic.List<ServiceStack.MetadataType>> FilterTypes { get => throw null; set => throw null; }
                public ServiceStack.NativeTypes.TypeScript.TypeScriptGenerator Gen { get => throw null; set => throw null; }
                public string GetCode(ServiceStack.MetadataTypes metadata, ServiceStack.Web.IRequest request, ServiceStack.NativeTypes.INativeTypesMetadata nativeTypes) => throw null;
                public static ServiceStack.NativeTypes.AddCodeDelegate InsertCodeFilter { get => throw null; set => throw null; }
                public System.Func<string, string> ReturnTypeFilter { get => throw null; set => throw null; }
                public string Type(string type, string[] genericArgs) => throw null;
                public bool WithoutOptions { get => throw null; set => throw null; }
            }

            // Generated from `ServiceStack.NativeTypes.TypeScript.TypeScriptGenerator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class TypeScriptGenerator : ServiceStack.NativeTypes.ILangGenerator
            {
                public static ServiceStack.NativeTypes.AddCodeDelegate AddCodeFilter { get => throw null; set => throw null; }
                public void AddProperties(ServiceStack.NativeTypes.StringBuilderWrapper sb, ServiceStack.MetadataType type, bool includeResponseStatus) => throw null;
                public System.Collections.Generic.List<string> AddQueryParamOptions { get => throw null; set => throw null; }
                public System.Collections.Generic.HashSet<string> AddedDeclarations { get => throw null; set => throw null; }
                public System.Collections.Generic.List<ServiceStack.MetadataType> AllTypes { get => throw null; set => throw null; }
                public static System.Collections.Generic.HashSet<string> AllowedKeyTypes;
                public bool AppendAttributes(ServiceStack.NativeTypes.StringBuilderWrapper sb, System.Collections.Generic.List<ServiceStack.MetadataAttribute> attributes) => throw null;
                public bool AppendComments(ServiceStack.NativeTypes.StringBuilderWrapper sb, string desc) => throw null;
                public void AppendDataContract(ServiceStack.NativeTypes.StringBuilderWrapper sb, ServiceStack.MetadataDataContract dcMeta) => throw null;
                public bool AppendDataMember(ServiceStack.NativeTypes.StringBuilderWrapper sb, ServiceStack.MetadataDataMember dmMeta, int dataMemberIndex) => throw null;
                public static System.Collections.Generic.HashSet<string> ArrayTypes;
                public ServiceStack.MetadataTypesConfig Config;
                public string ConvertFromCSharp(ServiceStack.TextNode node) => throw null;
                public static System.Func<string, string> CookedDeclarationTypeFilter { get => throw null; set => throw null; }
                public static System.Func<string, string> CookedTypeFilter { get => throw null; set => throw null; }
                public string DeclarationType(string type, string[] genericArgs, out string addDeclaration) => throw null;
                public static ServiceStack.NativeTypes.TypeFilterDelegate DeclarationTypeFilter { get => throw null; set => throw null; }
                public static System.Collections.Generic.List<ServiceStack.MetadataType> DefaultFilterTypes(System.Collections.Generic.List<ServiceStack.MetadataType> types) => throw null;
                public static System.Collections.Generic.List<string> DefaultImports;
                public static bool? DefaultIsPropertyOptional(ServiceStack.NativeTypes.TypeScript.TypeScriptGenerator generator, ServiceStack.MetadataType type, ServiceStack.MetadataPropertyType prop) => throw null;
                public string DictionaryDeclaration { get => throw null; set => throw null; }
                public static System.Collections.Generic.HashSet<string> DictionaryTypes;
                public static bool EmitPartialConstructors { get => throw null; set => throw null; }
                public static System.Func<System.Collections.Generic.List<ServiceStack.MetadataType>, System.Collections.Generic.List<ServiceStack.MetadataType>> FilterTypes { get => throw null; set => throw null; }
                public string GenericArg(string arg) => throw null;
                public string GetCode(ServiceStack.MetadataTypes metadata, ServiceStack.Web.IRequest request, ServiceStack.NativeTypes.INativeTypesMetadata nativeTypes) => throw null;
                public string GetPropertyName(string name) => throw null;
                public virtual string GetPropertyType(ServiceStack.MetadataPropertyType prop, out bool isNullable) => throw null;
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataType> InnerTypeFilter { get => throw null; set => throw null; }
                public static ServiceStack.NativeTypes.AddCodeDelegate InsertCodeFilter { get => throw null; set => throw null; }
                public static bool InsertTsNoCheck { get => throw null; set => throw null; }
                public static System.Func<ServiceStack.NativeTypes.TypeScript.TypeScriptGenerator, ServiceStack.MetadataType, ServiceStack.MetadataPropertyType, bool?> IsPropertyOptional { get => throw null; set => throw null; }
                public string NameOnly(string type) => throw null;
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataPropertyType, ServiceStack.MetadataType> PostPropertyFilter { get => throw null; set => throw null; }
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataType> PostTypeFilter { get => throw null; set => throw null; }
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataPropertyType, ServiceStack.MetadataType> PrePropertyFilter { get => throw null; set => throw null; }
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataType> PreTypeFilter { get => throw null; set => throw null; }
                public static System.Func<ServiceStack.NativeTypes.TypeScript.TypeScriptGenerator, ServiceStack.MetadataType, ServiceStack.MetadataPropertyType, string> PropertyTypeFilter { get => throw null; set => throw null; }
                public static System.Func<string, string> ReturnMarkerFilter { get => throw null; set => throw null; }
                public static System.Collections.Generic.Dictionary<string, string> ReturnTypeAliases;
                public string Type(ServiceStack.MetadataTypeName typeName) => throw null;
                public string Type(string type, string[] genericArgs) => throw null;
                public static System.Collections.Generic.Dictionary<string, string> TypeAliases;
                public static ServiceStack.NativeTypes.TypeFilterDelegate TypeFilter { get => throw null; set => throw null; }
                public TypeScriptGenerator(ServiceStack.MetadataTypesConfig config) => throw null;
                public string TypeValue(string type, string value) => throw null;
                public static bool UseNullableProperties { set => throw null; }
                public static bool UseUnionTypeEnums { get => throw null; set => throw null; }
                public bool WithoutOptions { get => throw null; set => throw null; }
            }

            // Generated from `ServiceStack.NativeTypes.TypeScript.TypeScriptGeneratorExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public static class TypeScriptGeneratorExtensions
            {
                public static string InReturnMarker(this string type) => throw null;
                public static string PropertyStyle(this string name) => throw null;
            }

        }
        namespace VbNet
        {
            // Generated from `ServiceStack.NativeTypes.VbNet.VbNetGenerator` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public class VbNetGenerator : ServiceStack.NativeTypes.ILangGenerator
            {
                public static ServiceStack.NativeTypes.AddCodeDelegate AddCodeFilter { get => throw null; set => throw null; }
                public void AddProperties(ServiceStack.NativeTypes.StringBuilderWrapper sb, ServiceStack.MetadataType type, bool includeResponseStatus) => throw null;
                public System.Collections.Generic.List<string> AddQueryParamOptions { get => throw null; set => throw null; }
                public bool AppendAttributes(ServiceStack.NativeTypes.StringBuilderWrapper sb, System.Collections.Generic.List<ServiceStack.MetadataAttribute> attributes) => throw null;
                public bool AppendComments(ServiceStack.NativeTypes.StringBuilderWrapper sb, string desc) => throw null;
                public void AppendDataContract(ServiceStack.NativeTypes.StringBuilderWrapper sb, ServiceStack.MetadataDataContract dcMeta) => throw null;
                public bool AppendDataMember(ServiceStack.NativeTypes.StringBuilderWrapper sb, ServiceStack.MetadataDataMember dmMeta, int dataMemberIndex) => throw null;
                public static System.Collections.Generic.List<ServiceStack.MetadataType> DefaultFilterTypes(System.Collections.Generic.List<ServiceStack.MetadataType> types) => throw null;
                public string EscapeKeyword(string name) => throw null;
                public static System.Func<System.Collections.Generic.List<ServiceStack.MetadataType>, System.Collections.Generic.List<ServiceStack.MetadataType>> FilterTypes;
                public string GetCode(ServiceStack.MetadataTypes metadata, ServiceStack.Web.IRequest request, ServiceStack.NativeTypes.INativeTypesMetadata nativeTypes) => throw null;
                public string GetPropertyName(string name) => throw null;
                public virtual string GetPropertyType(ServiceStack.MetadataPropertyType prop) => throw null;
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataType> InnerTypeFilter { get => throw null; set => throw null; }
                public static ServiceStack.NativeTypes.AddCodeDelegate InsertCodeFilter { get => throw null; set => throw null; }
                public static System.Collections.Generic.HashSet<string> KeyWords;
                public string NameOnly(string type, bool includeNested = default(bool)) => throw null;
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataPropertyType, ServiceStack.MetadataType> PostPropertyFilter { get => throw null; set => throw null; }
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataType> PostTypeFilter { get => throw null; set => throw null; }
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataPropertyType, ServiceStack.MetadataType> PrePropertyFilter { get => throw null; set => throw null; }
                public static System.Action<ServiceStack.NativeTypes.StringBuilderWrapper, ServiceStack.MetadataType> PreTypeFilter { get => throw null; set => throw null; }
                public static System.Func<ServiceStack.NativeTypes.VbNet.VbNetGenerator, ServiceStack.MetadataType, ServiceStack.MetadataPropertyType, string> PropertyTypeFilter { get => throw null; set => throw null; }
                public string Type(ServiceStack.MetadataTypeName typeName, bool includeNested = default(bool)) => throw null;
                public string Type(string type, string[] genericArgs, bool includeNested = default(bool)) => throw null;
                public static System.Collections.Generic.Dictionary<string, string> TypeAliases;
                public static ServiceStack.NativeTypes.TypeFilterDelegate TypeFilter { get => throw null; set => throw null; }
                public string TypeValue(string type, string value) => throw null;
                public VbNetGenerator(ServiceStack.MetadataTypesConfig config) => throw null;
                public bool WithoutOptions { get => throw null; set => throw null; }
            }

            // Generated from `ServiceStack.NativeTypes.VbNet.VbNetGeneratorExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public static class VbNetGeneratorExtensions
            {
                public static string QuotedSafeValue(this string value) => throw null;
                public static string SafeComment(this string comment) => throw null;
                public static string SafeToken(this string token) => throw null;
                public static string SafeValue(this string value) => throw null;
                public static ServiceStack.MetadataAttribute ToMetadataAttribute(this ServiceStack.MetadataRoute route) => throw null;
            }

        }
    }
    namespace NetCore
    {
        // Generated from `ServiceStack.NetCore.NetCoreContainerAdapter` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class NetCoreContainerAdapter : ServiceStack.Configuration.IContainerAdapter, ServiceStack.Configuration.IResolver, System.IDisposable
        {
            public void Dispose() => throw null;
            public NetCoreContainerAdapter(System.IServiceProvider appServices) => throw null;
            public T Resolve<T>() => throw null;
            public T TryResolve<T>() => throw null;
        }

        // Generated from `ServiceStack.NetCore.NetCoreHeadersCollection` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class NetCoreHeadersCollection : System.Collections.Specialized.NameValueCollection
        {
            public override void Add(string name, string value) => throw null;
            public override string[] AllKeys { get => throw null; }
            public override void Clear() => throw null;
            public override int Count { get => throw null; }
            public override string Get(int index) => throw null;
            public override string Get(string name) => throw null;
            public override System.Collections.IEnumerator GetEnumerator() => throw null;
            public override string GetKey(int index) => throw null;
            public override string[] GetValues(string name) => throw null;
            public bool HasKeys() => throw null;
            public bool IsSynchronized { get => throw null; }
            public NetCoreHeadersCollection(Microsoft.AspNetCore.Http.IHeaderDictionary original) => throw null;
            public object Original { get => throw null; }
            public override void Remove(string name) => throw null;
            public override void Set(string key, string value) => throw null;
            public object SyncRoot { get => throw null; }
        }

        // Generated from `ServiceStack.NetCore.NetCoreLog` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class NetCoreLog : ServiceStack.Logging.ILog
        {
            public void Debug(object message) => throw null;
            public void Debug(object message, System.Exception exception) => throw null;
            public void DebugFormat(string format, params object[] args) => throw null;
            public void Error(object message) => throw null;
            public void Error(object message, System.Exception exception) => throw null;
            public void ErrorFormat(string format, params object[] args) => throw null;
            public void Fatal(object message) => throw null;
            public void Fatal(object message, System.Exception exception) => throw null;
            public void FatalFormat(string format, params object[] args) => throw null;
            public void Info(object message) => throw null;
            public void Info(object message, System.Exception exception) => throw null;
            public void InfoFormat(string format, params object[] args) => throw null;
            public bool IsDebugEnabled { get => throw null; }
            public NetCoreLog(Microsoft.Extensions.Logging.ILogger logger, bool debugEnabled = default(bool)) => throw null;
            public void Warn(object message) => throw null;
            public void Warn(object message, System.Exception exception) => throw null;
            public void WarnFormat(string format, params object[] args) => throw null;
        }

        // Generated from `ServiceStack.NetCore.NetCoreLogFactory` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class NetCoreLogFactory : ServiceStack.Logging.ILogFactory
        {
            public static Microsoft.Extensions.Logging.ILoggerFactory FallbackLoggerFactory { get => throw null; set => throw null; }
            public ServiceStack.Logging.ILog GetLogger(System.Type type) => throw null;
            public ServiceStack.Logging.ILog GetLogger(string typeName) => throw null;
            public NetCoreLogFactory(Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, bool debugEnabled = default(bool)) => throw null;
        }

        // Generated from `ServiceStack.NetCore.NetCoreQueryStringCollection` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class NetCoreQueryStringCollection : System.Collections.Specialized.NameValueCollection
        {
            public override void Add(string name, string value) => throw null;
            public override string[] AllKeys { get => throw null; }
            public override void Clear() => throw null;
            public override int Count { get => throw null; }
            public override string Get(int index) => throw null;
            public override string Get(string name) => throw null;
            public override System.Collections.IEnumerator GetEnumerator() => throw null;
            public override string GetKey(int index) => throw null;
            public override string[] GetValues(string name) => throw null;
            public bool IsSynchronized { get => throw null; }
            public NetCoreQueryStringCollection(Microsoft.AspNetCore.Http.IQueryCollection originalQuery) => throw null;
            public object Original { get => throw null; }
            public override void Remove(string name) => throw null;
            public override void Set(string key, string value) => throw null;
            public object SyncRoot { get => throw null; }
            public override string ToString() => throw null;
        }

    }
    namespace Platforms
    {
        // Generated from `ServiceStack.Platforms.PlatformNetCore` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class PlatformNetCore : ServiceStack.Platform
        {
            public static System.Collections.Generic.List<string> AppConfigPaths;
            public const string ConfigNullValue = default;
            public override string GetAppConfigPath() => throw null;
            public override string GetAppSetting(string key) => throw null;
            public override string GetAppSetting(string key, string defaultValue) => throw null;
            public override T GetAppSetting<T>(string key, T defaultValue) => throw null;
            public override string GetConnectionString(string key) => throw null;
            public override string GetNullableAppSetting(string key) => throw null;
            public static ServiceStack.ServiceStackHost HostInstance { get => throw null; set => throw null; }
            public PlatformNetCore() => throw null;
        }

    }
    namespace Support
    {
        // Generated from `ServiceStack.Support.DataCache` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class DataCache
        {
            public static System.Byte[] CreateJsonpPrefix(string callback) => throw null;
            public DataCache() => throw null;
            public static ServiceStack.Support.DataCache Instance { get => throw null; }
            public static System.Byte[] JsonpPrefix { get => throw null; }
            public static System.Byte[] JsonpSuffix { get => throw null; }
        }

        namespace WebHost
        {
            // Generated from `ServiceStack.Support.WebHost.FilterAttributeCache` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
            public static class FilterAttributeCache
            {
                public static ServiceStack.Web.IRequestFilterBase[] GetRequestFilterAttributes(System.Type requestDtoType) => throw null;
                public static ServiceStack.Web.IResponseFilterBase[] GetResponseFilterAttributes(System.Type requestDtoType) => throw null;
            }

        }
    }
    namespace Templates
    {
        // Generated from `ServiceStack.Templates.HtmlTemplates` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class HtmlTemplates
        {
            public static string Format(string template, params object[] args) => throw null;
            public static string GetHtmlFormatTemplate() => throw null;
            public static string GetHtmlRedirectTemplate(string url) => throw null;
            public static string GetIndexOperationsTemplate() => throw null;
            public static string GetLoginTemplate() => throw null;
            public static string GetMetadataDebugTemplate() => throw null;
            public static string GetOperationControlTemplate() => throw null;
            public static string GetSvgTemplatePath() => throw null;
            public static string GetTemplatePath(string templateName) => throw null;
        }

    }
    namespace Testing
    {
        // Generated from `ServiceStack.Testing.BasicAppHost` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class BasicAppHost : ServiceStack.ServiceStackHost
        {
            public BasicAppHost(params System.Reflection.Assembly[] serviceAssemblies) : base(default(string), default(System.Reflection.Assembly[])) => throw null;
            public System.Action<ServiceStack.HostConfig> ConfigFilter { get => throw null; set => throw null; }
            public override void Configure(Funq.Container container) => throw null;
            public System.Action<ServiceStack.Testing.BasicAppHost> ConfigureAppHost { get => throw null; set => throw null; }
            public System.Action<Funq.Container> ConfigureContainer { get => throw null; set => throw null; }
            public override ServiceStack.IServiceGateway GetServiceGateway(ServiceStack.Web.IRequest req) => throw null;
            public override void OnConfigLoad() => throw null;
            public System.Func<ServiceStack.Testing.BasicAppHost, ServiceStack.Host.ServiceController> UseServiceController { set => throw null; }
        }

        // Generated from `ServiceStack.Testing.BasicResolver` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class BasicResolver : ServiceStack.Configuration.IResolver
        {
            public BasicResolver() => throw null;
            public BasicResolver(Funq.Container container) => throw null;
            public T TryResolve<T>() => throw null;
        }

        // Generated from `ServiceStack.Testing.MockHttpRequest` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class MockHttpRequest : ServiceStack.Configuration.IHasResolver, ServiceStack.Configuration.IResolver, ServiceStack.IHasServiceScope, ServiceStack.IO.IHasVirtualFiles, ServiceStack.Web.IHttpRequest, ServiceStack.Web.IRequest, System.IServiceProvider
        {
            public string AbsoluteUri { get => throw null; }
            public string Accept { get => throw null; set => throw null; }
            public string[] AcceptTypes { get => throw null; set => throw null; }
            public void AddSessionCookies() => throw null;
            public string ApplicationFilePath { get => throw null; set => throw null; }
            public string Authorization { get => throw null; set => throw null; }
            public System.Int64 ContentLength { get => throw null; }
            public string ContentType { get => throw null; set => throw null; }
            public System.Collections.Generic.IDictionary<string, System.Net.Cookie> Cookies { get => throw null; set => throw null; }
            public object Dto { get => throw null; set => throw null; }
            public ServiceStack.Web.IHttpFile[] Files { get => throw null; set => throw null; }
            public System.Collections.Specialized.NameValueCollection FormData { get => throw null; set => throw null; }
            public ServiceStack.IO.IVirtualDirectory GetDirectory() => throw null;
            public ServiceStack.IO.IVirtualFile GetFile() => throw null;
            public string GetRawBody() => throw null;
            public System.Threading.Tasks.Task<string> GetRawBodyAsync() => throw null;
            public object GetService(System.Type serviceType) => throw null;
            public bool HasExplicitResponseContentType { get => throw null; set => throw null; }
            public System.Collections.Specialized.NameValueCollection Headers { get => throw null; set => throw null; }
            public string HttpMethod { get => throw null; set => throw null; }
            public ServiceStack.Web.IHttpResponse HttpResponse { get => throw null; set => throw null; }
            public System.IO.Stream InputStream { get => throw null; set => throw null; }
            public bool IsDirectory { get => throw null; }
            public bool IsFile { get => throw null; }
            public bool IsLocal { get => throw null; set => throw null; }
            public bool IsSecureConnection { get => throw null; set => throw null; }
            public System.Collections.Generic.Dictionary<string, object> Items { get => throw null; set => throw null; }
            public MockHttpRequest() => throw null;
            public MockHttpRequest(string operationName, string httpMethod, string contentType, string pathInfo, System.Collections.Specialized.NameValueCollection queryString, System.IO.Stream inputStream, System.Collections.Specialized.NameValueCollection formData) => throw null;
            public string OperationName { get => throw null; set => throw null; }
            public string OriginalPathInfo { get => throw null; }
            public object OriginalRequest { get => throw null; }
            public string PathInfo { get => throw null; set => throw null; }
            public System.Collections.Specialized.NameValueCollection QueryString { get => throw null; set => throw null; }
            public string RawUrl { get => throw null; set => throw null; }
            public ServiceStack.AuthUserSession ReloadSession() => throw null;
            public string RemoteIp { get => throw null; }
            public ServiceStack.AuthUserSession RemoveSession() => throw null;
            public ServiceStack.RequestAttributes RequestAttributes { get => throw null; set => throw null; }
            public ServiceStack.Web.IRequestPreferences RequestPreferences { get => throw null; }
            public ServiceStack.Configuration.IResolver Resolver { get => throw null; set => throw null; }
            public ServiceStack.Web.IResponse Response { get => throw null; }
            public string ResponseContentType { get => throw null; set => throw null; }
            public Microsoft.Extensions.DependencyInjection.IServiceScope ServiceScope { get => throw null; set => throw null; }
            public T TryResolve<T>() => throw null;
            public System.Uri UrlReferrer { get => throw null; }
            public bool UseBufferedStream { get => throw null; set => throw null; }
            public string UserAgent { get => throw null; set => throw null; }
            public string UserHostAddress { get => throw null; set => throw null; }
            public string Verb { get => throw null; }
            public string XForwardedFor { get => throw null; set => throw null; }
            public int? XForwardedPort { get => throw null; set => throw null; }
            public string XForwardedProtocol { get => throw null; set => throw null; }
            public string XRealIp { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Testing.MockHttpResponse` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class MockHttpResponse : ServiceStack.Web.IHasHeaders, ServiceStack.Web.IHttpResponse, ServiceStack.Web.IResponse
        {
            public void AddHeader(string name, string value) => throw null;
            public void ClearCookies() => throw null;
            public void Close() => throw null;
            public System.Threading.Tasks.Task CloseAsync(System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public string ContentType { get => throw null; set => throw null; }
            public ServiceStack.Web.ICookies Cookies { get => throw null; set => throw null; }
            public object Dto { get => throw null; set => throw null; }
            public void End() => throw null;
            public void Flush() => throw null;
            public System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public string GetHeader(string name) => throw null;
            public bool HasStarted { get => throw null; set => throw null; }
            public System.Collections.Generic.Dictionary<string, string> Headers { get => throw null; }
            public bool IsClosed { get => throw null; set => throw null; }
            public System.Collections.Generic.Dictionary<string, object> Items { get => throw null; }
            public bool KeepAlive { get => throw null; set => throw null; }
            public MockHttpResponse(ServiceStack.Web.IRequest request = default(ServiceStack.Web.IRequest)) => throw null;
            public object OriginalResponse { get => throw null; set => throw null; }
            public System.IO.Stream OutputStream { get => throw null; }
            public System.Byte[] ReadAsBytes() => throw null;
            public string ReadAsString() => throw null;
            public void Redirect(string url) => throw null;
            public void RemoveHeader(string name) => throw null;
            public ServiceStack.Web.IRequest Request { get => throw null; set => throw null; }
            public void SetContentLength(System.Int64 contentLength) => throw null;
            public void SetCookie(System.Net.Cookie cookie) => throw null;
            public int StatusCode { get => throw null; set => throw null; }
            public string StatusDescription { get => throw null; set => throw null; }
            public System.Text.StringBuilder TextWritten { get => throw null; set => throw null; }
            public bool UseBufferedStream { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Testing.MockRestGateway` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class MockRestGateway : ServiceStack.IRestGateway
        {
            public T Delete<T>(ServiceStack.IReturn<T> request) => throw null;
            public T Get<T>(ServiceStack.IReturn<T> request) => throw null;
            public MockRestGateway() => throw null;
            public T Post<T>(ServiceStack.IReturn<T> request) => throw null;
            public T Put<T>(ServiceStack.IReturn<T> request) => throw null;
            public ServiceStack.Testing.RestGatewayDelegate ResultsFilter { get => throw null; set => throw null; }
            public T Send<T>(ServiceStack.IReturn<T> request) => throw null;
        }

        // Generated from `ServiceStack.Testing.RestGatewayDelegate` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public delegate object RestGatewayDelegate(string httpVerb, System.Type responseType, object requestDto);

    }
    namespace Validation
    {
        // Generated from `ServiceStack.Validation.ExecOnceOnly` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class ExecOnceOnly : System.IDisposable
        {
            public void Commit() => throw null;
            public void Dispose() => throw null;
            public ExecOnceOnly(ServiceStack.Redis.IRedisClientsManager redisManager, System.Type forType, System.Guid? correlationId) => throw null;
            public ExecOnceOnly(ServiceStack.Redis.IRedisClientsManager redisManager, System.Type forType, string correlationId) => throw null;
            public ExecOnceOnly(ServiceStack.Redis.IRedisClientsManager redisManager, string hashKey, string correlationId) => throw null;
            public bool Executed { get => throw null; set => throw null; }
            public void Rollback() => throw null;
        }

        // Generated from `ServiceStack.Validation.GetValidationRulesService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class GetValidationRulesService : ServiceStack.Service
        {
            public System.Threading.Tasks.Task<object> Any(ServiceStack.GetValidationRules request) => throw null;
            public GetValidationRulesService() => throw null;
            public ServiceStack.IValidationSource ValidationSource { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Validation.ModifyValidationRulesService` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class ModifyValidationRulesService : ServiceStack.Service
        {
            public System.Threading.Tasks.Task Any(ServiceStack.ModifyValidationRules request) => throw null;
            public ModifyValidationRulesService() => throw null;
            public ServiceStack.IValidationSource ValidationSource { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Validation.MultiRuleSetValidatorSelector` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class MultiRuleSetValidatorSelector : ServiceStack.FluentValidation.Internal.IValidatorSelector
        {
            public bool CanExecute(ServiceStack.FluentValidation.IValidationRule rule, string propertyPath, ServiceStack.FluentValidation.IValidationContext context) => throw null;
            public MultiRuleSetValidatorSelector(params string[] rulesetsToExecute) => throw null;
        }

        // Generated from `ServiceStack.Validation.ValidationExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class ValidationExtensions
        {
            public static ServiceStack.Host.Operation ApplyValidationRules(this ServiceStack.Host.Operation op, System.Collections.Generic.IEnumerable<ServiceStack.ValidationRule> rules) => throw null;
            public static System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceStack.ValidationRule>> GetAllValidateRulesAsync(this ServiceStack.Configuration.IResolver resolver, string type = default(string)) => throw null;
            public static System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceStack.ValidationRule>> GetAllValidateRulesAsync(this ServiceStack.IValidationSource validationSource, string type = default(string)) => throw null;
            public static bool HasAsyncValidators(this ServiceStack.FluentValidation.IValidator validator, ServiceStack.FluentValidation.IValidationContext context, string ruleSet = default(string)) => throw null;
            public static void Init(System.Reflection.Assembly[] assemblies) => throw null;
            public static bool IsAuthValidator(this ServiceStack.IValidateRule rule) => throw null;
            public static void RegisterValidator(this Funq.Container container, System.Type validator, Funq.ReuseScope scope = default(Funq.ReuseScope)) => throw null;
            public static void RegisterValidators(this Funq.Container container, Funq.ReuseScope scope, params System.Reflection.Assembly[] assemblies) => throw null;
            public static void RegisterValidators(this Funq.Container container, params System.Reflection.Assembly[] assemblies) => throw null;
            public static System.Collections.Generic.HashSet<System.Type> RegisteredDtoValidators { get => throw null; set => throw null; }
            public static ServiceStack.ScriptMethodType ToScriptMethodType(this ServiceStack.Script.ScriptMethodInfo scriptMethod) => throw null;
        }

        // Generated from `ServiceStack.Validation.ValidationFeature` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class ValidationFeature : ServiceStack.IAfterInitAppHost, ServiceStack.IPlugin, ServiceStack.IPostInitPlugin, ServiceStack.IPreInitPlugin, ServiceStack.Model.IHasId<string>, ServiceStack.Model.IHasStringId
        {
            public string AccessRole { get => throw null; set => throw null; }
            public void AfterInit(ServiceStack.IAppHost appHost) => throw null;
            public void AfterPluginsLoaded(ServiceStack.IAppHost appHost) => throw null;
            public void BeforePluginsLoaded(ServiceStack.IAppHost appHost) => throw null;
            public System.Collections.Generic.Dictionary<string, string> ConditionErrorCodes { get => throw null; }
            public bool EnableDeclarativeValidation { get => throw null; set => throw null; }
            public System.Collections.Generic.Dictionary<string, string> ErrorCodeMessages { get => throw null; }
            public System.Func<ServiceStack.Web.IRequest, ServiceStack.FluentValidation.Results.ValidationResult, object, object> ErrorResponseFilter { get => throw null; set => throw null; }
            public virtual string GetRequestErrorBody(object request) => throw null;
            public string Id { get => throw null; set => throw null; }
            public bool ImplicitlyValidateChildProperties { get => throw null; set => throw null; }
            public void Register(ServiceStack.IAppHost appHost) => throw null;
            public bool ScanAppHostAssemblies { get => throw null; set => throw null; }
            public System.Collections.Generic.Dictionary<System.Type, string[]> ServiceRoutes { get => throw null; set => throw null; }
            public bool TreatInfoAndWarningsAsErrors { get => throw null; set => throw null; }
            public virtual void ValidateRequest(object requestDto, ServiceStack.Web.IRequest req) => throw null;
            public virtual System.Threading.Tasks.Task ValidateRequestAsync(object requestDto, ServiceStack.Web.IRequest req, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) => throw null;
            public ValidationFeature() => throw null;
            public ServiceStack.IValidationSource ValidationSource { get => throw null; set => throw null; }
        }

        // Generated from `ServiceStack.Validation.ValidationFilters` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class ValidationFilters
        {
            public static System.Collections.Generic.IEnumerable<string> GetResetFields(object o) => throw null;
            public static System.Threading.Tasks.Task RequestFilterAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto) => throw null;
            public static System.Threading.Tasks.Task RequestFilterAsyncIgnoreWarningsInfo(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto) => throw null;
            public static System.Threading.Tasks.Task ResponseFilterAsync(ServiceStack.Web.IRequest req, ServiceStack.Web.IResponse res, object requestDto) => throw null;
            public static ServiceStack.FluentValidation.Results.ValidationResult Validate(this ServiceStack.FluentValidation.IValidator validator, ServiceStack.Web.IRequest req, object requestDto) => throw null;
            public static System.Threading.Tasks.Task<ServiceStack.FluentValidation.Results.ValidationResult> ValidateAsync(this ServiceStack.FluentValidation.IValidator validator, ServiceStack.Web.IRequest req, object requestDto) => throw null;
        }

        // Generated from `ServiceStack.Validation.ValidatorCache` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class ValidatorCache
        {
            public static ServiceStack.FluentValidation.IValidator GetValidator(ServiceStack.Web.IRequest httpReq, System.Type type) => throw null;
        }

        // Generated from `ServiceStack.Validation.ValidatorCache<>` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public class ValidatorCache<T>
        {
            public static ServiceStack.FluentValidation.IValidator GetValidator(ServiceStack.Web.IRequest httpReq) => throw null;
            public ValidatorCache() => throw null;
        }

    }
}
namespace System
{
    namespace Threading
    {
        // Generated from `System.Threading.ThreadExtensions` in `ServiceStack, Version=6.0.0.0, Culture=neutral, PublicKeyToken=null`
        public static class ThreadExtensions
        {
            public static void Abort(this System.Threading.Thread thread) => throw null;
            public static void Interrupt(this System.Threading.Thread thread) => throw null;
            public static bool Join(this System.Threading.Thread thread, System.TimeSpan timeSpan) => throw null;
        }

    }
}

<!DOCTYPE qhelp PUBLIC "-//Semmle//qhelp//EN" "qhelp.dtd">
<qhelp>
    <overview>
        <p>
            JWT (JSON Web Token) is an open standard (RFC 7519) that defines a way to provide information 
            within a JSON object between two parties. JWT is widely used for sharing security information
            between two parties in web applications. Each JWT contains encoded JSON objects, including a 
            set of claims. JWTs are signed using a cryptographic algorithm to ensure that the claims cannot
            be altered after the token is issued.
          </p>
        <p>
            The most basic mistake is using hardcoded secrets for JWT generation/verification. This allows
            an attacker to forge the token if the source code (and JWT secret in it) is publicly exposed or
            leaked, which leads to authentication bypass or privilege escalation.
          </p>
    </overview>

    <recommendation>
        <p>
            Generating a cryptographically secure secret key during application initialization and using this 
            generated key for JWT signing/verification requests can prevent this vulnerability. Or safely store
            the secret key in a key vault that cannot be leaked in source code.
          </p>
    </recommendation>

    <example>
        <p>
            The following examples show the bad case and the good case respectively. The <code>bad</code> 
            methods show a hardcoded secret key is used to sign and verify JWT tokens. In the <code>good</code>
            method, the secret key is loaded from a system environment during application initialization.
        </p>
        <sample src="HardcodedJwtKey.java" />
    </example>

    <references>
        <li>
            Semgrep Blog:
            <a href="https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/">Hardcoded secrets, unverified tokens, and other common JWT mistakes</a>
        </li>
        <li>
            CVE-2022-24860:
            <a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24860">Databasir 1.01 has Use of Hard-coded Cryptographic Key vulnerability.</a>
        </li>
    </references>

</qhelp>

<!DOCTYPE qhelp PUBLIC
  "-//Semmle//qhelp//EN"
  "qhelp.dtd">
<qhelp>
<overview>
<p>MyBatis allows operating the database by creating XML files to construct dynamic SQL statements.
If the syntax <code>${param}</code> is used in those statements, and <code>param</code> is under the user's control, attackers can exploit this to tamper with the SQL statements or execute arbitrary SQL commands.</p>
</overview>

<recommendation>
<p>
When writing MyBatis mapping statements, try to use the syntax <code>#{xxx}</code>. If the syntax <code>${xxx}</code> must be used, any parameters included in it should be sanitized to prevent SQL injection attacks.
</p>
</recommendation>

<example>
<p>
The following sample shows several bad and good examples of MyBatis XML files usage. In <code>bad1</code>,
<code>bad2</code>, <code>bad3</code>, <code>bad4</code>, and <code >bad5</code> the syntax
<code>${xxx}</code> is used to build dynamic SQL statements, which causes a SQL injection vulnerability. In <code>good1</code>, 
the program uses the <code>${xxx}</code> syntax, but there are subtle restrictions on the data,
while in <code>good2</code> the syntax <code>#{xxx}</code> is used. In both cases the SQL injection vulnerability is prevented.
</p>
<sample src="MyBatisMapperXmlSqlInjection.xml" />
</example>

<references>
<li>
Fortify:
<a href="https://vulncat.fortify.com/en/detail?id=desc.config.java.sql_injection_mybatis_mapper">SQL Injection: MyBatis Mapper</a>.
</li>
</references>
</qhelp>

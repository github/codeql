<!DOCTYPE qhelp PUBLIC "-//Semmle//qhelp//EN" "qhelp.dtd">
<qhelp>
    <overview>
        <p>JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and
            self-contained way for securely transmitting information between parties as a 
            JSON object. This information can be verified and trusted through a digital
            signature. JWTs can be signed using a secret (with the HMAC algorithm) or a 
            public/private key pair using RSA or ECDSA.</p>
        <p>JWT Best Practices require human-memorizable passwords MUST NOT be directly used
            as the key to a keyed-MAC algorithm such as “HS256”. RFC 7518 recommends to use
            a password that is as large as (or larger than) the derived key length in JSON
            web algorithms. Common JWT signature algorithms are HS256, HS384, and HS512.</p>
        <p>Popular JWT libraries offer a method to set signing key with a handy string argument
            in addition to the method with a byte array argument taking the binary cryptographic
            key. It is a common mistake that JWT users are confused by the method signature and 
            attempted to use raw password strings as the key argument, which is almost always
            incorrect for cryptographic hashes and can produce insecure results.</p>
        <p>This rule finds uses of signature algorithms with a weak key of shorter length.
            Signature algorithms are vulnerable to brute force attack when a weak key of 
            shorter length is used.</p>
    </overview>

    <recommendation>
        <p>The password to generate a signing key shall be as large as (or larger than) 
            the derived key length, which is 256 bits long at the minimum for the 
            algorithm HS256, and have sufficient entropy.</p>
    </recommendation>

    <example>
        <p>The following example shows both 'BAD' and 'GOOD' implementations. In the 'BAD'
            implementation, a key with insufficient entropy is used. In the 'GOOD' case,
            a strong key is used.</p>
        <sample src="WeakJwtSecretKey.java" />
    </example>

    <references>
        <li>
            IETF
            <a href="https://tools.ietf.org/id/draft-ietf-oauth-jwt-bcp-02.html#rfc.section.3.5">JSON Web Token Best Current Practices - Ensure Cryptographic Keys have Sufficient Entropy</a>
        </li>
        <li>
            IETF
            <a href="https://datatracker.ietf.org/doc/html/rfc7518#section-8.8">Password Considerations</a>
        </li>
        <li>
            Auth0
            <a href="https://auth0.com/blog/brute-forcing-hs256-is-possible-the-importance-of-using-strong-keys-to-sign-jwts/">Brute Forcing HS256 is Possible: The Importance of Using Strong Keys in Signing JWTs</a>
        </li>
        <li>
            JWT
            <a href="https://jwt.io/introduction">Introduction to JSON Web Tokens</a>
        </li>
    </references>
</qhelp>
<!DOCTYPE qhelp PUBLIC
  "-//Semmle//qhelp//EN"
  "qhelp.dtd">
<qhelp>
<overview>
<p>
Specialization index is the extent to which a subclass overrides the
behavior of its ancestor classes. It is computed as follows:</p>

<ol>
    <li>Determine the number of overridden methods in the subclass (not counting overrides of
    abstract methods).</li>
    <li>Multiply this number by the subclass's depth in the inheritance hierarchy.</li>
    <li>Divide the result by the subclass's total number of methods.</li>
</ol>

<p>
If a class overrides many of the methods of its ancestor classes, it 
indicates that the abstractions in the ancestor classes should be reviewed.
This is particularly true for subclasses that are lower down in the
inheritance hierarchy. In general, subclasses should <em>add</em> behavior to their
superclasses, rather than <em>redefining</em> the behavior that is already there.
</p>

</overview>
<recommendation>

<p>
The most common reason that classes have a high specialization index is that
multiple subclasses specialize a common base class in the same
way. In this case, the relevant method(s) should be pulled up into the base
class (see the 'Pull Up Method' refactoring in [Fowler]).</p>

</recommendation>
<example>

<p> In the following example, duplicating <code>getName</code> in each of the subclasses
is unnecessary.
</p>

<sample src="TSpecialisationIndex.java" />

<p>
To decrease the specialization index of the subclasses, pull up <code>getName</code> into the base class.
</p>

<sample src="TSpecialisationIndexGood.java" />



</example>
<references>


<li>
M. Fowler, <em>Refactoring</em>, pp. 260-3. Addison-Wesley, 1999.
</li>
<li>
M. Lorenz and J. Kidd, <em>Object-oriented Software Metrics</em>. Prentice Hall, 1994.
</li>
<li>
O. de Moor et al, <em>Keynote Address: .QL for Source Code Analysis</em>. Proceedings of the 7th IEEE International Working Conference on Source Code Analysis and Manipulation, 2007.
</li>


</references>
</qhelp>

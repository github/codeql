<!DOCTYPE qhelp PUBLIC
  "-//Semmle//qhelp//EN"
  "qhelp.dtd">
<qhelp>


<overview>
<p>The <code>contains</code> method of the <code>Collection</code> interface 
has an argument of type <code>Object</code>. Therefore, you can try to check if an object 
of any type is a member of a collection, regardless of the collection's element type. However, 
although you can call <code>contains</code> with an argument of a different type than that of the collection, 
it is unlikely that the collection actually 
contains an object of this type.
</p>

<p>Similar considerations apply to other container access methods, such as <code>Map.get</code>,
where the argument may also have type <code>Object</code>.
</p>

</overview>
<recommendation>

<p>Ensure that you use the correct argument with a call to <code>contains</code>.
</p>

</recommendation>
<example>

<p>In the following example, although the argument to <code>contains</code> is an integer, the code 
does not result in a type error because the argument does not have to match the type of the elements 
of <code>list</code>. However, the argument is unlikely to be found (and the body of the 
<code>if</code> statement is therefore not executed), so it is probably a typographical error: the 
argument should be enclosed in quotation marks.
</p> 

<sample src="ContainsTypeMismatch.java" />

<p>
Note that you must take particular care when working with collections over boxed types,
as illustrated in the following example. The first call to <code>contains</code> returns <code>false</code>
because you cannot compare two boxed numeric primitives of different types, in this case <code>Short(1)</code>
(in <code>set</code>) and <code>Integer(1)</code> (the argument). The second call to <code>contains</code>
returns <code>true</code> because you can compare <code>Short(1)</code> and <code>Short(1)</code>.
</p>

<sample src="ContainsTypeMismatch2.java" />

</example>
<references>


<li>
  Java API Specification:
  <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Collection.html#contains(java.lang.Object)">Collection.contains</a>.
</li>


</references>
</qhelp>

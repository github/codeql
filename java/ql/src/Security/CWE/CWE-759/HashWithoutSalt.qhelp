<!DOCTYPE qhelp PUBLIC "-//Semmle//qhelp//EN" "qhelp.dtd">
<qhelp>

  <overview>
    <p>In cryptography, a salt is a randomly generated value to be appended to a password before it is hashed and stored in a database.</p>

    <p>Without a salt, if an attacker were to steal the password database, they would be able to see which users share passwords, as well as more easily perform a dictionary attack using pre-computed hashes. </p>
  </overview>

  <recommendation>
    <p>Use a long random salt of at least 32 bytes, then use the combination of password and salt to hash a password or password phrase.</p>
    <p>Additionally, it is recommended to use an algorithm better suited to password hashing, such as PBKDF2, rather than use message digest algorithms such as SHA-256, in order to further reduce the possibility of dictionary attacks.</p>
  </recommendation>

  <example>
    <p>The following example shows three ways of hashing. In the 'BAD' case, no salt is provided. In the `BETTER` case, a salt is provided, and SHA-256 is used. In the 'GOOD' case, a salt is provided, and PBKDF2 is used.</p>
    <sample src="HashWithoutSalt.java" />
  </example>

  <references>
    <li>
      DZone:
      <a href="https://dzone.com/articles/a-look-at-java-cryptography">A Look at Java Cryptography</a>
    </li>
    <li>
      Medium: 
      <a href="https://medium.com/@kasunpdh/how-to-store-passwords-securely-with-pbkdf2-204487f14e84">How to store passwords securely with PBKDF2</a>
    </li>
  </references>
</qhelp>

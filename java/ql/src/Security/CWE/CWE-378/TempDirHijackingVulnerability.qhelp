<!DOCTYPE qhelp PUBLIC
  "-//Semmle//qhelp//EN"
  "qhelp.dtd">
<qhelp>
<overview>
<p>Local temporary directory hijacking can occur when files/directories are created within directories that are shared between all users on the system.</p>

<p>On most <a href="https://en.wikipedia.org/wiki/Unix-like">unix-like</a> systems,
the system temporary directory is shared between local users.
If directories are created within the system temporary directory without using 
APIs that explicitly set the correct file permissions, vulnerabilties ranging from
local information disclosure, to directory hijacking, to local privilege escalation, can occur.</p>

<p>In the worst case, where local privilege escalation occurs, this vulnerability can have a
<a href="https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H&amp;version=3.1">CVSS v3.1 base score of 7.8</a>.</p>
</overview>

<recommendation>
<p>Use JDK methods that specifically protect against this vulnerability:</p>
<ul>
    <li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Files.html#createTempDirectory(java.nio.file.Path,java.lang.String,java.nio.file.attribute.FileAttribute...)">java.nio.file.Files.createTempDirectory</a></li>
    <li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Files.html#createTempFile(java.nio.file.Path,java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute...)">java.nio.file.Files.createTempFile</a></li>
</ul>
<p>Otherwise, create the file/directory by manually specifying the expected posix file permissions.
For example: <code>PosixFilePermissions.asFileAttribute(EnumSet.of(PosixFilePermission.OWNER_READ, PosixFilePermission.OWNER_WRITE))</code></p>
<ul>
    <li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Files.html#createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute...)">java.nio.file.Files.createFile</a></li>
    <li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Files.html#createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute...)">java.nio.file.Files.createDirectory</a></li>
    <li><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Files.html#createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute...)">java.nio.file.Files.createDirectories</a></li>
</ul>
</recommendation>

<example>
    <p>In the following example, the directory that is created can be hijacked during the creation process due to a race condition.</p>
    <sample src="TempDirCreationVulnerable.java"/>

    <p>In the following example, the <code>Files.createTempDirectory</code> API is used which creates a temporary directory that is guaranteed to be safe.</p>
    <sample src="TempDirCreationSafe.java"/>
</example>

<references>
    <li>OSWAP: <a href="https://owasp.org/www-community/vulnerabilities/Insecure_Temporary_File">Insecure Temporary File</a>.</li>
    <li>CERT: <a href="https://wiki.sei.cmu.edu/confluence/display/java/FIO00-J.+Do+not+operate+on+files+in+shared+directories">FIO00-J. Do not operate on files in shared directories</a>.</li>
</references>
</qhelp>

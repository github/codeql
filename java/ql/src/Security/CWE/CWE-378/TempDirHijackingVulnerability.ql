/**
 * @name Temporary Directory Hijacking Vulnerability disclosure
 * @description Detect temporary directory hijack vulnerability
 * @kind path-problem
 * @problem.severity error
 * @precision very-high
 * @id java/temp-directory-hijacking
 */

import java
import semmle.code.java.dataflow.FlowSources
import DataFlow::PathGraph

/**
 * All `java.io.File::createTempFile` methods.
 */
private class MethodFileCreateTempFile extends Method {
  MethodFileCreateTempFile() {
    this.getDeclaringType() instanceof TypeFile and
    this.hasName("createTempFile")
  }
}

private class MethodFileMkdir extends Method {
  MethodFileMkdir() {
    getDeclaringType() instanceof TypeFile and
    hasName("mkdir")
    or
    hasName("mkdirs")
  }
}

private class MethodFileDelete extends Method {
  MethodFileDelete() {
    getDeclaringType() instanceof TypeFile and
    hasName("delete")
  }
}

predicate isDeleteFileExpr(Expr expr) {
  exists(MethodAccess ma |
    expr = ma.getQualifier() and
    ma.getMethod() instanceof MethodFileDelete
  )
}

private class TempDirHijackingToDeleteConfig extends DataFlow::Configuration {
  TempDirHijackingToDeleteConfig() { this = "TempDirHijackingToDeleteConfig" }

  override predicate isSource(DataFlow::Node source) {
    exists(MethodAccess ma |
      ma.getMethod() instanceof MethodFileCreateTempFile and
      source.asExpr() = ma
    )
  }

  override predicate isSink(DataFlow::Node sink) { isDeleteFileExpr(sink.asExpr()) }
}

private class TempDirHijackingFromDeleteConfig extends DataFlow2::Configuration {
  TempDirHijackingFromDeleteConfig() { this = "TempDirHijackingFromDeleteConfig" }

  override predicate isSource(DataFlow::Node source) { isDeleteFileExpr(source.asExpr()) }

  override predicate isSink(DataFlow::Node sink) {
    exists(MethodAccess ma |
      ma.getMethod() instanceof MethodFileMkdir and
      ma.getQualifier() = sink.asExpr()
    )
  }
}

predicate isSinkConstrainedByIfCheck(DataFlow2::Node sink) {
  exists(MethodAccess ma, IfStmt ifStmt |
    sink.asExpr() = ma.getQualifier() and
    // Data flow from the return value from `mkdirs` into an 'if' check
    DataFlow2::localExprFlow(ma, ifStmt.getCondition())
  )
}

from
  DataFlow::PathNode source, DataFlow::PathNode deleteCheckpoint, DataFlow2::Node deleteCheckpoint2,
  DataFlow2::Node sink, TempDirHijackingToDeleteConfig toDeleteConfig,
  TempDirHijackingFromDeleteConfig fromDeleteConfig
where
  toDeleteConfig.hasFlowPath(source, deleteCheckpoint) and
  fromDeleteConfig.hasFlow(deleteCheckpoint2, sink) and
  deleteCheckpoint.getNode().asExpr() = deleteCheckpoint2.asExpr() and
  not isSinkConstrainedByIfCheck(sink)
select deleteCheckpoint.getNode(), source, deleteCheckpoint, "Local temporary directory hijacking race condition $@", sink, "here"
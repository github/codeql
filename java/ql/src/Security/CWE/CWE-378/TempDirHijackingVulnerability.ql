/**
 * @name Temporary Directory Hijacking Vulnerability disclosure
 * @description Detect temporary directory hijack vulnerability
 * @kind path-problem
 * @problem.severity error
 * @precision very-high
 * @id java/temp-directory-hijacking
 */

import java
import semmle.code.java.dataflow.FlowSources
import DataFlow::PathGraph

/**
 * All `java.io.File::createTempFile` methods.
 */
private class MethodFileCreateTempFile extends Method {
  MethodFileCreateTempFile() {
    this.getDeclaringType() instanceof TypeFile and
    this.hasName("createTempFile")
  }
}

private class MethodFileMkdir extends Method {
  MethodFileMkdir() {
    getDeclaringType() instanceof TypeFile and
    hasName("mkdir")
    or
    hasName("mkdirs")
  }
}

private class MethodFileDelete extends Method {
  MethodFileDelete() {
    getDeclaringType() instanceof TypeFile and
    hasName("delete")
  }
}

private class DeleteFileNode extends DataFlow::Node {
  DeleteFileNode() {
    exists(MethodAccess ma |
      asExpr() = ma.getQualifier() and
      ma.getMethod() instanceof MethodFileDelete
    )
  }
}

private class TempDirHijackingConfig extends TaintTracking::Configuration {
  TempDirHijackingConfig() { this = "TempDirHijackingConfig" }

  override predicate isSource(DataFlow::Node source) {
    exists(MethodAccess ma |
      ma.getMethod() instanceof MethodFileCreateTempFile and
      DataFlow::localFlow(DataFlow::exprNode(ma), source)
    ) and
    source instanceof DeleteFileNode
  }

  override predicate isSink(DataFlow::Node sink) {
    exists(MethodAccess ma |
      ma.getMethod() instanceof MethodFileMkdir and
      ma.getQualifier() = sink.asExpr()
    )
  }
}

from
  DataFlow::PathNode source, DataFlow::PathNode sink, TempDirHijackingConfig conf,
  IfStmt ifStmnt, MethodAccess ma
where
  conf.hasFlowPath(source, sink) and
  not DataFlow::localFlow(DataFlow::exprNode(ma), DataFlow::exprNode(ifStmnt.getCondition())) and
  ma.getQualifier() = sink.getNode().asExpr()
select source.getNode(), source, sink, "Blah %s", sink.getNode()

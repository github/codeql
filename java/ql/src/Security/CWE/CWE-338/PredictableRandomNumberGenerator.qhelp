<!DOCTYPE qhelp PUBLIC
  "-//Semmle//qhelp//EN"
  "qhelp.dtd">
<qhelp>
<overview>
<p>Using a Psudeorandom Number Generator (PRNG)
instead of a Cryptographically Secure Psudeorandom Number Generator (CSPRNG)
in a context requiring unpredictability, it may be possible for an attacker to
guess the next value that will be generated, and use this guess to impersonate
another user or access sensitive information.
</p>

<h3>Example 1:<h3>

<p>Assuming that the code uses an insecure source of randomess to generate a password reset URL.</p>

<p>An attacker attacker (if able to obtain their own password reset URL) can compute the value for all other password resets for other accounts,
thus allowing privilege escalation or account takeover.</p>

<h3>Example 2:</h3>

<p>Assuming that the code uses a <code>java.util.concurrent.ThreadLocalRandom</code>
as the source of randomess to generate a session token.</p>

<p>An attacker (if able to determine the classload time of <code>ThreadLocalRandom</code> (most likely at JVM launch))
can determine the seed of the <code>ThreadLocalRandom</code> used by the JVM.
This would allow them to compute any secrets generated by <code>ThreadLocalRandom</code>.</p>

<h3>Criticality</h3>

<p>Depending upon the criticality of random value being used, this vulnerability can have up to a
<a href="https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H&amp;version=3.1&amp;source=NIST">
    CVSS v3.1 base score of 9.8/10
</a>.</p>

</overview>
<recommendation>

<p>When generating random secret data, always use <code>java.security.SecureRandom</code> to supply
your source of randomness.</p>

</recommendation>
<example>

<p>In the examples below, various ways of generating a random secure and insecure string of characters are demonstrated
including common uses of Apache Commons.</p>

<sample src="PredictableRandomNumberGenerator.java" />

</example>
<references>

<li>
  <a href="https://blog.cloudflare.com/why-randomness-matters/">
    Cloudflare Blog: Why secure systems require random numbers
  </a>
</li>
<li>
  <a href="https://news.ycombinator.com/item?id=639976">
    How I Hacked Hacker News (with arc security advisory)
  </a>
<li>
<li>
  Research (Hacking Apache Commons RandomStringUtils):
  <a href="https://medium.com/@alex91ar/the-java-soothsayer-a-practical-application-for-insecure-randomness-c67b0cd148cd">
    The Java Soothsayer: A practical application for insecure randomness. (Includes free 0day)
  </a>
</li>

At the time of writing almost
<a href="https://github.com/search?l=Java&amp;q=return+RandomStringUtils.randomAlphanumeric%28DEF_COUNT%29%3B&amp;type=Code">
 15k repositories
</a>
are vulnerable to this due to a vulnerability discovered in the project-bootstraping code generator
<a href="https://github.com/jhipster/generator-jhipster">
  JHipster Generator
</a>
(
  <a href="https://nvd.nist.gov/vuln/detail/CVE-2019-16303">
    CVE-2019-16303
  </a>
).

<!--  LocalWords:  CWE random RNG PRNG CSPRNG SecureRandom
 -->

</references>
</qhelp>

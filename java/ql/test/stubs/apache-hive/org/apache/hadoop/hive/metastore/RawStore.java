// Generated automatically from org.apache.hadoop.hive.metastore.RawStore for testing purposes

package org.apache.hadoop.hive.metastore;

import java.lang.annotation.Annotation;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.List;
import java.util.Map;
import org.apache.hadoop.conf.Configurable;
import org.apache.hadoop.hive.metastore.FileMetadataHandler;
import org.apache.hadoop.hive.metastore.TableType;
import org.apache.hadoop.hive.metastore.api.AggrStats;
import org.apache.hadoop.hive.metastore.api.Catalog;
import org.apache.hadoop.hive.metastore.api.ColumnStatistics;
import org.apache.hadoop.hive.metastore.api.CreationMetadata;
import org.apache.hadoop.hive.metastore.api.CurrentNotificationEventId;
import org.apache.hadoop.hive.metastore.api.Database;
import org.apache.hadoop.hive.metastore.api.FieldSchema;
import org.apache.hadoop.hive.metastore.api.FileMetadataExprType;
import org.apache.hadoop.hive.metastore.api.Function;
import org.apache.hadoop.hive.metastore.api.HiveObjectPrivilege;
import org.apache.hadoop.hive.metastore.api.HiveObjectRef;
import org.apache.hadoop.hive.metastore.api.ISchema;
import org.apache.hadoop.hive.metastore.api.ISchemaName;
import org.apache.hadoop.hive.metastore.api.NotificationEvent;
import org.apache.hadoop.hive.metastore.api.NotificationEventRequest;
import org.apache.hadoop.hive.metastore.api.NotificationEventResponse;
import org.apache.hadoop.hive.metastore.api.NotificationEventsCountRequest;
import org.apache.hadoop.hive.metastore.api.NotificationEventsCountResponse;
import org.apache.hadoop.hive.metastore.api.Partition;
import org.apache.hadoop.hive.metastore.api.PartitionEventType;
import org.apache.hadoop.hive.metastore.api.PartitionValuesResponse;
import org.apache.hadoop.hive.metastore.api.PrincipalPrivilegeSet;
import org.apache.hadoop.hive.metastore.api.PrincipalType;
import org.apache.hadoop.hive.metastore.api.PrivilegeBag;
import org.apache.hadoop.hive.metastore.api.Role;
import org.apache.hadoop.hive.metastore.api.RolePrincipalGrant;
import org.apache.hadoop.hive.metastore.api.RuntimeStat;
import org.apache.hadoop.hive.metastore.api.SQLCheckConstraint;
import org.apache.hadoop.hive.metastore.api.SQLDefaultConstraint;
import org.apache.hadoop.hive.metastore.api.SQLForeignKey;
import org.apache.hadoop.hive.metastore.api.SQLNotNullConstraint;
import org.apache.hadoop.hive.metastore.api.SQLPrimaryKey;
import org.apache.hadoop.hive.metastore.api.SQLUniqueConstraint;
import org.apache.hadoop.hive.metastore.api.SchemaVersion;
import org.apache.hadoop.hive.metastore.api.SchemaVersionDescriptor;
import org.apache.hadoop.hive.metastore.api.SerDeInfo;
import org.apache.hadoop.hive.metastore.api.Table;
import org.apache.hadoop.hive.metastore.api.TableMeta;
import org.apache.hadoop.hive.metastore.api.Type;
import org.apache.hadoop.hive.metastore.api.WMFullResourcePlan;
import org.apache.hadoop.hive.metastore.api.WMMapping;
import org.apache.hadoop.hive.metastore.api.WMNullablePool;
import org.apache.hadoop.hive.metastore.api.WMNullableResourcePlan;
import org.apache.hadoop.hive.metastore.api.WMPool;
import org.apache.hadoop.hive.metastore.api.WMResourcePlan;
import org.apache.hadoop.hive.metastore.api.WMTrigger;
import org.apache.hadoop.hive.metastore.api.WMValidateResourcePlanResponse;
import org.apache.hadoop.hive.metastore.partition.spec.PartitionSpecProxy;
import org.apache.hadoop.hive.metastore.utils.MetaStoreUtils;

public interface RawStore extends Configurable
{
    @Retention(value=java.lang.annotation.RetentionPolicy.RUNTIME)
    @Target(value={java.lang.annotation.ElementType.METHOD})
    static public @interface CanNotRetry
    {
    }
    AggrStats get_aggr_stats_for(String p0, String p1, String p2, List<String> p3, List<String> p4);
    ByteBuffer[] getFileMetadata(List<Long> p0);
    Catalog getCatalog(String p0);
    ColumnStatistics getTableColumnStatistics(String p0, String p1, String p2, List<String> p3);
    CurrentNotificationEventId getCurrentNotificationEventId();
    Database getDatabase(String p0, String p1);
    FileMetadataHandler getFileMetadataHandler(FileMetadataExprType p0);
    Function getFunction(String p0, String p1, String p2);
    ISchema getISchema(ISchemaName p0);
    List<ColumnStatistics> getPartitionColumnStatistics(String p0, String p1, String p2, List<String> p3, List<String> p4);
    List<Function> getAllFunctions(String p0);
    List<HiveObjectPrivilege> listAllTableGrants(String p0, PrincipalType p1, String p2, String p3, String p4);
    List<HiveObjectPrivilege> listDBGrantsAll(String p0, String p1);
    List<HiveObjectPrivilege> listGlobalGrantsAll();
    List<HiveObjectPrivilege> listPartitionColumnGrantsAll(String p0, String p1, String p2, String p3, String p4);
    List<HiveObjectPrivilege> listPartitionGrantsAll(String p0, String p1, String p2, String p3);
    List<HiveObjectPrivilege> listPrincipalDBGrants(String p0, PrincipalType p1, String p2, String p3);
    List<HiveObjectPrivilege> listPrincipalDBGrantsAll(String p0, PrincipalType p1);
    List<HiveObjectPrivilege> listPrincipalGlobalGrants(String p0, PrincipalType p1);
    List<HiveObjectPrivilege> listPrincipalPartitionColumnGrants(String p0, PrincipalType p1, String p2, String p3, String p4, List<String> p5, String p6, String p7);
    List<HiveObjectPrivilege> listPrincipalPartitionColumnGrantsAll(String p0, PrincipalType p1);
    List<HiveObjectPrivilege> listPrincipalPartitionGrants(String p0, PrincipalType p1, String p2, String p3, String p4, List<String> p5, String p6);
    List<HiveObjectPrivilege> listPrincipalPartitionGrantsAll(String p0, PrincipalType p1);
    List<HiveObjectPrivilege> listPrincipalTableColumnGrants(String p0, PrincipalType p1, String p2, String p3, String p4, String p5);
    List<HiveObjectPrivilege> listPrincipalTableColumnGrantsAll(String p0, PrincipalType p1);
    List<HiveObjectPrivilege> listPrincipalTableGrantsAll(String p0, PrincipalType p1);
    List<HiveObjectPrivilege> listTableColumnGrantsAll(String p0, String p1, String p2, String p3);
    List<HiveObjectPrivilege> listTableGrantsAll(String p0, String p1, String p2);
    List<MetaStoreUtils.ColStatsObjWithSourceInfo> getPartitionColStatsForDatabase(String p0, String p1);
    List<MetaStoreUtils.FullTableName> getAllTableNamesForStats();
    List<MetaStoreUtils.FullTableName> getTableNamesWithStats();
    List<Partition> getPartitions(String p0, String p1, String p2, int p3);
    List<Partition> getPartitionsByFilter(String p0, String p1, String p2, String p3, short p4);
    List<Partition> getPartitionsByNames(String p0, String p1, String p2, List<String> p3);
    List<Partition> getPartitionsWithAuth(String p0, String p1, String p2, short p3, String p4, List<String> p5);
    List<Partition> listPartitionsPsWithAuth(String p0, String p1, String p2, List<String> p3, short p4, String p5, List<String> p6);
    List<Role> listRoles(String p0, PrincipalType p1);
    List<RolePrincipalGrant> listRoleMembers(String p0);
    List<RolePrincipalGrant> listRolesWithGrants(String p0, PrincipalType p1);
    List<RuntimeStat> getRuntimeStats(int p0, int p1);
    List<SQLCheckConstraint> getCheckConstraints(String p0, String p1, String p2);
    List<SQLDefaultConstraint> getDefaultConstraints(String p0, String p1, String p2);
    List<SQLForeignKey> getForeignKeys(String p0, String p1, String p2, String p3, String p4);
    List<SQLNotNullConstraint> getNotNullConstraints(String p0, String p1, String p2);
    List<SQLPrimaryKey> getPrimaryKeys(String p0, String p1, String p2);
    List<SQLUniqueConstraint> getUniqueConstraints(String p0, String p1, String p2);
    List<SchemaVersion> getAllSchemaVersion(ISchemaName p0);
    List<SchemaVersion> getSchemaVersionsByColumns(String p0, String p1, String p2);
    List<String> addCheckConstraints(List<SQLCheckConstraint> p0);
    List<String> addDefaultConstraints(List<SQLDefaultConstraint> p0);
    List<String> addForeignKeys(List<SQLForeignKey> p0);
    List<String> addNotNullConstraints(List<SQLNotNullConstraint> p0);
    List<String> addPrimaryKeys(List<SQLPrimaryKey> p0);
    List<String> addUniqueConstraints(List<SQLUniqueConstraint> p0);
    List<String> createTableWithConstraints(Table p0, List<SQLPrimaryKey> p1, List<SQLForeignKey> p2, List<SQLUniqueConstraint> p3, List<SQLNotNullConstraint> p4, List<SQLDefaultConstraint> p5, List<SQLCheckConstraint> p6);
    List<String> getAllDatabases(String p0);
    List<String> getAllTables(String p0, String p1);
    List<String> getAllTokenIdentifiers();
    List<String> getCatalogs();
    List<String> getDatabases(String p0, String p1);
    List<String> getFunctions(String p0, String p1, String p2);
    List<String> getMaterializedViewsForRewriting(String p0, String p1);
    List<String> getTables(String p0, String p1, String p2);
    List<String> getTables(String p0, String p1, String p2, TableType p3);
    List<String> listPartitionNames(String p0, String p1, String p2, short p3);
    List<String> listPartitionNamesPs(String p0, String p1, String p2, List<String> p3, short p4);
    List<String> listRoleNames();
    List<String> listTableNamesByFilter(String p0, String p1, String p2, short p3);
    List<Table> getTableObjectsByName(String p0, String p1, List<String> p2);
    List<TableMeta> getTableMeta(String p0, String p1, String p2, List<String> p3);
    List<WMResourcePlan> getAllResourcePlans();
    List<WMTrigger> getTriggersForResourcePlan(String p0);
    Map<String, List<String>> getPartitionColsWithStats(String p0, String p1, String p2);
    NotificationEventResponse getNextNotification(NotificationEventRequest p0);
    NotificationEventsCountResponse getNotificationEventsCount(NotificationEventsCountRequest p0);
    Partition getPartition(String p0, String p1, String p2, List<String> p3);
    Partition getPartitionWithAuth(String p0, String p1, String p2, List<String> p3, String p4, List<String> p5);
    PartitionValuesResponse listPartitionValues(String p0, String p1, String p2, List<FieldSchema> p3, boolean p4, String p5, boolean p6, List<FieldSchema> p7, long p8);
    PrincipalPrivilegeSet getColumnPrivilegeSet(String p0, String p1, String p2, String p3, String p4, String p5, List<String> p6);
    PrincipalPrivilegeSet getDBPrivilegeSet(String p0, String p1, String p2, List<String> p3);
    PrincipalPrivilegeSet getPartitionPrivilegeSet(String p0, String p1, String p2, String p3, String p4, List<String> p5);
    PrincipalPrivilegeSet getTablePrivilegeSet(String p0, String p1, String p2, String p3, List<String> p4);
    PrincipalPrivilegeSet getUserPrivilegeSet(String p0, List<String> p1);
    Role getRole(String p0);
    SchemaVersion getLatestSchemaVersion(ISchemaName p0);
    SchemaVersion getSchemaVersion(SchemaVersionDescriptor p0);
    SerDeInfo getSerDeInfo(String p0);
    String getMetaStoreSchemaVersion();
    String getMetastoreDbUuid();
    String getToken(String p0);
    String[] getMasterKeys();
    Table getTable(String p0, String p1, String p2);
    Table markPartitionForEvent(String p0, String p1, String p2, Map<String, String> p3, PartitionEventType p4);
    Type getType(String p0);
    WMFullResourcePlan alterResourcePlan(String p0, WMNullableResourcePlan p1, boolean p2, boolean p3, boolean p4);
    WMFullResourcePlan getActiveResourcePlan();
    WMFullResourcePlan getResourcePlan(String p0);
    WMValidateResourcePlanResponse validateResourcePlan(String p0);
    boolean addPartition(Partition p0);
    boolean addPartitions(String p0, String p1, String p2, List<Partition> p3);
    boolean addPartitions(String p0, String p1, String p2, PartitionSpecProxy p3, boolean p4);
    boolean addRole(String p0, String p1);
    boolean addToken(String p0, String p1);
    boolean alterDatabase(String p0, String p1, Database p2);
    boolean commitTransaction();
    boolean createType(Type p0);
    boolean deletePartitionColumnStatistics(String p0, String p1, String p2, String p3, List<String> p4, String p5);
    boolean deleteTableColumnStatistics(String p0, String p1, String p2, String p3);
    boolean doesPartitionExist(String p0, String p1, String p2, List<String> p3);
    boolean dropDatabase(String p0, String p1);
    boolean dropPartition(String p0, String p1, String p2, List<String> p3);
    boolean dropTable(String p0, String p1, String p2);
    boolean dropType(String p0);
    boolean getPartitionsByExpr(String p0, String p1, String p2, byte[] p3, String p4, short p5, List<Partition> p6);
    boolean grantPrivileges(PrivilegeBag p0);
    boolean grantRole(Role p0, String p1, PrincipalType p2, String p3, PrincipalType p4, boolean p5);
    boolean isActiveTransaction();
    boolean isFileMetadataSupported();
    boolean isPartitionMarkedForEvent(String p0, String p1, String p2, Map<String, String> p3, PartitionEventType p4);
    boolean openTransaction();
    boolean refreshPrivileges(HiveObjectRef p0, String p1, PrivilegeBag p2);
    boolean removeMasterKey(Integer p0);
    boolean removeRole(String p0);
    boolean removeToken(String p0);
    boolean revokePrivileges(PrivilegeBag p0, boolean p1);
    boolean revokeRole(Role p0, String p1, PrincipalType p2, boolean p3);
    boolean updatePartitionColumnStatistics(ColumnStatistics p0, List<String> p1);
    boolean updateTableColumnStatistics(ColumnStatistics p0);
    default void dropConstraint(String p0, String p1, String p2, String p3){}
    int addMasterKey(String p0);
    int deleteRuntimeStats(int p0);
    int getDatabaseCount();
    int getNumPartitionsByExpr(String p0, String p1, String p2, byte[] p3);
    int getNumPartitionsByFilter(String p0, String p1, String p2, String p3);
    int getPartitionCount();
    int getTableCount();
    long cleanupEvents();
    void addNotificationEvent(NotificationEvent p0);
    void addRuntimeStat(RuntimeStat p0);
    void addSchemaVersion(SchemaVersion p0);
    void addSerde(SerDeInfo p0);
    void alterCatalog(String p0, Catalog p1);
    void alterFunction(String p0, String p1, String p2, Function p3);
    void alterISchema(ISchemaName p0, ISchema p1);
    void alterPartition(String p0, String p1, String p2, List<String> p3, Partition p4);
    void alterPartitions(String p0, String p1, String p2, List<List<String>> p3, List<Partition> p4);
    void alterPool(WMNullablePool p0, String p1);
    void alterSchemaVersion(SchemaVersionDescriptor p0, SchemaVersion p1);
    void alterTable(String p0, String p1, String p2, Table p3);
    void alterWMTrigger(WMTrigger p0);
    void cleanNotificationEvents(int p0);
    void createCatalog(Catalog p0);
    void createDatabase(Database p0);
    void createFunction(Function p0);
    void createISchema(ISchema p0);
    void createOrUpdateWMMapping(WMMapping p0, boolean p1);
    void createPool(WMPool p0);
    void createResourcePlan(WMResourcePlan p0, String p1, int p2);
    void createTable(Table p0);
    void createWMTrigger(WMTrigger p0);
    void createWMTriggerToPoolMapping(String p0, String p1, String p2);
    void dropCatalog(String p0);
    void dropConstraint(String p0, String p1, String p2, String p3, boolean p4);
    void dropFunction(String p0, String p1, String p2);
    void dropISchema(ISchemaName p0);
    void dropPartitions(String p0, String p1, String p2, List<String> p3);
    void dropResourcePlan(String p0);
    void dropSchemaVersion(SchemaVersionDescriptor p0);
    void dropWMMapping(WMMapping p0);
    void dropWMPool(String p0, String p1);
    void dropWMTrigger(String p0, String p1);
    void dropWMTriggerToPoolMapping(String p0, String p1, String p2);
    void flushCache();
    void getFileMetadataByExpr(List<Long> p0, FileMetadataExprType p1, byte[] p2, ByteBuffer[] p3, ByteBuffer[] p4, boolean[] p5);
    void putFileMetadata(List<Long> p0, List<ByteBuffer> p1, FileMetadataExprType p2);
    void rollbackTransaction();
    void setMetaStoreSchemaVersion(String p0, String p1);
    void shutdown();
    void updateCreationMetadata(String p0, String p1, String p2, CreationMetadata p3);
    void updateMasterKey(Integer p0, String p1);
    void verifySchema();
}

// Generated automatically from org.openhealthtools.mdht.uml.hl7.datatypes.AD for testing purposes

package org.openhealthtools.mdht.uml.hl7.datatypes;

import java.util.Map;
import org.eclipse.emf.common.util.DiagnosticChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.util.FeatureMap;
import org.openhealthtools.mdht.uml.hl7.datatypes.ADXP;
import org.openhealthtools.mdht.uml.hl7.datatypes.ANY;
import org.openhealthtools.mdht.uml.hl7.datatypes.SXCM_TS;
import org.openhealthtools.mdht.uml.hl7.vocab.PostalAddressUse;

public interface AD extends ANY
{
    AD addAdditionalLocator(String p0);
    AD addBuildingNumberSuffix(String p0);
    AD addCareOf(String p0);
    AD addCensusTract(String p0);
    AD addCity(String p0);
    AD addCountry(String p0);
    AD addCounty(String p0);
    AD addDelimiter(String p0);
    AD addDeliveryAddressLine(String p0);
    AD addDeliveryInstallationArea(String p0);
    AD addDeliveryInstallationQualifier(String p0);
    AD addDeliveryInstallationType(String p0);
    AD addDeliveryMode(String p0);
    AD addDeliveryModeIdentifier(String p0);
    AD addDirection(String p0);
    AD addHouseNumber(String p0);
    AD addHouseNumberNumeric(String p0);
    AD addPostBox(String p0);
    AD addPostalCode(String p0);
    AD addPrecinct(String p0);
    AD addState(String p0);
    AD addStreetAddressLine(String p0);
    AD addStreetName(String p0);
    AD addStreetNameBase(String p0);
    AD addStreetNameType(String p0);
    AD addText(String p0);
    AD addUnitID(String p0);
    AD addUnitType(String p0);
    Boolean getIsNotOrdered();
    EList<ADXP> getAdditionalLocators();
    EList<ADXP> getBuildingNumberSuffixes();
    EList<ADXP> getCareOfs();
    EList<ADXP> getCensusTracts();
    EList<ADXP> getCities();
    EList<ADXP> getCounties();
    EList<ADXP> getCountries();
    EList<ADXP> getDelimiters();
    EList<ADXP> getDeliveryAddressLines();
    EList<ADXP> getDeliveryInstallationAreas();
    EList<ADXP> getDeliveryInstallationQualifiers();
    EList<ADXP> getDeliveryInstallationTypes();
    EList<ADXP> getDeliveryModeIdentifiers();
    EList<ADXP> getDeliveryModes();
    EList<ADXP> getDirections();
    EList<ADXP> getHouseNumberNumerics();
    EList<ADXP> getHouseNumbers();
    EList<ADXP> getPostBoxes();
    EList<ADXP> getPostalCodes();
    EList<ADXP> getPrecincts();
    EList<ADXP> getStates();
    EList<ADXP> getStreetAddressLines();
    EList<ADXP> getStreetNameBases();
    EList<ADXP> getStreetNameTypes();
    EList<ADXP> getStreetNames();
    EList<ADXP> getUnitIDs();
    EList<ADXP> getUnitTypes();
    EList<PostalAddressUse> getUses();
    EList<SXCM_TS> getUseablePeriods();
    FeatureMap getMixed();
    FeatureMap getParts();
    String getText();
    boolean isSetUses();
    boolean validateAdditionalLocator(DiagnosticChain p0, Map<Object, Object> p1);
    boolean validateBuildingNumberSuffix(DiagnosticChain p0, Map<Object, Object> p1);
    boolean validateCareOf(DiagnosticChain p0, Map<Object, Object> p1);
    boolean validateCensusTract(DiagnosticChain p0, Map<Object, Object> p1);
    boolean validateCity(DiagnosticChain p0, Map<Object, Object> p1);
    boolean validateCountry(DiagnosticChain p0, Map<Object, Object> p1);
    boolean validateCounty(DiagnosticChain p0, Map<Object, Object> p1);
    boolean validateDelimiter(DiagnosticChain p0, Map<Object, Object> p1);
    boolean validateDeliveryAddressLine(DiagnosticChain p0, Map<Object, Object> p1);
    boolean validateDeliveryInstallationArea(DiagnosticChain p0, Map<Object, Object> p1);
    boolean validateDeliveryInstallationQualifier(DiagnosticChain p0, Map<Object, Object> p1);
    boolean validateDeliveryInstallationType(DiagnosticChain p0, Map<Object, Object> p1);
    boolean validateDeliveryMode(DiagnosticChain p0, Map<Object, Object> p1);
    boolean validateDeliveryModeIdentifier(DiagnosticChain p0, Map<Object, Object> p1);
    boolean validateDirection(DiagnosticChain p0, Map<Object, Object> p1);
    boolean validateHouseNumber(DiagnosticChain p0, Map<Object, Object> p1);
    boolean validateHouseNumberNumeric(DiagnosticChain p0, Map<Object, Object> p1);
    boolean validatePostBox(DiagnosticChain p0, Map<Object, Object> p1);
    boolean validatePostalCode(DiagnosticChain p0, Map<Object, Object> p1);
    boolean validatePrecinct(DiagnosticChain p0, Map<Object, Object> p1);
    boolean validateState(DiagnosticChain p0, Map<Object, Object> p1);
    boolean validateStreetAddressLine(DiagnosticChain p0, Map<Object, Object> p1);
    boolean validateStreetName(DiagnosticChain p0, Map<Object, Object> p1);
    boolean validateStreetNameBase(DiagnosticChain p0, Map<Object, Object> p1);
    boolean validateStreetNameType(DiagnosticChain p0, Map<Object, Object> p1);
    boolean validateUnitID(DiagnosticChain p0, Map<Object, Object> p1);
    boolean validateUnitType(DiagnosticChain p0, Map<Object, Object> p1);
    void setIsNotOrdered(Boolean p0);
    void unsetUses();
}

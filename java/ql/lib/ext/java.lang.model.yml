extensions:
  - addsTo:
      pack: codeql/java-all
      extensible: sinkModel
    data:
      - ["java.lang", "Class", False, "getResource", "(String)", "", "Argument[0]", "read-file", "ai-manual"]
      - ["java.lang", "Class", False, "getResourceAsStream", "(String)", "", "Argument[0]", "read-file", "ai-manual"]
      - ["java.lang", "ClassLoader", True, "getSystemResource", "(String)", "", "Argument[0]", "read-file", "ai-manual"]
      - ["java.lang", "ClassLoader", True, "getSystemResourceAsStream", "(String)", "", "Argument[0]", "read-file", "ai-manual"]
      - ["java.lang", "Module", True, "getResourceAsStream", "(String)", "", "Argument[0]", "read-file", "ai-manual"]
      # These are modeled in plain CodeQL. TODO: migrate them.
      # - ["java.lang", "ProcessBuilder", False, "command", "(String[])", "", "Argument[0]", "command-injection", "ai-manual"]
      # - ["java.lang", "ProcessBuilder", False, "directory", "(File)", "", "Argument[0]", "command-injection", "ai-manual"]
      # - ["java.lang", "ProcessBuilder", False, "ProcessBuilder", "(List)", "", "Argument[0]", "command-injection", "ai-manual"]
      # - ["java.lang", "ProcessBuilder", False, "ProcessBuilder", "(String[])", "", "Argument[0]", "command-injection", "ai-manual"]
      # - ["java.lang", "Runtime", True, "exec", "(String,String[])", "", "Argument[0]", "command-injection", "ai-manual"]
      # - ["java.lang", "Runtime", True, "exec", "(String[],String[])", "", "Argument[0]", "command-injection", "ai-manual"]
      # - ["java.lang", "Runtime", True, "exec", "(String,String[],File)", "", "Argument[0]", "command-injection", "ai-manual"]
      # - ["java.lang", "Runtime", True, "exec", "(String,String[],File)", "", "Argument[2]", "command-injection", "ai-manual"]
      # - ["java.lang", "Runtime", True, "exec", "(String)", "", "Argument[0]", "command-injection", "ai-manual"]
      # - ["java.lang", "Runtime", True, "exec", "(String[],String[],File)", "", "Argument[0]", "command-injection", "ai-manual"]
      # - ["java.lang", "Runtime", True, "exec", "(String[],String[],File)", "", "Argument[2]", "command-injection", "ai-manual"]
      # - ["java.lang", "Runtime", True, "exec", "(String[])", "", "Argument[0]", "command-injection", "ai-manual"]
      - ["java.lang", "String", False, "matches", "(String)", "", "Argument[0]", "regex-use[f-1]", "manual"]
      - ["java.lang", "String", False, "replaceAll", "(String,String)", "", "Argument[0]", "regex-use[-1]", "manual"]
      - ["java.lang", "String", False, "replaceFirst", "(String,String)", "", "Argument[0]", "regex-use[-1]", "manual"]
      - ["java.lang", "String", False, "split", "(String)", "", "Argument[0]", "regex-use[-1]", "manual"]
      - ["java.lang", "String", False, "split", "(String,int)", "", "Argument[0]", "regex-use[-1]", "manual"]
      # These are modeled in plain CodeQL. TODO: migrate them.
      # - ["java.lang", "System", False, "load", "(String)", "", "Argument[0]", "command-injection", "ai-manual"] # This is actually injecting a library.
      # - ["java.lang", "System", False, "loadLibrary", "(String)", "", "Argument[0]", "command-injection", "ai-manual"] # This is actually injecting a library.
      - ["java.lang", "System$Logger", True, "log", "(Level,Object)", "", "Argument[1]", "logging", "manual"]
      - ["java.lang", "System$Logger", True, "log", "(Level,ResourceBundle,String,Object[])", "", "Argument[2..3]", "logging", "manual"]
      - ["java.lang", "System$Logger", True, "log", "(Level,ResourceBundle,String,Throwable)", "", "Argument[2]", "logging", "manual"]
      - ["java.lang", "System$Logger", True, "log", "(Level,String)", "", "Argument[1]", "logging", "manual"]
      - ["java.lang", "System$Logger", True, "log", "(Level,String,Object[])", "", "Argument[1..2]", "logging", "manual"]
      - ["java.lang", "System$Logger", True, "log", "(Level,String,Supplier)", "", "Argument[1..2]", "logging", "manual"]
      - ["java.lang", "System$Logger", True, "log", "(Level,String,Supplier,Throwable)", "", "Argument[1..2]", "logging", "manual"]
      - ["java.lang", "System$Logger", True, "log", "(Level,String,Throwable)", "", "Argument[1]", "logging", "manual"]
  - addsTo:
      pack: codeql/java-all
      extensible: summaryModel
    data:
      - ["java.lang", "AbstractStringBuilder", True, "AbstractStringBuilder", "(String)", "", "Argument[0]", "Argument[this]", "taint", "manual"]
      - ["java.lang", "AbstractStringBuilder", True, "append", "", "", "Argument[this]", "ReturnValue", "value", "manual"]
      - ["java.lang", "AbstractStringBuilder", True, "append", "", "", "Argument[0]", "Argument[this]", "taint", "manual"]
      # When `WithoutElement` is implemented for Java, `java.lang.AbstractStringBuilder#delete` might require a `taint` step of the form `Argument[this].WithoutElement -> Argument[this]` in addition to the below `value` step.
      - ["java.lang", "AbstractStringBuilder", True, "delete", "(int,int)", "", "Argument[this]", "ReturnValue", "value", "manual"]
      - ["java.lang", "AbstractStringBuilder", True, "getChars", "", "", "Argument[this]", "Argument[2]", "taint", "manual"]
      - ["java.lang", "AbstractStringBuilder", True, "insert", "", "", "Argument[this]", "ReturnValue", "value", "manual"]
      - ["java.lang", "AbstractStringBuilder", True, "insert", "", "", "Argument[1]", "Argument[this]", "taint", "manual"]
      - ["java.lang", "AbstractStringBuilder", True, "replace", "", "", "Argument[this]", "ReturnValue", "value", "manual"]
      - ["java.lang", "AbstractStringBuilder", True, "replace", "", "", "Argument[2]", "Argument[this]", "taint", "manual"]
      - ["java.lang", "AbstractStringBuilder", True, "reverse", "", "", "Argument[this]", "ReturnValue", "value", "manual"]
      - ["java.lang", "AbstractStringBuilder", True, "subSequence", "", "", "Argument[this]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "AbstractStringBuilder", True, "substring", "", "", "Argument[this]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "AbstractStringBuilder", True, "toString", "", "", "Argument[this]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "Appendable", True, "append", "", "", "Argument[this]", "ReturnValue", "value", "manual"]
      - ["java.lang", "Appendable", True, "append", "", "", "Argument[0]", "Argument[this]", "taint", "manual"]
      - ["java.lang", "AssertionError", False, "AssertionError", "(Object)", "", "Argument[0]", "Argument[this].SyntheticField[java.lang.Throwable.message]", "value", "manual"]
      - ["java.lang", "CharSequence", True, "charAt", "", "", "Argument[this]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "CharSequence", True, "subSequence", "", "", "Argument[this]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "CharSequence", True, "toString", "", "", "Argument[this]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "Class", False, "cast", "(Object)", "", "Argument[0]", "ReturnValue", "value", "manual"]
      - ["java.lang", "Exception", False, "Exception", "(String)", "", "Argument[0]", "Argument[this].SyntheticField[java.lang.Throwable.message]", "value", "manual"]
      - ["java.lang", "Exception", False, "Exception", "(String,Throwable)", "", "Argument[0]", "Argument[this].SyntheticField[java.lang.Throwable.message]", "value", "manual"]
      - ["java.lang", "Exception", False, "Exception", "(String,Throwable)", "", "Argument[1]", "Argument[this].SyntheticField[java.lang.Throwable.cause]", "value", "manual"]
      - ["java.lang", "IllegalArgumentException", False, "IllegalArgumentException", "(String)", "", "Argument[0]", "Argument[this].SyntheticField[java.lang.Throwable.message]", "value", "manual"]
      - ["java.lang", "IllegalStateException", False, "IllegalStateException", "(String)", "", "Argument[0]", "Argument[this].SyntheticField[java.lang.Throwable.message]", "value", "manual"]
      - ["java.lang", "IndexOutOfBoundsException", False, "IndexOutOfBoundsException", "(String)", "", "Argument[0]", "Argument[this].SyntheticField[java.lang.Throwable.message]", "value", "manual"]
      - ["java.lang", "Iterable", True, "forEach", "(Consumer)", "", "Argument[this].Element", "Argument[0].Parameter[0]", "value", "manual"]
      - ["java.lang", "Iterable", True, "iterator", "()", "", "Argument[this].Element", "ReturnValue.Element", "value", "manual"]
      - ["java.lang", "Iterable", True, "spliterator", "()", "", "Argument[this].Element", "ReturnValue.Element", "value", "manual"]
      - ["java.lang", "NullPointerException", False, "NullPointerException", "(String)", "", "Argument[0]", "Argument[this].SyntheticField[java.lang.Throwable.message]", "value", "manual"]
      - ["java.lang", "Object", True, "clone", "", "", "Argument[this].Element", "ReturnValue.Element", "value", "manual"]
      - ["java.lang", "Object", True, "clone", "", "", "Argument[this].MapKey", "ReturnValue.MapKey", "value", "manual"]
      - ["java.lang", "Object", True, "clone", "", "", "Argument[this].MapValue", "ReturnValue.MapValue", "value", "manual"]
      - ["java.lang", "RuntimeException", False, "RuntimeException", "(String)", "", "Argument[0]", "Argument[this].SyntheticField[java.lang.Throwable.message]", "value", "manual"]
      - ["java.lang", "RuntimeException", False, "RuntimeException", "(String,Throwable)", "", "Argument[0]", "Argument[this].SyntheticField[java.lang.Throwable.message]", "value", "manual"]
      - ["java.lang", "RuntimeException", False, "RuntimeException", "(String,Throwable)", "", "Argument[1]", "Argument[this].SyntheticField[java.lang.Throwable.cause]", "value", "manual"]
      - ["java.lang", "RuntimeException", False, "RuntimeException", "(Throwable)", "", "Argument[0]", "Argument[this].SyntheticField[java.lang.Throwable.cause]", "value", "manual"]
      - ["java.lang", "String", False, "String", "", "", "Argument[0]", "Argument[this]", "taint", "manual"]
      - ["java.lang", "String", False, "concat", "(String)", "", "Argument[this]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "concat", "(String)", "", "Argument[0]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "copyValueOf", "", "", "Argument[0]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "format", "(Locale,String,Object[])", "", "Argument[1]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "format", "(Locale,String,Object[])", "", "Argument[2].ArrayElement", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "format", "(String,Object[])", "", "Argument[0]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "format", "(String,Object[])", "", "Argument[1].ArrayElement", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "formatted", "(Object[])", "", "Argument[this]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "formatted", "(Object[])", "", "Argument[0].ArrayElement", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "getBytes", "", "", "Argument[this]", "Argument[2]", "taint", "manual"]
      - ["java.lang", "String", False, "getBytes", "", "", "Argument[this]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "getChars", "", "", "Argument[this]", "Argument[2]", "taint", "manual"]
      - ["java.lang", "String", False, "indent", "", "", "Argument[this]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "intern", "", "", "Argument[this]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "join", "", "", "Argument[0..1]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "repeat", "(int)", "", "Argument[this]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "replace", "", "", "Argument[this]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "replace", "", "", "Argument[1]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "replaceAll", "", "", "Argument[this]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "replaceAll", "", "", "Argument[1]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "replaceFirst", "", "", "Argument[this]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "replaceFirst", "", "", "Argument[1]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "split", "", "", "Argument[this]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "strip", "", "", "Argument[this]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "stripIndent", "", "", "Argument[this]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "stripLeading", "", "", "Argument[this]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "stripTrailing", "", "", "Argument[this]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "substring", "", "", "Argument[this]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "toCharArray", "", "", "Argument[this]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "toLowerCase", "", "", "Argument[this]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "toString", "", "", "Argument[this]", "ReturnValue", "value", "manual"]
      - ["java.lang", "String", False, "toUpperCase", "", "", "Argument[this]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "translateEscapes", "", "", "Argument[this]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "trim", "", "", "Argument[this]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "valueOf", "(char)", "", "Argument[0]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "valueOf", "(char[])", "", "Argument[0]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "String", False, "valueOf", "(char[],int,int)", "", "Argument[0]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "StringBuffer", True, "StringBuffer", "(CharSequence)", "", "Argument[0]", "Argument[this]", "taint", "manual"]
      - ["java.lang", "StringBuffer", True, "StringBuffer", "(String)", "", "Argument[0]", "Argument[this]", "taint", "manual"]
      - ["java.lang", "StringBuilder", True, "StringBuilder", "", "", "Argument[0]", "Argument[this]", "taint", "manual"]
      - ["java.lang", "System", False, "arraycopy", "", "", "Argument[0]", "Argument[2]", "taint", "manual"]
      - ["java.lang", "Thread", False, "Thread", "(Runnable)", "", "Argument[0]", "Argument[this]", "taint", "manual"]
      - ["java.lang", "Thread", False, "Thread", "(String)", "", "Argument[0]", "Argument[this].SyntheticField[java.lang.Thread.name]", "value", "manual"]
      - ["java.lang", "Thread", True, "getName", "()", "", "Argument[this].SyntheticField[java.lang.Thread.name]", "ReturnValue", "value", "manual"]
      - ["java.lang", "ThreadLocal", True, "get", "()", "", "Argument[this].SyntheticField[java.lang.ThreadLocal.value]", "ReturnValue", "value", "manual"]
      - ["java.lang", "ThreadLocal", True, "set", "(Object)", "", "Argument[0]", "Argument[this].SyntheticField[java.lang.ThreadLocal.value]", "value", "manual"]
      - ["java.lang", "Throwable", False, "Throwable", "(Throwable)", "", "Argument[0]", "Argument[this].SyntheticField[java.lang.Throwable.cause]", "value", "manual"]
      - ["java.lang", "Throwable", False, "Throwable", "(String)", "", "Argument[0]", "Argument[this].SyntheticField[java.lang.Throwable.message]", "value", "manual"]
      - ["java.lang", "Throwable", True, "getCause", "()", "", "Argument[this].SyntheticField[java.lang.Throwable.cause]", "ReturnValue", "value", "manual"]
      - ["java.lang", "Throwable", True, "getMessage", "()", "", "Argument[this].SyntheticField[java.lang.Throwable.message]", "ReturnValue", "value", "manual"]
      - ["java.lang", "Throwable", True, "getLocalizedMessage", "()", "", "Argument[this].SyntheticField[java.lang.Throwable.message]", "ReturnValue", "value", "manual"]
      - ["java.lang", "Throwable", True, "toString", "()", "", "Argument[this].SyntheticField[java.lang.Throwable.message]", "ReturnValue", "taint", "manual"]
      - ["java.lang", "UnsupportedOperationException", False, "UnsupportedOperationException", "(String)", "", "Argument[0]", "Argument[this].SyntheticField[java.lang.Throwable.message]", "value", "manual"]

  - addsTo:
      pack: codeql/java-all
      extensible: neutralModel
    data:
      - ["java.lang", "AbstractStringBuilder", "length", "()", "manual"]
      - ["java.lang", "AbstractStringBuilder", "setCharAt", "(int,char)", "manual"]
      - ["java.lang", "AbstractStringBuilder", "setLength", "(int)", "manual"]
      - ["java.lang", "Boolean", "booleanValue", "()", "manual"]
      - ["java.lang", "Boolean", "equals", "(Object)", "manual"]
      - ["java.lang", "Boolean", "parseBoolean", "(String)", "manual"]
      - ["java.lang", "Boolean", "valueOf", "(boolean)", "manual"]
      - ["java.lang", "CharSequence", "length", "()", "manual"]
      - ["java.lang", "Class", "forName", "(String)", "manual"]
      - ["java.lang", "Class", "getCanonicalName", "()", "manual"]
      - ["java.lang", "Class", "getClassLoader", "()", "manual"]
      - ["java.lang", "Class", "getDeclaredConstructor", "(Class[])", "manual"]  # This model may be changed to a taint step for an unsafe reflection query in the future.
      - ["java.lang", "Class", "getDeclaredField", "(String)", "manual"]         # This model may be changed to a taint step for an unsafe reflection query in the future.
      - ["java.lang", "Class", "getMethod", "(String,Class[])", "manual"]        # This model may be changed to a taint step for an unsafe reflection query in the future.
      - ["java.lang", "Class", "getName", "()", "manual"]
      - ["java.lang", "Class", "getResource", "(String)", "manual"]
      - ["java.lang", "Class", "getResourceAsStream", "(String)", "manual"]
      - ["java.lang", "Class", "getSimpleName", "()", "manual"]
      - ["java.lang", "Class", "isAssignableFrom", "(Class)", "manual"]
      - ["java.lang", "Class", "isInstance", "(Object)", "manual"]
      - ["java.lang", "Class", "toString", "()", "manual"]
      - ["java.lang", "ClassLoader", "getResource", "(String)", "manual"]
      - ["java.lang", "ClassLoader", "getResourceAsStream", "(String)", "manual"]
      - ["java.lang", "Enum", "Enum", "(String,int)", "manual"]
      - ["java.lang", "Enum", "equals", "(Object)", "manual"]
      - ["java.lang", "Enum", "hashCode", "()", "manual"]
      - ["java.lang", "Enum", "name", "()", "manual"]
      - ["java.lang", "Enum", "ordinal", "()", "manual"]
      - ["java.lang", "Enum", "toString", "()", "manual"]
      - ["java.lang", "Integer", "equals", "(Object)", "manual"]
      - ["java.lang", "Long", "equals", "(Object)", "manual"]
      - ["java.lang", "Object", "equals", "(Object)", "manual"]
      - ["java.lang", "Object", "getClass", "()", "manual"]
      - ["java.lang", "Object", "hashCode", "()", "manual"]
      - ["java.lang", "Object", "toString", "()", "manual"]
      - ["java.lang", "Runnable", "run", "()", "manual"]
      - ["java.lang", "Runtime", "getRuntime", "()", "manual"]
      - ["java.lang", "String", "compareTo", "(String)", "manual"]
      - ["java.lang", "String", "contains", "(CharSequence)", "manual"]
      - ["java.lang", "String", "endsWith", "(String)", "manual"]
      - ["java.lang", "String", "equals", "(Object)", "manual"]
      - ["java.lang", "String", "equalsIgnoreCase", "(String)", "manual"]
      - ["java.lang", "String", "hashCode", "()", "manual"]
      - ["java.lang", "String", "indexOf", "(int)", "manual"]
      - ["java.lang", "String", "indexOf", "(String)", "manual"]
      - ["java.lang", "String", "isEmpty", "()", "manual"]
      - ["java.lang", "String", "lastIndexOf", "(int)", "manual"]
      - ["java.lang", "String", "lastIndexOf", "(String)", "manual"]
      - ["java.lang", "String", "length", "()", "manual"]
      - ["java.lang", "String", "startsWith", "(String)", "manual"]
      - ["java.lang", "String", "valueOf", "(boolean)", "manual"]
      - ["java.lang", "System", "currentTimeMillis", "()", "manual"]
      - ["java.lang", "System", "exit", "(int)", "manual"]
      - ["java.lang", "System", "getenv", "(String)", "manual"]
      - ["java.lang", "System", "identityHashCode", "(Object)", "manual"]
      - ["java.lang", "System", "lineSeparator", "()", "manual"]
      - ["java.lang", "System", "nanoTime", "()", "manual"]
      - ["java.lang", "Thread", "currentThread", "()", "manual"]
      - ["java.lang", "Thread", "getContextClassLoader", "()", "manual"]
      - ["java.lang", "Thread", "interrupt", "()", "manual"]
      - ["java.lang", "Thread", "sleep", "(long)", "manual"]
      - ["java.lang", "Thread", "start", "()", "manual"]
      # The below APIs have numeric flow and are currently being stored as neutral models.
      # These may be changed to summary models with kinds "value-numeric" and "taint-numeric" (or similar) in the future.
      - ["java.lang", "Double", "doubleToLongBits", "(double)", "manual"] # taint-numeric
      - ["java.lang", "Double", "parseDouble", "(String)", "manual"]      # taint-numeric
      - ["java.lang", "Double", "valueOf", "(double)", "manual"]          # taint-numeric
      - ["java.lang", "Integer", "Integer", "(int)", "manual"]            # taint-numeric
      - ["java.lang", "Integer", "intValue", "()", "manual"]              # taint-numeric
      - ["java.lang", "Integer", "parseInt", "(String)", "manual"]        # taint-numeric
      - ["java.lang", "Integer", "toHexString", "(int)", "manual"]        # taint-numeric
      - ["java.lang", "Integer", "toString", "", "manual"]                # taint-numeric
      - ["java.lang", "Integer", "valueOf", "", "manual"]                 # taint-numeric
      - ["java.lang", "Long", "Long", "(long)", "manual"]                 # taint-numeric
      - ["java.lang", "Long", "intValue", "()", "manual"]                 # taint-numeric
      - ["java.lang", "Long", "longValue", "()", "manual"]                # taint-numeric
      - ["java.lang", "Long", "parseLong", "(String)", "manual"]          # taint-numeric
      - ["java.lang", "Long", "toString", "", "manual"]                   # taint-numeric
      - ["java.lang", "Long", "valueOf", "", "manual"]                    # taint-numeric
      - ["java.lang", "Math", "max", "", "manual"]                        # value-numeric
      - ["java.lang", "Math", "min", "", "manual"]                        # value-numeric
      - ["java.lang", "Number", "doubleValue", "()", "manual"]            # taint-numeric
      - ["java.lang", "Number", "intValue", "()", "manual"]               # taint-numeric
      - ["java.lang", "Number", "longValue", "()", "manual"]              # taint-numeric
      - ["java.lang", "String", "valueOf", "(int)", "manual"]             # taint-numeric
      - ["java.lang", "String", "valueOf", "(long)", "manual"]            # taint-numeric

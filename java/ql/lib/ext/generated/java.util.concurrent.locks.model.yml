# THIS FILE IS AN AUTO-GENERATED MODELS AS DATA FILE. DO NOT EDIT.
extensions:
  - addsTo:
      pack: codeql/java-all
      extensible: summaryModel
    data:
      - ["java.util.concurrent.locks", "AbstractQueuedLongSynchronizer", True, "getExclusiveQueuedThreads", "()", "", "Argument[this]", "ReturnValue", "taint", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedLongSynchronizer", True, "getFirstQueuedThread", "()", "", "Argument[this]", "ReturnValue", "taint", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedLongSynchronizer", True, "getQueuedThreads", "()", "", "Argument[this]", "ReturnValue", "taint", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedLongSynchronizer", True, "getSharedQueuedThreads", "()", "", "Argument[this]", "ReturnValue", "taint", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedLongSynchronizer", True, "getWaitingThreads", "(AbstractQueuedLongSynchronizer$ConditionObject)", "", "Argument[0]", "ReturnValue", "taint", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedSynchronizer", True, "getExclusiveQueuedThreads", "()", "", "Argument[this]", "ReturnValue", "taint", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedSynchronizer", True, "getFirstQueuedThread", "()", "", "Argument[this]", "ReturnValue", "taint", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedSynchronizer", True, "getQueuedThreads", "()", "", "Argument[this]", "ReturnValue", "taint", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedSynchronizer", True, "getSharedQueuedThreads", "()", "", "Argument[this]", "ReturnValue", "taint", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedSynchronizer", True, "getWaitingThreads", "(AbstractQueuedSynchronizer$ConditionObject)", "", "Argument[0]", "ReturnValue", "taint", "df-generated"]
      - ["java.util.concurrent.locks", "ReadWriteLock", True, "readLock", "()", "", "Argument[this]", "ReturnValue", "taint", "df-generated"]
      - ["java.util.concurrent.locks", "ReadWriteLock", True, "writeLock", "()", "", "Argument[this]", "ReturnValue", "taint", "df-generated"]
      - ["java.util.concurrent.locks", "StampedLock", True, "asReadLock", "()", "", "Argument[this]", "ReturnValue", "taint", "df-generated"]
      - ["java.util.concurrent.locks", "StampedLock", True, "asReadWriteLock", "()", "", "Argument[this]", "ReturnValue", "taint", "df-generated"]
      - ["java.util.concurrent.locks", "StampedLock", True, "asWriteLock", "()", "", "Argument[this]", "ReturnValue", "taint", "df-generated"]
  - addsTo:
      pack: codeql/java-all
      extensible: neutralModel
    data:
      - ["java.util.concurrent.locks", "AbstractQueuedLongSynchronizer", "acquire", "(long)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedLongSynchronizer", "acquireInterruptibly", "(long)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedLongSynchronizer", "acquireShared", "(long)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedLongSynchronizer", "acquireSharedInterruptibly", "(long)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedLongSynchronizer", "getQueueLength", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedLongSynchronizer", "getWaitQueueLength", "(AbstractQueuedLongSynchronizer$ConditionObject)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedLongSynchronizer", "hasContended", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedLongSynchronizer", "hasQueuedPredecessors", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedLongSynchronizer", "hasQueuedThreads", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedLongSynchronizer", "hasWaiters", "(AbstractQueuedLongSynchronizer$ConditionObject)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedLongSynchronizer", "isQueued", "(Thread)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedLongSynchronizer", "owns", "(AbstractQueuedLongSynchronizer$ConditionObject)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedLongSynchronizer", "release", "(long)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedLongSynchronizer", "releaseShared", "(long)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedLongSynchronizer", "tryAcquireNanos", "(long,long)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedLongSynchronizer", "tryAcquireSharedNanos", "(long,long)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedSynchronizer", "acquire", "(int)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedSynchronizer", "acquireInterruptibly", "(int)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedSynchronizer", "acquireShared", "(int)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedSynchronizer", "acquireSharedInterruptibly", "(int)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedSynchronizer", "getQueueLength", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedSynchronizer", "getWaitQueueLength", "(AbstractQueuedSynchronizer$ConditionObject)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedSynchronizer", "hasContended", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedSynchronizer", "hasQueuedPredecessors", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedSynchronizer", "hasQueuedThreads", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedSynchronizer", "hasWaiters", "(AbstractQueuedSynchronizer$ConditionObject)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedSynchronizer", "isQueued", "(Thread)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedSynchronizer", "owns", "(AbstractQueuedSynchronizer$ConditionObject)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedSynchronizer", "release", "(int)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedSynchronizer", "releaseShared", "(int)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedSynchronizer", "tryAcquireNanos", "(int,long)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "AbstractQueuedSynchronizer", "tryAcquireSharedNanos", "(int,long)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "Condition", "await", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "Condition", "await", "(long,TimeUnit)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "Condition", "awaitNanos", "(long)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "Condition", "awaitUninterruptibly", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "Condition", "awaitUntil", "(Date)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "Condition", "signal", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "Condition", "signalAll", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "Lock", "lock", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "Lock", "lockInterruptibly", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "Lock", "newCondition", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "Lock", "tryLock", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "Lock", "tryLock", "(long,TimeUnit)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "Lock", "unlock", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "LockSupport", "getBlocker", "(Thread)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "LockSupport", "park", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "LockSupport", "park", "(Object)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "LockSupport", "parkNanos", "(Object,long)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "LockSupport", "parkNanos", "(long)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "LockSupport", "parkUntil", "(Object,long)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "LockSupport", "parkUntil", "(long)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "LockSupport", "setCurrentBlocker", "(Object)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "LockSupport", "unpark", "(Thread)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "ReentrantLock", "ReentrantLock", "(boolean)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "ReentrantLock", "getHoldCount", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "ReentrantLock", "getQueueLength", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "ReentrantLock", "getWaitQueueLength", "(Condition)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "ReentrantLock", "hasQueuedThread", "(Thread)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "ReentrantLock", "hasQueuedThreads", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "ReentrantLock", "hasWaiters", "(Condition)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "ReentrantLock", "isFair", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "ReentrantLock", "isHeldByCurrentThread", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "ReentrantLock", "isLocked", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "ReentrantReadWriteLock$WriteLock", "getHoldCount", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "ReentrantReadWriteLock$WriteLock", "isHeldByCurrentThread", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "ReentrantReadWriteLock", "ReentrantReadWriteLock", "(boolean)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "ReentrantReadWriteLock", "getQueueLength", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "ReentrantReadWriteLock", "getReadHoldCount", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "ReentrantReadWriteLock", "getReadLockCount", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "ReentrantReadWriteLock", "getWaitQueueLength", "(Condition)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "ReentrantReadWriteLock", "getWriteHoldCount", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "ReentrantReadWriteLock", "hasQueuedThread", "(Thread)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "ReentrantReadWriteLock", "hasQueuedThreads", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "ReentrantReadWriteLock", "hasWaiters", "(Condition)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "ReentrantReadWriteLock", "isFair", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "ReentrantReadWriteLock", "isWriteLocked", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "ReentrantReadWriteLock", "isWriteLockedByCurrentThread", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "StampedLock", "getReadLockCount", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "StampedLock", "isLockStamp", "(long)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "StampedLock", "isOptimisticReadStamp", "(long)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "StampedLock", "isReadLockStamp", "(long)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "StampedLock", "isReadLocked", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "StampedLock", "isWriteLockStamp", "(long)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "StampedLock", "isWriteLocked", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "StampedLock", "readLock", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "StampedLock", "readLockInterruptibly", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "StampedLock", "tryConvertToOptimisticRead", "(long)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "StampedLock", "tryConvertToReadLock", "(long)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "StampedLock", "tryConvertToWriteLock", "(long)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "StampedLock", "tryOptimisticRead", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "StampedLock", "tryReadLock", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "StampedLock", "tryReadLock", "(long,TimeUnit)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "StampedLock", "tryUnlockRead", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "StampedLock", "tryUnlockWrite", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "StampedLock", "tryWriteLock", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "StampedLock", "tryWriteLock", "(long,TimeUnit)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "StampedLock", "unlock", "(long)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "StampedLock", "unlockRead", "(long)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "StampedLock", "unlockWrite", "(long)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "StampedLock", "validate", "(long)", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "StampedLock", "writeLock", "()", "summary", "df-generated"]
      - ["java.util.concurrent.locks", "StampedLock", "writeLockInterruptibly", "()", "summary", "df-generated"]

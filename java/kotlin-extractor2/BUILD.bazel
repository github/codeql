load("@rules_kotlin//kotlin:core.bzl", "kt_javac_options", "kt_kotlinc_options")
load("@rules_kotlin//kotlin:jvm.bzl", "kt_jvm_library")
load("//misc/bazel:pkg.bzl", "codeql_pkg_files")

kt_javac_options(
    name = "javac-options",
    # if needed, see https://bazelbuild.github.io/rules_kotlin/kotlin.html#kt_javac_options for available options
)

kt_kotlinc_options(
    name = "kotlinc-options",
    x_context_receivers = True,
    # if needed, see https://bazelbuild.github.io/rules_kotlin/kotlin.html#kt_kotlinc_options for available options
)

py_binary(
    name = "generate_dbscheme",
    srcs = ["generate_dbscheme.py"],
)
genrule(
    name = "generated-dbscheme",
    srcs = ["@codeql//java:dbscheme"],
    outs = ["KotlinExtractorDbScheme.kt"],
    cmd = "$(execpath :generate_dbscheme) $< $@",
    tools = [":generate_dbscheme"],
)

kt_jvm_library(
    name = "ke2-kt",
    srcs = [
        ":generated-dbscheme",
        "src/main/java/com/semmle/util/unicode/UTF8Util.java",
    ] + glob(["src/main/kotlin/**/*.kt"]),
    javac_opts = ":javac-options",
    kotlinc_opts = ":kotlinc-options",
    module_name = "codeql-kotlin-extractor2",
    deps = [
        "@maven_deps//:org_jetbrains_kotlin_%s" % kotlin_lib
        for kotlin_lib in (
            "kotlin_annotation_processing",
            "kotlin_compiler",
        )
    ],
)

java_binary(
    name = "ke2-java",
    runtime_deps = [":ke2-kt"],
)

codeql_pkg_files(
    name = "kotlin-extractor2",
    srcs = [
        ":ke2-java_deploy.jar",
    ],
    exes = [
        "ke2.sh",
        "ke2.cmd",
    ],
    renames = {
        "ke2.sh": "ke2",
        ":ke2-java_deploy.jar": "ke2.jar",
    },
    visibility = ["//visibility:public"],
)

// generated by {{generator}} from {{source}}
// clang-format off
#pragma once

#include <iostream>
#include <optional>
#include <vector>

#include "{{trap_library}}/TrapLabel.h"
#include "{{trap_library}}/TrapTagTraits.h"
#include "./TrapEntries.h"
{{#include_parent}}
#include "../TrapClasses.h"
{{/include_parent}}

namespace codeql {
{{#classes}}

struct {{name}}{{#has_bases}} : {{#bases}}{{^first}}, {{/first}}{{ref.name}}{{/bases}}{{/has_bases}} {
  static constexpr const char* NAME = "{{name}}";

  {{#final}}
  explicit {{name}}(TrapLabel<{{name}}Tag> id) : id{id} {}

  TrapLabel<{{name}}Tag> id{};
  {{/final}}
  {{#fields}}
  {{type}} {{field_name}}{};
  {{/fields}}
  {{#final}}

  friend std::ostream& operator<<(std::ostream& out, const {{name}}& x) {
    x.emit(out);
    return out;
  }
  {{/final}}

 {{^final}}
 protected:
 {{/final}}
  template <typename F>
  void forEachLabel(F f) {
    {{#final}}
    f("id", -1, id);
    {{/final}}
    {{#bases}}
    {{ref.name}}::forEachLabel(f);
    {{/bases}}
    {{#fields}}
    {{#is_label}}
    {{#is_repeated}}
    for (auto i = 0u; i < {{field_name}}.size(); ++i) {
      {{#is_optional}}
      if ({{field_name}}[i]) f("{{field_name}}", i, *{{field_name}}[i]);
      {{/is_optional}}
      {{^is_optional}}
      f("{{field_name}}", i, {{field_name}}[i]);
      {{/is_optional}}
    }
    {{/is_repeated}}
    {{^is_repeated}}
    {{#is_optional}}
    if ({{field_name}}) f("{{field_name}}", -1, *{{field_name}});
    {{/is_optional}}
    {{^is_optional}}
    f("{{field_name}}", -1, {{field_name}});
    {{/is_optional}}
    {{/is_repeated}}
    {{/is_label}}
    {{/fields}}
  }

 protected:
  void emit({{^final}}TrapLabel<{{name}}Tag> id, {{/final}}std::ostream& out) const;
};

template <>
struct detail::ToTrapClassFunctor<{{name}}Tag> {
  using type = {{name}};
};
{{/classes}}
}

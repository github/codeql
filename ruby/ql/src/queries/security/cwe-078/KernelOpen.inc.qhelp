<!DOCTYPE qhelp PUBLIC
  "-//Semmle//qhelp//EN"
  "qhelp.dtd">
<qhelp>
<overview>
<p>If <code>Kernel.open</code> is given a file name that starts with a <code>|</code>
character, it will execute the remaining string as a shell command. If a
malicious user can control the file name, they can execute arbitrary code.
The same vulnerability applies to <code>IO.read</code>, <code>IO.write</code>,
<code>IO.binread</code>, <code>IO.binwrite</code>, <code>IO.foreach</code>,
<code>IO.readlines</code> and <code>URI.open</code>.
</p>

</overview>
<recommendation>

<p>Use <code>File.open</code> instead of <code>Kernel.open</code>, as the former
does not have this vulnerability. Similarly, use the methods from the <code>File</code>
class instead of the <code>IO</code> class e.g. <code>File.read</code> instead
of <code>IO.read</code>.</p>
<p>Instead of <code>URI.open</code> use <code>URI(..).open</code> or an HTTP Client.</p>

</recommendation>
<example>

<p>
The following example shows code that calls <code>Kernel.open</code> on a
user-supplied file path.
</p>

<sample src="examples/kernel_open.rb" />

<p>Instead, <code>File.open</code> should be used, as in the following example.</p>

<sample src="examples/file_open.rb" />

</example>
<references>

<li>
OWASP:
<a href="https://www.owasp.org/index.php/Command_Injection">Command Injection</a>.
<a href="https://cheatsheetseries.owasp.org/cheatsheets/Ruby_on_Rails_Cheat_Sheet.html#command-injection">Ruby on Rails Cheat Sheet: Command Injection</a>.
</li>

<li>
Example CVE: <a href="https://www.ruby-lang.org/en/news/2021/05/02/os-command-injection-in-rdoc/">Command Injection in RDoc</a>.
</li>

</references>
</qhelp>

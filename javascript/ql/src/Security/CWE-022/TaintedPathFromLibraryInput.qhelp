<!DOCTYPE qhelp PUBLIC
  "-//Semmle//qhelp//EN"
  "qhelp.dtd">
<qhelp>

<overview>
  <p>
    Accessing files using paths constructed from library input can allow an attacker to access unexpected
    resources of a project using the library. This can result in sensitive information being revealed
    or deleted, or an attacker being able to influence behavior by modifying unexpected files.
  </p>
</overview>

<recommendation>
  <p>
    Validate library input parameters before constructing file paths, either using an off-the-shelf library
    like the <code>sanitize-filename</code> npm package, or by performing custom validation.
  </p>

  <p>
    Ideally, follow these rules:
  </p>

  <ul>
    <li>Do not allow more than a single "." character.</li>
    <li>Do not allow directory separators such as "/" or "\" (depending on the file system).</li>
    <li>
      Do not rely on simply replacing problematic sequences such as "../". For example, after
      applying this filter to ".../...//", the resulting string would still be "../".
    </li>
    <li>Use a whitelist of known good patterns.</li>
    <li>
      When your intention is for a library parameter to refer to a path,
      express that by using a parameter name that ends with <code>Path</code>,
      <code>file</code>, <code>dir</code>, <code>root</code>, or by documenting 
      fact using an `@param` tag in the function's documentation.
    </li>
  </ul>
</recommendation>

<example>
  <p>
    In the first example, a file name is read from a path taken from library input. An
    unsuspecting developer could be using the library without thinking about how to sanitize
    input. This can lead to the developer's application being vulnerable to a path injection
    attack where the attacker can access unexpected files by supplying a "user name" like
    <code>"/etc/passwd"</code>.
  </p>

  <p>
    In the second example, it appears that the user is restricted to opening a file within the
    <code>"user-data"</code> directory. However, a malicious user could enter a file name containing
    special characters. For example, the string <code>"../../../etc/passwd"</code> will result in the code
    reading the file located at <code>"/home/user/user-data/../../../etc/passwd"</code>, which is the system's
    password file. This file would then be sent back to the user, giving them access to all the
    system's passwords.
  </p>

  <sample src="examples/TaintedPathFromLibraryInput.js" />
</example>

<references>
<li>OWASP: <a href="https://owasp.org/www-community/attacks/Path_Traversal">Path Traversal</a>.</li>
<li>npm: <a href="https://www.npmjs.com/package/sanitize-filename">sanitize-filename</a> package.</li>
</references>
</qhelp>

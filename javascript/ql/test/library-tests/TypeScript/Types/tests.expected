booleans
| boolean |
getExprType
| boolean-type.ts:1:13:1:17 | dummy | typeof library-tests/TypeScript/Types/dummy.ts |
| boolean-type.ts:1:24:1:32 | "./dummy" | any |
| boolean-type.ts:3:5:3:9 | true1 | true |
| boolean-type.ts:4:5:4:9 | true2 | true |
| boolean-type.ts:6:5:6:10 | false1 | false |
| boolean-type.ts:7:5:7:10 | false2 | false |
| boolean-type.ts:9:5:9:12 | boolean1 | boolean |
| boolean-type.ts:10:5:10:12 | boolean2 | boolean |
| boolean-type.ts:11:5:11:12 | boolean3 | boolean |
| boolean-type.ts:13:5:13:12 | boolean4 | boolean |
| boolean-type.ts:14:5:14:12 | boolean5 | boolean |
| boolean-type.ts:15:5:15:12 | boolean6 | boolean |
| dummy.ts:2:12:2:12 | x | number |
| dummy.ts:2:16:2:16 | 5 | 5 |
| dummy.ts:4:12:4:14 | reg | RegExp |
| dummy.ts:4:18:4:23 | /ab+c/ | RegExp |
| middle-rest.ts:1:5:1:7 | foo | [boolean, ...string[], number] |
| middle-rest.ts:3:1:3:3 | foo | [boolean, ...string[], number] |
| middle-rest.ts:3:1:3:26 | foo = [ ... ", 123] | [true, string, number] |
| middle-rest.ts:3:7:3:26 | [true, "hello", 123] | [boolean, ...string[], number] |
| middle-rest.ts:3:8:3:11 | true | true |
| middle-rest.ts:3:14:3:20 | "hello" | "hello" |
| middle-rest.ts:3:23:3:25 | 123 | 123 |
| tst.ts:1:13:1:17 | dummy | typeof library-tests/TypeScript/Types/dummy.ts |
| tst.ts:1:24:1:32 | "./dummy" | any |
| tst.ts:3:5:3:10 | numVar | number |
| tst.ts:5:5:5:8 | num1 | number |
| tst.ts:5:12:5:17 | numVar | number |
| tst.ts:6:5:6:8 | num2 | number |
| tst.ts:6:12:6:12 | 5 | 5 |
| tst.ts:7:5:7:8 | num3 | number |
| tst.ts:7:12:7:15 | num1 | number |
| tst.ts:7:12:7:22 | num1 + num2 | number |
| tst.ts:7:19:7:22 | num2 | number |
| tst.ts:9:5:9:10 | strVar | string |
| tst.ts:10:5:10:9 | hello | string |
| tst.ts:10:13:10:19 | "hello" | "hello" |
| tst.ts:11:5:11:9 | world | string |
| tst.ts:11:13:11:19 | "world" | "world" |
| tst.ts:12:5:12:7 | msg | string |
| tst.ts:12:11:12:15 | hello | string |
| tst.ts:12:11:12:21 | hello + " " | string |
| tst.ts:12:11:12:29 | hello + " " + world | string |
| tst.ts:12:19:12:21 | " " | " " |
| tst.ts:12:25:12:29 | world | string |
| tst.ts:14:10:14:15 | concat | (x: string, y: string) => string |
| tst.ts:14:17:14:17 | x | string |
| tst.ts:14:28:14:28 | y | string |
| tst.ts:14:56:14:56 | x | string |
| tst.ts:14:56:14:60 | x + y | string |
| tst.ts:14:60:14:60 | y | string |
| tst.ts:16:10:16:12 | add | (x: number, y: number) => number |
| tst.ts:16:14:16:14 | x | number |
| tst.ts:16:25:16:25 | y | number |
| tst.ts:16:53:16:53 | x | number |
| tst.ts:16:53:16:57 | x + y | number |
| tst.ts:16:57:16:57 | y | number |
| tst.ts:18:10:18:16 | untyped | (x: any, y: any) => any |
| tst.ts:18:18:18:18 | x | any |
| tst.ts:18:21:18:21 | y | any |
| tst.ts:18:33:18:33 | x | any |
| tst.ts:18:33:18:37 | x + y | any |
| tst.ts:18:37:18:37 | y | any |
| tst.ts:20:10:20:21 | partialTyped | (x: any, y: string) => string |
| tst.ts:20:23:20:23 | x | any |
| tst.ts:20:26:20:26 | y | string |
| tst.ts:20:46:20:46 | x | any |
| tst.ts:20:46:20:50 | x + y | string |
| tst.ts:20:50:20:50 | y | string |
| tst.ts:22:10:22:20 | numFromLoop | number |
| tst.ts:22:25:22:30 | [1, 2] | number[] |
| tst.ts:22:26:22:26 | 1 | 1 |
| tst.ts:22:29:22:29 | 2 | 2 |
| tst.ts:24:5:24:9 | array | number[] |
| tst.ts:26:5:26:12 | voidType | () => void |
| tst.ts:26:15:26:24 | () => void | () => void |
| tst.ts:27:5:27:17 | undefinedType | undefined |
| tst.ts:28:5:28:12 | nullType | null |
| tst.ts:29:5:29:13 | neverType | () => never |
| tst.ts:29:16:29:26 | () => never | () => never |
| tst.ts:30:5:30:14 | symbolType | symbol |
| tst.ts:31:7:31:22 | uniqueSymbolType | typeof uniqueSymbolType |
| tst.ts:32:5:32:14 | objectType | object |
| tst.ts:33:5:33:16 | intersection | string & { x: string; } |
| tst.ts:33:29:33:29 | x | string |
| tst.ts:34:5:34:9 | tuple | [number, string] |
| tst.ts:36:5:36:28 | tupleWi ... Element | [number, string, number?] |
| tst.ts:37:5:37:14 | emptyTuple | [] |
| tst.ts:38:5:38:24 | tupleWithRestElement | [number, ...string[]] |
| tst.ts:39:5:39:36 | tupleWi ... lements | [number, string?, ...number[]] |
| tst.ts:40:5:40:15 | unknownType | unknown |
| tst.ts:42:5:42:21 | constArrayLiteral | readonly [1, 2] |
| tst.ts:42:25:42:30 | [1, 2] | readonly [1, 2] |
| tst.ts:42:25:42:39 | [1, 2] as const | readonly [1, 2] |
| tst.ts:42:26:42:26 | 1 | 1 |
| tst.ts:42:29:42:29 | 2 | 2 |
| tst.ts:43:5:43:22 | constObjectLiteral | { readonly foo: "foo"; } |
| tst.ts:43:26:43:39 | { foo: "foo" } | { readonly foo: "foo"; } |
| tst.ts:43:26:43:48 | { foo:  ... s const | { readonly foo: "foo"; } |
| tst.ts:43:28:43:30 | foo | "foo" |
| tst.ts:43:33:43:37 | "foo" | "foo" |
| tst.ts:47:8:47:8 | e | unknown |
| tst.ts:48:7:48:14 | typeof e | "string" \| "number" \| "bigint" \| "boolean" \| "s... |
| tst.ts:48:7:48:27 | typeof  ... string" | boolean |
| tst.ts:48:14:48:14 | e | unknown |
| tst.ts:48:20:48:27 | "string" | "string" |
| tst.ts:49:11:49:11 | b | string |
| tst.ts:49:24:49:24 | e | string |
| tst.ts:55:3:55:9 | getArea | () => number |
| tst.ts:55:3:55:20 | getArea(): number; | () => number |
| tst.ts:59:3:59:9 | getArea | () => number |
| tst.ts:59:3:59:20 | getArea(): number; | () => number |
| tst.ts:63:5:63:8 | Ctor | abstract new () => HasArea |
| tst.ts:63:11:63:36 | abstrac ... HasArea | abstract new () => HasArea |
| tst.ts:63:40:63:44 | Shape | any |
| tst.ts:65:17:65:23 | myUnion | true |
| tst.ts:65:35:65:46 | stillMyUnion | true |
| tst.ts:66:5:66:10 | union1 | MyUnion |
| tst.ts:66:23:66:37 | {myUnion: true} | MyUnion |
| tst.ts:66:24:66:30 | myUnion | true |
| tst.ts:66:33:66:36 | true | true |
| tst.ts:68:28:68:41 | yetAnotherType | true |
| tst.ts:69:5:69:10 | union2 | MyUnion2 |
| tst.ts:69:24:69:45 | {yetAno ... : true} | MyUnion2 |
| tst.ts:69:25:69:38 | yetAnotherType | true |
| tst.ts:69:41:69:44 | true | true |
| tst.ts:71:8:71:11 | TS43 | typeof TS43 in library-tests/TypeScript/Types/tst.ts |
| tst.ts:74:5:74:22 | get size(): number | number |
| tst.ts:74:9:74:12 | size | number |
| tst.ts:75:5:75:47 | set siz ... olean); | number |
| tst.ts:75:9:75:12 | size | number |
| tst.ts:75:14:75:18 | value | string \| number \| boolean |
| tst.ts:78:16:78:20 | Thing | Thing |
| tst.ts:79:13:79:13 | 0 | 0 |
| tst.ts:81:5:83:5 | get siz ... ;\\n    } | number |
| tst.ts:81:9:81:12 | size | number |
| tst.ts:82:14:82:23 | this.#size | number |
| tst.ts:85:5:87:5 | set siz ... ;\\n    } | number |
| tst.ts:85:9:85:12 | size | number |
| tst.ts:85:14:85:18 | value | string \| number \| boolean |
| tst.ts:86:7:86:16 | this.#size | number |
| tst.ts:86:7:86:32 | this.#s ... (value) | number |
| tst.ts:86:20:86:25 | Number | NumberConstructor |
| tst.ts:86:20:86:32 | Number(value) | number |
| tst.ts:86:27:86:31 | value | string \| number \| boolean |
| tst.ts:91:9:91:13 | Super | Super |
| tst.ts:92:5:92:10 | random | () => number |
| tst.ts:92:5:94:5 | random( ... ;\\n    } | () => number |
| tst.ts:93:14:93:14 | 4 | 4 |
| tst.ts:97:9:97:11 | Sub | Sub |
| tst.ts:97:21:97:25 | Super | Super |
| tst.ts:98:5:100:5 | overrid ... ;\\n    } | () => number |
| tst.ts:98:14:98:19 | random | () => number |
| tst.ts:99:14:99:25 | super.random | () => number |
| tst.ts:99:14:99:27 | super.random() | number |
| tst.ts:99:14:99:32 | super.random() * 10 | number |
| tst.ts:99:20:99:25 | random | () => number |
| tst.ts:99:31:99:32 | 10 | 10 |
| tst.ts:104:16:104:16 | s | string |
| tst.ts:106:13:106:18 | hello  | any |
| tst.ts:106:21:106:21 | s | string |
| tst.ts:110:15:110:16 | s2 | "1-2-3" |
| tst.ts:112:3:112:9 | s1 = s2 | "1-2-3" |
| tst.ts:112:8:112:9 | s2 | "1-2-3" |
| tst.ts:116:9:116:11 | Foo | Foo |
| tst.ts:117:5:119:5 | #someMe ... ;\\n    } | () => number |
| tst.ts:118:14:118:15 | 42 | 42 |
| tst.ts:121:5:123:5 | get #so ... ;\\n    } | number |
| tst.ts:122:14:122:16 | 100 | 100 |
| tst.ts:125:5:125:16 | publicMethod | () => number |
| tst.ts:125:5:128:5 | publicM ... ;\\n    } | () => number |
| tst.ts:126:7:126:22 | this.#someMethod | () => number |
| tst.ts:126:7:126:24 | this.#someMethod() | number |
| tst.ts:127:14:127:28 | this.#someValue | number |
| tst.ts:132:8:132:11 | TS44 | typeof TS44 in library-tests/TypeScript/Types/tst.ts |
| tst.ts:133:12:133:14 | foo | (arg: unknown) => void |
| tst.ts:133:16:133:18 | arg | unknown |
| tst.ts:134:11:134:21 | argIsString | boolean |
| tst.ts:134:25:134:34 | typeof arg | "string" \| "number" \| "bigint" \| "boolean" \| "s... |
| tst.ts:134:25:134:47 | typeof  ... string" | boolean |
| tst.ts:134:32:134:34 | arg | unknown |
| tst.ts:134:40:134:47 | "string" | "string" |
| tst.ts:135:9:135:19 | argIsString | boolean |
| tst.ts:136:15:136:19 | upper | string |
| tst.ts:136:23:136:25 | arg | string |
| tst.ts:136:23:136:37 | arg.toUpperCase | () => string |
| tst.ts:136:23:136:39 | arg.toUpperCase() | string |
| tst.ts:136:27:136:37 | toUpperCase | () => string |
| tst.ts:141:11:141:14 | kind | "circle" |
| tst.ts:141:27:141:32 | radius | number |
| tst.ts:142:11:142:14 | kind | "square" |
| tst.ts:142:27:142:36 | sideLength | number |
| tst.ts:144:12:144:15 | side | (shape: Shape) => number |
| tst.ts:144:17:144:21 | shape | Shape |
| tst.ts:145:15:145:18 | kind | "circle" \| "square" |
| tst.ts:145:15:145:18 | kind | "circle" \| "square" |
| tst.ts:145:24:145:28 | shape | Shape |
| tst.ts:147:11:147:14 | kind | "circle" \| "square" |
| tst.ts:147:11:147:27 | kind === "circle" | boolean |
| tst.ts:147:20:147:27 | "circle" | "circle" |
| tst.ts:147:39:147:43 | shape | { kind: "circle"; radius: number; } |
| tst.ts:147:39:147:50 | shape.radius | number |
| tst.ts:147:45:147:50 | radius | number |
| tst.ts:148:21:148:25 | shape | { kind: "square"; sideLength: number; } |
| tst.ts:148:21:148:36 | shape.sideLength | number |
| tst.ts:148:27:148:36 | sideLength | number |
| tst.ts:151:12:151:22 | symbolIndex | () => void |
| tst.ts:153:7:153:28 | [sym: s ... number; | any |
| tst.ts:153:8:153:10 | sym | symbol |
| tst.ts:154:7:154:28 | [key: s ... string; | any |
| tst.ts:154:8:154:10 | key | string |
| tst.ts:155:7:155:29 | [num: n ... oolean; | any |
| tst.ts:155:8:155:10 | num | number |
| tst.ts:158:9:158:14 | colors | Colors |
| tst.ts:158:26:158:27 | {} | Colors |
| tst.ts:159:11:159:13 | red | number |
| tst.ts:159:17:159:22 | colors | Colors |
| tst.ts:159:17:159:37 | colors[ ... "red")] | number |
| tst.ts:159:24:159:29 | Symbol | SymbolConstructor |
| tst.ts:159:24:159:36 | Symbol("red") | symbol |
| tst.ts:159:31:159:35 | "red" | "red" |
| tst.ts:160:11:160:15 | green | string |
| tst.ts:160:19:160:24 | colors | Colors |
| tst.ts:160:19:160:33 | colors["green"] | string |
| tst.ts:160:26:160:32 | "green" | "green" |
| tst.ts:161:11:161:14 | blue | boolean |
| tst.ts:161:18:161:23 | colors | Colors |
| tst.ts:161:18:161:26 | colors[2] | boolean |
| tst.ts:161:25:161:25 | 2 | 2 |
| tst.ts:164:12:164:29 | stringPatternIndex | () => void |
| tst.ts:166:7:166:37 | [key: ` ... number; | any |
| tst.ts:168:9:168:11 | bla | Foo |
| tst.ts:168:21:168:22 | {} | Foo |
| tst.ts:169:11:169:13 | bar | number |
| tst.ts:169:17:169:19 | bla | Foo |
| tst.ts:169:17:169:28 | bla[`foo-1`] | number |
| tst.ts:169:21:169:27 | `foo-1` | "foo-1" |
| tst.ts:169:21:169:27 | `foo-1` | "foo-1" |
| tst.ts:172:7:172:42 | [optNam ... oolean; | any |
| tst.ts:172:8:172:14 | optName | string \| symbol |
| tst.ts:175:11:175:14 | data | Data |
| tst.ts:175:24:175:25 | {} | Data |
| tst.ts:176:11:176:13 | baz | boolean |
| tst.ts:176:17:176:20 | data | Data |
| tst.ts:176:17:176:27 | data["foo"] | boolean |
| tst.ts:176:22:176:26 | "foo" | "foo" |
| tst.ts:179:9:179:11 | Foo | Foo |
| tst.ts:180:21:180:21 | 0 | 0 |
| tst.ts:182:5:184:5 | get cou ... ;\\n    } | number |
| tst.ts:182:9:182:13 | count | number |
| tst.ts:183:16:183:18 | Foo | typeof Foo in tst.ts:132 |
| tst.ts:183:16:183:25 | Foo.#count | number |
| tst.ts:186:7:186:9 | Foo | typeof Foo in tst.ts:132 |
| tst.ts:186:7:186:16 | Foo.#count | number |
| tst.ts:186:7:186:21 | Foo.#count += 3 | number |
| tst.ts:186:21:186:21 | 3 | 3 |
| tst.ts:189:11:189:15 | count | number |
| tst.ts:189:19:189:21 | Foo | typeof Foo in tst.ts:132 |
| tst.ts:189:19:189:28 | Foo.#count | number |
| tst.ts:195:8:195:11 | TS45 | typeof TS45 in library-tests/TypeScript/Types/tst.ts |
| tst.ts:207:5:207:8 | body | string |
| tst.ts:212:7:212:13 | message | string |
| tst.ts:215:19:215:25 | handler | (r: Success \| Error) => void |
| tst.ts:215:27:215:27 | r | Success \| Error |
| tst.ts:216:11:216:11 | r | Success \| Error |
| tst.ts:216:11:216:34 | r.type  ... uccess" | boolean |
| tst.ts:216:22:216:34 | "HttpSuccess" | "HttpSuccess" |
| tst.ts:218:15:218:19 | token | string |
| tst.ts:218:23:218:23 | r | Success |
| tst.ts:218:23:218:28 | r.body | string |
| tst.ts:218:25:218:28 | body | string |
| tst.ts:222:9:222:14 | Person | Person |
| tst.ts:224:5:226:5 | constru ... ;\\n    } | any |
| tst.ts:224:17:224:20 | name | string |
| tst.ts:225:9:225:18 | this.#name | string |
| tst.ts:225:9:225:25 | this.#name = name | string |
| tst.ts:225:22:225:25 | name | string |
| tst.ts:228:5:228:10 | equals | (other: unknown) => boolean |
| tst.ts:228:5:233:5 | equals( ... .\\n    } | (other: unknown) => boolean |
| tst.ts:228:12:228:16 | other | unknown |
| tst.ts:229:16:229:20 | other | unknown |
| tst.ts:229:16:230:37 | other & ... object" | boolean |
| tst.ts:229:16:231:26 | other & ... n other | boolean |
| tst.ts:229:16:232:38 | other & ... r.#name | boolean |
| tst.ts:230:13:230:24 | typeof other | "string" \| "number" \| "bigint" \| "boolean" \| "s... |
| tst.ts:230:13:230:37 | typeof  ... object" | boolean |
| tst.ts:230:20:230:24 | other | unknown |
| tst.ts:230:30:230:37 | "object" | "object" |
| tst.ts:231:13:231:26 | #name in other | boolean |
| tst.ts:231:22:231:26 | other | object |
| tst.ts:232:13:232:22 | this.#name | string |
| tst.ts:232:13:232:38 | this.#n ... r.#name | boolean |
| tst.ts:232:28:232:32 | other | Person |
| tst.ts:232:28:232:38 | other.#name | string |
| tst.ts:237:13:237:16 | Foo3 | { foo: string; } |
| tst.ts:237:23:237:40 | "./something.json" | any |
| tst.ts:238:5:238:7 | foo | string |
| tst.ts:238:11:238:14 | Foo3 | { foo: string; } |
| tst.ts:238:11:238:18 | Foo3.foo | string |
| tst.ts:238:16:238:18 | foo | string |
| tst.ts:240:8:240:11 | TS46 | typeof TS46 in library-tests/TypeScript/Types/tst.ts |
| tst.ts:241:9:241:12 | Base | Base |
| tst.ts:243:9:243:15 | Derived | Derived |
| tst.ts:243:25:243:28 | Base | Base |
| tst.ts:244:5:244:10 | myProp | boolean |
| tst.ts:244:14:244:17 | true | true |
| tst.ts:246:5:249:5 | constru ... ;\\n    } | any |
| tst.ts:247:7:247:13 | console | Console |
| tst.ts:247:7:247:17 | console.log | (...data: any[]) => void |
| tst.ts:247:7:247:51 | console ... per()") | void |
| tst.ts:247:15:247:17 | log | (...data: any[]) => void |
| tst.ts:247:19:247:50 | "Doing  ... uper()" | "Doing something before super()" |
| tst.ts:248:7:248:13 | super() | void |
| tst.ts:253:9:253:12 | kind | "NumberContents" |
| tst.ts:253:33:253:39 | payload | number |
| tst.ts:254:9:254:12 | kind | "StringContents" |
| tst.ts:254:33:254:39 | payload | string |
| tst.ts:256:12:256:24 | processAction | (action: Action) => void |
| tst.ts:256:26:256:31 | action | Action |
| tst.ts:257:13:257:16 | kind | "NumberContents" \| "StringContents" |
| tst.ts:257:13:257:16 | kind | "NumberContents" \| "StringContents" |
| tst.ts:257:19:257:25 | payload | string \| number |
| tst.ts:257:19:257:25 | payload | string \| number |
| tst.ts:257:31:257:36 | action | Action |
| tst.ts:258:9:258:12 | kind | "NumberContents" \| "StringContents" |
| tst.ts:258:9:258:33 | kind == ... ntents" | boolean |
| tst.ts:258:18:258:33 | "NumberContents" | "NumberContents" |
| tst.ts:259:7:259:13 | console | Console |
| tst.ts:259:7:259:17 | console.log | (...data: any[]) => void |
| tst.ts:259:7:259:36 | console ... ixed()) | void |
| tst.ts:259:15:259:17 | log | (...data: any[]) => void |
| tst.ts:259:19:259:25 | payload | number |
| tst.ts:259:19:259:33 | payload.toFixed | (fractionDigits?: number) => string |
| tst.ts:259:19:259:35 | payload.toFixed() | string |
| tst.ts:259:27:259:33 | toFixed | (fractionDigits?: number) => string |
| tst.ts:260:16:260:19 | kind | "StringContents" |
| tst.ts:260:16:260:40 | kind == ... ntents" | boolean |
| tst.ts:260:25:260:40 | "StringContents" | "StringContents" |
| tst.ts:261:7:261:13 | console | Console |
| tst.ts:261:7:261:17 | console.log | (...data: any[]) => void |
| tst.ts:261:7:261:40 | console ... Case()) | void |
| tst.ts:261:15:261:17 | log | (...data: any[]) => void |
| tst.ts:261:19:261:25 | payload | string |
| tst.ts:261:19:261:37 | payload.toLowerCase | () => string |
| tst.ts:261:19:261:39 | payload ... rCase() | string |
| tst.ts:261:27:261:37 | toLowerCase | () => string |
| tst.ts:266:5:266:10 | number | number |
| tst.ts:267:5:267:10 | string | string |
| tst.ts:268:5:268:11 | boolean | boolean |
| tst.ts:273:7:273:10 | kind | K |
| tst.ts:278:12:278:24 | processRecord | <K extends keyof TypeMap>(record: UnionRecord<K... |
| tst.ts:278:51:278:56 | record | UnionRecord<K> |
| tst.ts:279:5:279:10 | record | UnionRecord<K> |
| tst.ts:279:5:279:22 | record.f(record.v) | void |
| tst.ts:279:14:279:19 | record | UnionRecord<K> |
| tst.ts:279:14:279:21 | record.v | any |
| tst.ts:279:21:279:21 | v | any |
| tst.ts:282:3:282:15 | processRecord | <K extends keyof TypeMap>(record: UnionRecord<K... |
| tst.ts:282:3:287:4 | process ... },\\n  }) | void |
| tst.ts:282:17:287:3 | {\\n    k ...  },\\n  } | { kind: "string"; f: (p: string) => void; } |
| tst.ts:283:5:283:8 | kind | "string" |
| tst.ts:283:11:283:18 | "string" | "string" |
| tst.ts:284:5:284:5 | f | (val: string) => void |
| tst.ts:284:8:286:5 | (val) = ... g\\n    } | (val: string) => void |
| tst.ts:284:9:284:11 | val | string |
| tst.ts:285:7:285:13 | console | Console |
| tst.ts:285:7:285:17 | console.log | (...data: any[]) => void |
| tst.ts:285:7:285:36 | console ... Case()) | void |
| tst.ts:285:15:285:17 | log | (...data: any[]) => void |
| tst.ts:285:19:285:21 | val | string |
| tst.ts:285:19:285:33 | val.toUpperCase | () => string |
| tst.ts:285:19:285:35 | val.toUpperCase() | string |
| tst.ts:285:23:285:33 | toUpperCase | () => string |
| tst.ts:289:19:289:22 | args | ["a", number] \| ["b", string] |
| tst.ts:291:9:291:10 | f1 | Func |
| tst.ts:291:20:295:3 | (kind,  ...   }\\n  } | (kind: "a" \| "b", payload: string \| number) => ... |
| tst.ts:291:21:291:24 | kind | "a" \| "b" |
| tst.ts:291:27:291:33 | payload | string \| number |
| tst.ts:292:9:292:12 | kind | "a" \| "b" |
| tst.ts:292:9:292:20 | kind === "a" | boolean |
| tst.ts:292:18:292:20 | "a" | "a" |
| tst.ts:293:7:293:13 | payload | number |
| tst.ts:293:7:293:21 | payload.toFixed | (fractionDigits?: number) => string |
| tst.ts:293:7:293:23 | payload.toFixed() | string |
| tst.ts:293:15:293:21 | toFixed | (fractionDigits?: number) => string |
| type_alias.ts:3:5:3:5 | b | boolean |
| type_alias.ts:7:5:7:5 | c | ValueOrArray<number> |
| type_alias.ts:14:9:14:32 | [proper ... ]: Json | any |
| type_alias.ts:14:10:14:17 | property | string |
| type_alias.ts:17:5:17:8 | json | Json |
| type_alias.ts:21:18:21:35 | [key: string]: any | any |
| type_alias.ts:21:19:21:21 | key | string |
| type_alias.ts:23:7:23:12 | myNode | VirtualNode |
| type_alias.ts:24:5:27:5 | ["div", ... ]\\n    ] | VirtualNode |
| type_alias.ts:24:6:24:10 | "div" | "div" |
| type_alias.ts:24:13:24:28 | { id: "parent" } | string \| { [key: string]: any; } |
| type_alias.ts:24:15:24:16 | id | string |
| type_alias.ts:24:19:24:26 | "parent" | "parent" |
| type_alias.ts:25:9:25:61 | ["div", ... child"] | VirtualNode |
| type_alias.ts:25:10:25:14 | "div" | "div" |
| type_alias.ts:25:17:25:37 | { id: " ... hild" } | string \| { [key: string]: any; } |
| type_alias.ts:25:19:25:20 | id | string |
| type_alias.ts:25:23:25:35 | "first-child" | "first-child" |
| type_alias.ts:25:40:25:60 | "I'm th ...  child" | "I'm the first child" |
| type_alias.ts:26:9:26:63 | ["div", ... child"] | VirtualNode |
| type_alias.ts:26:10:26:14 | "div" | "div" |
| type_alias.ts:26:17:26:38 | { id: " ... hild" } | string \| { [key: string]: any; } |
| type_alias.ts:26:19:26:20 | id | string |
| type_alias.ts:26:23:26:36 | "second-child" | "second-child" |
| type_alias.ts:26:41:26:62 | "I'm th ...  child" | "I'm the second child" |
| type_definition_objects.ts:1:13:1:17 | dummy | typeof library-tests/TypeScript/Types/dummy.ts |
| type_definition_objects.ts:1:24:1:32 | "./dummy" | any |
| type_definition_objects.ts:3:14:3:14 | C | C |
| type_definition_objects.ts:4:5:4:12 | classObj | typeof C in library-tests/TypeScript/Types/type_definition_objects.ts |
| type_definition_objects.ts:4:16:4:16 | C | typeof C in library-tests/TypeScript/Types/type_definition_objects.ts |
| type_definition_objects.ts:6:13:6:13 | E | E |
| type_definition_objects.ts:7:5:7:11 | enumObj | typeof E in library-tests/TypeScript/Types/type_definition_objects.ts |
| type_definition_objects.ts:7:15:7:15 | E | typeof E in library-tests/TypeScript/Types/type_definition_objects.ts |
| type_definition_objects.ts:9:18:9:18 | N | typeof N in library-tests/TypeScript/Types/type_definition_objects.ts |
| type_definition_objects.ts:10:5:10:16 | namespaceObj | typeof N in library-tests/TypeScript/Types/type_definition_objects.ts |
| type_definition_objects.ts:10:20:10:20 | N | typeof N in library-tests/TypeScript/Types/type_definition_objects.ts |
| type_definitions.ts:1:13:1:17 | dummy | typeof library-tests/TypeScript/Types/dummy.ts |
| type_definitions.ts:1:24:1:32 | "./dummy" | any |
| type_definitions.ts:4:3:4:3 | x | S |
| type_definitions.ts:6:5:6:5 | i | I<number> |
| type_definitions.ts:8:7:8:7 | C | C<T> |
| type_definitions.ts:9:3:9:3 | x | T |
| type_definitions.ts:11:5:11:5 | c | C<number> |
| type_definitions.ts:13:6:13:10 | Color | Color |
| type_definitions.ts:16:5:16:9 | color | Color |
| type_definitions.ts:18:6:18:22 | EnumWithOneMember | EnumWithOneMember |
| type_definitions.ts:19:5:19:5 | e | EnumWithOneMember |
| type_definitions.ts:22:5:22:23 | aliasForNumberArray | Alias<number> |
getTypeDefinitionType
| tst.ts:54:1:56:1 | interfa ... mber;\\n} | NonAbstractDummy |
| tst.ts:58:1:60:1 | interfa ... mber;\\n} | HasArea |
| tst.ts:65:1:65:54 | type My ...  true}; | MyUnion |
| tst.ts:68:1:68:49 | type My ...  true}; | MyUnion2 |
| tst.ts:73:3:76:3 | interfa ... n);\\n  } | ThingI |
| tst.ts:78:10:88:3 | class T ...   }\\n  } | Thing |
| tst.ts:91:3:95:3 | class S ...   }\\n  } | Super |
| tst.ts:97:3:101:3 | class S ...   }\\n  } | Sub |
| tst.ts:116:3:129:3 | class F ...   }\\n  } | Foo |
| tst.ts:140:3:142:47 | type Sh ... mber }; | Shape |
| tst.ts:152:5:156:5 | interfa ... ;\\n    } | Colors |
| tst.ts:165:5:167:5 | interfa ... ;\\n    } | Foo |
| tst.ts:171:5:173:5 | interfa ... ;\\n    } | Data |
| tst.ts:179:3:192:3 | class F ...    \\n  } | Foo |
| tst.ts:197:3:197:36 | type A  ... ring>>; | string |
| tst.ts:200:3:200:45 | type B  ... ber>>>; | number |
| tst.ts:203:3:203:46 | type C  ... mber>>; | C |
| tst.ts:205:10:208:3 | interfa ... ng;\\n  } | Success |
| tst.ts:210:10:213:3 | interfa ... ng;\\n  } | Error |
| tst.ts:222:3:234:3 | class P ...   }\\n  } | Person |
| tst.ts:241:3:241:15 | class Base {} | Base |
| tst.ts:243:3:250:3 | class D ...   }\\n  } | Derived |
| tst.ts:252:3:254:50 | type Ac ... ring }; | Action |
| tst.ts:265:3:269:3 | interfa ... an;\\n  } | TypeMap |
| tst.ts:271:3:276:7 | type Un ...   }[P]; | UnionRecord<P> |
| tst.ts:289:3:289:63 | type Fu ... > void; | Func |
| type_alias.ts:1:1:1:17 | type B = boolean; | boolean |
| type_alias.ts:5:1:5:50 | type Va ... ay<T>>; | ValueOrArray<T> |
| type_alias.ts:9:1:15:13 | type Js ... Json[]; | Json |
| type_alias.ts:19:1:21:57 | type Vi ... ode[]]; | VirtualNode |
| type_definition_objects.ts:3:8:3:17 | class C {} | C |
| type_definition_objects.ts:6:8:6:16 | enum E {} | E |
| type_definitions.ts:3:1:5:1 | interfa ... x: S;\\n} | I<S> |
| type_definitions.ts:8:1:10:1 | class C ...  x: T\\n} | C<T> |
| type_definitions.ts:13:1:15:1 | enum Co ...  blue\\n} | Color |
| type_definitions.ts:18:1:18:33 | enum En ... ember } | EnumWithOneMember |
| type_definitions.ts:21:1:21:20 | type Alias<T> = T[]; | Alias<T> |
getTypeExprType
| boolean-type.ts:3:12:3:15 | true | true |
| boolean-type.ts:4:12:4:15 | true | true |
| boolean-type.ts:4:12:4:22 | true \| true | true |
| boolean-type.ts:4:19:4:22 | true | true |
| boolean-type.ts:6:13:6:17 | false | false |
| boolean-type.ts:7:13:7:17 | false | false |
| boolean-type.ts:7:13:7:25 | false \| false | false |
| boolean-type.ts:7:21:7:25 | false | false |
| boolean-type.ts:9:15:9:21 | boolean | boolean |
| boolean-type.ts:10:15:10:18 | true | true |
| boolean-type.ts:10:15:10:26 | true \| false | boolean |
| boolean-type.ts:10:22:10:26 | false | false |
| boolean-type.ts:11:15:11:19 | false | false |
| boolean-type.ts:11:15:11:26 | false \| true | boolean |
| boolean-type.ts:11:23:11:26 | true | true |
| boolean-type.ts:13:15:13:21 | boolean | boolean |
| boolean-type.ts:13:15:13:31 | boolean \| boolean | boolean |
| boolean-type.ts:13:25:13:31 | boolean | boolean |
| boolean-type.ts:14:15:14:21 | boolean | boolean |
| boolean-type.ts:14:15:14:28 | boolean \| true | boolean |
| boolean-type.ts:14:25:14:28 | true | true |
| boolean-type.ts:15:15:15:19 | false | false |
| boolean-type.ts:15:15:15:29 | false \| boolean | boolean |
| boolean-type.ts:15:23:15:29 | boolean | boolean |
| middle-rest.ts:1:10:1:39 | [boolea ... number] | [boolean, ...string[], number] |
| middle-rest.ts:1:11:1:17 | boolean | boolean |
| middle-rest.ts:1:20:1:30 | ...string[] | string |
| middle-rest.ts:1:23:1:28 | string | string |
| middle-rest.ts:1:23:1:30 | string[] | string[] |
| middle-rest.ts:1:33:1:38 | number | number |
| tst.ts:3:13:3:18 | number | number |
| tst.ts:9:13:9:18 | string | string |
| tst.ts:14:20:14:25 | string | string |
| tst.ts:14:31:14:36 | string | string |
| tst.ts:14:40:14:45 | string | string |
| tst.ts:16:17:16:22 | number | number |
| tst.ts:16:28:16:33 | number | number |
| tst.ts:16:37:16:42 | number | number |
| tst.ts:20:29:20:34 | string | string |
| tst.ts:24:12:24:17 | number | number |
| tst.ts:24:12:24:19 | number[] | number[] |
| tst.ts:26:15:26:24 | () => void | () => void |
| tst.ts:26:21:26:24 | void | void |
| tst.ts:27:20:27:28 | undefined | undefined |
| tst.ts:28:15:28:18 | null | null |
| tst.ts:29:16:29:26 | () => never | () => never |
| tst.ts:29:22:29:26 | never | never |
| tst.ts:30:17:30:22 | symbol | symbol |
| tst.ts:31:25:31:37 | unique symbol | typeof uniqueSymbolType |
| tst.ts:32:17:32:22 | object | object |
| tst.ts:33:19:33:24 | string | string |
| tst.ts:33:19:33:38 | string & {x: string} | string & { x: string; } |
| tst.ts:33:28:33:38 | {x: string} | { x: string; } |
| tst.ts:33:32:33:37 | string | string |
| tst.ts:34:12:34:27 | [number, string] | [number, string] |
| tst.ts:34:13:34:18 | number | number |
| tst.ts:34:21:34:26 | string | string |
| tst.ts:36:31:36:55 | [number ... umber?] | [number, string, number?] |
| tst.ts:36:32:36:37 | number | number |
| tst.ts:36:40:36:45 | string | string |
| tst.ts:36:48:36:53 | number | number |
| tst.ts:36:48:36:54 | number? | number |
| tst.ts:37:17:37:18 | [] | [] |
| tst.ts:38:27:38:47 | [number ... ring[]] | [number, ...string[]] |
| tst.ts:38:28:38:33 | number | number |
| tst.ts:38:36:38:46 | ...string[] | string |
| tst.ts:38:39:38:44 | string | string |
| tst.ts:38:39:38:46 | string[] | string[] |
| tst.ts:39:39:39:68 | [number ... mber[]] | [number, string?, ...number[]] |
| tst.ts:39:40:39:45 | number | number |
| tst.ts:39:48:39:53 | string | string |
| tst.ts:39:48:39:54 | string? | string |
| tst.ts:39:57:39:67 | ...number[] | number |
| tst.ts:39:60:39:65 | number | number |
| tst.ts:39:60:39:67 | number[] | number[] |
| tst.ts:40:18:40:24 | unknown | unknown |
| tst.ts:49:15:49:20 | string | string |
| tst.ts:54:11:54:26 | NonAbstractDummy | NonAbstractDummy |
| tst.ts:55:14:55:19 | number | number |
| tst.ts:58:11:58:17 | HasArea | HasArea |
| tst.ts:59:14:59:19 | number | number |
| tst.ts:63:11:63:36 | abstrac ... HasArea | abstract new () => HasArea |
| tst.ts:63:30:63:36 | HasArea | HasArea |
| tst.ts:65:6:65:12 | MyUnion | MyUnion |
| tst.ts:65:16:65:30 | {myUnion: true} | { myUnion: true; } |
| tst.ts:65:16:65:53 | {myUnio ... : true} | { myUnion: true; } \| { stillMyUnion: true; } |
| tst.ts:65:26:65:29 | true | true |
| tst.ts:65:34:65:53 | {stillMyUnion: true} | { stillMyUnion: true; } |
| tst.ts:65:49:65:52 | true | true |
| tst.ts:66:13:66:19 | MyUnion | MyUnion |
| tst.ts:68:6:68:13 | MyUnion2 | MyUnion2 |
| tst.ts:68:17:68:23 | MyUnion | MyUnion |
| tst.ts:68:17:68:48 | MyUnion ... : true} | MyUnion \| { yetAnotherType: true; } |
| tst.ts:68:27:68:48 | {yetAno ... : true} | { yetAnotherType: true; } |
| tst.ts:68:44:68:47 | true | true |
| tst.ts:69:13:69:20 | MyUnion2 | MyUnion2 |
| tst.ts:73:13:73:18 | ThingI | ThingI |
| tst.ts:74:17:74:22 | number | number |
| tst.ts:75:21:75:26 | number | number |
| tst.ts:75:21:75:45 | number  ... boolean | string \| number \| boolean |
| tst.ts:75:30:75:35 | string | string |
| tst.ts:75:39:75:45 | boolean | boolean |
| tst.ts:78:33:78:38 | ThingI | ThingI |
| tst.ts:81:17:81:22 | number | number |
| tst.ts:85:21:85:26 | string | string |
| tst.ts:85:21:85:45 | string  ... boolean | string \| number \| boolean |
| tst.ts:85:30:85:35 | number | number |
| tst.ts:85:39:85:45 | boolean | boolean |
| tst.ts:92:15:92:20 | number | number |
| tst.ts:98:24:98:29 | number | number |
| tst.ts:104:19:104:24 | string | string |
| tst.ts:104:29:104:34 | hello  | any |
| tst.ts:104:37:104:42 | string | string |
| tst.ts:109:22:109:27 | number | number |
| tst.ts:109:29:109:29 | - | any |
| tst.ts:109:32:109:37 | number | number |
| tst.ts:109:39:109:39 | - | any |
| tst.ts:109:42:109:47 | number | number |
| tst.ts:110:19:110:25 | `1-2-3` | "1-2-3" |
| tst.ts:110:19:110:25 | `1-2-3` | any |
| tst.ts:111:22:111:27 | number | number |
| tst.ts:111:29:111:32 | -2-3 | any |
| tst.ts:117:20:117:25 | number | number |
| tst.ts:121:23:121:28 | number | number |
| tst.ts:133:21:133:27 | unknown | unknown |
| tst.ts:140:8:140:12 | Shape | Shape |
| tst.ts:141:7:142:46 | \| { kin ... umber } | { kind: "circle"; radius: number; } \| { kind: "... |
| tst.ts:141:9:141:42 | { kind: ... umber } | { kind: "circle"; radius: number; } |
| tst.ts:141:17:141:24 | "circle" | "circle" |
| tst.ts:141:35:141:40 | number | number |
| tst.ts:142:9:142:46 | { kind: ... umber } | { kind: "square"; sideLength: number; } |
| tst.ts:142:17:142:24 | "square" | "square" |
| tst.ts:142:39:142:44 | number | number |
| tst.ts:144:24:144:28 | Shape | Shape |
| tst.ts:144:32:144:37 | number | number |
| tst.ts:152:15:152:20 | Colors | Colors |
| tst.ts:153:13:153:18 | symbol | symbol |
| tst.ts:153:22:153:27 | number | number |
| tst.ts:154:13:154:18 | string | string |
| tst.ts:154:22:154:27 | string | string |
| tst.ts:155:13:155:18 | number | number |
| tst.ts:155:22:155:28 | boolean | boolean |
| tst.ts:158:17:158:22 | Colors | Colors |
| tst.ts:165:15:165:17 | Foo | Foo |
| tst.ts:166:14:166:17 | foo- | any |
| tst.ts:166:20:166:25 | number | number |
| tst.ts:166:31:166:36 | number | number |
| tst.ts:168:15:168:17 | Foo | Foo |
| tst.ts:171:15:171:18 | Data | Data |
| tst.ts:172:17:172:22 | string | string |
| tst.ts:172:17:172:31 | string \| symbol | string \| symbol |
| tst.ts:172:26:172:31 | symbol | symbol |
| tst.ts:172:35:172:41 | boolean | boolean |
| tst.ts:175:17:175:20 | Data | Data |
| tst.ts:197:8:197:8 | A | string |
| tst.ts:197:12:197:18 | Awaited | Awaited<T> |
| tst.ts:197:12:197:35 | Awaited ... tring>> | string |
| tst.ts:197:20:197:26 | Promise | Promise<T> |
| tst.ts:197:20:197:34 | Promise<string> | Promise<string> |
| tst.ts:197:28:197:33 | string | string |
| tst.ts:200:8:200:8 | B | number |
| tst.ts:200:12:200:18 | Awaited | Awaited<T> |
| tst.ts:200:12:200:44 | Awaited ... mber>>> | number |
| tst.ts:200:20:200:26 | Promise | Promise<T> |
| tst.ts:200:20:200:43 | Promise ... umber>> | Promise<Promise<number>> |
| tst.ts:200:28:200:34 | Promise | Promise<T> |
| tst.ts:200:28:200:42 | Promise<number> | Promise<number> |
| tst.ts:200:36:200:41 | number | number |
| tst.ts:203:8:203:8 | C | C |
| tst.ts:203:12:203:18 | Awaited | Awaited<T> |
| tst.ts:203:12:203:45 | Awaited ... umber>> | number \| boolean |
| tst.ts:203:20:203:26 | boolean | boolean |
| tst.ts:203:20:203:44 | boolean ... number> | boolean \| Promise<number> |
| tst.ts:203:30:203:36 | Promise | Promise<T> |
| tst.ts:203:30:203:44 | Promise<number> | Promise<number> |
| tst.ts:203:38:203:43 | number | number |
| tst.ts:205:20:205:26 | Success | Success |
| tst.ts:206:14:206:19 | string | string |
| tst.ts:206:21:206:27 | Success | any |
| tst.ts:207:11:207:16 | string | string |
| tst.ts:210:20:210:24 | Error | Error |
| tst.ts:211:16:211:21 | string | string |
| tst.ts:211:23:211:27 | Error | any |
| tst.ts:212:16:212:21 | string | string |
| tst.ts:215:30:215:36 | Success | Success |
| tst.ts:215:30:215:44 | Success \| Error | Success \| Error |
| tst.ts:215:40:215:44 | Error | Error |
| tst.ts:223:12:223:17 | string | string |
| tst.ts:224:23:224:28 | string | string |
| tst.ts:228:19:228:25 | unknown | unknown |
| tst.ts:252:8:252:13 | Action | Action |
| tst.ts:253:5:254:49 | \| { kin ... tring } | { kind: "NumberContents"; payload: number; } \| ... |
| tst.ts:253:7:253:49 | { kind: ... umber } | { kind: "NumberContents"; payload: number; } |
| tst.ts:253:15:253:30 | "NumberContents" | "NumberContents" |
| tst.ts:253:42:253:47 | number | number |
| tst.ts:254:7:254:49 | { kind: ... tring } | { kind: "StringContents"; payload: string; } |
| tst.ts:254:15:254:30 | "StringContents" | "StringContents" |
| tst.ts:254:42:254:47 | string | string |
| tst.ts:256:34:256:39 | Action | Action |
| tst.ts:265:13:265:19 | TypeMap | TypeMap |
| tst.ts:266:13:266:18 | number | number |
| tst.ts:267:13:267:18 | string | string |
| tst.ts:268:14:268:20 | boolean | boolean |
| tst.ts:271:8:271:18 | UnionRecord | UnionRecord<P> |
| tst.ts:271:20:271:20 | P | P |
| tst.ts:271:30:271:42 | keyof TypeMap | keyof TypeMap |
| tst.ts:271:36:271:42 | TypeMap | TypeMap |
| tst.ts:272:6:272:6 | K | K |
| tst.ts:272:11:272:11 | P | P |
| tst.ts:273:13:273:13 | K | K |
| tst.ts:274:14:274:20 | TypeMap | TypeMap |
| tst.ts:274:22:274:22 | K | K |
| tst.ts:274:29:274:32 | void | void |
| tst.ts:276:5:276:5 | P | P |
| tst.ts:278:26:278:26 | K | K |
| tst.ts:278:36:278:48 | keyof TypeMap | keyof TypeMap |
| tst.ts:278:42:278:48 | TypeMap | TypeMap |
| tst.ts:278:59:278:69 | UnionRecord | UnionRecord<P> |
| tst.ts:278:59:278:72 | UnionRecord<K> | UnionRecord<K> |
| tst.ts:278:71:278:71 | K | K |
| tst.ts:289:8:289:11 | Func | Func |
| tst.ts:289:25:289:37 | ["a", number] | ["a", number] |
| tst.ts:289:25:289:53 | ["a", n ... string] | ["a", number] \| ["b", string] |
| tst.ts:289:26:289:28 | "a" | "a" |
| tst.ts:289:31:289:36 | number | number |
| tst.ts:289:41:289:53 | ["b", string] | ["b", string] |
| tst.ts:289:42:289:44 | "b" | "b" |
| tst.ts:289:47:289:52 | string | string |
| tst.ts:289:59:289:62 | void | void |
| tst.ts:291:13:291:16 | Func | Func |
| type_alias.ts:1:6:1:6 | B | boolean |
| type_alias.ts:1:10:1:16 | boolean | boolean |
| type_alias.ts:3:8:3:8 | B | boolean |
| type_alias.ts:5:6:5:17 | ValueOrArray | ValueOrArray<T> |
| type_alias.ts:5:19:5:19 | T | T |
| type_alias.ts:5:24:5:24 | T | T |
| type_alias.ts:5:24:5:49 | T \| Arr ... ray<T>> | T \| ValueOrArray<T>[] |
| type_alias.ts:5:28:5:32 | Array | T[] |
| type_alias.ts:5:28:5:49 | Array<V ... ray<T>> | ValueOrArray<T>[] |
| type_alias.ts:5:34:5:45 | ValueOrArray | ValueOrArray<T> |
| type_alias.ts:5:34:5:48 | ValueOrArray<T> | ValueOrArray<T> |
| type_alias.ts:5:47:5:47 | T | T |
| type_alias.ts:7:8:7:19 | ValueOrArray | ValueOrArray<T> |
| type_alias.ts:7:8:7:27 | ValueOrArray<number> | ValueOrArray<number> |
| type_alias.ts:7:21:7:26 | number | number |
| type_alias.ts:9:6:9:9 | Json | Json |
| type_alias.ts:10:5:15:12 | \| strin ...  Json[] | string \| number \| boolean \| { [property: string... |
| type_alias.ts:10:7:10:12 | string | string |
| type_alias.ts:11:7:11:12 | number | number |
| type_alias.ts:12:7:12:13 | boolean | boolean |
| type_alias.ts:13:7:13:10 | null | null |
| type_alias.ts:14:7:14:34 | { [prop ...  Json } | { [property: string]: Json; } |
| type_alias.ts:14:20:14:25 | string | string |
| type_alias.ts:14:29:14:32 | Json | Json |
| type_alias.ts:15:7:15:10 | Json | Json |
| type_alias.ts:15:7:15:12 | Json[] | Json[] |
| type_alias.ts:17:11:17:14 | Json | Json |
| type_alias.ts:19:6:19:16 | VirtualNode | VirtualNode |
| type_alias.ts:20:5:21:56 | \| strin ... Node[]] | string \| [string, { [key: string]: any; }, ...V... |
| type_alias.ts:20:7:20:12 | string | string |
| type_alias.ts:21:7:21:56 | [string ... Node[]] | [string, { [key: string]: any; }, ...VirtualNod... |
| type_alias.ts:21:8:21:13 | string | string |
| type_alias.ts:21:16:21:37 | { [key: ... : any } | { [key: string]: any; } |
| type_alias.ts:21:24:21:29 | string | string |
| type_alias.ts:21:33:21:35 | any | any |
| type_alias.ts:21:40:21:55 | ...VirtualNode[] | VirtualNode |
| type_alias.ts:21:43:21:53 | VirtualNode | VirtualNode |
| type_alias.ts:21:43:21:55 | VirtualNode[] | VirtualNode[] |
| type_alias.ts:23:15:23:25 | VirtualNode | VirtualNode |
| type_definitions.ts:3:11:3:11 | I | I<S> |
| type_definitions.ts:3:13:3:13 | S | S |
| type_definitions.ts:4:6:4:6 | S | S |
| type_definitions.ts:6:8:6:8 | I | I<S> |
| type_definitions.ts:6:8:6:16 | I<number> | I<number> |
| type_definitions.ts:6:10:6:15 | number | number |
| type_definitions.ts:8:9:8:9 | T | T |
| type_definitions.ts:9:6:9:6 | T | T |
| type_definitions.ts:11:8:11:8 | C | C<T> |
| type_definitions.ts:11:8:11:16 | C<number> | C<number> |
| type_definitions.ts:11:10:11:15 | number | number |
| type_definitions.ts:16:12:16:16 | Color | Color |
| type_definitions.ts:19:8:19:24 | EnumWithOneMember | EnumWithOneMember |
| type_definitions.ts:21:6:21:10 | Alias | Alias<T> |
| type_definitions.ts:21:12:21:12 | T | T |
| type_definitions.ts:21:17:21:17 | T | T |
| type_definitions.ts:21:17:21:19 | T[] | T[] |
| type_definitions.ts:22:26:22:30 | Alias | Alias<T> |
| type_definitions.ts:22:26:22:38 | Alias<number> | Alias<number> |
| type_definitions.ts:22:32:22:37 | number | number |
missingToString
referenceDefinition
| Action | tst.ts:252:3:254:50 | type Ac ... ring }; |
| Alias<T> | type_definitions.ts:21:1:21:20 | type Alias<T> = T[]; |
| Alias<number> | type_definitions.ts:21:1:21:20 | type Alias<T> = T[]; |
| Base | tst.ts:241:3:241:15 | class Base {} |
| Base | tst.ts:241:3:241:15 | class Base {} |
| C | tst.ts:203:3:203:46 | type C  ... mber>>; |
| C | type_definition_objects.ts:3:8:3:17 | class C {} |
| C<T> | type_definitions.ts:8:1:10:1 | class C ...  x: T\\n} |
| C<number> | type_definitions.ts:8:1:10:1 | class C ...  x: T\\n} |
| Color | type_definitions.ts:13:1:15:1 | enum Co ...  blue\\n} |
| Color.blue | type_definitions.ts:14:15:14:18 | blue |
| Color.green | type_definitions.ts:14:8:14:12 | green |
| Color.red | type_definitions.ts:14:3:14:5 | red |
| Colors | tst.ts:152:5:156:5 | interfa ... ;\\n    } |
| Data | tst.ts:171:5:173:5 | interfa ... ;\\n    } |
| Derived | tst.ts:243:3:250:3 | class D ...   }\\n  } |
| E | type_definition_objects.ts:6:8:6:16 | enum E {} |
| EnumWithOneMember | type_definitions.ts:18:26:18:31 | member |
| Error | tst.ts:210:10:213:3 | interfa ... ng;\\n  } |
| Foo | tst.ts:116:3:129:3 | class F ...   }\\n  } |
| Foo | tst.ts:165:5:167:5 | interfa ... ;\\n    } |
| Foo | tst.ts:179:3:192:3 | class F ...    \\n  } |
| Func | tst.ts:289:3:289:63 | type Fu ... > void; |
| HasArea | tst.ts:58:1:60:1 | interfa ... mber;\\n} |
| I<S> | type_definitions.ts:3:1:5:1 | interfa ... x: S;\\n} |
| I<number> | type_definitions.ts:3:1:5:1 | interfa ... x: S;\\n} |
| Json | type_alias.ts:9:1:15:13 | type Js ... Json[]; |
| MyUnion | tst.ts:65:1:65:54 | type My ...  true}; |
| MyUnion2 | tst.ts:68:1:68:49 | type My ...  true}; |
| NonAbstractDummy | tst.ts:54:1:56:1 | interfa ... mber;\\n} |
| Person | tst.ts:222:3:234:3 | class P ...   }\\n  } |
| Shape | tst.ts:140:3:142:47 | type Sh ... mber }; |
| Sub | tst.ts:97:3:101:3 | class S ...   }\\n  } |
| Success | tst.ts:205:10:208:3 | interfa ... ng;\\n  } |
| Super | tst.ts:91:3:95:3 | class S ...   }\\n  } |
| Super | tst.ts:91:3:95:3 | class S ...   }\\n  } |
| Thing | tst.ts:78:10:88:3 | class T ...   }\\n  } |
| ThingI | tst.ts:73:3:76:3 | interfa ... n);\\n  } |
| TypeMap | tst.ts:265:3:269:3 | interfa ... an;\\n  } |
| UnionRecord<K> | tst.ts:271:3:276:7 | type Un ...   }[P]; |
| UnionRecord<P> | tst.ts:271:3:276:7 | type Un ...   }[P]; |
| ValueOrArray<T> | type_alias.ts:5:1:5:50 | type Va ... ay<T>>; |
| ValueOrArray<number> | type_alias.ts:5:1:5:50 | type Va ... ay<T>>; |
| VirtualNode | type_alias.ts:19:1:21:57 | type Vi ... ode[]]; |
tupleTypes
| middle-rest.ts:1:5:1:7 | foo | [boolean, ...string[], number] | 0 | boolean | 2 | string |
| middle-rest.ts:1:5:1:7 | foo | [boolean, ...string[], number] | 1 | string | 2 | string |
| middle-rest.ts:1:5:1:7 | foo | [boolean, ...string[], number] | 2 | number | 2 | string |
| middle-rest.ts:3:1:3:3 | foo | [boolean, ...string[], number] | 0 | boolean | 2 | string |
| middle-rest.ts:3:1:3:3 | foo | [boolean, ...string[], number] | 1 | string | 2 | string |
| middle-rest.ts:3:1:3:3 | foo | [boolean, ...string[], number] | 2 | number | 2 | string |
| middle-rest.ts:3:1:3:26 | foo = [ ... ", 123] | [true, string, number] | 0 | true | 3 | no-rest |
| middle-rest.ts:3:1:3:26 | foo = [ ... ", 123] | [true, string, number] | 1 | string | 3 | no-rest |
| middle-rest.ts:3:1:3:26 | foo = [ ... ", 123] | [true, string, number] | 2 | number | 3 | no-rest |
| middle-rest.ts:3:7:3:26 | [true, "hello", 123] | [boolean, ...string[], number] | 0 | boolean | 2 | string |
| middle-rest.ts:3:7:3:26 | [true, "hello", 123] | [boolean, ...string[], number] | 1 | string | 2 | string |
| middle-rest.ts:3:7:3:26 | [true, "hello", 123] | [boolean, ...string[], number] | 2 | number | 2 | string |
| tst.ts:34:5:34:9 | tuple | [number, string] | 0 | number | 2 | no-rest |
| tst.ts:34:5:34:9 | tuple | [number, string] | 1 | string | 2 | no-rest |
| tst.ts:36:5:36:28 | tupleWi ... Element | [number, string, number?] | 0 | number | 2 | no-rest |
| tst.ts:36:5:36:28 | tupleWi ... Element | [number, string, number?] | 1 | string | 2 | no-rest |
| tst.ts:36:5:36:28 | tupleWi ... Element | [number, string, number?] | 2 | number | 2 | no-rest |
| tst.ts:38:5:38:24 | tupleWithRestElement | [number, ...string[]] | 0 | number | 1 | string |
| tst.ts:38:5:38:24 | tupleWithRestElement | [number, ...string[]] | 1 | string | 1 | string |
| tst.ts:39:5:39:36 | tupleWi ... lements | [number, string?, ...number[]] | 0 | number | 1 | number |
| tst.ts:39:5:39:36 | tupleWi ... lements | [number, string?, ...number[]] | 1 | string | 1 | number |
| tst.ts:39:5:39:36 | tupleWi ... lements | [number, string?, ...number[]] | 2 | number | 1 | number |
| tst.ts:42:5:42:21 | constArrayLiteral | readonly [1, 2] | 0 | 1 | 2 | no-rest |
| tst.ts:42:5:42:21 | constArrayLiteral | readonly [1, 2] | 1 | 2 | 2 | no-rest |
| tst.ts:42:25:42:30 | [1, 2] | readonly [1, 2] | 0 | 1 | 2 | no-rest |
| tst.ts:42:25:42:30 | [1, 2] | readonly [1, 2] | 1 | 2 | 2 | no-rest |
| tst.ts:42:25:42:39 | [1, 2] as const | readonly [1, 2] | 0 | 1 | 2 | no-rest |
| tst.ts:42:25:42:39 | [1, 2] as const | readonly [1, 2] | 1 | 2 | 2 | no-rest |
unknownType
| tst.ts:40:5:40:15 | unknownType | unknown |
| tst.ts:47:8:47:8 | e | unknown |
| tst.ts:48:14:48:14 | e | unknown |
| tst.ts:133:16:133:18 | arg | unknown |
| tst.ts:134:32:134:34 | arg | unknown |
| tst.ts:228:12:228:16 | other | unknown |
| tst.ts:229:16:229:20 | other | unknown |
| tst.ts:230:20:230:24 | other | unknown |
abstractSignature
| (): HasArea |
| new (): HasArea |
unionIndex
| 1 | 0 | 1 \| 2 |
| 2 | 1 | 1 \| 2 |
| "NumberContents" | 0 | "NumberContents" \| "StringContents" |
| "StringContents" | 1 | "NumberContents" \| "StringContents" |
| "a" | 0 | "a" \| "b" |
| "a" | 1 | number \| "a" |
| "b" | 1 | "a" \| "b" |
| "bigint" | 2 | "string" \| "number" \| "bigint" \| "boolean" \| "s... |
| "boolean" | 2 | keyof TypeMap |
| "boolean" | 3 | "string" \| "number" \| "bigint" \| "boolean" \| "s... |
| "circle" | 0 | "circle" \| "square" |
| "function" | 7 | "string" \| "number" \| "bigint" \| "boolean" \| "s... |
| "number" | 1 | "string" \| "number" \| "bigint" \| "boolean" \| "s... |
| "number" | 1 | keyof TypeMap |
| "object" | 6 | "string" \| "number" \| "bigint" \| "boolean" \| "s... |
| "square" | 1 | "circle" \| "square" |
| "string" | 0 | "string" \| "number" \| "bigint" \| "boolean" \| "s... |
| "string" | 0 | keyof TypeMap |
| "symbol" | 4 | "string" \| "number" \| "bigint" \| "boolean" \| "s... |
| "undefined" | 5 | "string" \| "number" \| "bigint" \| "boolean" \| "s... |
| Error | 1 | Success \| Error |
| Json[] | 5 | string \| number \| boolean \| { [property: string... |
| Promise<number> | 2 | boolean \| Promise<number> |
| PromiseLike<TResult1> | 1 | TResult1 \| PromiseLike<TResult1> |
| PromiseLike<TResult2> | 1 | TResult2 \| PromiseLike<TResult2> |
| Success | 0 | Success \| Error |
| T | 0 | T \| ValueOrArray<T>[] |
| TResult1 | 0 | TResult1 \| PromiseLike<TResult1> |
| TResult1 | 0 | TResult1 \| TResult2 |
| TResult2 | 0 | TResult2 \| PromiseLike<TResult2> |
| TResult2 | 1 | TResult1 \| TResult2 |
| ValueOrArray<T>[] | 1 | T \| ValueOrArray<T>[] |
| ValueOrArray<number>[] | 1 | number \| ValueOrArray<number>[] |
| ["a", number] | 0 | ["a", number] \| ["b", string] |
| ["b", string] | 1 | ["a", number] \| ["b", string] |
| [string, { [key: string]: any; }, ...VirtualNod... | 1 | VirtualNode \| { [key: string]: any; } |
| [string, { [key: string]: any; }, ...VirtualNod... | 1 | string \| [string, { [key: string]: any; }, ...V... |
| false | 0 | boolean |
| false | 0 | boolean \| Promise<number> |
| false | 1 | number \| boolean |
| false | 2 | string \| number \| boolean |
| false | 2 | string \| number \| boolean \| { [property: string... |
| number | 0 | number \| "a" |
| number | 0 | number \| ValueOrArray<number>[] |
| number | 0 | number \| boolean |
| number | 1 | string \| number |
| number | 1 | string \| number \| boolean |
| number | 1 | string \| number \| boolean \| { [property: string... |
| number | 1 | string \| number \| true |
| string | 0 | VirtualNode \| { [key: string]: any; } |
| string | 0 | string \| [string, { [key: string]: any; }, ...V... |
| string | 0 | string \| number |
| string | 0 | string \| number \| boolean |
| string | 0 | string \| number \| boolean \| { [property: string... |
| string | 0 | string \| number \| true |
| string | 0 | string \| symbol |
| string | 0 | string \| { [key: string]: any; } |
| symbol | 1 | string \| symbol |
| true | 1 | boolean |
| true | 1 | boolean \| Promise<number> |
| true | 2 | number \| boolean |
| true | 2 | string \| number \| true |
| true | 3 | string \| number \| boolean |
| true | 3 | string \| number \| boolean \| { [property: string... |
| { [key: string]: any; } | 1 | string \| { [key: string]: any; } |
| { [key: string]: any; } | 2 | VirtualNode \| { [key: string]: any; } |
| { [property: string]: Json; } | 4 | string \| number \| boolean \| { [property: string... |
| { kind: "NumberContents"; payload: number; } | 0 | { kind: "NumberContents"; payload: number; } \| ... |
| { kind: "StringContents"; payload: string; } | 1 | { kind: "NumberContents"; payload: number; } \| ... |
| { kind: "circle"; radius: number; } | 0 | { kind: "circle"; radius: number; } \| { kind: "... |
| { kind: "square"; sideLength: number; } | 1 | { kind: "circle"; radius: number; } \| { kind: "... |
| { myUnion: true; } | 0 | MyUnion \| { yetAnotherType: true; } |
| { myUnion: true; } | 0 | { myUnion: true; } \| { stillMyUnion: true; } |
| { stillMyUnion: true; } | 1 | MyUnion \| { yetAnotherType: true; } |
| { stillMyUnion: true; } | 1 | { myUnion: true; } \| { stillMyUnion: true; } |
| { yetAnotherType: true; } | 2 | MyUnion \| { yetAnotherType: true; } |
getAStaticInitializerBlock
| tst.ts:179:3:192:3 | class F ...    \\n  } | tst.ts:185:5:187:5 | static  ... ;\\n    } |
| tst.ts:179:3:192:3 | class F ...    \\n  } | tst.ts:188:5:190:5 | static  ... ;\\n    } |

#-----| __va_list_tag& __va_list_tag::operator=(__va_list_tag const&)
#-----|   params: 
#-----|     0: p#0
#-----|         Type = const __va_list_tag &
#-----| __va_list_tag& __va_list_tag::operator=(__va_list_tag&&)
#-----|   params: 
#-----|     0: p#0
#-----|         Type = __va_list_tag &&
#-----| void operator delete(void*, unsigned long)
#-----|   params: 
#-----|     0: p#0
#-----|         Type = void *
#-----|     1: p#1
#-----|         Type = unsigned long
#-----| void operator delete(void*, unsigned long, std::align_val_t)
#-----|   params: 
#-----|     0: p#0
#-----|         Type = void *
#-----|     1: p#1
#-----|         Type = unsigned long
#-----|     2: p#2
#-----|         Type = align_val_t
#-----| void operator delete[](void*, unsigned long)
#-----|   params: 
#-----|     0: p#0
#-----|         Type = void *
#-----|     1: p#1
#-----|         Type = unsigned long
#-----| void operator delete[](void*, unsigned long, std::align_val_t)
#-----|   params: 
#-----|     0: p#0
#-----|         Type = void *
#-----|     1: p#1
#-----|         Type = unsigned long
#-----|     2: p#2
#-----|         Type = align_val_t
#-----| void* operator new(unsigned long)
#-----|   params: 
#-----|     0: p#0
#-----|         Type = unsigned long
#-----| void* operator new(unsigned long, std::align_val_t)
#-----|   params: 
#-----|     0: p#0
#-----|         Type = unsigned long
#-----|     1: p#1
#-----|         Type = align_val_t
#-----| void* operator new[](unsigned long)
#-----|   params: 
#-----|     0: p#0
#-----|         Type = unsigned long
#-----| void* operator new[](unsigned long, std::align_val_t)
#-----|   params: 
#-----|     0: p#0
#-----|         Type = unsigned long
#-----|     1: p#1
#-----|         Type = align_val_t
bad_asts.cpp:
#    5| Bad::S& Bad::S::operator=(Bad::S const&)
#    5|   params: 
#-----|     0: p#0
#-----|         Type = const S &
#    5| Bad::S& Bad::S::operator=(Bad::S&&)
#    5|   params: 
#-----|     0: p#0
#-----|         Type = S &&
#    9| int Bad::S::MemberFunction(int)
#    9|   params: 
#    9|     0: y
#    9|         Type = int
#    9|   body: { ... }
#   10|     0: return ...
#   10|       0: ... + ...
#   10|           Type = int
#   10|           ValueCategory = prvalue
#   10|         0: ... + ...
#   10|             Type = int
#   10|             ValueCategory = prvalue
#   10|           0: Unknown literal
#   10|               Type = int
#   10|               ValueCategory = prvalue
#   10|           1: x
#   10|               Type = int
#   10|               ValueCategory = prvalue(load)
#-----|             -1: this
#-----|                 Type = S *
#-----|                 ValueCategory = prvalue(load)
#   10|         1: y
#   10|             Type = int
#   10|             ValueCategory = prvalue(load)
#    9| int MemberFunction(int)
#    9|   params: 
#    9|     0: y
#    9|         Type = int
#    9|   body: { ... }
#   10|     0: return ...
#   10|       0: ... + ...
#   10|           Type = int
#   10|           ValueCategory = prvalue
#   10|         0: ... + ...
#   10|             Type = int
#   10|             ValueCategory = prvalue
#   10|           0: 6
#   10|               Type = int
#   10|               Value = 6
#   10|               ValueCategory = prvalue
#   10|           1: x
#   10|               Type = int
#   10|               ValueCategory = prvalue(load)
#-----|             -1: this
#-----|                 Type = S *
#-----|                 ValueCategory = prvalue(load)
#   10|         1: y
#   10|             Type = int
#   10|             ValueCategory = prvalue(load)
#   14| void Bad::CallBadMemberFunction()
#   14|   params: 
#   14|   body: { ... }
#   15|     0: declaration
#   15|       0: definition of s
#   15|           Type = S
#   15|         init: initializer for s
#   15|           expr: {...}
#   15|               Type = S
#   15|               ValueCategory = prvalue
#   16|     1: ExprStmt
#   16|       0: call to MemberFunction
#   16|           Type = int
#   16|           ValueCategory = prvalue
#   16|         -1: s
#   16|             Type = S
#   16|             ValueCategory = lvalue
#   16|         0: 1
#   16|             Type = int
#   16|             Value = 1
#   16|             ValueCategory = prvalue
#   17|     2: return ...
#   19| Bad::Point& Bad::Point::operator=(Bad::Point const&)
#   19|   params: 
#-----|     0: p#0
#-----|         Type = const Point &
#   19| Bad::Point& Bad::Point::operator=(Bad::Point&&)
#   19|   params: 
#-----|     0: p#0
#-----|         Type = Point &&
#   19| void Bad::Point::Point(Bad::Point const&)
#   19|   params: 
#-----|     0: p#0
#-----|         Type = const Point &
#   19|   initializations: 
#   19|     0: constructor init of field x
#   19|         Type = int
#   19|         ValueCategory = prvalue
#   19|       0: Unknown literal
#   19|           Type = int
#   19|           ValueCategory = prvalue
#   19|     1: constructor init of field y
#   19|         Type = int
#   19|         ValueCategory = prvalue
#   19|       0: Unknown literal
#   19|           Type = int
#   19|           ValueCategory = prvalue
#   19|   body: { ... }
#   19|     0: return ...
#   19| void Bad::Point::Point(Bad::Point&&)
#   19|   params: 
#-----|     0: p#0
#-----|         Type = Point &&
#   22| void Bad::Point::Point()
#   22|   params: 
#   22|   initializations: 
#   22|   body: { ... }
#   23|     0: return ...
#   26| void Bad::CallCopyConstructor(Bad::Point const&)
#   26|   params: 
#   26|     0: a
#   26|         Type = const Point &
#   26|   body: { ... }
#   27|     0: declaration
#   27|       0: definition of b
#   27|           Type = Point
#   27|         init: initializer for b
#   27|           expr: (Point)...
#   27|               Conversion = glvalue conversion
#   27|               Type = Point
#   27|               ValueCategory = prvalue(load)
#   27|             expr: (reference dereference)
#   27|                 Type = const Point
#   27|                 ValueCategory = lvalue
#   27|               expr: a
#   27|                   Type = const Point &
#   27|                   ValueCategory = prvalue(load)
#   28|     1: return ...
#   30| void Bad::errorExpr()
#   30|   params: 
#   30|   body: { ... }
#   31|     0: declaration
#   31|       0: definition of intref
#   31|           Type = int &
#   31|         init: initializer for intref
#   31|           expr: <error expr>
#   31|               Type = error
#   31|               ValueCategory = prvalue
#   32|     1: declaration
#   32|       0: definition of x
#   32|           Type = int
#   32|         init: initializer for x
#   32|           expr: <error expr>
#   32|               Type = error
#   32|               ValueCategory = prvalue
#   33|     2: ExprStmt
#   33|       0: ... = ...
#   33|           Type = int
#   33|           ValueCategory = lvalue
#   33|         0: x
#   33|             Type = int
#   33|             ValueCategory = lvalue
#-----|         1: <error expr>
#-----|             Type = error
#-----|             ValueCategory = prvalue(load)
#   34|     3: return ...
clang.cpp:
#    5| int* globalIntAddress()
#    5|   params: 
#    5|   body: { ... }
#    6|     0: return ...
#    6|       0: __builtin_addressof ...
#    6|           Type = int *
#    6|           ValueCategory = prvalue
#    6|         0: globalInt
#    6|             Type = int
#    6|             ValueCategory = lvalue
ir.cpp:
#    1| void Constants()
#    1|   params: 
#    1|   body: { ... }
#    2|     0: declaration
#    2|       0: definition of c_i
#    2|           Type = char
#    2|         init: initializer for c_i
#    2|           expr: (char)...
#    2|               Conversion = integral conversion
#    2|               Type = char
#    2|               Value = 1
#    2|               ValueCategory = prvalue
#    2|             expr: 1
#    2|                 Type = int
#    2|                 Value = 1
#    2|                 ValueCategory = prvalue
#    3|     1: declaration
#    3|       0: definition of c_c
#    3|           Type = char
#    3|         init: initializer for c_c
#    3|           expr: 65
#    3|               Type = char
#    3|               Value = 65
#    3|               ValueCategory = prvalue
#    5|     2: declaration
#    5|       0: definition of sc_i
#    5|           Type = signed char
#    5|         init: initializer for sc_i
#    5|           expr: (signed char)...
#    5|               Conversion = integral conversion
#    5|               Type = signed char
#    5|               Value = -1
#    5|               ValueCategory = prvalue
#    5|             expr: - ...
#    5|                 Type = int
#    5|                 Value = -1
#    5|                 ValueCategory = prvalue
#    5|               0: 1
#    5|                   Type = int
#    5|                   Value = 1
#    5|                   ValueCategory = prvalue
#    6|     3: declaration
#    6|       0: definition of sc_c
#    6|           Type = signed char
#    6|         init: initializer for sc_c
#    6|           expr: (signed char)...
#    6|               Conversion = integral conversion
#    6|               Type = signed char
#    6|               Value = 65
#    6|               ValueCategory = prvalue
#    6|             expr: 65
#    6|                 Type = char
#    6|                 Value = 65
#    6|                 ValueCategory = prvalue
#    8|     4: declaration
#    8|       0: definition of uc_i
#    8|           Type = unsigned char
#    8|         init: initializer for uc_i
#    8|           expr: (unsigned char)...
#    8|               Conversion = integral conversion
#    8|               Type = unsigned char
#    8|               Value = 5
#    8|               ValueCategory = prvalue
#    8|             expr: 5
#    8|                 Type = int
#    8|                 Value = 5
#    8|                 ValueCategory = prvalue
#    9|     5: declaration
#    9|       0: definition of uc_c
#    9|           Type = unsigned char
#    9|         init: initializer for uc_c
#    9|           expr: (unsigned char)...
#    9|               Conversion = integral conversion
#    9|               Type = unsigned char
#    9|               Value = 65
#    9|               ValueCategory = prvalue
#    9|             expr: 65
#    9|                 Type = char
#    9|                 Value = 65
#    9|                 ValueCategory = prvalue
#   11|     6: declaration
#   11|       0: definition of s
#   11|           Type = short
#   11|         init: initializer for s
#   11|           expr: (short)...
#   11|               Conversion = integral conversion
#   11|               Type = short
#   11|               Value = 5
#   11|               ValueCategory = prvalue
#   11|             expr: 5
#   11|                 Type = int
#   11|                 Value = 5
#   11|                 ValueCategory = prvalue
#   12|     7: declaration
#   12|       0: definition of us
#   12|           Type = unsigned short
#   12|         init: initializer for us
#   12|           expr: (unsigned short)...
#   12|               Conversion = integral conversion
#   12|               Type = unsigned short
#   12|               Value = 5
#   12|               ValueCategory = prvalue
#   12|             expr: 5
#   12|                 Type = int
#   12|                 Value = 5
#   12|                 ValueCategory = prvalue
#   14|     8: declaration
#   14|       0: definition of i
#   14|           Type = int
#   14|         init: initializer for i
#   14|           expr: 5
#   14|               Type = int
#   14|               Value = 5
#   14|               ValueCategory = prvalue
#   15|     9: declaration
#   15|       0: definition of ui
#   15|           Type = unsigned int
#   15|         init: initializer for ui
#   15|           expr: (unsigned int)...
#   15|               Conversion = integral conversion
#   15|               Type = unsigned int
#   15|               Value = 5
#   15|               ValueCategory = prvalue
#   15|             expr: 5
#   15|                 Type = int
#   15|                 Value = 5
#   15|                 ValueCategory = prvalue
#   17|     10: declaration
#   17|       0: definition of l
#   17|           Type = long
#   17|         init: initializer for l
#   17|           expr: (long)...
#   17|               Conversion = integral conversion
#   17|               Type = long
#   17|               Value = 5
#   17|               ValueCategory = prvalue
#   17|             expr: 5
#   17|                 Type = int
#   17|                 Value = 5
#   17|                 ValueCategory = prvalue
#   18|     11: declaration
#   18|       0: definition of ul
#   18|           Type = unsigned long
#   18|         init: initializer for ul
#   18|           expr: (unsigned long)...
#   18|               Conversion = integral conversion
#   18|               Type = unsigned long
#   18|               Value = 5
#   18|               ValueCategory = prvalue
#   18|             expr: 5
#   18|                 Type = int
#   18|                 Value = 5
#   18|                 ValueCategory = prvalue
#   20|     12: declaration
#   20|       0: definition of ll_i
#   20|           Type = long long
#   20|         init: initializer for ll_i
#   20|           expr: (long long)...
#   20|               Conversion = integral conversion
#   20|               Type = long long
#   20|               Value = 5
#   20|               ValueCategory = prvalue
#   20|             expr: 5
#   20|                 Type = int
#   20|                 Value = 5
#   20|                 ValueCategory = prvalue
#   21|     13: declaration
#   21|       0: definition of ll_ll
#   21|           Type = long long
#   21|         init: initializer for ll_ll
#   21|           expr: 5
#   21|               Type = long long
#   21|               Value = 5
#   21|               ValueCategory = prvalue
#   22|     14: declaration
#   22|       0: definition of ull_i
#   22|           Type = unsigned long long
#   22|         init: initializer for ull_i
#   22|           expr: (unsigned long long)...
#   22|               Conversion = integral conversion
#   22|               Type = unsigned long long
#   22|               Value = 5
#   22|               ValueCategory = prvalue
#   22|             expr: 5
#   22|                 Type = int
#   22|                 Value = 5
#   22|                 ValueCategory = prvalue
#   23|     15: declaration
#   23|       0: definition of ull_ull
#   23|           Type = unsigned long long
#   23|         init: initializer for ull_ull
#   23|           expr: 5
#   23|               Type = unsigned long long
#   23|               Value = 5
#   23|               ValueCategory = prvalue
#   25|     16: declaration
#   25|       0: definition of b_t
#   25|           Type = bool
#   25|         init: initializer for b_t
#   25|           expr: 1
#   25|               Type = bool
#   25|               Value = 1
#   25|               ValueCategory = prvalue
#   26|     17: declaration
#   26|       0: definition of b_f
#   26|           Type = bool
#   26|         init: initializer for b_f
#   26|           expr: 0
#   26|               Type = bool
#   26|               Value = 0
#   26|               ValueCategory = prvalue
#   28|     18: declaration
#   28|       0: definition of wc_i
#   28|           Type = wchar_t
#   28|         init: initializer for wc_i
#   28|           expr: (wchar_t)...
#   28|               Conversion = integral conversion
#   28|               Type = wchar_t
#   28|               Value = 5
#   28|               ValueCategory = prvalue
#   28|             expr: 5
#   28|                 Type = int
#   28|                 Value = 5
#   28|                 ValueCategory = prvalue
#   29|     19: declaration
#   29|       0: definition of wc_c
#   29|           Type = wchar_t
#   29|         init: initializer for wc_c
#   29|           expr: 65
#   29|               Type = wchar_t
#   29|               Value = 65
#   29|               ValueCategory = prvalue
#   31|     20: declaration
#   31|       0: definition of c16
#   31|           Type = char16_t
#   31|         init: initializer for c16
#   31|           expr: 65
#   31|               Type = char16_t
#   31|               Value = 65
#   31|               ValueCategory = prvalue
#   32|     21: declaration
#   32|       0: definition of c32
#   32|           Type = char32_t
#   32|         init: initializer for c32
#   32|           expr: 65
#   32|               Type = char32_t
#   32|               Value = 65
#   32|               ValueCategory = prvalue
#   34|     22: declaration
#   34|       0: definition of f_i
#   34|           Type = float
#   34|         init: initializer for f_i
#   34|           expr: (float)...
#   34|               Conversion = integral to floating point conversion
#   34|               Type = float
#   34|               Value = 1.0
#   34|               ValueCategory = prvalue
#   34|             expr: 1
#   34|                 Type = int
#   34|                 Value = 1
#   34|                 ValueCategory = prvalue
#   35|     23: declaration
#   35|       0: definition of f_f
#   35|           Type = float
#   35|         init: initializer for f_f
#   35|           expr: 1.0
#   35|               Type = float
#   35|               Value = 1.0
#   35|               ValueCategory = prvalue
#   36|     24: declaration
#   36|       0: definition of f_d
#   36|           Type = float
#   36|         init: initializer for f_d
#   36|           expr: (float)...
#   36|               Conversion = floating point conversion
#   36|               Type = float
#   36|               Value = 1.0
#   36|               ValueCategory = prvalue
#   36|             expr: 1.0
#   36|                 Type = double
#   36|                 Value = 1.0
#   36|                 ValueCategory = prvalue
#   38|     25: declaration
#   38|       0: definition of d_i
#   38|           Type = double
#   38|         init: initializer for d_i
#   38|           expr: (double)...
#   38|               Conversion = integral to floating point conversion
#   38|               Type = double
#   38|               Value = 1.0
#   38|               ValueCategory = prvalue
#   38|             expr: 1
#   38|                 Type = int
#   38|                 Value = 1
#   38|                 ValueCategory = prvalue
#   39|     26: declaration
#   39|       0: definition of d_f
#   39|           Type = double
#   39|         init: initializer for d_f
#   39|           expr: (double)...
#   39|               Conversion = floating point conversion
#   39|               Type = double
#   39|               Value = 1.0
#   39|               ValueCategory = prvalue
#   39|             expr: 1.0
#   39|                 Type = float
#   39|                 Value = 1.0
#   39|                 ValueCategory = prvalue
#   40|     27: declaration
#   40|       0: definition of d_d
#   40|           Type = double
#   40|         init: initializer for d_d
#   40|           expr: 1.0
#   40|               Type = double
#   40|               Value = 1.0
#   40|               ValueCategory = prvalue
#   41|     28: return ...
#   43| void Foo()
#   43|   params: 
#   43|   body: { ... }
#   44|     0: declaration
#   44|       0: definition of x
#   44|           Type = int
#   44|         init: initializer for x
#   44|           expr: ... + ...
#   44|               Type = int
#   44|               Value = 17
#   44|               ValueCategory = prvalue
#   44|             0: 5
#   44|                 Type = int
#   44|                 Value = 5
#   44|                 ValueCategory = prvalue
#   44|             1: 12
#   44|                 Type = int
#   44|                 Value = 12
#   44|                 ValueCategory = prvalue
#   45|     1: declaration
#   45|       0: definition of y
#   45|           Type = short
#   45|         init: initializer for y
#   45|           expr: (short)...
#   45|               Conversion = integral conversion
#   45|               Type = short
#   45|               Value = 7
#   45|               ValueCategory = prvalue
#   45|             expr: 7
#   45|                 Type = int
#   45|                 Value = 7
#   45|                 ValueCategory = prvalue
#   46|     2: ExprStmt
#   46|       0: ... = ...
#   46|           Type = short
#   46|           ValueCategory = lvalue
#   46|         0: y
#   46|             Type = short
#   46|             ValueCategory = lvalue
#   46|         1: (short)...
#   46|             Conversion = integral conversion
#   46|             Type = short
#   46|             ValueCategory = prvalue
#   46|           expr: ... + ...
#   46|               Type = int
#   46|               ValueCategory = prvalue
#   46|             0: x
#   46|                 Type = int
#   46|                 ValueCategory = prvalue(load)
#   46|             1: (int)...
#   46|                 Conversion = integral conversion
#   46|                 Type = int
#   46|                 ValueCategory = prvalue
#   46|               expr: y
#   46|                   Type = short
#   46|                   ValueCategory = prvalue(load)
#   47|     3: ExprStmt
#   47|       0: ... = ...
#   47|           Type = int
#   47|           ValueCategory = lvalue
#   47|         0: x
#   47|             Type = int
#   47|             ValueCategory = lvalue
#   47|         1: ... * ...
#   47|             Type = int
#   47|             ValueCategory = prvalue
#   47|           0: x
#   47|               Type = int
#   47|               ValueCategory = prvalue(load)
#   47|           1: (int)...
#   47|               Conversion = integral conversion
#   47|               Type = int
#   47|               ValueCategory = prvalue
#   47|             expr: y
#   47|                 Type = short
#   47|                 ValueCategory = prvalue(load)
#   48|     4: return ...
#   50| void IntegerOps(int, int)
#   50|   params: 
#   50|     0: x
#   50|         Type = int
#   50|     1: y
#   50|         Type = int
#   50|   body: { ... }
#   51|     0: declaration
#   51|       0: definition of z
#   51|           Type = int
#   53|     1: ExprStmt
#   53|       0: ... = ...
#   53|           Type = int
#   53|           ValueCategory = lvalue
#   53|         0: z
#   53|             Type = int
#   53|             ValueCategory = lvalue
#   53|         1: ... + ...
#   53|             Type = int
#   53|             ValueCategory = prvalue
#   53|           0: x
#   53|               Type = int
#   53|               ValueCategory = prvalue(load)
#   53|           1: y
#   53|               Type = int
#   53|               ValueCategory = prvalue(load)
#   54|     2: ExprStmt
#   54|       0: ... = ...
#   54|           Type = int
#   54|           ValueCategory = lvalue
#   54|         0: z
#   54|             Type = int
#   54|             ValueCategory = lvalue
#   54|         1: ... - ...
#   54|             Type = int
#   54|             ValueCategory = prvalue
#   54|           0: x
#   54|               Type = int
#   54|               ValueCategory = prvalue(load)
#   54|           1: y
#   54|               Type = int
#   54|               ValueCategory = prvalue(load)
#   55|     3: ExprStmt
#   55|       0: ... = ...
#   55|           Type = int
#   55|           ValueCategory = lvalue
#   55|         0: z
#   55|             Type = int
#   55|             ValueCategory = lvalue
#   55|         1: ... * ...
#   55|             Type = int
#   55|             ValueCategory = prvalue
#   55|           0: x
#   55|               Type = int
#   55|               ValueCategory = prvalue(load)
#   55|           1: y
#   55|               Type = int
#   55|               ValueCategory = prvalue(load)
#   56|     4: ExprStmt
#   56|       0: ... = ...
#   56|           Type = int
#   56|           ValueCategory = lvalue
#   56|         0: z
#   56|             Type = int
#   56|             ValueCategory = lvalue
#   56|         1: ... / ...
#   56|             Type = int
#   56|             ValueCategory = prvalue
#   56|           0: x
#   56|               Type = int
#   56|               ValueCategory = prvalue(load)
#   56|           1: y
#   56|               Type = int
#   56|               ValueCategory = prvalue(load)
#   57|     5: ExprStmt
#   57|       0: ... = ...
#   57|           Type = int
#   57|           ValueCategory = lvalue
#   57|         0: z
#   57|             Type = int
#   57|             ValueCategory = lvalue
#   57|         1: ... % ...
#   57|             Type = int
#   57|             ValueCategory = prvalue
#   57|           0: x
#   57|               Type = int
#   57|               ValueCategory = prvalue(load)
#   57|           1: y
#   57|               Type = int
#   57|               ValueCategory = prvalue(load)
#   59|     6: ExprStmt
#   59|       0: ... = ...
#   59|           Type = int
#   59|           ValueCategory = lvalue
#   59|         0: z
#   59|             Type = int
#   59|             ValueCategory = lvalue
#   59|         1: ... & ...
#   59|             Type = int
#   59|             ValueCategory = prvalue
#   59|           0: x
#   59|               Type = int
#   59|               ValueCategory = prvalue(load)
#   59|           1: y
#   59|               Type = int
#   59|               ValueCategory = prvalue(load)
#   60|     7: ExprStmt
#   60|       0: ... = ...
#   60|           Type = int
#   60|           ValueCategory = lvalue
#   60|         0: z
#   60|             Type = int
#   60|             ValueCategory = lvalue
#   60|         1: ... | ...
#   60|             Type = int
#   60|             ValueCategory = prvalue
#   60|           0: x
#   60|               Type = int
#   60|               ValueCategory = prvalue(load)
#   60|           1: y
#   60|               Type = int
#   60|               ValueCategory = prvalue(load)
#   61|     8: ExprStmt
#   61|       0: ... = ...
#   61|           Type = int
#   61|           ValueCategory = lvalue
#   61|         0: z
#   61|             Type = int
#   61|             ValueCategory = lvalue
#   61|         1: ... ^ ...
#   61|             Type = int
#   61|             ValueCategory = prvalue
#   61|           0: x
#   61|               Type = int
#   61|               ValueCategory = prvalue(load)
#   61|           1: y
#   61|               Type = int
#   61|               ValueCategory = prvalue(load)
#   63|     9: ExprStmt
#   63|       0: ... = ...
#   63|           Type = int
#   63|           ValueCategory = lvalue
#   63|         0: z
#   63|             Type = int
#   63|             ValueCategory = lvalue
#   63|         1: ... << ...
#   63|             Type = int
#   63|             ValueCategory = prvalue
#   63|           0: x
#   63|               Type = int
#   63|               ValueCategory = prvalue(load)
#   63|           1: y
#   63|               Type = int
#   63|               ValueCategory = prvalue(load)
#   64|     10: ExprStmt
#   64|       0: ... = ...
#   64|           Type = int
#   64|           ValueCategory = lvalue
#   64|         0: z
#   64|             Type = int
#   64|             ValueCategory = lvalue
#   64|         1: ... >> ...
#   64|             Type = int
#   64|             ValueCategory = prvalue
#   64|           0: x
#   64|               Type = int
#   64|               ValueCategory = prvalue(load)
#   64|           1: y
#   64|               Type = int
#   64|               ValueCategory = prvalue(load)
#   66|     11: ExprStmt
#   66|       0: ... = ...
#   66|           Type = int
#   66|           ValueCategory = lvalue
#   66|         0: z
#   66|             Type = int
#   66|             ValueCategory = lvalue
#   66|         1: x
#   66|             Type = int
#   66|             ValueCategory = prvalue(load)
#   68|     12: ExprStmt
#   68|       0: ... += ...
#   68|           Type = int
#   68|           ValueCategory = lvalue
#   68|         0: z
#   68|             Type = int
#   68|             ValueCategory = lvalue
#   68|         1: x
#   68|             Type = int
#   68|             ValueCategory = prvalue(load)
#   69|     13: ExprStmt
#   69|       0: ... -= ...
#   69|           Type = int
#   69|           ValueCategory = lvalue
#   69|         0: z
#   69|             Type = int
#   69|             ValueCategory = lvalue
#   69|         1: x
#   69|             Type = int
#   69|             ValueCategory = prvalue(load)
#   70|     14: ExprStmt
#   70|       0: ... *= ...
#   70|           Type = int
#   70|           ValueCategory = lvalue
#   70|         0: z
#   70|             Type = int
#   70|             ValueCategory = lvalue
#   70|         1: x
#   70|             Type = int
#   70|             ValueCategory = prvalue(load)
#   71|     15: ExprStmt
#   71|       0: ... /= ...
#   71|           Type = int
#   71|           ValueCategory = lvalue
#   71|         0: z
#   71|             Type = int
#   71|             ValueCategory = lvalue
#   71|         1: x
#   71|             Type = int
#   71|             ValueCategory = prvalue(load)
#   72|     16: ExprStmt
#   72|       0: ... %= ...
#   72|           Type = int
#   72|           ValueCategory = lvalue
#   72|         0: z
#   72|             Type = int
#   72|             ValueCategory = lvalue
#   72|         1: x
#   72|             Type = int
#   72|             ValueCategory = prvalue(load)
#   74|     17: ExprStmt
#   74|       0: ... &= ...
#   74|           Type = int
#   74|           ValueCategory = lvalue
#   74|         0: z
#   74|             Type = int
#   74|             ValueCategory = lvalue
#   74|         1: x
#   74|             Type = int
#   74|             ValueCategory = prvalue(load)
#   75|     18: ExprStmt
#   75|       0: ... |= ...
#   75|           Type = int
#   75|           ValueCategory = lvalue
#   75|         0: z
#   75|             Type = int
#   75|             ValueCategory = lvalue
#   75|         1: x
#   75|             Type = int
#   75|             ValueCategory = prvalue(load)
#   76|     19: ExprStmt
#   76|       0: ... ^= ...
#   76|           Type = int
#   76|           ValueCategory = lvalue
#   76|         0: z
#   76|             Type = int
#   76|             ValueCategory = lvalue
#   76|         1: x
#   76|             Type = int
#   76|             ValueCategory = prvalue(load)
#   78|     20: ExprStmt
#   78|       0: ... <<= ...
#   78|           Type = int
#   78|           ValueCategory = lvalue
#   78|         0: z
#   78|             Type = int
#   78|             ValueCategory = lvalue
#   78|         1: x
#   78|             Type = int
#   78|             ValueCategory = prvalue(load)
#   79|     21: ExprStmt
#   79|       0: ... >>= ...
#   79|           Type = int
#   79|           ValueCategory = lvalue
#   79|         0: z
#   79|             Type = int
#   79|             ValueCategory = lvalue
#   79|         1: x
#   79|             Type = int
#   79|             ValueCategory = prvalue(load)
#   81|     22: ExprStmt
#   81|       0: ... = ...
#   81|           Type = int
#   81|           ValueCategory = lvalue
#   81|         0: z
#   81|             Type = int
#   81|             ValueCategory = lvalue
#   81|         1: + ...
#   81|             Type = int
#   81|             ValueCategory = prvalue
#   81|           0: x
#   81|               Type = int
#   81|               ValueCategory = prvalue(load)
#   82|     23: ExprStmt
#   82|       0: ... = ...
#   82|           Type = int
#   82|           ValueCategory = lvalue
#   82|         0: z
#   82|             Type = int
#   82|             ValueCategory = lvalue
#   82|         1: - ...
#   82|             Type = int
#   82|             ValueCategory = prvalue
#   82|           0: x
#   82|               Type = int
#   82|               ValueCategory = prvalue(load)
#   83|     24: ExprStmt
#   83|       0: ... = ...
#   83|           Type = int
#   83|           ValueCategory = lvalue
#   83|         0: z
#   83|             Type = int
#   83|             ValueCategory = lvalue
#   83|         1: ~ ...
#   83|             Type = int
#   83|             ValueCategory = prvalue
#   83|           0: x
#   83|               Type = int
#   83|               ValueCategory = prvalue(load)
#   84|     25: ExprStmt
#   84|       0: ... = ...
#   84|           Type = int
#   84|           ValueCategory = lvalue
#   84|         0: z
#   84|             Type = int
#   84|             ValueCategory = lvalue
#   84|         1: (int)...
#   84|             Conversion = integral conversion
#   84|             Type = int
#   84|             ValueCategory = prvalue
#   84|           expr: ! ...
#   84|               Type = bool
#   84|               ValueCategory = prvalue
#   84|             0: (bool)...
#   84|                 Conversion = conversion to bool
#   84|                 Type = bool
#   84|                 ValueCategory = prvalue
#   84|               expr: x
#   84|                   Type = int
#   84|                   ValueCategory = prvalue(load)
#   85|     26: return ...
#   87| void IntegerCompare(int, int)
#   87|   params: 
#   87|     0: x
#   87|         Type = int
#   87|     1: y
#   87|         Type = int
#   87|   body: { ... }
#   88|     0: declaration
#   88|       0: definition of b
#   88|           Type = bool
#   90|     1: ExprStmt
#   90|       0: ... = ...
#   90|           Type = bool
#   90|           ValueCategory = lvalue
#   90|         0: b
#   90|             Type = bool
#   90|             ValueCategory = lvalue
#   90|         1: ... == ...
#   90|             Type = bool
#   90|             ValueCategory = prvalue
#   90|           0: x
#   90|               Type = int
#   90|               ValueCategory = prvalue(load)
#   90|           1: y
#   90|               Type = int
#   90|               ValueCategory = prvalue(load)
#   91|     2: ExprStmt
#   91|       0: ... = ...
#   91|           Type = bool
#   91|           ValueCategory = lvalue
#   91|         0: b
#   91|             Type = bool
#   91|             ValueCategory = lvalue
#   91|         1: ... != ...
#   91|             Type = bool
#   91|             ValueCategory = prvalue
#   91|           0: x
#   91|               Type = int
#   91|               ValueCategory = prvalue(load)
#   91|           1: y
#   91|               Type = int
#   91|               ValueCategory = prvalue(load)
#   92|     3: ExprStmt
#   92|       0: ... = ...
#   92|           Type = bool
#   92|           ValueCategory = lvalue
#   92|         0: b
#   92|             Type = bool
#   92|             ValueCategory = lvalue
#   92|         1: ... < ...
#   92|             Type = bool
#   92|             ValueCategory = prvalue
#   92|           0: x
#   92|               Type = int
#   92|               ValueCategory = prvalue(load)
#   92|           1: y
#   92|               Type = int
#   92|               ValueCategory = prvalue(load)
#   93|     4: ExprStmt
#   93|       0: ... = ...
#   93|           Type = bool
#   93|           ValueCategory = lvalue
#   93|         0: b
#   93|             Type = bool
#   93|             ValueCategory = lvalue
#   93|         1: ... > ...
#   93|             Type = bool
#   93|             ValueCategory = prvalue
#   93|           0: x
#   93|               Type = int
#   93|               ValueCategory = prvalue(load)
#   93|           1: y
#   93|               Type = int
#   93|               ValueCategory = prvalue(load)
#   94|     5: ExprStmt
#   94|       0: ... = ...
#   94|           Type = bool
#   94|           ValueCategory = lvalue
#   94|         0: b
#   94|             Type = bool
#   94|             ValueCategory = lvalue
#   94|         1: ... <= ...
#   94|             Type = bool
#   94|             ValueCategory = prvalue
#   94|           0: x
#   94|               Type = int
#   94|               ValueCategory = prvalue(load)
#   94|           1: y
#   94|               Type = int
#   94|               ValueCategory = prvalue(load)
#   95|     6: ExprStmt
#   95|       0: ... = ...
#   95|           Type = bool
#   95|           ValueCategory = lvalue
#   95|         0: b
#   95|             Type = bool
#   95|             ValueCategory = lvalue
#   95|         1: ... >= ...
#   95|             Type = bool
#   95|             ValueCategory = prvalue
#   95|           0: x
#   95|               Type = int
#   95|               ValueCategory = prvalue(load)
#   95|           1: y
#   95|               Type = int
#   95|               ValueCategory = prvalue(load)
#   96|     7: return ...
#   98| void IntegerCrement(int)
#   98|   params: 
#   98|     0: x
#   98|         Type = int
#   98|   body: { ... }
#   99|     0: declaration
#   99|       0: definition of y
#   99|           Type = int
#  101|     1: ExprStmt
#  101|       0: ... = ...
#  101|           Type = int
#  101|           ValueCategory = lvalue
#  101|         0: y
#  101|             Type = int
#  101|             ValueCategory = lvalue
#  101|         1: ++ ...
#  101|             Type = int
#  101|             ValueCategory = prvalue
#  101|           0: x
#  101|               Type = int
#  101|               ValueCategory = lvalue
#  102|     2: ExprStmt
#  102|       0: ... = ...
#  102|           Type = int
#  102|           ValueCategory = lvalue
#  102|         0: y
#  102|             Type = int
#  102|             ValueCategory = lvalue
#  102|         1: -- ...
#  102|             Type = int
#  102|             ValueCategory = prvalue
#  102|           0: x
#  102|               Type = int
#  102|               ValueCategory = lvalue
#  103|     3: ExprStmt
#  103|       0: ... = ...
#  103|           Type = int
#  103|           ValueCategory = lvalue
#  103|         0: y
#  103|             Type = int
#  103|             ValueCategory = lvalue
#  103|         1: ... ++
#  103|             Type = int
#  103|             ValueCategory = prvalue
#  103|           0: x
#  103|               Type = int
#  103|               ValueCategory = lvalue
#  104|     4: ExprStmt
#  104|       0: ... = ...
#  104|           Type = int
#  104|           ValueCategory = lvalue
#  104|         0: y
#  104|             Type = int
#  104|             ValueCategory = lvalue
#  104|         1: ... --
#  104|             Type = int
#  104|             ValueCategory = prvalue
#  104|           0: x
#  104|               Type = int
#  104|               ValueCategory = lvalue
#  105|     5: return ...
#  107| void IntegerCrement_LValue(int)
#  107|   params: 
#  107|     0: x
#  107|         Type = int
#  107|   body: { ... }
#  108|     0: declaration
#  108|       0: definition of p
#  108|           Type = int *
#  110|     1: ExprStmt
#  110|       0: ... = ...
#  110|           Type = int *
#  110|           ValueCategory = lvalue
#  110|         0: p
#  110|             Type = int *
#  110|             ValueCategory = lvalue
#  110|         1: & ...
#  110|             Type = int *
#  110|             ValueCategory = prvalue
#  110|           0: (...)
#  110|               Type = int
#  110|               ValueCategory = lvalue
#  110|             expr: ++ ...
#  110|                 Type = int
#  110|                 ValueCategory = lvalue
#  110|               0: x
#  110|                   Type = int
#  110|                   ValueCategory = lvalue
#  111|     2: ExprStmt
#  111|       0: ... = ...
#  111|           Type = int *
#  111|           ValueCategory = lvalue
#  111|         0: p
#  111|             Type = int *
#  111|             ValueCategory = lvalue
#  111|         1: & ...
#  111|             Type = int *
#  111|             ValueCategory = prvalue
#  111|           0: (...)
#  111|               Type = int
#  111|               ValueCategory = lvalue
#  111|             expr: -- ...
#  111|                 Type = int
#  111|                 ValueCategory = lvalue
#  111|               0: x
#  111|                   Type = int
#  111|                   ValueCategory = lvalue
#  112|     3: return ...
#  114| void FloatOps(double, double)
#  114|   params: 
#  114|     0: x
#  114|         Type = double
#  114|     1: y
#  114|         Type = double
#  114|   body: { ... }
#  115|     0: declaration
#  115|       0: definition of z
#  115|           Type = double
#  117|     1: ExprStmt
#  117|       0: ... = ...
#  117|           Type = double
#  117|           ValueCategory = lvalue
#  117|         0: z
#  117|             Type = double
#  117|             ValueCategory = lvalue
#  117|         1: ... + ...
#  117|             Type = double
#  117|             ValueCategory = prvalue
#  117|           0: x
#  117|               Type = double
#  117|               ValueCategory = prvalue(load)
#  117|           1: y
#  117|               Type = double
#  117|               ValueCategory = prvalue(load)
#  118|     2: ExprStmt
#  118|       0: ... = ...
#  118|           Type = double
#  118|           ValueCategory = lvalue
#  118|         0: z
#  118|             Type = double
#  118|             ValueCategory = lvalue
#  118|         1: ... - ...
#  118|             Type = double
#  118|             ValueCategory = prvalue
#  118|           0: x
#  118|               Type = double
#  118|               ValueCategory = prvalue(load)
#  118|           1: y
#  118|               Type = double
#  118|               ValueCategory = prvalue(load)
#  119|     3: ExprStmt
#  119|       0: ... = ...
#  119|           Type = double
#  119|           ValueCategory = lvalue
#  119|         0: z
#  119|             Type = double
#  119|             ValueCategory = lvalue
#  119|         1: ... * ...
#  119|             Type = double
#  119|             ValueCategory = prvalue
#  119|           0: x
#  119|               Type = double
#  119|               ValueCategory = prvalue(load)
#  119|           1: y
#  119|               Type = double
#  119|               ValueCategory = prvalue(load)
#  120|     4: ExprStmt
#  120|       0: ... = ...
#  120|           Type = double
#  120|           ValueCategory = lvalue
#  120|         0: z
#  120|             Type = double
#  120|             ValueCategory = lvalue
#  120|         1: ... / ...
#  120|             Type = double
#  120|             ValueCategory = prvalue
#  120|           0: x
#  120|               Type = double
#  120|               ValueCategory = prvalue(load)
#  120|           1: y
#  120|               Type = double
#  120|               ValueCategory = prvalue(load)
#  122|     5: ExprStmt
#  122|       0: ... = ...
#  122|           Type = double
#  122|           ValueCategory = lvalue
#  122|         0: z
#  122|             Type = double
#  122|             ValueCategory = lvalue
#  122|         1: x
#  122|             Type = double
#  122|             ValueCategory = prvalue(load)
#  124|     6: ExprStmt
#  124|       0: ... += ...
#  124|           Type = double
#  124|           ValueCategory = lvalue
#  124|         0: z
#  124|             Type = double
#  124|             ValueCategory = lvalue
#  124|         1: x
#  124|             Type = double
#  124|             ValueCategory = prvalue(load)
#  125|     7: ExprStmt
#  125|       0: ... -= ...
#  125|           Type = double
#  125|           ValueCategory = lvalue
#  125|         0: z
#  125|             Type = double
#  125|             ValueCategory = lvalue
#  125|         1: x
#  125|             Type = double
#  125|             ValueCategory = prvalue(load)
#  126|     8: ExprStmt
#  126|       0: ... *= ...
#  126|           Type = double
#  126|           ValueCategory = lvalue
#  126|         0: z
#  126|             Type = double
#  126|             ValueCategory = lvalue
#  126|         1: x
#  126|             Type = double
#  126|             ValueCategory = prvalue(load)
#  127|     9: ExprStmt
#  127|       0: ... /= ...
#  127|           Type = double
#  127|           ValueCategory = lvalue
#  127|         0: z
#  127|             Type = double
#  127|             ValueCategory = lvalue
#  127|         1: x
#  127|             Type = double
#  127|             ValueCategory = prvalue(load)
#  129|     10: ExprStmt
#  129|       0: ... = ...
#  129|           Type = double
#  129|           ValueCategory = lvalue
#  129|         0: z
#  129|             Type = double
#  129|             ValueCategory = lvalue
#  129|         1: + ...
#  129|             Type = double
#  129|             ValueCategory = prvalue
#  129|           0: x
#  129|               Type = double
#  129|               ValueCategory = prvalue(load)
#  130|     11: ExprStmt
#  130|       0: ... = ...
#  130|           Type = double
#  130|           ValueCategory = lvalue
#  130|         0: z
#  130|             Type = double
#  130|             ValueCategory = lvalue
#  130|         1: - ...
#  130|             Type = double
#  130|             ValueCategory = prvalue
#  130|           0: x
#  130|               Type = double
#  130|               ValueCategory = prvalue(load)
#  131|     12: return ...
#  133| void FloatCompare(double, double)
#  133|   params: 
#  133|     0: x
#  133|         Type = double
#  133|     1: y
#  133|         Type = double
#  133|   body: { ... }
#  134|     0: declaration
#  134|       0: definition of b
#  134|           Type = bool
#  136|     1: ExprStmt
#  136|       0: ... = ...
#  136|           Type = bool
#  136|           ValueCategory = lvalue
#  136|         0: b
#  136|             Type = bool
#  136|             ValueCategory = lvalue
#  136|         1: ... == ...
#  136|             Type = bool
#  136|             ValueCategory = prvalue
#  136|           0: x
#  136|               Type = double
#  136|               ValueCategory = prvalue(load)
#  136|           1: y
#  136|               Type = double
#  136|               ValueCategory = prvalue(load)
#  137|     2: ExprStmt
#  137|       0: ... = ...
#  137|           Type = bool
#  137|           ValueCategory = lvalue
#  137|         0: b
#  137|             Type = bool
#  137|             ValueCategory = lvalue
#  137|         1: ... != ...
#  137|             Type = bool
#  137|             ValueCategory = prvalue
#  137|           0: x
#  137|               Type = double
#  137|               ValueCategory = prvalue(load)
#  137|           1: y
#  137|               Type = double
#  137|               ValueCategory = prvalue(load)
#  138|     3: ExprStmt
#  138|       0: ... = ...
#  138|           Type = bool
#  138|           ValueCategory = lvalue
#  138|         0: b
#  138|             Type = bool
#  138|             ValueCategory = lvalue
#  138|         1: ... < ...
#  138|             Type = bool
#  138|             ValueCategory = prvalue
#  138|           0: x
#  138|               Type = double
#  138|               ValueCategory = prvalue(load)
#  138|           1: y
#  138|               Type = double
#  138|               ValueCategory = prvalue(load)
#  139|     4: ExprStmt
#  139|       0: ... = ...
#  139|           Type = bool
#  139|           ValueCategory = lvalue
#  139|         0: b
#  139|             Type = bool
#  139|             ValueCategory = lvalue
#  139|         1: ... > ...
#  139|             Type = bool
#  139|             ValueCategory = prvalue
#  139|           0: x
#  139|               Type = double
#  139|               ValueCategory = prvalue(load)
#  139|           1: y
#  139|               Type = double
#  139|               ValueCategory = prvalue(load)
#  140|     5: ExprStmt
#  140|       0: ... = ...
#  140|           Type = bool
#  140|           ValueCategory = lvalue
#  140|         0: b
#  140|             Type = bool
#  140|             ValueCategory = lvalue
#  140|         1: ... <= ...
#  140|             Type = bool
#  140|             ValueCategory = prvalue
#  140|           0: x
#  140|               Type = double
#  140|               ValueCategory = prvalue(load)
#  140|           1: y
#  140|               Type = double
#  140|               ValueCategory = prvalue(load)
#  141|     6: ExprStmt
#  141|       0: ... = ...
#  141|           Type = bool
#  141|           ValueCategory = lvalue
#  141|         0: b
#  141|             Type = bool
#  141|             ValueCategory = lvalue
#  141|         1: ... >= ...
#  141|             Type = bool
#  141|             ValueCategory = prvalue
#  141|           0: x
#  141|               Type = double
#  141|               ValueCategory = prvalue(load)
#  141|           1: y
#  141|               Type = double
#  141|               ValueCategory = prvalue(load)
#  142|     7: return ...
#  144| void FloatCrement(float)
#  144|   params: 
#  144|     0: x
#  144|         Type = float
#  144|   body: { ... }
#  145|     0: declaration
#  145|       0: definition of y
#  145|           Type = float
#  147|     1: ExprStmt
#  147|       0: ... = ...
#  147|           Type = float
#  147|           ValueCategory = lvalue
#  147|         0: y
#  147|             Type = float
#  147|             ValueCategory = lvalue
#  147|         1: ++ ...
#  147|             Type = float
#  147|             ValueCategory = prvalue
#  147|           0: x
#  147|               Type = float
#  147|               ValueCategory = lvalue
#  148|     2: ExprStmt
#  148|       0: ... = ...
#  148|           Type = float
#  148|           ValueCategory = lvalue
#  148|         0: y
#  148|             Type = float
#  148|             ValueCategory = lvalue
#  148|         1: -- ...
#  148|             Type = float
#  148|             ValueCategory = prvalue
#  148|           0: x
#  148|               Type = float
#  148|               ValueCategory = lvalue
#  149|     3: ExprStmt
#  149|       0: ... = ...
#  149|           Type = float
#  149|           ValueCategory = lvalue
#  149|         0: y
#  149|             Type = float
#  149|             ValueCategory = lvalue
#  149|         1: ... ++
#  149|             Type = float
#  149|             ValueCategory = prvalue
#  149|           0: x
#  149|               Type = float
#  149|               ValueCategory = lvalue
#  150|     4: ExprStmt
#  150|       0: ... = ...
#  150|           Type = float
#  150|           ValueCategory = lvalue
#  150|         0: y
#  150|             Type = float
#  150|             ValueCategory = lvalue
#  150|         1: ... --
#  150|             Type = float
#  150|             ValueCategory = prvalue
#  150|           0: x
#  150|               Type = float
#  150|               ValueCategory = lvalue
#  151|     5: return ...
#  153| void PointerOps(int*, int)
#  153|   params: 
#  153|     0: p
#  153|         Type = int *
#  153|     1: i
#  153|         Type = int
#  153|   body: { ... }
#  154|     0: declaration
#  154|       0: definition of q
#  154|           Type = int *
#  155|     1: declaration
#  155|       0: definition of b
#  155|           Type = bool
#  157|     2: ExprStmt
#  157|       0: ... = ...
#  157|           Type = int *
#  157|           ValueCategory = lvalue
#  157|         0: q
#  157|             Type = int *
#  157|             ValueCategory = lvalue
#  157|         1: ... + ...
#  157|             Type = int *
#  157|             ValueCategory = prvalue
#  157|           0: p
#  157|               Type = int *
#  157|               ValueCategory = prvalue(load)
#  157|           1: i
#  157|               Type = int
#  157|               ValueCategory = prvalue(load)
#  158|     3: ExprStmt
#  158|       0: ... = ...
#  158|           Type = int *
#  158|           ValueCategory = lvalue
#  158|         0: q
#  158|             Type = int *
#  158|             ValueCategory = lvalue
#  158|         1: ... + ...
#  158|             Type = int *
#  158|             ValueCategory = prvalue
#  158|           0: i
#  158|               Type = int
#  158|               ValueCategory = prvalue(load)
#  158|           1: p
#  158|               Type = int *
#  158|               ValueCategory = prvalue(load)
#  159|     4: ExprStmt
#  159|       0: ... = ...
#  159|           Type = int *
#  159|           ValueCategory = lvalue
#  159|         0: q
#  159|             Type = int *
#  159|             ValueCategory = lvalue
#  159|         1: ... - ...
#  159|             Type = int *
#  159|             ValueCategory = prvalue
#  159|           0: p
#  159|               Type = int *
#  159|               ValueCategory = prvalue(load)
#  159|           1: i
#  159|               Type = int
#  159|               ValueCategory = prvalue(load)
#  160|     5: ExprStmt
#  160|       0: ... = ...
#  160|           Type = int
#  160|           ValueCategory = lvalue
#  160|         0: i
#  160|             Type = int
#  160|             ValueCategory = lvalue
#  160|         1: (int)...
#  160|             Conversion = integral conversion
#  160|             Type = int
#  160|             ValueCategory = prvalue
#  160|           expr: ... - ...
#  160|               Type = long
#  160|               ValueCategory = prvalue
#  160|             0: p
#  160|                 Type = int *
#  160|                 ValueCategory = prvalue(load)
#  160|             1: q
#  160|                 Type = int *
#  160|                 ValueCategory = prvalue(load)
#  162|     6: ExprStmt
#  162|       0: ... = ...
#  162|           Type = int *
#  162|           ValueCategory = lvalue
#  162|         0: q
#  162|             Type = int *
#  162|             ValueCategory = lvalue
#  162|         1: p
#  162|             Type = int *
#  162|             ValueCategory = prvalue(load)
#  164|     7: ExprStmt
#  164|       0: ... += ...
#  164|           Type = int *
#  164|           ValueCategory = lvalue
#  164|         0: q
#  164|             Type = int *
#  164|             ValueCategory = lvalue
#  164|         1: i
#  164|             Type = int
#  164|             ValueCategory = prvalue(load)
#  165|     8: ExprStmt
#  165|       0: ... -= ...
#  165|           Type = int *
#  165|           ValueCategory = lvalue
#  165|         0: q
#  165|             Type = int *
#  165|             ValueCategory = lvalue
#  165|         1: i
#  165|             Type = int
#  165|             ValueCategory = prvalue(load)
#  167|     9: ExprStmt
#  167|       0: ... = ...
#  167|           Type = bool
#  167|           ValueCategory = lvalue
#  167|         0: b
#  167|             Type = bool
#  167|             ValueCategory = lvalue
#  167|         1: (bool)...
#  167|             Conversion = conversion to bool
#  167|             Type = bool
#  167|             ValueCategory = prvalue
#  167|           expr: p
#  167|               Type = int *
#  167|               ValueCategory = prvalue(load)
#  168|     10: ExprStmt
#  168|       0: ... = ...
#  168|           Type = bool
#  168|           ValueCategory = lvalue
#  168|         0: b
#  168|             Type = bool
#  168|             ValueCategory = lvalue
#  168|         1: ! ...
#  168|             Type = bool
#  168|             ValueCategory = prvalue
#  168|           0: (bool)...
#  168|               Conversion = conversion to bool
#  168|               Type = bool
#  168|               ValueCategory = prvalue
#  168|             expr: p
#  168|                 Type = int *
#  168|                 ValueCategory = prvalue(load)
#  169|     11: return ...
#  171| void ArrayAccess(int*, int)
#  171|   params: 
#  171|     0: p
#  171|         Type = int *
#  171|     1: i
#  171|         Type = int
#  171|   body: { ... }
#  172|     0: declaration
#  172|       0: definition of x
#  172|           Type = int
#  174|     1: ExprStmt
#  174|       0: ... = ...
#  174|           Type = int
#  174|           ValueCategory = lvalue
#  174|         0: x
#  174|             Type = int
#  174|             ValueCategory = lvalue
#  174|         1: access to array
#  174|             Type = int
#  174|             ValueCategory = prvalue(load)
#  174|           0: p
#  174|               Type = int *
#  174|               ValueCategory = prvalue(load)
#  174|           1: i
#  174|               Type = int
#  174|               ValueCategory = prvalue(load)
#  175|     2: ExprStmt
#  175|       0: ... = ...
#  175|           Type = int
#  175|           ValueCategory = lvalue
#  175|         0: x
#  175|             Type = int
#  175|             ValueCategory = lvalue
#  175|         1: access to array
#  175|             Type = int
#  175|             ValueCategory = prvalue(load)
#  175|           0: p
#  175|               Type = int *
#  175|               ValueCategory = prvalue(load)
#  175|           1: i
#  175|               Type = int
#  175|               ValueCategory = prvalue(load)
#  177|     3: ExprStmt
#  177|       0: ... = ...
#  177|           Type = int
#  177|           ValueCategory = lvalue
#  177|         0: access to array
#  177|             Type = int
#  177|             ValueCategory = lvalue
#  177|           0: p
#  177|               Type = int *
#  177|               ValueCategory = prvalue(load)
#  177|           1: i
#  177|               Type = int
#  177|               ValueCategory = prvalue(load)
#  177|         1: x
#  177|             Type = int
#  177|             ValueCategory = prvalue(load)
#  178|     4: ExprStmt
#  178|       0: ... = ...
#  178|           Type = int
#  178|           ValueCategory = lvalue
#  178|         0: access to array
#  178|             Type = int
#  178|             ValueCategory = lvalue
#  178|           0: p
#  178|               Type = int *
#  178|               ValueCategory = prvalue(load)
#  178|           1: i
#  178|               Type = int
#  178|               ValueCategory = prvalue(load)
#  178|         1: x
#  178|             Type = int
#  178|             ValueCategory = prvalue(load)
#  180|     5: declaration
#  180|       0: definition of a
#  180|           Type = int[10]
#  181|     6: ExprStmt
#  181|       0: ... = ...
#  181|           Type = int
#  181|           ValueCategory = lvalue
#  181|         0: x
#  181|             Type = int
#  181|             ValueCategory = lvalue
#  181|         1: access to array
#  181|             Type = int
#  181|             ValueCategory = prvalue(load)
#  181|           0: array to pointer conversion
#  181|               Type = int *
#  181|               ValueCategory = prvalue
#  181|             expr: a
#  181|                 Type = int[10]
#  181|                 ValueCategory = lvalue
#  181|           1: i
#  181|               Type = int
#  181|               ValueCategory = prvalue(load)
#  182|     7: ExprStmt
#  182|       0: ... = ...
#  182|           Type = int
#  182|           ValueCategory = lvalue
#  182|         0: x
#  182|             Type = int
#  182|             ValueCategory = lvalue
#  182|         1: access to array
#  182|             Type = int
#  182|             ValueCategory = prvalue(load)
#  182|           0: array to pointer conversion
#  182|               Type = int *
#  182|               ValueCategory = prvalue
#  182|             expr: a
#  182|                 Type = int[10]
#  182|                 ValueCategory = lvalue
#  182|           1: i
#  182|               Type = int
#  182|               ValueCategory = prvalue(load)
#  183|     8: ExprStmt
#  183|       0: ... = ...
#  183|           Type = int
#  183|           ValueCategory = lvalue
#  183|         0: access to array
#  183|             Type = int
#  183|             ValueCategory = lvalue
#  183|           0: array to pointer conversion
#  183|               Type = int *
#  183|               ValueCategory = prvalue
#  183|             expr: a
#  183|                 Type = int[10]
#  183|                 ValueCategory = lvalue
#  183|           1: i
#  183|               Type = int
#  183|               ValueCategory = prvalue(load)
#  183|         1: x
#  183|             Type = int
#  183|             ValueCategory = prvalue(load)
#  184|     9: ExprStmt
#  184|       0: ... = ...
#  184|           Type = int
#  184|           ValueCategory = lvalue
#  184|         0: access to array
#  184|             Type = int
#  184|             ValueCategory = lvalue
#  184|           0: array to pointer conversion
#  184|               Type = int *
#  184|               ValueCategory = prvalue
#  184|             expr: a
#  184|                 Type = int[10]
#  184|                 ValueCategory = lvalue
#  184|           1: i
#  184|               Type = int
#  184|               ValueCategory = prvalue(load)
#  184|         1: x
#  184|             Type = int
#  184|             ValueCategory = prvalue(load)
#  185|     10: return ...
#  187| void StringLiteral(int)
#  187|   params: 
#  187|     0: i
#  187|         Type = int
#  187|   body: { ... }
#  188|     0: declaration
#  188|       0: definition of c
#  188|           Type = char
#  188|         init: initializer for c
#  188|           expr: access to array
#  188|               Type = char
#  188|               ValueCategory = prvalue(load)
#  188|             0: array to pointer conversion
#  188|                 Type = const char *
#  188|                 ValueCategory = prvalue
#  188|               expr: Foo
#  188|                   Type = const char[4]
#  188|                   Value = "Foo"
#  188|                   ValueCategory = lvalue
#  188|             1: i
#  188|                 Type = int
#  188|                 ValueCategory = prvalue(load)
#  189|     1: declaration
#  189|       0: definition of pwc
#  189|           Type = wchar_t *
#  189|         init: initializer for pwc
#  189|           expr: (wchar_t *)...
#  189|               Conversion = pointer conversion
#  189|               Type = wchar_t *
#  189|               ValueCategory = prvalue
#  189|             expr: array to pointer conversion
#  189|                 Type = const wchar_t *
#  189|                 ValueCategory = prvalue
#  189|               expr: Bar
#  189|                   Type = const wchar_t[4]
#  189|                   Value = "Bar"
#  189|                   ValueCategory = lvalue
#  190|     2: declaration
#  190|       0: definition of wc
#  190|           Type = wchar_t
#  190|         init: initializer for wc
#  190|           expr: access to array
#  190|               Type = wchar_t
#  190|               ValueCategory = prvalue(load)
#  190|             0: pwc
#  190|                 Type = wchar_t *
#  190|                 ValueCategory = prvalue(load)
#  190|             1: i
#  190|                 Type = int
#  190|                 ValueCategory = prvalue(load)
#  191|     3: return ...
#  193| void PointerCompare(int*, int*)
#  193|   params: 
#  193|     0: p
#  193|         Type = int *
#  193|     1: q
#  193|         Type = int *
#  193|   body: { ... }
#  194|     0: declaration
#  194|       0: definition of b
#  194|           Type = bool
#  196|     1: ExprStmt
#  196|       0: ... = ...
#  196|           Type = bool
#  196|           ValueCategory = lvalue
#  196|         0: b
#  196|             Type = bool
#  196|             ValueCategory = lvalue
#  196|         1: ... == ...
#  196|             Type = bool
#  196|             ValueCategory = prvalue
#  196|           0: p
#  196|               Type = int *
#  196|               ValueCategory = prvalue(load)
#  196|           1: q
#  196|               Type = int *
#  196|               ValueCategory = prvalue(load)
#  197|     2: ExprStmt
#  197|       0: ... = ...
#  197|           Type = bool
#  197|           ValueCategory = lvalue
#  197|         0: b
#  197|             Type = bool
#  197|             ValueCategory = lvalue
#  197|         1: ... != ...
#  197|             Type = bool
#  197|             ValueCategory = prvalue
#  197|           0: p
#  197|               Type = int *
#  197|               ValueCategory = prvalue(load)
#  197|           1: q
#  197|               Type = int *
#  197|               ValueCategory = prvalue(load)
#  198|     3: ExprStmt
#  198|       0: ... = ...
#  198|           Type = bool
#  198|           ValueCategory = lvalue
#  198|         0: b
#  198|             Type = bool
#  198|             ValueCategory = lvalue
#  198|         1: ... < ...
#  198|             Type = bool
#  198|             ValueCategory = prvalue
#  198|           0: p
#  198|               Type = int *
#  198|               ValueCategory = prvalue(load)
#  198|           1: q
#  198|               Type = int *
#  198|               ValueCategory = prvalue(load)
#  199|     4: ExprStmt
#  199|       0: ... = ...
#  199|           Type = bool
#  199|           ValueCategory = lvalue
#  199|         0: b
#  199|             Type = bool
#  199|             ValueCategory = lvalue
#  199|         1: ... > ...
#  199|             Type = bool
#  199|             ValueCategory = prvalue
#  199|           0: p
#  199|               Type = int *
#  199|               ValueCategory = prvalue(load)
#  199|           1: q
#  199|               Type = int *
#  199|               ValueCategory = prvalue(load)
#  200|     5: ExprStmt
#  200|       0: ... = ...
#  200|           Type = bool
#  200|           ValueCategory = lvalue
#  200|         0: b
#  200|             Type = bool
#  200|             ValueCategory = lvalue
#  200|         1: ... <= ...
#  200|             Type = bool
#  200|             ValueCategory = prvalue
#  200|           0: p
#  200|               Type = int *
#  200|               ValueCategory = prvalue(load)
#  200|           1: q
#  200|               Type = int *
#  200|               ValueCategory = prvalue(load)
#  201|     6: ExprStmt
#  201|       0: ... = ...
#  201|           Type = bool
#  201|           ValueCategory = lvalue
#  201|         0: b
#  201|             Type = bool
#  201|             ValueCategory = lvalue
#  201|         1: ... >= ...
#  201|             Type = bool
#  201|             ValueCategory = prvalue
#  201|           0: p
#  201|               Type = int *
#  201|               ValueCategory = prvalue(load)
#  201|           1: q
#  201|               Type = int *
#  201|               ValueCategory = prvalue(load)
#  202|     7: return ...
#  204| void PointerCrement(int*)
#  204|   params: 
#  204|     0: p
#  204|         Type = int *
#  204|   body: { ... }
#  205|     0: declaration
#  205|       0: definition of q
#  205|           Type = int *
#  207|     1: ExprStmt
#  207|       0: ... = ...
#  207|           Type = int *
#  207|           ValueCategory = lvalue
#  207|         0: q
#  207|             Type = int *
#  207|             ValueCategory = lvalue
#  207|         1: ++ ...
#  207|             Type = int *
#  207|             ValueCategory = prvalue
#  207|           0: p
#  207|               Type = int *
#  207|               ValueCategory = lvalue
#  208|     2: ExprStmt
#  208|       0: ... = ...
#  208|           Type = int *
#  208|           ValueCategory = lvalue
#  208|         0: q
#  208|             Type = int *
#  208|             ValueCategory = lvalue
#  208|         1: -- ...
#  208|             Type = int *
#  208|             ValueCategory = prvalue
#  208|           0: p
#  208|               Type = int *
#  208|               ValueCategory = lvalue
#  209|     3: ExprStmt
#  209|       0: ... = ...
#  209|           Type = int *
#  209|           ValueCategory = lvalue
#  209|         0: q
#  209|             Type = int *
#  209|             ValueCategory = lvalue
#  209|         1: ... ++
#  209|             Type = int *
#  209|             ValueCategory = prvalue
#  209|           0: p
#  209|               Type = int *
#  209|               ValueCategory = lvalue
#  210|     4: ExprStmt
#  210|       0: ... = ...
#  210|           Type = int *
#  210|           ValueCategory = lvalue
#  210|         0: q
#  210|             Type = int *
#  210|             ValueCategory = lvalue
#  210|         1: ... --
#  210|             Type = int *
#  210|             ValueCategory = prvalue
#  210|           0: p
#  210|               Type = int *
#  210|               ValueCategory = lvalue
#  211|     5: return ...
#  213| void CompoundAssignment()
#  213|   params: 
#  213|   body: { ... }
#  215|     0: declaration
#  215|       0: definition of x
#  215|           Type = int
#  215|         init: initializer for x
#  215|           expr: 5
#  215|               Type = int
#  215|               Value = 5
#  215|               ValueCategory = prvalue
#  216|     1: ExprStmt
#  216|       0: ... += ...
#  216|           Type = int
#  216|           ValueCategory = lvalue
#  216|         0: x
#  216|             Type = int
#  216|             ValueCategory = lvalue
#  216|         1: 7
#  216|             Type = int
#  216|             Value = 7
#  216|             ValueCategory = prvalue
#  219|     2: declaration
#  219|       0: definition of y
#  219|           Type = short
#  219|         init: initializer for y
#  219|           expr: (short)...
#  219|               Conversion = integral conversion
#  219|               Type = short
#  219|               Value = 5
#  219|               ValueCategory = prvalue
#  219|             expr: 5
#  219|                 Type = int
#  219|                 Value = 5
#  219|                 ValueCategory = prvalue
#  220|     3: ExprStmt
#  220|       0: ... += ...
#  220|           Type = short
#  220|           ValueCategory = lvalue
#  220|         0: y
#  220|             Type = short
#  220|             ValueCategory = lvalue
#  220|         1: x
#  220|             Type = int
#  220|             ValueCategory = prvalue(load)
#  223|     4: ExprStmt
#  223|       0: ... <<= ...
#  223|           Type = short
#  223|           ValueCategory = lvalue
#  223|         0: y
#  223|             Type = short
#  223|             ValueCategory = lvalue
#  223|         1: 1
#  223|             Type = int
#  223|             Value = 1
#  223|             ValueCategory = prvalue
#  226|     5: declaration
#  226|       0: definition of z
#  226|           Type = long
#  226|         init: initializer for z
#  226|           expr: (long)...
#  226|               Conversion = integral conversion
#  226|               Type = long
#  226|               Value = 7
#  226|               ValueCategory = prvalue
#  226|             expr: 7
#  226|                 Type = int
#  226|                 Value = 7
#  226|                 ValueCategory = prvalue
#  227|     6: ExprStmt
#  227|       0: ... += ...
#  227|           Type = long
#  227|           ValueCategory = lvalue
#  227|         0: z
#  227|             Type = long
#  227|             ValueCategory = lvalue
#  227|         1: 2.0
#  227|             Type = float
#  227|             Value = 2.0
#  227|             ValueCategory = prvalue
#  228|     7: return ...
#  230| void UninitializedVariables()
#  230|   params: 
#  230|   body: { ... }
#  231|     0: declaration
#  231|       0: definition of x
#  231|           Type = int
#  232|     1: declaration
#  232|       0: definition of y
#  232|           Type = int
#  232|         init: initializer for y
#  232|           expr: x
#  232|               Type = int
#  232|               ValueCategory = prvalue(load)
#  233|     2: return ...
#  235| int Parameters(int, int)
#  235|   params: 
#  235|     0: x
#  235|         Type = int
#  235|     1: y
#  235|         Type = int
#  235|   body: { ... }
#  236|     0: return ...
#  236|       0: ... % ...
#  236|           Type = int
#  236|           ValueCategory = prvalue
#  236|         0: x
#  236|             Type = int
#  236|             ValueCategory = prvalue(load)
#  236|         1: y
#  236|             Type = int
#  236|             ValueCategory = prvalue(load)
#  239| void IfStatements(bool, int, int)
#  239|   params: 
#  239|     0: b
#  239|         Type = bool
#  239|     1: x
#  239|         Type = int
#  239|     2: y
#  239|         Type = int
#  239|   body: { ... }
#  240|     0: if (...) ... 
#  240|       0: b
#  240|           Type = bool
#  240|           ValueCategory = prvalue(load)
#  240|       1: { ... }
#  243|     1: if (...) ... 
#  243|       0: b
#  243|           Type = bool
#  243|           ValueCategory = prvalue(load)
#  243|       1: { ... }
#  244|         0: ExprStmt
#  244|           0: ... = ...
#  244|               Type = int
#  244|               ValueCategory = lvalue
#  244|             0: x
#  244|                 Type = int
#  244|                 ValueCategory = lvalue
#  244|             1: y
#  244|                 Type = int
#  244|                 ValueCategory = prvalue(load)
#  247|     2: if (...) ... 
#  247|       0: ... < ...
#  247|           Type = bool
#  247|           ValueCategory = prvalue
#  247|         0: x
#  247|             Type = int
#  247|             ValueCategory = prvalue(load)
#  247|         1: 7
#  247|             Type = int
#  247|             Value = 7
#  247|             ValueCategory = prvalue
#  248|       1: ExprStmt
#  248|         0: ... = ...
#  248|             Type = int
#  248|             ValueCategory = lvalue
#  248|           0: x
#  248|               Type = int
#  248|               ValueCategory = lvalue
#  248|           1: 2
#  248|               Type = int
#  248|               Value = 2
#  248|               ValueCategory = prvalue
#  250|       2: ExprStmt
#  250|         0: ... = ...
#  250|             Type = int
#  250|             ValueCategory = lvalue
#  250|           0: x
#  250|               Type = int
#  250|               ValueCategory = lvalue
#  250|           1: 7
#  250|               Type = int
#  250|               Value = 7
#  250|               ValueCategory = prvalue
#  251|     3: return ...
#  253| void WhileStatements(int)
#  253|   params: 
#  253|     0: n
#  253|         Type = int
#  253|   body: { ... }
#  254|     0: while (...) ...
#  254|       0: ... > ...
#  254|           Type = bool
#  254|           ValueCategory = prvalue
#  254|         0: n
#  254|             Type = int
#  254|             ValueCategory = prvalue(load)
#  254|         1: 0
#  254|             Type = int
#  254|             Value = 0
#  254|             ValueCategory = prvalue
#  254|       1: { ... }
#  255|         0: ExprStmt
#  255|           0: ... -= ...
#  255|               Type = int
#  255|               ValueCategory = lvalue
#  255|             0: n
#  255|                 Type = int
#  255|                 ValueCategory = lvalue
#  255|             1: 1
#  255|                 Type = int
#  255|                 Value = 1
#  255|                 ValueCategory = prvalue
#  257|     1: return ...
#  259| void DoStatements(int)
#  259|   params: 
#  259|     0: n
#  259|         Type = int
#  259|   body: { ... }
#  260|     0: do (...) ...
#  262|       0: ... > ...
#  262|           Type = bool
#  262|           ValueCategory = prvalue
#  262|         0: n
#  262|             Type = int
#  262|             ValueCategory = prvalue(load)
#  262|         1: 0
#  262|             Type = int
#  262|             Value = 0
#  262|             ValueCategory = prvalue
#  260|       1: { ... }
#  261|         0: ExprStmt
#  261|           0: ... -= ...
#  261|               Type = int
#  261|               ValueCategory = lvalue
#  261|             0: n
#  261|                 Type = int
#  261|                 ValueCategory = lvalue
#  261|             1: 1
#  261|                 Type = int
#  261|                 Value = 1
#  261|                 ValueCategory = prvalue
#  263|     1: return ...
#  265| void For_Empty()
#  265|   params: 
#  265|   body: { ... }
#  266|     0: declaration
#  266|       0: definition of j
#  266|           Type = int
#  267|     1: for(...;...;...) ...
#  267|       3: { ... }
#  268|         0: ;
#  272| void For_Init()
#  272|   params: 
#  272|   body: { ... }
#  273|     0: for(...;...;...) ...
#  273|       0: declaration
#  273|         0: definition of i
#  273|             Type = int
#  273|           init: initializer for i
#  273|             expr: 0
#  273|                 Type = int
#  273|                 Value = 0
#  273|                 ValueCategory = prvalue
#  273|       3: { ... }
#  274|         0: ;
#  278| void For_Condition()
#  278|   params: 
#  278|   body: { ... }
#  279|     0: declaration
#  279|       0: definition of i
#  279|           Type = int
#  279|         init: initializer for i
#  279|           expr: 0
#  279|               Type = int
#  279|               Value = 0
#  279|               ValueCategory = prvalue
#  280|     1: for(...;...;...) ...
#  280|       1: ... < ...
#  280|           Type = bool
#  280|           ValueCategory = prvalue
#  280|         0: i
#  280|             Type = int
#  280|             ValueCategory = prvalue(load)
#  280|         1: 10
#  280|             Type = int
#  280|             Value = 10
#  280|             ValueCategory = prvalue
#  280|       3: { ... }
#  281|         0: ;
#  283|     2: return ...
#  285| void For_Update()
#  285|   params: 
#  285|   body: { ... }
#  286|     0: declaration
#  286|       0: definition of i
#  286|           Type = int
#  286|         init: initializer for i
#  286|           expr: 0
#  286|               Type = int
#  286|               Value = 0
#  286|               ValueCategory = prvalue
#  287|     1: for(...;...;...) ...
#  287|       2: ... += ...
#  287|           Type = int
#  287|           ValueCategory = lvalue
#  287|         0: i
#  287|             Type = int
#  287|             ValueCategory = lvalue
#  287|         1: 1
#  287|             Type = int
#  287|             Value = 1
#  287|             ValueCategory = prvalue
#  287|       3: { ... }
#  288|         0: ;
#  292| void For_InitCondition()
#  292|   params: 
#  292|   body: { ... }
#  293|     0: for(...;...;...) ...
#  293|       0: declaration
#  293|         0: definition of i
#  293|             Type = int
#  293|           init: initializer for i
#  293|             expr: 0
#  293|                 Type = int
#  293|                 Value = 0
#  293|                 ValueCategory = prvalue
#  293|       1: ... < ...
#  293|           Type = bool
#  293|           ValueCategory = prvalue
#  293|         0: i
#  293|             Type = int
#  293|             ValueCategory = prvalue(load)
#  293|         1: 10
#  293|             Type = int
#  293|             Value = 10
#  293|             ValueCategory = prvalue
#  293|       3: { ... }
#  294|         0: ;
#  296|     1: return ...
#  298| void For_InitUpdate()
#  298|   params: 
#  298|   body: { ... }
#  299|     0: for(...;...;...) ...
#  299|       0: declaration
#  299|         0: definition of i
#  299|             Type = int
#  299|           init: initializer for i
#  299|             expr: 0
#  299|                 Type = int
#  299|                 Value = 0
#  299|                 ValueCategory = prvalue
#  299|       2: ... += ...
#  299|           Type = int
#  299|           ValueCategory = lvalue
#  299|         0: i
#  299|             Type = int
#  299|             ValueCategory = lvalue
#  299|         1: 1
#  299|             Type = int
#  299|             Value = 1
#  299|             ValueCategory = prvalue
#  299|       3: { ... }
#  300|         0: ;
#  304| void For_ConditionUpdate()
#  304|   params: 
#  304|   body: { ... }
#  305|     0: declaration
#  305|       0: definition of i
#  305|           Type = int
#  305|         init: initializer for i
#  305|           expr: 0
#  305|               Type = int
#  305|               Value = 0
#  305|               ValueCategory = prvalue
#  306|     1: for(...;...;...) ...
#  306|       1: ... < ...
#  306|           Type = bool
#  306|           ValueCategory = prvalue
#  306|         0: i
#  306|             Type = int
#  306|             ValueCategory = prvalue(load)
#  306|         1: 10
#  306|             Type = int
#  306|             Value = 10
#  306|             ValueCategory = prvalue
#  306|       2: ... += ...
#  306|           Type = int
#  306|           ValueCategory = lvalue
#  306|         0: i
#  306|             Type = int
#  306|             ValueCategory = lvalue
#  306|         1: 1
#  306|             Type = int
#  306|             Value = 1
#  306|             ValueCategory = prvalue
#  306|       3: { ... }
#  307|         0: ;
#  309|     2: return ...
#  311| void For_InitConditionUpdate()
#  311|   params: 
#  311|   body: { ... }
#  312|     0: for(...;...;...) ...
#  312|       0: declaration
#  312|         0: definition of i
#  312|             Type = int
#  312|           init: initializer for i
#  312|             expr: 0
#  312|                 Type = int
#  312|                 Value = 0
#  312|                 ValueCategory = prvalue
#  312|       1: ... < ...
#  312|           Type = bool
#  312|           ValueCategory = prvalue
#  312|         0: i
#  312|             Type = int
#  312|             ValueCategory = prvalue(load)
#  312|         1: 10
#  312|             Type = int
#  312|             Value = 10
#  312|             ValueCategory = prvalue
#  312|       2: ... += ...
#  312|           Type = int
#  312|           ValueCategory = lvalue
#  312|         0: i
#  312|             Type = int
#  312|             ValueCategory = lvalue
#  312|         1: 1
#  312|             Type = int
#  312|             Value = 1
#  312|             ValueCategory = prvalue
#  312|       3: { ... }
#  313|         0: ;
#  315|     1: return ...
#  317| void For_Break()
#  317|   params: 
#  317|   body: { ... }
#  318|     0: for(...;...;...) ...
#  318|       0: declaration
#  318|         0: definition of i
#  318|             Type = int
#  318|           init: initializer for i
#  318|             expr: 0
#  318|                 Type = int
#  318|                 Value = 0
#  318|                 ValueCategory = prvalue
#  318|       1: ... < ...
#  318|           Type = bool
#  318|           ValueCategory = prvalue
#  318|         0: i
#  318|             Type = int
#  318|             ValueCategory = prvalue(load)
#  318|         1: 10
#  318|             Type = int
#  318|             Value = 10
#  318|             ValueCategory = prvalue
#  318|       2: ... += ...
#  318|           Type = int
#  318|           ValueCategory = lvalue
#  318|         0: i
#  318|             Type = int
#  318|             ValueCategory = lvalue
#  318|         1: 1
#  318|             Type = int
#  318|             Value = 1
#  318|             ValueCategory = prvalue
#  318|       3: { ... }
#  319|         0: if (...) ... 
#  319|           0: ... == ...
#  319|               Type = bool
#  319|               ValueCategory = prvalue
#  319|             0: i
#  319|                 Type = int
#  319|                 ValueCategory = prvalue(load)
#  319|             1: 5
#  319|                 Type = int
#  319|                 Value = 5
#  319|                 ValueCategory = prvalue
#  319|           1: { ... }
#  320|             0: break;
#  322|     1: label ...:
#  323|     2: return ...
#  325| void For_Continue_Update()
#  325|   params: 
#  325|   body: { ... }
#  326|     0: for(...;...;...) ...
#  326|       0: declaration
#  326|         0: definition of i
#  326|             Type = int
#  326|           init: initializer for i
#  326|             expr: 0
#  326|                 Type = int
#  326|                 Value = 0
#  326|                 ValueCategory = prvalue
#  326|       1: ... < ...
#  326|           Type = bool
#  326|           ValueCategory = prvalue
#  326|         0: i
#  326|             Type = int
#  326|             ValueCategory = prvalue(load)
#  326|         1: 10
#  326|             Type = int
#  326|             Value = 10
#  326|             ValueCategory = prvalue
#  326|       2: ... += ...
#  326|           Type = int
#  326|           ValueCategory = lvalue
#  326|         0: i
#  326|             Type = int
#  326|             ValueCategory = lvalue
#  326|         1: 1
#  326|             Type = int
#  326|             Value = 1
#  326|             ValueCategory = prvalue
#  326|       3: { ... }
#  327|         0: if (...) ... 
#  327|           0: ... == ...
#  327|               Type = bool
#  327|               ValueCategory = prvalue
#  327|             0: i
#  327|                 Type = int
#  327|                 ValueCategory = prvalue(load)
#  327|             1: 5
#  327|                 Type = int
#  327|                 Value = 5
#  327|                 ValueCategory = prvalue
#  327|           1: { ... }
#  328|             0: continue;
#  326|         1: label ...:
#  331|     1: return ...
#  333| void For_Continue_NoUpdate()
#  333|   params: 
#  333|   body: { ... }
#  334|     0: for(...;...;...) ...
#  334|       0: declaration
#  334|         0: definition of i
#  334|             Type = int
#  334|           init: initializer for i
#  334|             expr: 0
#  334|                 Type = int
#  334|                 Value = 0
#  334|                 ValueCategory = prvalue
#  334|       1: ... < ...
#  334|           Type = bool
#  334|           ValueCategory = prvalue
#  334|         0: i
#  334|             Type = int
#  334|             ValueCategory = prvalue(load)
#  334|         1: 10
#  334|             Type = int
#  334|             Value = 10
#  334|             ValueCategory = prvalue
#  334|       3: { ... }
#  335|         0: if (...) ... 
#  335|           0: ... == ...
#  335|               Type = bool
#  335|               ValueCategory = prvalue
#  335|             0: i
#  335|                 Type = int
#  335|                 ValueCategory = prvalue(load)
#  335|             1: 5
#  335|                 Type = int
#  335|                 Value = 5
#  335|                 ValueCategory = prvalue
#  335|           1: { ... }
#  336|             0: continue;
#  334|         1: label ...:
#  339|     1: return ...
#  341| int Dereference(int*)
#  341|   params: 
#  341|     0: p
#  341|         Type = int *
#  341|   body: { ... }
#  342|     0: ExprStmt
#  342|       0: ... = ...
#  342|           Type = int
#  342|           ValueCategory = lvalue
#  342|         0: * ...
#  342|             Type = int
#  342|             ValueCategory = lvalue
#  342|           0: p
#  342|               Type = int *
#  342|               ValueCategory = prvalue(load)
#  342|         1: 1
#  342|             Type = int
#  342|             Value = 1
#  342|             ValueCategory = prvalue
#  343|     1: return ...
#  343|       0: * ...
#  343|           Type = int
#  343|           ValueCategory = prvalue(load)
#  343|         0: p
#  343|             Type = int *
#  343|             ValueCategory = prvalue(load)
#  348| int* AddressOf()
#  348|   params: 
#  348|   body: { ... }
#  349|     0: return ...
#  349|       0: & ...
#  349|           Type = int *
#  349|           ValueCategory = prvalue
#  349|         0: g
#  349|             Type = int
#  349|             ValueCategory = lvalue
#  352| void Break(int)
#  352|   params: 
#  352|     0: n
#  352|         Type = int
#  352|   body: { ... }
#  353|     0: while (...) ...
#  353|       0: ... > ...
#  353|           Type = bool
#  353|           ValueCategory = prvalue
#  353|         0: n
#  353|             Type = int
#  353|             ValueCategory = prvalue(load)
#  353|         1: 0
#  353|             Type = int
#  353|             Value = 0
#  353|             ValueCategory = prvalue
#  353|       1: { ... }
#  354|         0: if (...) ... 
#  354|           0: ... == ...
#  354|               Type = bool
#  354|               ValueCategory = prvalue
#  354|             0: n
#  354|                 Type = int
#  354|                 ValueCategory = prvalue(load)
#  354|             1: 1
#  354|                 Type = int
#  354|                 Value = 1
#  354|                 ValueCategory = prvalue
#  355|           1: break;
#  356|         1: ExprStmt
#  356|           0: ... -= ...
#  356|               Type = int
#  356|               ValueCategory = lvalue
#  356|             0: n
#  356|                 Type = int
#  356|                 ValueCategory = lvalue
#  356|             1: 1
#  356|                 Type = int
#  356|                 Value = 1
#  356|                 ValueCategory = prvalue
#  357|     1: label ...:
#  358|     2: return ...
#  360| void Continue(int)
#  360|   params: 
#  360|     0: n
#  360|         Type = int
#  360|   body: { ... }
#  361|     0: do (...) ...
#  366|       0: ... > ...
#  366|           Type = bool
#  366|           ValueCategory = prvalue
#  366|         0: n
#  366|             Type = int
#  366|             ValueCategory = prvalue(load)
#  366|         1: 0
#  366|             Type = int
#  366|             Value = 0
#  366|             ValueCategory = prvalue
#  361|       1: { ... }
#  362|         0: if (...) ... 
#  362|           0: ... == ...
#  362|               Type = bool
#  362|               ValueCategory = prvalue
#  362|             0: n
#  362|                 Type = int
#  362|                 ValueCategory = prvalue(load)
#  362|             1: 1
#  362|                 Type = int
#  362|                 Value = 1
#  362|                 ValueCategory = prvalue
#  362|           1: { ... }
#  363|             0: continue;
#  365|         1: ExprStmt
#  365|           0: ... -= ...
#  365|               Type = int
#  365|               ValueCategory = lvalue
#  365|             0: n
#  365|                 Type = int
#  365|                 ValueCategory = lvalue
#  365|             1: 1
#  365|                 Type = int
#  365|                 Value = 1
#  365|                 ValueCategory = prvalue
#  361|         2: label ...:
#  367|     1: return ...
#  369| void VoidFunc()
#  369|   params: 
#  370| int Add(int, int)
#  370|   params: 
#  370|     0: x
#  370|         Type = int
#  370|     1: y
#  370|         Type = int
#  372| void Call()
#  372|   params: 
#  372|   body: { ... }
#  373|     0: ExprStmt
#  373|       0: call to VoidFunc
#  373|           Type = void
#  373|           ValueCategory = prvalue
#  374|     1: return ...
#  376| int CallAdd(int, int)
#  376|   params: 
#  376|     0: x
#  376|         Type = int
#  376|     1: y
#  376|         Type = int
#  376|   body: { ... }
#  377|     0: return ...
#  377|       0: call to Add
#  377|           Type = int
#  377|           ValueCategory = prvalue
#  377|         0: x
#  377|             Type = int
#  377|             ValueCategory = prvalue(load)
#  377|         1: y
#  377|             Type = int
#  377|             ValueCategory = prvalue(load)
#  380| int Comma(int, int)
#  380|   params: 
#  380|     0: x
#  380|         Type = int
#  380|     1: y
#  380|         Type = int
#  380|   body: { ... }
#  381|     0: return ...
#  381|       0: ... , ...
#  381|           Type = int
#  381|           ValueCategory = prvalue
#  381|         0: call to VoidFunc
#  381|             Type = void
#  381|             ValueCategory = prvalue
#  381|         1: call to CallAdd
#  381|             Type = int
#  381|             ValueCategory = prvalue
#  381|           0: x
#  381|               Type = int
#  381|               ValueCategory = prvalue(load)
#  381|           1: y
#  381|               Type = int
#  381|               ValueCategory = prvalue(load)
#  384| void Switch(int)
#  384|   params: 
#  384|     0: x
#  384|         Type = int
#  384|   body: { ... }
#  385|     0: declaration
#  385|       0: definition of y
#  385|           Type = int
#  386|     1: switch (...) ... 
#  386|       0: x
#  386|           Type = int
#  386|           ValueCategory = prvalue(load)
#  386|       1: { ... }
#  387|         0: ExprStmt
#  387|           0: ... = ...
#  387|               Type = int
#  387|               ValueCategory = lvalue
#  387|             0: y
#  387|                 Type = int
#  387|                 ValueCategory = lvalue
#  387|             1: 1234
#  387|                 Type = int
#  387|                 Value = 1234
#  387|                 ValueCategory = prvalue
#  389|         1: case ...:
#  389|           0: - ...
#  389|               Type = int
#  389|               Value = -1
#  389|               ValueCategory = prvalue
#  389|             0: 1
#  389|                 Type = int
#  389|                 Value = 1
#  389|                 ValueCategory = prvalue
#  390|         2: ExprStmt
#  390|           0: ... = ...
#  390|               Type = int
#  390|               ValueCategory = lvalue
#  390|             0: y
#  390|                 Type = int
#  390|                 ValueCategory = lvalue
#  390|             1: - ...
#  390|                 Type = int
#  390|                 Value = -1
#  390|                 ValueCategory = prvalue
#  390|               0: 1
#  390|                   Type = int
#  390|                   Value = 1
#  390|                   ValueCategory = prvalue
#  391|         3: break;
#  393|         4: case ...:
#  393|           0: 1
#  393|               Type = int
#  393|               Value = 1
#  393|               ValueCategory = prvalue
#  394|         5: case ...:
#  394|           0: 2
#  394|               Type = int
#  394|               Value = 2
#  394|               ValueCategory = prvalue
#  395|         6: ExprStmt
#  395|           0: ... = ...
#  395|               Type = int
#  395|               ValueCategory = lvalue
#  395|             0: y
#  395|                 Type = int
#  395|                 ValueCategory = lvalue
#  395|             1: 1
#  395|                 Type = int
#  395|                 Value = 1
#  395|                 ValueCategory = prvalue
#  396|         7: break;
#  398|         8: case ...:
#  398|           0: 3
#  398|               Type = int
#  398|               Value = 3
#  398|               ValueCategory = prvalue
#  399|         9: ExprStmt
#  399|           0: ... = ...
#  399|               Type = int
#  399|               ValueCategory = lvalue
#  399|             0: y
#  399|                 Type = int
#  399|                 ValueCategory = lvalue
#  399|             1: 3
#  399|                 Type = int
#  399|                 Value = 3
#  399|                 ValueCategory = prvalue
#  400|         10: case ...:
#  400|           0: 4
#  400|               Type = int
#  400|               Value = 4
#  400|               ValueCategory = prvalue
#  401|         11: ExprStmt
#  401|           0: ... = ...
#  401|               Type = int
#  401|               ValueCategory = lvalue
#  401|             0: y
#  401|                 Type = int
#  401|                 ValueCategory = lvalue
#  401|             1: 4
#  401|                 Type = int
#  401|                 Value = 4
#  401|                 ValueCategory = prvalue
#  402|         12: break;
#  404|         13: default: 
#  405|         14: ExprStmt
#  405|           0: ... = ...
#  405|               Type = int
#  405|               ValueCategory = lvalue
#  405|             0: y
#  405|                 Type = int
#  405|                 ValueCategory = lvalue
#  405|             1: 0
#  405|                 Type = int
#  405|                 Value = 0
#  405|                 ValueCategory = prvalue
#  406|         15: break;
#  408|         16: ExprStmt
#  408|           0: ... = ...
#  408|               Type = int
#  408|               ValueCategory = lvalue
#  408|             0: y
#  408|                 Type = int
#  408|                 ValueCategory = lvalue
#  408|             1: 5678
#  408|                 Type = int
#  408|                 Value = 5678
#  408|                 ValueCategory = prvalue
#  409|     2: label ...:
#  410|     3: return ...
#  412| Point& Point::operator=(Point const&)
#  412|   params: 
#-----|     0: p#0
#-----|         Type = const Point &
#  412| Point& Point::operator=(Point&&)
#  412|   params: 
#-----|     0: p#0
#-----|         Type = Point &&
#  417| Rect& Rect::operator=(Rect const&)
#  417|   params: 
#-----|     0: p#0
#-----|         Type = const Rect &
#  417| Rect& Rect::operator=(Rect&&)
#  417|   params: 
#-----|     0: p#0
#-----|         Type = Rect &&
#  422| Point ReturnStruct(Point)
#  422|   params: 
#  422|     0: pt
#  422|         Type = Point
#  422|   body: { ... }
#  423|     0: return ...
#  423|       0: pt
#  423|           Type = Point
#  423|           ValueCategory = prvalue(load)
#  426| void FieldAccess()
#  426|   params: 
#  426|   body: { ... }
#  427|     0: declaration
#  427|       0: definition of pt
#  427|           Type = Point
#  428|     1: ExprStmt
#  428|       0: ... = ...
#  428|           Type = int
#  428|           ValueCategory = lvalue
#  428|         0: x
#  428|             Type = int
#  428|             ValueCategory = lvalue
#  428|           -1: pt
#  428|               Type = Point
#  428|               ValueCategory = lvalue
#  428|         1: 5
#  428|             Type = int
#  428|             Value = 5
#  428|             ValueCategory = prvalue
#  429|     2: ExprStmt
#  429|       0: ... = ...
#  429|           Type = int
#  429|           ValueCategory = lvalue
#  429|         0: y
#  429|             Type = int
#  429|             ValueCategory = lvalue
#  429|           -1: pt
#  429|               Type = Point
#  429|               ValueCategory = lvalue
#  429|         1: x
#  429|             Type = int
#  429|             ValueCategory = prvalue(load)
#  429|           -1: pt
#  429|               Type = Point
#  429|               ValueCategory = lvalue
#  430|     3: declaration
#  430|       0: definition of p
#  430|           Type = int *
#  430|         init: initializer for p
#  430|           expr: & ...
#  430|               Type = int *
#  430|               ValueCategory = prvalue
#  430|             0: y
#  430|                 Type = int
#  430|                 ValueCategory = lvalue
#  430|               -1: pt
#  430|                   Type = Point
#  430|                   ValueCategory = lvalue
#  431|     4: return ...
#  433| void LogicalOr(bool, bool)
#  433|   params: 
#  433|     0: a
#  433|         Type = bool
#  433|     1: b
#  433|         Type = bool
#  433|   body: { ... }
#  434|     0: declaration
#  434|       0: definition of x
#  434|           Type = int
#  435|     1: if (...) ... 
#  435|       0: ... || ...
#  435|           Type = bool
#  435|           ValueCategory = prvalue
#  435|         0: a
#  435|             Type = bool
#  435|             ValueCategory = prvalue(load)
#  435|         1: b
#  435|             Type = bool
#  435|             ValueCategory = prvalue(load)
#  435|       1: { ... }
#  436|         0: ExprStmt
#  436|           0: ... = ...
#  436|               Type = int
#  436|               ValueCategory = lvalue
#  436|             0: x
#  436|                 Type = int
#  436|                 ValueCategory = lvalue
#  436|             1: 7
#  436|                 Type = int
#  436|                 Value = 7
#  436|                 ValueCategory = prvalue
#  439|     2: if (...) ... 
#  439|       0: ... || ...
#  439|           Type = bool
#  439|           ValueCategory = prvalue
#  439|         0: a
#  439|             Type = bool
#  439|             ValueCategory = prvalue(load)
#  439|         1: b
#  439|             Type = bool
#  439|             ValueCategory = prvalue(load)
#  439|       1: { ... }
#  440|         0: ExprStmt
#  440|           0: ... = ...
#  440|               Type = int
#  440|               ValueCategory = lvalue
#  440|             0: x
#  440|                 Type = int
#  440|                 ValueCategory = lvalue
#  440|             1: 1
#  440|                 Type = int
#  440|                 Value = 1
#  440|                 ValueCategory = prvalue
#  442|       2: { ... }
#  443|         0: ExprStmt
#  443|           0: ... = ...
#  443|               Type = int
#  443|               ValueCategory = lvalue
#  443|             0: x
#  443|                 Type = int
#  443|                 ValueCategory = lvalue
#  443|             1: 5
#  443|                 Type = int
#  443|                 Value = 5
#  443|                 ValueCategory = prvalue
#  445|     3: return ...
#  447| void LogicalAnd(bool, bool)
#  447|   params: 
#  447|     0: a
#  447|         Type = bool
#  447|     1: b
#  447|         Type = bool
#  447|   body: { ... }
#  448|     0: declaration
#  448|       0: definition of x
#  448|           Type = int
#  449|     1: if (...) ... 
#  449|       0: ... && ...
#  449|           Type = bool
#  449|           ValueCategory = prvalue
#  449|         0: a
#  449|             Type = bool
#  449|             ValueCategory = prvalue(load)
#  449|         1: b
#  449|             Type = bool
#  449|             ValueCategory = prvalue(load)
#  449|       1: { ... }
#  450|         0: ExprStmt
#  450|           0: ... = ...
#  450|               Type = int
#  450|               ValueCategory = lvalue
#  450|             0: x
#  450|                 Type = int
#  450|                 ValueCategory = lvalue
#  450|             1: 7
#  450|                 Type = int
#  450|                 Value = 7
#  450|                 ValueCategory = prvalue
#  453|     2: if (...) ... 
#  453|       0: ... && ...
#  453|           Type = bool
#  453|           ValueCategory = prvalue
#  453|         0: a
#  453|             Type = bool
#  453|             ValueCategory = prvalue(load)
#  453|         1: b
#  453|             Type = bool
#  453|             ValueCategory = prvalue(load)
#  453|       1: { ... }
#  454|         0: ExprStmt
#  454|           0: ... = ...
#  454|               Type = int
#  454|               ValueCategory = lvalue
#  454|             0: x
#  454|                 Type = int
#  454|                 ValueCategory = lvalue
#  454|             1: 1
#  454|                 Type = int
#  454|                 Value = 1
#  454|                 ValueCategory = prvalue
#  456|       2: { ... }
#  457|         0: ExprStmt
#  457|           0: ... = ...
#  457|               Type = int
#  457|               ValueCategory = lvalue
#  457|             0: x
#  457|                 Type = int
#  457|                 ValueCategory = lvalue
#  457|             1: 5
#  457|                 Type = int
#  457|                 Value = 5
#  457|                 ValueCategory = prvalue
#  459|     3: return ...
#  461| void LogicalNot(bool, bool)
#  461|   params: 
#  461|     0: a
#  461|         Type = bool
#  461|     1: b
#  461|         Type = bool
#  461|   body: { ... }
#  462|     0: declaration
#  462|       0: definition of x
#  462|           Type = int
#  463|     1: if (...) ... 
#  463|       0: ! ...
#  463|           Type = bool
#  463|           ValueCategory = prvalue
#  463|         0: a
#  463|             Type = bool
#  463|             ValueCategory = prvalue(load)
#  463|       1: { ... }
#  464|         0: ExprStmt
#  464|           0: ... = ...
#  464|               Type = int
#  464|               ValueCategory = lvalue
#  464|             0: x
#  464|                 Type = int
#  464|                 ValueCategory = lvalue
#  464|             1: 1
#  464|                 Type = int
#  464|                 Value = 1
#  464|                 ValueCategory = prvalue
#  467|     2: if (...) ... 
#  467|       0: ! ...
#  467|           Type = bool
#  467|           ValueCategory = prvalue
#  467|         0: (...)
#  467|             Type = bool
#  467|             ValueCategory = prvalue
#  467|           expr: ... && ...
#  467|               Type = bool
#  467|               ValueCategory = prvalue
#  467|             0: a
#  467|                 Type = bool
#  467|                 ValueCategory = prvalue(load)
#  467|             1: b
#  467|                 Type = bool
#  467|                 ValueCategory = prvalue(load)
#  467|       1: { ... }
#  468|         0: ExprStmt
#  468|           0: ... = ...
#  468|               Type = int
#  468|               ValueCategory = lvalue
#  468|             0: x
#  468|                 Type = int
#  468|                 ValueCategory = lvalue
#  468|             1: 2
#  468|                 Type = int
#  468|                 Value = 2
#  468|                 ValueCategory = prvalue
#  470|       2: { ... }
#  471|         0: ExprStmt
#  471|           0: ... = ...
#  471|               Type = int
#  471|               ValueCategory = lvalue
#  471|             0: x
#  471|                 Type = int
#  471|                 ValueCategory = lvalue
#  471|             1: 3
#  471|                 Type = int
#  471|                 Value = 3
#  471|                 ValueCategory = prvalue
#  473|     3: return ...
#  475| void ConditionValues(bool, bool)
#  475|   params: 
#  475|     0: a
#  475|         Type = bool
#  475|     1: b
#  475|         Type = bool
#  475|   body: { ... }
#  476|     0: declaration
#  476|       0: definition of x
#  476|           Type = bool
#  477|     1: ExprStmt
#  477|       0: ... = ...
#  477|           Type = bool
#  477|           ValueCategory = lvalue
#  477|         0: x
#  477|             Type = bool
#  477|             ValueCategory = lvalue
#  477|         1: ... && ...
#  477|             Type = bool
#  477|             ValueCategory = prvalue
#  477|           0: a
#  477|               Type = bool
#  477|               ValueCategory = prvalue(load)
#  477|           1: b
#  477|               Type = bool
#  477|               ValueCategory = prvalue(load)
#  478|     2: ExprStmt
#  478|       0: ... = ...
#  478|           Type = bool
#  478|           ValueCategory = lvalue
#  478|         0: x
#  478|             Type = bool
#  478|             ValueCategory = lvalue
#  478|         1: ... || ...
#  478|             Type = bool
#  478|             ValueCategory = prvalue
#  478|           0: a
#  478|               Type = bool
#  478|               ValueCategory = prvalue(load)
#  478|           1: b
#  478|               Type = bool
#  478|               ValueCategory = prvalue(load)
#  479|     3: ExprStmt
#  479|       0: ... = ...
#  479|           Type = bool
#  479|           ValueCategory = lvalue
#  479|         0: x
#  479|             Type = bool
#  479|             ValueCategory = lvalue
#  479|         1: ! ...
#  479|             Type = bool
#  479|             ValueCategory = prvalue
#  479|           0: (...)
#  479|               Type = bool
#  479|               ValueCategory = prvalue
#  479|             expr: ... || ...
#  479|                 Type = bool
#  479|                 ValueCategory = prvalue
#  479|               0: a
#  479|                   Type = bool
#  479|                   ValueCategory = prvalue(load)
#  479|               1: b
#  479|                   Type = bool
#  479|                   ValueCategory = prvalue(load)
#  480|     4: return ...
#  482| void Conditional(bool, int, int)
#  482|   params: 
#  482|     0: a
#  482|         Type = bool
#  482|     1: x
#  482|         Type = int
#  482|     2: y
#  482|         Type = int
#  482|   body: { ... }
#  483|     0: declaration
#  483|       0: definition of z
#  483|           Type = int
#  483|         init: initializer for z
#  483|           expr: ... ? ... : ...
#  483|               Type = int
#  483|               ValueCategory = prvalue
#  483|             0: a
#  483|                 Type = bool
#  483|                 ValueCategory = prvalue(load)
#  483|             1: x
#  483|                 Type = int
#  483|                 ValueCategory = prvalue(load)
#  483|             2: y
#  483|                 Type = int
#  483|                 ValueCategory = prvalue(load)
#  484|     1: return ...
#  486| void Conditional_LValue(bool)
#  486|   params: 
#  486|     0: a
#  486|         Type = bool
#  486|   body: { ... }
#  487|     0: declaration
#  487|       0: definition of x
#  487|           Type = int
#  488|     1: declaration
#  488|       0: definition of y
#  488|           Type = int
#  489|     2: ExprStmt
#  489|       0: ... = ...
#  489|           Type = int
#  489|           ValueCategory = lvalue
#  489|         0: (...)
#  489|             Type = int
#  489|             ValueCategory = lvalue
#  489|           expr: ... ? ... : ...
#  489|               Type = int
#  489|               ValueCategory = lvalue
#  489|             0: a
#  489|                 Type = bool
#  489|                 ValueCategory = prvalue(load)
#  489|             1: x
#  489|                 Type = int
#  489|                 ValueCategory = lvalue
#  489|             2: y
#  489|                 Type = int
#  489|                 ValueCategory = lvalue
#  489|         1: 5
#  489|             Type = int
#  489|             Value = 5
#  489|             ValueCategory = prvalue
#  490|     3: return ...
#  492| void Conditional_Void(bool)
#  492|   params: 
#  492|     0: a
#  492|         Type = bool
#  492|   body: { ... }
#  493|     0: ExprStmt
#  493|       0: ... ? ... : ...
#  493|           Type = void
#  493|           ValueCategory = prvalue
#  493|         0: a
#  493|             Type = bool
#  493|             ValueCategory = prvalue(load)
#  493|         1: call to VoidFunc
#  493|             Type = void
#  493|             ValueCategory = prvalue
#  493|         2: call to VoidFunc
#  493|             Type = void
#  493|             ValueCategory = prvalue
#  494|     1: return ...
#  496| void Nullptr()
#  496|   params: 
#  496|   body: { ... }
#  497|     0: declaration
#  497|       0: definition of p
#  497|           Type = int *
#  497|         init: initializer for p
#  497|           expr: (int *)...
#  497|               Conversion = pointer conversion
#  497|               Type = int *
#  497|               Value = 0
#  497|               ValueCategory = prvalue
#  497|             expr: 0
#  497|                 Type = decltype(nullptr)
#  497|                 Value = 0
#  497|                 ValueCategory = prvalue
#  498|     1: declaration
#  498|       0: definition of q
#  498|           Type = int *
#  498|         init: initializer for q
#  498|           expr: (int *)...
#  498|               Conversion = integral to pointer conversion
#  498|               Type = int *
#  498|               Value = 0
#  498|               ValueCategory = prvalue
#  498|             expr: 0
#  498|                 Type = int
#  498|                 Value = 0
#  498|                 ValueCategory = prvalue
#  499|     2: ExprStmt
#  499|       0: ... = ...
#  499|           Type = int *
#  499|           ValueCategory = lvalue
#  499|         0: p
#  499|             Type = int *
#  499|             ValueCategory = lvalue
#  499|         1: (int *)...
#  499|             Conversion = pointer conversion
#  499|             Type = int *
#  499|             Value = 0
#  499|             ValueCategory = prvalue
#  499|           expr: 0
#  499|               Type = decltype(nullptr)
#  499|               Value = 0
#  499|               ValueCategory = prvalue
#  500|     3: ExprStmt
#  500|       0: ... = ...
#  500|           Type = int *
#  500|           ValueCategory = lvalue
#  500|         0: q
#  500|             Type = int *
#  500|             ValueCategory = lvalue
#  500|         1: (int *)...
#  500|             Conversion = integral to pointer conversion
#  500|             Type = int *
#  500|             Value = 0
#  500|             ValueCategory = prvalue
#  500|           expr: 0
#  500|               Type = int
#  500|               Value = 0
#  500|               ValueCategory = prvalue
#  501|     4: return ...
#  503| void InitList(int, float)
#  503|   params: 
#  503|     0: x
#  503|         Type = int
#  503|     1: f
#  503|         Type = float
#  503|   body: { ... }
#  504|     0: declaration
#  504|       0: definition of pt1
#  504|           Type = Point
#  504|         init: initializer for pt1
#  504|           expr: {...}
#  504|               Type = Point
#  504|               ValueCategory = prvalue
#  504|             .x: x
#  504|                 Type = int
#  504|                 ValueCategory = prvalue(load)
#  504|             .y: (int)...
#  504|                 Conversion = floating point to integral conversion
#  504|                 Type = int
#  504|                 ValueCategory = prvalue
#  504|               expr: f
#  504|                   Type = float
#  504|                   ValueCategory = prvalue(load)
#  505|     1: declaration
#  505|       0: definition of pt2
#  505|           Type = Point
#  505|         init: initializer for pt2
#  505|           expr: {...}
#  505|               Type = Point
#  505|               ValueCategory = prvalue
#  505|             .x: x
#  505|                 Type = int
#  505|                 ValueCategory = prvalue(load)
#  506|     2: declaration
#  506|       0: definition of pt3
#  506|           Type = Point
#  506|         init: initializer for pt3
#  506|           expr: {...}
#  506|               Type = Point
#  506|               ValueCategory = prvalue
#  508|     3: declaration
#  508|       0: definition of x1
#  508|           Type = int
#  508|         init: initializer for x1
#  508|           expr: 1
#  508|               Type = int
#  508|               Value = 1
#  508|               ValueCategory = prvalue
#  509|     4: declaration
#  509|       0: definition of x2
#  509|           Type = int
#  509|         init: initializer for x2
#  509|           expr: 0
#  509|               Type = int
#  509|               Value = 0
#  509|               ValueCategory = prvalue
#  510|     5: return ...
#  512| void NestedInitList(int, float)
#  512|   params: 
#  512|     0: x
#  512|         Type = int
#  512|     1: f
#  512|         Type = float
#  512|   body: { ... }
#  513|     0: declaration
#  513|       0: definition of r1
#  513|           Type = Rect
#  513|         init: initializer for r1
#  513|           expr: {...}
#  513|               Type = Rect
#  513|               ValueCategory = prvalue
#  514|     1: declaration
#  514|       0: definition of r2
#  514|           Type = Rect
#  514|         init: initializer for r2
#  514|           expr: {...}
#  514|               Type = Rect
#  514|               ValueCategory = prvalue
#  514|             .topLeft: {...}
#  514|                 Type = Point
#  514|                 ValueCategory = prvalue
#  514|               .x: x
#  514|                   Type = int
#  514|                   ValueCategory = prvalue(load)
#  514|               .y: (int)...
#  514|                   Conversion = floating point to integral conversion
#  514|                   Type = int
#  514|                   ValueCategory = prvalue
#  514|                 expr: f
#  514|                     Type = float
#  514|                     ValueCategory = prvalue(load)
#  515|     2: declaration
#  515|       0: definition of r3
#  515|           Type = Rect
#  515|         init: initializer for r3
#  515|           expr: {...}
#  515|               Type = Rect
#  515|               ValueCategory = prvalue
#  515|             .topLeft: {...}
#  515|                 Type = Point
#  515|                 ValueCategory = prvalue
#  515|               .x: x
#  515|                   Type = int
#  515|                   ValueCategory = prvalue(load)
#  515|               .y: (int)...
#  515|                   Conversion = floating point to integral conversion
#  515|                   Type = int
#  515|                   ValueCategory = prvalue
#  515|                 expr: f
#  515|                     Type = float
#  515|                     ValueCategory = prvalue(load)
#  515|             .bottomRight: {...}
#  515|                 Type = Point
#  515|                 ValueCategory = prvalue
#  515|               .x: x
#  515|                   Type = int
#  515|                   ValueCategory = prvalue(load)
#  515|               .y: (int)...
#  515|                   Conversion = floating point to integral conversion
#  515|                   Type = int
#  515|                   ValueCategory = prvalue
#  515|                 expr: f
#  515|                     Type = float
#  515|                     ValueCategory = prvalue(load)
#  516|     3: declaration
#  516|       0: definition of r4
#  516|           Type = Rect
#  516|         init: initializer for r4
#  516|           expr: {...}
#  516|               Type = Rect
#  516|               ValueCategory = prvalue
#  516|             .topLeft: {...}
#  516|                 Type = Point
#  516|                 ValueCategory = prvalue
#  516|               .x: x
#  516|                   Type = int
#  516|                   ValueCategory = prvalue(load)
#  516|             .bottomRight: {...}
#  516|                 Type = Point
#  516|                 ValueCategory = prvalue
#  516|               .x: x
#  516|                   Type = int
#  516|                   ValueCategory = prvalue(load)
#  517|     4: return ...
#  519| void ArrayInit(int, float)
#  519|   params: 
#  519|     0: x
#  519|         Type = int
#  519|     1: f
#  519|         Type = float
#  519|   body: { ... }
#  520|     0: declaration
#  520|       0: definition of a1
#  520|           Type = int[3]
#  520|         init: initializer for a1
#  520|           expr: {...}
#  520|               Type = int[3]
#  520|               ValueCategory = prvalue
#  521|     1: declaration
#  521|       0: definition of a2
#  521|           Type = int[3]
#  521|         init: initializer for a2
#  521|           expr: {...}
#  521|               Type = int[3]
#  521|               ValueCategory = prvalue
#  521|             [0]: x
#  521|                 Type = int
#  521|                 ValueCategory = prvalue(load)
#  521|             [1]: (int)...
#  521|                 Conversion = floating point to integral conversion
#  521|                 Type = int
#  521|                 ValueCategory = prvalue
#  521|               expr: f
#  521|                   Type = float
#  521|                   ValueCategory = prvalue(load)
#  521|             [2]: 0
#  521|                 Type = int
#  521|                 Value = 0
#  521|                 ValueCategory = prvalue
#  522|     2: declaration
#  522|       0: definition of a3
#  522|           Type = int[3]
#  522|         init: initializer for a3
#  522|           expr: {...}
#  522|               Type = int[3]
#  522|               ValueCategory = prvalue
#  522|             [0]: x
#  522|                 Type = int
#  522|                 ValueCategory = prvalue(load)
#  523|     3: return ...
#  525| U& U::operator=(U const&)
#  525|   params: 
#-----|     0: p#0
#-----|         Type = const U &
#  525| U& U::operator=(U&&)
#  525|   params: 
#-----|     0: p#0
#-----|         Type = U &&
#  530| void UnionInit(int, float)
#  530|   params: 
#  530|     0: x
#  530|         Type = int
#  530|     1: f
#  530|         Type = float
#  530|   body: { ... }
#  531|     0: declaration
#  531|       0: definition of u1
#  531|           Type = U
#  531|         init: initializer for u1
#  531|           expr: {...}
#  531|               Type = U
#  531|               ValueCategory = prvalue
#  531|             .d: (double)...
#  531|                 Conversion = floating point conversion
#  531|                 Type = double
#  531|                 ValueCategory = prvalue
#  531|               expr: f
#  531|                   Type = float
#  531|                   ValueCategory = prvalue(load)
#  533|     1: return ...
#  535| void EarlyReturn(int, int)
#  535|   params: 
#  535|     0: x
#  535|         Type = int
#  535|     1: y
#  535|         Type = int
#  535|   body: { ... }
#  536|     0: if (...) ... 
#  536|       0: ... < ...
#  536|           Type = bool
#  536|           ValueCategory = prvalue
#  536|         0: x
#  536|             Type = int
#  536|             ValueCategory = prvalue(load)
#  536|         1: y
#  536|             Type = int
#  536|             ValueCategory = prvalue(load)
#  536|       1: { ... }
#  537|         0: return ...
#  540|     1: ExprStmt
#  540|       0: ... = ...
#  540|           Type = int
#  540|           ValueCategory = lvalue
#  540|         0: y
#  540|             Type = int
#  540|             ValueCategory = lvalue
#  540|         1: x
#  540|             Type = int
#  540|             ValueCategory = prvalue(load)
#  541|     2: return ...
#  543| int EarlyReturnValue(int, int)
#  543|   params: 
#  543|     0: x
#  543|         Type = int
#  543|     1: y
#  543|         Type = int
#  543|   body: { ... }
#  544|     0: if (...) ... 
#  544|       0: ... < ...
#  544|           Type = bool
#  544|           ValueCategory = prvalue
#  544|         0: x
#  544|             Type = int
#  544|             ValueCategory = prvalue(load)
#  544|         1: y
#  544|             Type = int
#  544|             ValueCategory = prvalue(load)
#  544|       1: { ... }
#  545|         0: return ...
#  545|           0: x
#  545|               Type = int
#  545|               ValueCategory = prvalue(load)
#  548|     1: return ...
#  548|       0: ... + ...
#  548|           Type = int
#  548|           ValueCategory = prvalue
#  548|         0: x
#  548|             Type = int
#  548|             ValueCategory = prvalue(load)
#  548|         1: y
#  548|             Type = int
#  548|             ValueCategory = prvalue(load)
#  551| int CallViaFuncPtr(int(*)(int))
#  551|   params: 
#  551|     0: pfn
#  551|         Type = ..(*)(..)
#  551|   body: { ... }
#  552|     0: return ...
#  552|       0: call to expression
#  552|           Type = int
#  552|           ValueCategory = prvalue
#  552|         0: pfn
#  552|             Type = ..(*)(..)
#  552|             ValueCategory = prvalue(load)
#  552|         1: 5
#  552|             Type = int
#  552|             Value = 5
#  552|             ValueCategory = prvalue
#  560| int EnumSwitch(E)
#  560|   params: 
#  560|     0: e
#  560|         Type = E
#  560|   body: { ... }
#  561|     0: switch (...) ... 
#  561|       0: (int)...
#  561|           Conversion = integral conversion
#  561|           Type = int
#  561|           ValueCategory = prvalue
#  561|         expr: e
#  561|             Type = E
#  561|             ValueCategory = prvalue(load)
#  561|       1: { ... }
#  562|         0: case ...:
#  562|           0: (int)...
#  562|               Conversion = integral conversion
#  562|               Type = int
#  562|               Value = 0
#  562|               ValueCategory = prvalue
#  562|             expr: E_0
#  562|                 Type = E
#  562|                 Value = 0
#  562|                 ValueCategory = prvalue
#  563|         1: return ...
#  563|           0: 0
#  563|               Type = int
#  563|               Value = 0
#  563|               ValueCategory = prvalue
#  564|         2: case ...:
#  564|           0: (int)...
#  564|               Conversion = integral conversion
#  564|               Type = int
#  564|               Value = 1
#  564|               ValueCategory = prvalue
#  564|             expr: E_1
#  564|                 Type = E
#  564|                 Value = 1
#  564|                 ValueCategory = prvalue
#  565|         3: return ...
#  565|           0: 1
#  565|               Type = int
#  565|               Value = 1
#  565|               ValueCategory = prvalue
#  566|         4: default: 
#  567|         5: return ...
#  567|           0: - ...
#  567|               Type = int
#  567|               Value = -1
#  567|               ValueCategory = prvalue
#  567|             0: 1
#  567|                 Type = int
#  567|                 Value = 1
#  567|                 ValueCategory = prvalue
#  571| void InitArray()
#  571|   params: 
#  571|   body: { ... }
#  572|     0: declaration
#  572|       0: definition of a_pad
#  572|           Type = char[32]
#  572|         init: initializer for a_pad
#  572|           expr: 
#  572|               Type = const char[1]
#  572|               Value = ""
#  572|               ValueCategory = lvalue
#  573|     1: declaration
#  573|       0: definition of a_nopad
#  573|           Type = char[4]
#  573|         init: initializer for a_nopad
#  573|           expr: foo
#  573|               Type = const char[4]
#  573|               Value = "foo"
#  573|               ValueCategory = lvalue
#  574|     2: declaration
#  574|       0: definition of a_infer
#  574|           Type = char[]
#  574|         init: initializer for a_infer
#  574|           expr: blah
#  574|               Type = const char[5]
#  574|               Value = "blah"
#  574|               ValueCategory = lvalue
#  575|     3: declaration
#  575|       0: definition of b
#  575|           Type = char[2]
#  576|     4: declaration
#  576|       0: definition of c
#  576|           Type = char[2]
#  576|         init: initializer for c
#  576|           expr: {...}
#  576|               Type = char[2]
#  576|               ValueCategory = prvalue
#  577|     5: declaration
#  577|       0: definition of d
#  577|           Type = char[2]
#  577|         init: initializer for d
#  577|           expr: {...}
#  577|               Type = char[2]
#  577|               ValueCategory = prvalue
#  577|             [0]: (char)...
#  577|                 Conversion = integral conversion
#  577|                 Type = char
#  577|                 Value = 0
#  577|                 ValueCategory = prvalue
#  577|               expr: 0
#  577|                   Type = int
#  577|                   Value = 0
#  577|                   ValueCategory = prvalue
#  578|     6: declaration
#  578|       0: definition of e
#  578|           Type = char[2]
#  578|         init: initializer for e
#  578|           expr: {...}
#  578|               Type = char[2]
#  578|               ValueCategory = prvalue
#  578|             [0]: (char)...
#  578|                 Conversion = integral conversion
#  578|                 Type = char
#  578|                 Value = 0
#  578|                 ValueCategory = prvalue
#  578|               expr: 0
#  578|                   Type = int
#  578|                   Value = 0
#  578|                   ValueCategory = prvalue
#  578|             [1]: (char)...
#  578|                 Conversion = integral conversion
#  578|                 Type = char
#  578|                 Value = 1
#  578|                 ValueCategory = prvalue
#  578|               expr: 1
#  578|                   Type = int
#  578|                   Value = 1
#  578|                   ValueCategory = prvalue
#  579|     7: declaration
#  579|       0: definition of f
#  579|           Type = char[3]
#  579|         init: initializer for f
#  579|           expr: {...}
#  579|               Type = char[3]
#  579|               ValueCategory = prvalue
#  579|             [0]: (char)...
#  579|                 Conversion = integral conversion
#  579|                 Type = char
#  579|                 Value = 0
#  579|                 ValueCategory = prvalue
#  579|               expr: 0
#  579|                   Type = int
#  579|                   Value = 0
#  579|                   ValueCategory = prvalue
#  580|     8: return ...
#  582| void VarArgFunction(char const*)
#  582|   params: 
#  582|     0: s
#  582|         Type = const char *
#  584| void VarArgs()
#  584|   params: 
#  584|   body: { ... }
#  585|     0: ExprStmt
#  585|       0: call to VarArgFunction
#  585|           Type = void
#  585|           ValueCategory = prvalue
#  585|         0: array to pointer conversion
#  585|             Type = const char *
#  585|             ValueCategory = prvalue
#  585|           expr: %d %s
#  585|               Type = const char[6]
#  585|               Value = "%d %s"
#  585|               ValueCategory = lvalue
#  585|         1: 1
#  585|             Type = int
#  585|             Value = 1
#  585|             ValueCategory = prvalue
#  585|         2: array to pointer conversion
#  585|             Type = const char *
#  585|             ValueCategory = prvalue
#  585|           expr: string
#  585|               Type = const char[7]
#  585|               Value = "string"
#  585|               ValueCategory = lvalue
#  586|     1: return ...
#  588| int FuncPtrTarget(int)
#  588|   params: 
#  588|     0: p#0
#  588|         Type = int
#  590| void SetFuncPtr()
#  590|   params: 
#  590|   body: { ... }
#  591|     0: declaration
#  591|       0: definition of pfn
#  591|           Type = ..(*)(..)
#  591|         init: initializer for pfn
#  591|           expr: FuncPtrTarget
#  591|               Type = ..(*)(..)
#  591|               ValueCategory = prvalue(load)
#  592|     1: ExprStmt
#  592|       0: ... = ...
#  592|           Type = ..(*)(..)
#  592|           ValueCategory = lvalue
#  592|         0: pfn
#  592|             Type = ..(*)(..)
#  592|             ValueCategory = lvalue
#  592|         1: & ...
#  592|             Type = ..(*)(..)
#  592|             ValueCategory = prvalue
#  592|           0: FuncPtrTarget
#  592|               Type = ..()(..)
#  592|               ValueCategory = lvalue
#  593|     2: ExprStmt
#  593|       0: ... = ...
#  593|           Type = ..(*)(..)
#  593|           ValueCategory = lvalue
#  593|         0: pfn
#  593|             Type = ..(*)(..)
#  593|             ValueCategory = lvalue
#  593|         1: * ...
#  593|             Type = ..(*)(..)
#  593|             ValueCategory = prvalue(load)
#  593|           0: FuncPtrTarget
#  593|               Type = ..(*)(..)
#  593|               ValueCategory = prvalue(load)
#  594|     3: ExprStmt
#  594|       0: ... = ...
#  594|           Type = ..(*)(..)
#  594|           ValueCategory = lvalue
#  594|         0: pfn
#  594|             Type = ..(*)(..)
#  594|             ValueCategory = lvalue
#  594|         1: * ...
#  594|             Type = ..(*)(..)
#  594|             ValueCategory = prvalue(load)
#  594|           0: * ...
#  594|               Type = ..(*)(..)
#  594|               ValueCategory = prvalue(load)
#  594|             0: * ...
#  594|                 Type = ..(*)(..)
#  594|                 ValueCategory = prvalue(load)
#  594|               0: & ...
#  594|                   Type = ..(*)(..)
#  594|                   ValueCategory = prvalue
#  594|                 0: FuncPtrTarget
#  594|                     Type = ..()(..)
#  594|                     ValueCategory = lvalue
#  595|     4: return ...
#  599| void String::String(String const&)
#  599|   params: 
#  599|     0: p#0
#  599|         Type = const String &
#  600| void String::String(String&&)
#  600|   params: 
#  600|     0: p#0
#  600|         Type = String &&
#  601| void String::String(char const*)
#  601|   params: 
#  601|     0: p#0
#  601|         Type = const char *
#  602| void String::~String()
#  602|   params: 
#  604| String& String::operator=(String const&)
#  604|   params: 
#  604|     0: p#0
#  604|         Type = const String &
#  605| String& String::operator=(String&&)
#  605|   params: 
#  605|     0: p#0
#  605|         Type = String &&
#  607| char const* String::c_str() const
#  607|   params: 
#  613| String ReturnObject()
#  613|   params: 
#  615| void DeclareObject()
#  615|   params: 
#  615|   body: { ... }
#  616|     0: declaration
#  616|       0: definition of s1
#  616|           Type = String
#  616|         init: initializer for s1
#  616|           expr: call to String
#  616|               Type = void
#  616|               ValueCategory = prvalue
#  617|     1: declaration
#  617|       0: definition of s2
#  617|           Type = String
#  617|         init: initializer for s2
#  617|           expr: call to String
#  617|               Type = void
#  617|               ValueCategory = prvalue
#  617|             0: array to pointer conversion
#  617|                 Type = const char *
#  617|                 ValueCategory = prvalue
#  617|               expr: hello
#  617|                   Type = const char[6]
#  617|                   Value = "hello"
#  617|                   ValueCategory = lvalue
#  618|     2: declaration
#  618|       0: definition of s3
#  618|           Type = String
#  618|         init: initializer for s3
#  618|           expr: call to ReturnObject
#  618|               Type = String
#  618|               ValueCategory = prvalue
#  619|     3: declaration
#  619|       0: definition of s4
#  619|           Type = String
#  619|         init: initializer for s4
#  619|           expr: call to String
#  619|               Type = void
#  619|               ValueCategory = prvalue
#  619|             0: array to pointer conversion
#  619|                 Type = const char *
#  619|                 ValueCategory = prvalue
#  619|               expr: test
#  619|                   Type = const char[5]
#  619|                   Value = "test"
#  619|                   ValueCategory = lvalue
#  620|     4: return ...
#  622| void CallMethods(String&, String*, String)
#  622|   params: 
#  622|     0: r
#  622|         Type = String &
#  622|     1: p
#  622|         Type = String *
#  622|     2: s
#  622|         Type = String
#  622|   body: { ... }
#  623|     0: ExprStmt
#  623|       0: call to c_str
#  623|           Type = const char *
#  623|           ValueCategory = prvalue
#  623|         -1: (const String)...
#  623|             Conversion = glvalue conversion
#  623|             Type = const String
#  623|             ValueCategory = lvalue
#  623|           expr: (reference dereference)
#  623|               Type = String
#  623|               ValueCategory = lvalue
#  623|             expr: r
#  623|                 Type = String &
#  623|                 ValueCategory = prvalue(load)
#  624|     1: ExprStmt
#  624|       0: call to c_str
#  624|           Type = const char *
#  624|           ValueCategory = prvalue
#  624|         -1: (const String *)...
#  624|             Conversion = pointer conversion
#  624|             Type = const String *
#  624|             ValueCategory = prvalue
#  624|           expr: p
#  624|               Type = String *
#  624|               ValueCategory = prvalue(load)
#  625|     2: ExprStmt
#  625|       0: call to c_str
#  625|           Type = const char *
#  625|           ValueCategory = prvalue
#  625|         -1: (const String)...
#  625|             Conversion = glvalue conversion
#  625|             Type = const String
#  625|             ValueCategory = lvalue
#  625|           expr: s
#  625|               Type = String
#  625|               ValueCategory = lvalue
#  626|     3: return ...
#  628| C& C::operator=(C const&)
#  628|   params: 
#-----|     0: p#0
#-----|         Type = const C &
#  628| C& C::operator=(C&&)
#  628|   params: 
#-----|     0: p#0
#-----|         Type = C &&
#  628| void C::C(C const&)
#  628|   params: 
#-----|     0: p#0
#-----|         Type = const C &
#  628| void C::C(C&&)
#  628|   params: 
#-----|     0: p#0
#-----|         Type = C &&
#  628| void C::~C()
#  628|   params: 
#  630| int C::StaticMemberFunction(int)
#  630|   params: 
#  630|     0: x
#  630|         Type = int
#  630|   body: { ... }
#  631|     0: return ...
#  631|       0: x
#  631|           Type = int
#  631|           ValueCategory = prvalue(load)
#  634| int C::InstanceMemberFunction(int)
#  634|   params: 
#  634|     0: x
#  634|         Type = int
#  634|   body: { ... }
#  635|     0: return ...
#  635|       0: x
#  635|           Type = int
#  635|           ValueCategory = prvalue(load)
#  638| int C::VirtualMemberFunction(int)
#  638|   params: 
#  638|     0: x
#  638|         Type = int
#  638|   body: { ... }
#  639|     0: return ...
#  639|       0: x
#  639|           Type = int
#  639|           ValueCategory = prvalue(load)
#  642| void C::FieldAccess()
#  642|   params: 
#  642|   body: { ... }
#  643|     0: ExprStmt
#  643|       0: ... = ...
#  643|           Type = int
#  643|           ValueCategory = lvalue
#  643|         0: m_a
#  643|             Type = int
#  643|             ValueCategory = lvalue
#  643|           -1: this
#  643|               Type = C *
#  643|               ValueCategory = prvalue(load)
#  643|         1: 0
#  643|             Type = int
#  643|             Value = 0
#  643|             ValueCategory = prvalue
#  644|     1: ExprStmt
#  644|       0: ... = ...
#  644|           Type = int
#  644|           ValueCategory = lvalue
#  644|         0: m_a
#  644|             Type = int
#  644|             ValueCategory = lvalue
#  644|           -1: (...)
#  644|               Type = C
#  644|               ValueCategory = lvalue
#  644|             expr: * ...
#  644|                 Type = C
#  644|                 ValueCategory = lvalue
#  644|               0: this
#  644|                   Type = C *
#  644|                   ValueCategory = prvalue(load)
#  644|         1: 1
#  644|             Type = int
#  644|             Value = 1
#  644|             ValueCategory = prvalue
#  645|     2: ExprStmt
#  645|       0: ... = ...
#  645|           Type = int
#  645|           ValueCategory = lvalue
#  645|         0: m_a
#  645|             Type = int
#  645|             ValueCategory = lvalue
#-----|           -1: this
#-----|               Type = C *
#-----|               ValueCategory = prvalue(load)
#  645|         1: 2
#  645|             Type = int
#  645|             Value = 2
#  645|             ValueCategory = prvalue
#  646|     3: declaration
#  646|       0: definition of x
#  646|           Type = int
#  647|     4: ExprStmt
#  647|       0: ... = ...
#  647|           Type = int
#  647|           ValueCategory = lvalue
#  647|         0: x
#  647|             Type = int
#  647|             ValueCategory = lvalue
#  647|         1: m_a
#  647|             Type = int
#  647|             ValueCategory = prvalue(load)
#  647|           -1: this
#  647|               Type = C *
#  647|               ValueCategory = prvalue(load)
#  648|     5: ExprStmt
#  648|       0: ... = ...
#  648|           Type = int
#  648|           ValueCategory = lvalue
#  648|         0: x
#  648|             Type = int
#  648|             ValueCategory = lvalue
#  648|         1: m_a
#  648|             Type = int
#  648|             ValueCategory = prvalue(load)
#  648|           -1: (...)
#  648|               Type = C
#  648|               ValueCategory = lvalue
#  648|             expr: * ...
#  648|                 Type = C
#  648|                 ValueCategory = lvalue
#  648|               0: this
#  648|                   Type = C *
#  648|                   ValueCategory = prvalue(load)
#  649|     6: ExprStmt
#  649|       0: ... = ...
#  649|           Type = int
#  649|           ValueCategory = lvalue
#  649|         0: x
#  649|             Type = int
#  649|             ValueCategory = lvalue
#  649|         1: m_a
#  649|             Type = int
#  649|             ValueCategory = prvalue(load)
#-----|           -1: this
#-----|               Type = C *
#-----|               ValueCategory = prvalue(load)
#  650|     7: return ...
#  652| void C::MethodCalls()
#  652|   params: 
#  652|   body: { ... }
#  653|     0: ExprStmt
#  653|       0: call to InstanceMemberFunction
#  653|           Type = int
#  653|           ValueCategory = prvalue
#  653|         -1: this
#  653|             Type = C *
#  653|             ValueCategory = prvalue(load)
#  653|         0: 0
#  653|             Type = int
#  653|             Value = 0
#  653|             ValueCategory = prvalue
#  654|     1: ExprStmt
#  654|       0: call to InstanceMemberFunction
#  654|           Type = int
#  654|           ValueCategory = prvalue
#  654|         -1: (...)
#  654|             Type = C
#  654|             ValueCategory = lvalue
#  654|           expr: * ...
#  654|               Type = C
#  654|               ValueCategory = lvalue
#  654|             0: this
#  654|                 Type = C *
#  654|                 ValueCategory = prvalue(load)
#  654|         0: 1
#  654|             Type = int
#  654|             Value = 1
#  654|             ValueCategory = prvalue
#  655|     2: ExprStmt
#  655|       0: call to InstanceMemberFunction
#  655|           Type = int
#  655|           ValueCategory = prvalue
#-----|         -1: this
#-----|             Type = C *
#-----|             ValueCategory = prvalue(load)
#  655|         0: 2
#  655|             Type = int
#  655|             Value = 2
#  655|             ValueCategory = prvalue
#  656|     3: return ...
#  658| void C::C()
#  658|   params: 
#  658|   initializations: 
#  659|     0: constructor init of field m_a
#  659|         Type = int
#  659|         ValueCategory = prvalue
#  659|       0: 1
#  659|           Type = int
#  659|           Value = 1
#  659|           ValueCategory = prvalue
#  663|     1: constructor init of field m_b
#  663|         Type = String
#  663|         ValueCategory = prvalue
#  663|       0: call to String
#  663|           Type = void
#  663|           ValueCategory = prvalue
#  660|     2: constructor init of field m_c
#  660|         Type = char
#  660|         ValueCategory = prvalue
#  660|       0: (char)...
#  660|           Conversion = integral conversion
#  660|           Type = char
#  660|           Value = 3
#  660|           ValueCategory = prvalue
#  660|         expr: 3
#  660|             Type = int
#  660|             Value = 3
#  660|             ValueCategory = prvalue
#  661|     3: constructor init of field m_e
#  661|         Type = void *
#  661|         ValueCategory = prvalue
#  661|       0: 0
#  661|           Type = void *
#  661|           Value = 0
#  661|           ValueCategory = prvalue
#  662|     4: constructor init of field m_f
#  662|         Type = String
#  662|         ValueCategory = prvalue
#  662|       0: call to String
#  662|           Type = void
#  662|           ValueCategory = prvalue
#  662|         0: array to pointer conversion
#  662|             Type = const char *
#  662|             ValueCategory = prvalue
#  662|           expr: test
#  662|               Type = const char[5]
#  662|               Value = "test"
#  662|               ValueCategory = lvalue
#  663|   body: { ... }
#  664|     0: return ...
#  675| int DerefReference(int&)
#  675|   params: 
#  675|     0: r
#  675|         Type = int &
#  675|   body: { ... }
#  676|     0: return ...
#  676|       0: (reference dereference)
#  676|           Type = int
#  676|           ValueCategory = prvalue(load)
#  676|         expr: r
#  676|             Type = int &
#  676|             ValueCategory = prvalue(load)
#  679| int& TakeReference()
#  679|   params: 
#  679|   body: { ... }
#  680|     0: return ...
#  680|       0: (reference to)
#  680|           Type = int &
#  680|           ValueCategory = prvalue
#  680|         expr: g
#  680|             Type = int
#  680|             ValueCategory = lvalue
#  683| String& ReturnReference()
#  683|   params: 
#  685| void InitReference(int)
#  685|   params: 
#  685|     0: x
#  685|         Type = int
#  685|   body: { ... }
#  686|     0: declaration
#  686|       0: definition of r
#  686|           Type = int &
#  686|         init: initializer for r
#  686|           expr: (reference to)
#  686|               Type = int &
#  686|               ValueCategory = prvalue
#  686|             expr: x
#  686|                 Type = int
#  686|                 ValueCategory = lvalue
#  687|     1: declaration
#  687|       0: definition of r2
#  687|           Type = int &
#  687|         init: initializer for r2
#  687|           expr: (reference to)
#  687|               Type = int &
#  687|               ValueCategory = prvalue
#  687|             expr: (reference dereference)
#  687|                 Type = int
#  687|                 ValueCategory = lvalue
#  687|               expr: r
#  687|                   Type = int &
#  687|                   ValueCategory = prvalue(load)
#  688|     2: declaration
#  688|       0: definition of r3
#  688|           Type = const String &
#  688|         init: initializer for r3
#  688|           expr: (reference to)
#  688|               Type = const String &
#  688|               ValueCategory = prvalue
#  688|             expr: (const String)...
#  688|                 Conversion = glvalue conversion
#  688|                 Type = const String
#  688|                 ValueCategory = lvalue
#  688|               expr: (reference dereference)
#  688|                   Type = String
#  688|                   ValueCategory = lvalue
#  688|                 expr: call to ReturnReference
#  688|                     Type = String &
#  688|                     ValueCategory = prvalue
#  689|     3: return ...
#  691| void ArrayReferences()
#  691|   params: 
#  691|   body: { ... }
#  692|     0: declaration
#  692|       0: definition of a
#  692|           Type = int[10]
#  693|     1: declaration
#  693|       0: definition of ra
#  693|           Type = int(&)[10]
#  693|         init: initializer for ra
#  693|           expr: (reference to)
#  693|               Type = int(&)[10]
#  693|               ValueCategory = prvalue
#  693|             expr: a
#  693|                 Type = int[10]
#  693|                 ValueCategory = lvalue
#  694|     2: declaration
#  694|       0: definition of x
#  694|           Type = int
#  694|         init: initializer for x
#  694|           expr: access to array
#  694|               Type = int
#  694|               ValueCategory = prvalue(load)
#  694|             0: array to pointer conversion
#  694|                 Type = int *
#  694|                 ValueCategory = prvalue
#  694|               expr: (reference dereference)
#  694|                   Type = int[10]
#  694|                   ValueCategory = lvalue
#  694|                 expr: ra
#  694|                     Type = int(&)[10]
#  694|                     ValueCategory = prvalue(load)
#  694|             1: 5
#  694|                 Type = int
#  694|                 Value = 5
#  694|                 ValueCategory = prvalue
#  695|     3: return ...
#  697| void FunctionReferences()
#  697|   params: 
#  697|   body: { ... }
#  698|     0: declaration
#  698|       0: definition of rfn
#  698|           Type = ..(&)(..)
#  698|         init: initializer for rfn
#  698|           expr: (reference to)
#  698|               Type = ..(&)(..)
#  698|               ValueCategory = prvalue
#  698|             expr: FuncPtrTarget
#  698|                 Type = ..()(..)
#  698|                 ValueCategory = lvalue
#  699|     1: declaration
#  699|       0: definition of pfn
#  699|           Type = ..(*)(..)
#  699|         init: initializer for pfn
#  699|           expr: (reference dereference)
#  699|               Type = ..(*)(..)
#  699|               ValueCategory = prvalue(load)
#  699|             expr: rfn
#  699|                 Type = ..(&)(..)
#  699|                 ValueCategory = prvalue(load)
#  700|     2: ExprStmt
#  700|       0: call to expression
#  700|           Type = int
#  700|           ValueCategory = prvalue
#  700|         0: (reference dereference)
#  700|             Type = ..(*)(..)
#  700|             ValueCategory = prvalue(load)
#  700|           expr: rfn
#  700|               Type = ..(&)(..)
#  700|               ValueCategory = prvalue(load)
#  700|         1: 5
#  700|             Type = int
#  700|             Value = 5
#  700|             ValueCategory = prvalue
#  701|     3: return ...
#  704| T min<T>(T, T)
#  704|   params: 
#  704|     0: x
#  704|         Type = T
#  704|     1: y
#  704|         Type = T
#  704|   body: { ... }
#  705|     0: return ...
#  705|       0: ... ? ... : ...
#  705|           Type = unknown
#  705|           ValueCategory = prvalue
#  705|         0: (bool)...
#  705|             Conversion = conversion to bool
#  705|             Type = bool
#  705|             ValueCategory = prvalue
#  705|           expr: (...)
#  705|               Type = unknown
#  705|               ValueCategory = prvalue
#  705|             expr: ... < ...
#  705|                 Type = unknown
#  705|                 ValueCategory = prvalue
#  705|               0: x
#  705|                   Type = T
#  705|                   ValueCategory = lvalue
#  705|               1: y
#  705|                   Type = T
#  705|                   ValueCategory = lvalue
#  705|         1: x
#  705|             Type = T
#  705|             ValueCategory = lvalue
#  705|         2: y
#  705|             Type = T
#  705|             ValueCategory = lvalue
#  704| int min<int>(int, int)
#  704|   params: 
#  704|     0: x
#  704|         Type = int
#  704|     1: y
#  704|         Type = int
#  704|   body: { ... }
#  705|     0: return ...
#  705|       0: ... ? ... : ...
#  705|           Type = int
#  705|           ValueCategory = prvalue
#  705|         0: (...)
#  705|             Type = bool
#  705|             ValueCategory = prvalue
#  705|           expr: ... < ...
#  705|               Type = bool
#  705|               ValueCategory = prvalue
#  705|             0: x
#  705|                 Type = int
#  705|                 ValueCategory = prvalue(load)
#  705|             1: y
#  705|                 Type = int
#  705|                 ValueCategory = prvalue(load)
#  705|         1: x
#  705|             Type = int
#  705|             ValueCategory = prvalue(load)
#  705|         2: y
#  705|             Type = int
#  705|             ValueCategory = prvalue(load)
#  708| int CallMin(int, int)
#  708|   params: 
#  708|     0: x
#  708|         Type = int
#  708|     1: y
#  708|         Type = int
#  708|   body: { ... }
#  709|     0: return ...
#  709|       0: call to min
#  709|           Type = int
#  709|           ValueCategory = prvalue
#  709|         0: x
#  709|             Type = int
#  709|             ValueCategory = prvalue(load)
#  709|         1: y
#  709|             Type = int
#  709|             ValueCategory = prvalue(load)
#  713| Outer<long>& Outer<long>::operator=(Outer<long> const&)
#  713|   params: 
#-----|     0: p#0
#-----|         Type = const Outer<long> &
#  713| Outer<long>& Outer<long>::operator=(Outer<long>&&)
#  713|   params: 
#-----|     0: p#0
#-----|         Type = Outer<long> &&
#  715| T Outer<T>::Func<U, V>(U, V)
#  715|   params: 
#  715|     0: x
#  715|         Type = U
#  715|     1: y
#  715|         Type = V
#  715|   body: { ... }
#  716|     0: return ...
#  716|       0: 0
#  716|           Type = T
#  716|           Value = 0
#  716|           ValueCategory = prvalue
#  715| long Outer<long>::Func<U, V>(U, V)
#  715|   params: 
#  715|     0: x
#  715|         Type = U
#  715|     1: y
#  715|         Type = V
#  715| long Outer<long>::Func<void*, char>(void*, char)
#  715|   params: 
#  715|     0: x
#  715|         Type = void *
#  715|     1: y
#  715|         Type = char
#  715|   body: { ... }
#  716|     0: return ...
#  716|       0: 0
#  716|           Type = long
#  716|           Value = 0
#  716|           ValueCategory = prvalue
#  720| double CallNestedTemplateFunc()
#  720|   params: 
#  720|   body: { ... }
#  721|     0: return ...
#  721|       0: (double)...
#  721|           Conversion = integral to floating point conversion
#  721|           Type = double
#  721|           ValueCategory = prvalue
#  721|         expr: call to Func
#  721|             Type = long
#  721|             ValueCategory = prvalue
#  721|           0: (void *)...
#  721|               Conversion = pointer conversion
#  721|               Type = void *
#  721|               Value = 0
#  721|               ValueCategory = prvalue
#  721|             expr: 0
#  721|                 Type = decltype(nullptr)
#  721|                 Value = 0
#  721|                 ValueCategory = prvalue
#  721|           1: 111
#  721|               Type = char
#  721|               Value = 111
#  721|               ValueCategory = prvalue
#  724| void TryCatch(bool)
#  724|   params: 
#  724|     0: b
#  724|         Type = bool
#  724|   body: { ... }
#  725|     0: try { ... }
#  725|       0: { ... }
#  726|         0: declaration
#  726|           0: definition of x
#  726|               Type = int
#  726|             init: initializer for x
#  726|               expr: 5
#  726|                   Type = int
#  726|                   Value = 5
#  726|                   ValueCategory = prvalue
#  727|         1: if (...) ... 
#  727|           0: b
#  727|               Type = bool
#  727|               ValueCategory = prvalue(load)
#  727|           1: { ... }
#  728|             0: ExprStmt
#  728|               0: throw ...
#  728|                   Type = const char *
#  728|                   ValueCategory = prvalue
#  728|                 0: array to pointer conversion
#  728|                     Type = const char *
#  728|                     ValueCategory = prvalue
#  728|                   expr: string literal
#  728|                       Type = const char[15]
#  728|                       Value = "string literal"
#  728|                       ValueCategory = lvalue
#  730|           2: if (...) ... 
#  730|             0: ... < ...
#  730|                 Type = bool
#  730|                 ValueCategory = prvalue
#  730|               0: x
#  730|                   Type = int
#  730|                   ValueCategory = prvalue(load)
#  730|               1: 2
#  730|                   Type = int
#  730|                   Value = 2
#  730|                   ValueCategory = prvalue
#  730|             1: { ... }
#  731|               0: ExprStmt
#  731|                 0: ... = ...
#  731|                     Type = int
#  731|                     ValueCategory = lvalue
#  731|                   0: x
#  731|                       Type = int
#  731|                       ValueCategory = lvalue
#  731|                   1: ... ? ... : ...
#  731|                       Type = int
#  731|                       ValueCategory = prvalue
#  731|                     0: b
#  731|                         Type = bool
#  731|                         ValueCategory = prvalue(load)
#  731|                     1: 7
#  731|                         Type = int
#  731|                         Value = 7
#  731|                         ValueCategory = prvalue
#  731|                     2: throw ...
#  731|                         Type = String
#  731|                         ValueCategory = prvalue
#  731|                       0: call to String
#  731|                           Type = void
#  731|                           ValueCategory = prvalue
#  731|                         0: array to pointer conversion
#  731|                             Type = const char *
#  731|                             ValueCategory = prvalue
#  731|                           expr: String object
#  731|                               Type = const char[14]
#  731|                               Value = "String object"
#  731|                               ValueCategory = lvalue
#  733|         2: ExprStmt
#  733|           0: ... = ...
#  733|               Type = int
#  733|               ValueCategory = lvalue
#  733|             0: x
#  733|                 Type = int
#  733|                 ValueCategory = lvalue
#  733|             1: 7
#  733|                 Type = int
#  733|                 Value = 7
#  733|                 ValueCategory = prvalue
#  735|       1: <handler>
#  735|         0: { ... }
#  736|           0: ExprStmt
#  736|             0: throw ...
#  736|                 Type = String
#  736|                 ValueCategory = prvalue
#  736|               0: call to String
#  736|                   Type = void
#  736|                   ValueCategory = prvalue
#  736|                 0: s
#  736|                     Type = const char *
#  736|                     ValueCategory = prvalue(load)
#  738|       2: <handler>
#  738|         0: { ... }
#  740|       3: <handler>
#  740|         0: { ... }
#  741|           0: ExprStmt
#  741|             0: re-throw exception 
#  741|                 Type = void
#  741|                 ValueCategory = prvalue
#  743|     1: return ...
#  745| Base& Base::operator=(Base const&)
#  745|   params: 
#-----|     0: p#0
#-----|         Type = const Base &
#-----|   body: { ... }
#-----|     0: ExprStmt
#-----|       0: (reference dereference)
#-----|           Type = String
#-----|           ValueCategory = lvalue
#  745|         expr: call to operator=
#  745|             Type = String &
#  745|             ValueCategory = prvalue
#-----|           -1: & ...
#-----|               Type = String *
#-----|               ValueCategory = prvalue
#-----|             0: base_s
#-----|                 Type = String
#-----|                 ValueCategory = lvalue
#-----|               -1: this
#-----|                   Type = Base *
#-----|                   ValueCategory = prvalue(load)
#-----|           0: (reference to)
#-----|               Type = const String &
#-----|               ValueCategory = prvalue
#-----|             expr: base_s
#-----|                 Type = String
#-----|                 ValueCategory = lvalue
#-----|               -1: (reference dereference)
#-----|                   Type = const Base
#-----|                   ValueCategory = lvalue
#-----|                 expr: p#0
#-----|                     Type = const Base &
#-----|                     ValueCategory = prvalue(load)
#-----|     1: return ...
#-----|       0: (reference to)
#-----|           Type = Base &
#-----|           ValueCategory = prvalue
#-----|         expr: * ...
#-----|             Type = Base
#-----|             ValueCategory = lvalue
#-----|           0: this
#-----|               Type = Base *
#-----|               ValueCategory = prvalue(load)
#  745| void Base::Base(Base const&)
#  745|   params: 
#-----|     0: p#0
#-----|         Type = const Base &
#  745|   initializations: 
#  745|     0: constructor init of field base_s
#  745|         Type = String
#  745|         ValueCategory = prvalue
#  745|       0: call to String
#  745|           Type = void
#  745|           ValueCategory = prvalue
#  745|   body: { ... }
#  745|     0: return ...
#  748| void Base::Base()
#  748|   params: 
#  748|   initializations: 
#  748|     0: constructor init of field base_s
#  748|         Type = String
#  748|         ValueCategory = prvalue
#  748|       0: call to String
#  748|           Type = void
#  748|           ValueCategory = prvalue
#  748|   body: { ... }
#  749|     0: return ...
#  750| void Base::~Base()
#  750|   params: 
#  750|   body: { ... }
#  751|     0: return ...
#  750|   destructions: 
#  751|     0: destructor field destruction of base_s
#  751|         Type = String
#  751|         ValueCategory = prvalue
#  751|       0: call to ~String
#  751|           Type = void
#  751|           ValueCategory = prvalue
#  751|         -1: base_s
#  751|             Type = String
#  751|             ValueCategory = lvalue
#  754| Middle& Middle::operator=(Middle const&)
#  754|   params: 
#-----|     0: p#0
#-----|         Type = const Middle &
#-----|   body: { ... }
#-----|     0: ExprStmt
#-----|       0: (reference dereference)
#-----|           Type = Base
#-----|           ValueCategory = lvalue
#  754|         expr: call to operator=
#  754|             Type = Base &
#  754|             ValueCategory = prvalue
#-----|           -1: (Base *)...
#-----|               Conversion = base class conversion
#-----|               Type = Base *
#-----|               ValueCategory = prvalue
#-----|             expr: this
#-----|                 Type = Middle *
#-----|                 ValueCategory = prvalue(load)
#-----|           0: (reference to)
#-----|               Type = const Base &
#-----|               ValueCategory = prvalue
#-----|             expr: * ...
#-----|                 Type = const Base
#-----|                 ValueCategory = lvalue
#-----|               0: (const Base *)...
#-----|                   Conversion = base class conversion
#-----|                   Type = const Base *
#-----|                   ValueCategory = prvalue
#-----|                 expr: & ...
#-----|                     Type = const Middle *
#-----|                     ValueCategory = prvalue
#-----|                   0: (reference dereference)
#-----|                       Type = const Middle
#-----|                       ValueCategory = lvalue
#-----|                     expr: p#0
#-----|                         Type = const Middle &
#-----|                         ValueCategory = prvalue(load)
#-----|     1: ExprStmt
#-----|       0: (reference dereference)
#-----|           Type = String
#-----|           ValueCategory = lvalue
#  754|         expr: call to operator=
#  754|             Type = String &
#  754|             ValueCategory = prvalue
#-----|           -1: & ...
#-----|               Type = String *
#-----|               ValueCategory = prvalue
#-----|             0: middle_s
#-----|                 Type = String
#-----|                 ValueCategory = lvalue
#-----|               -1: this
#-----|                   Type = Middle *
#-----|                   ValueCategory = prvalue(load)
#-----|           0: (reference to)
#-----|               Type = const String &
#-----|               ValueCategory = prvalue
#-----|             expr: middle_s
#-----|                 Type = String
#-----|                 ValueCategory = lvalue
#-----|               -1: (reference dereference)
#-----|                   Type = const Middle
#-----|                   ValueCategory = lvalue
#-----|                 expr: p#0
#-----|                     Type = const Middle &
#-----|                     ValueCategory = prvalue(load)
#-----|     2: return ...
#-----|       0: (reference to)
#-----|           Type = Middle &
#-----|           ValueCategory = prvalue
#-----|         expr: * ...
#-----|             Type = Middle
#-----|             ValueCategory = lvalue
#-----|           0: this
#-----|               Type = Middle *
#-----|               ValueCategory = prvalue(load)
#  754| void Middle::Middle(Middle const&)
#  754|   params: 
#-----|     0: p#0
#-----|         Type = const Middle &
#  757| void Middle::Middle()
#  757|   params: 
#  757|   initializations: 
#  757|     0: call to Base
#  757|         Type = void
#  757|         ValueCategory = prvalue
#  757|     1: constructor init of field middle_s
#  757|         Type = String
#  757|         ValueCategory = prvalue
#  757|       0: call to String
#  757|           Type = void
#  757|           ValueCategory = prvalue
#  757|   body: { ... }
#  758|     0: return ...
#  759| void Middle::~Middle()
#  759|   params: 
#  759|   body: { ... }
#  760|     0: return ...
#  759|   destructions: 
#  760|     0: destructor field destruction of middle_s
#  760|         Type = String
#  760|         ValueCategory = prvalue
#  760|       0: call to ~String
#  760|           Type = void
#  760|           ValueCategory = prvalue
#  760|         -1: middle_s
#  760|             Type = String
#  760|             ValueCategory = lvalue
#  760|     1: call to ~Base
#  760|         Type = void
#  760|         ValueCategory = prvalue
#  763| Derived& Derived::operator=(Derived const&)
#  763|   params: 
#-----|     0: p#0
#-----|         Type = const Derived &
#-----|   body: { ... }
#-----|     0: ExprStmt
#-----|       0: (reference dereference)
#-----|           Type = Middle
#-----|           ValueCategory = lvalue
#  763|         expr: call to operator=
#  763|             Type = Middle &
#  763|             ValueCategory = prvalue
#-----|           -1: (Middle *)...
#-----|               Conversion = base class conversion
#-----|               Type = Middle *
#-----|               ValueCategory = prvalue
#-----|             expr: this
#-----|                 Type = Derived *
#-----|                 ValueCategory = prvalue(load)
#-----|           0: (reference to)
#-----|               Type = const Middle &
#-----|               ValueCategory = prvalue
#-----|             expr: * ...
#-----|                 Type = const Middle
#-----|                 ValueCategory = lvalue
#-----|               0: (const Middle *)...
#-----|                   Conversion = base class conversion
#-----|                   Type = const Middle *
#-----|                   ValueCategory = prvalue
#-----|                 expr: & ...
#-----|                     Type = const Derived *
#-----|                     ValueCategory = prvalue
#-----|                   0: (reference dereference)
#-----|                       Type = const Derived
#-----|                       ValueCategory = lvalue
#-----|                     expr: p#0
#-----|                         Type = const Derived &
#-----|                         ValueCategory = prvalue(load)
#-----|     1: ExprStmt
#-----|       0: (reference dereference)
#-----|           Type = String
#-----|           ValueCategory = lvalue
#  763|         expr: call to operator=
#  763|             Type = String &
#  763|             ValueCategory = prvalue
#-----|           -1: & ...
#-----|               Type = String *
#-----|               ValueCategory = prvalue
#-----|             0: derived_s
#-----|                 Type = String
#-----|                 ValueCategory = lvalue
#-----|               -1: this
#-----|                   Type = Derived *
#-----|                   ValueCategory = prvalue(load)
#-----|           0: (reference to)
#-----|               Type = const String &
#-----|               ValueCategory = prvalue
#-----|             expr: derived_s
#-----|                 Type = String
#-----|                 ValueCategory = lvalue
#-----|               -1: (reference dereference)
#-----|                   Type = const Derived
#-----|                   ValueCategory = lvalue
#-----|                 expr: p#0
#-----|                     Type = const Derived &
#-----|                     ValueCategory = prvalue(load)
#-----|     2: return ...
#-----|       0: (reference to)
#-----|           Type = Derived &
#-----|           ValueCategory = prvalue
#-----|         expr: * ...
#-----|             Type = Derived
#-----|             ValueCategory = lvalue
#-----|           0: this
#-----|               Type = Derived *
#-----|               ValueCategory = prvalue(load)
#  763| void Derived::Derived(Derived const&)
#  763|   params: 
#-----|     0: p#0
#-----|         Type = const Derived &
#  766| void Derived::Derived()
#  766|   params: 
#  766|   initializations: 
#  766|     0: call to Middle
#  766|         Type = void
#  766|         ValueCategory = prvalue
#  766|     1: constructor init of field derived_s
#  766|         Type = String
#  766|         ValueCategory = prvalue
#  766|       0: call to String
#  766|           Type = void
#  766|           ValueCategory = prvalue
#  766|   body: { ... }
#  767|     0: return ...
#  768| void Derived::~Derived()
#  768|   params: 
#  768|   body: { ... }
#  769|     0: return ...
#  768|   destructions: 
#  769|     0: destructor field destruction of derived_s
#  769|         Type = String
#  769|         ValueCategory = prvalue
#  769|       0: call to ~String
#  769|           Type = void
#  769|           ValueCategory = prvalue
#  769|         -1: derived_s
#  769|             Type = String
#  769|             ValueCategory = lvalue
#  769|     1: call to ~Middle
#  769|         Type = void
#  769|         ValueCategory = prvalue
#  772| MiddleVB1& MiddleVB1::operator=(MiddleVB1 const&)
#  772|   params: 
#-----|     0: p#0
#-----|         Type = const MiddleVB1 &
#  772| void MiddleVB1::MiddleVB1(MiddleVB1 const&)
#  772|   params: 
#-----|     0: p#0
#-----|         Type = const MiddleVB1 &
#  775| void MiddleVB1::MiddleVB1()
#  775|   params: 
#  775|   initializations: 
#  775|     0: call to Base
#  775|         Type = void
#  775|         ValueCategory = prvalue
#  775|     1: constructor init of field middlevb1_s
#  775|         Type = String
#  775|         ValueCategory = prvalue
#  775|       0: call to String
#  775|           Type = void
#  775|           ValueCategory = prvalue
#  775|   body: { ... }
#  776|     0: return ...
#  777| void MiddleVB1::~MiddleVB1()
#  777|   params: 
#  777|   body: { ... }
#  778|     0: return ...
#  777|   destructions: 
#  778|     0: destructor field destruction of middlevb1_s
#  778|         Type = String
#  778|         ValueCategory = prvalue
#  778|       0: call to ~String
#  778|           Type = void
#  778|           ValueCategory = prvalue
#  778|         -1: middlevb1_s
#  778|             Type = String
#  778|             ValueCategory = lvalue
#  778|     1: call to ~Base
#  778|         Type = void
#  778|         ValueCategory = prvalue
#  781| MiddleVB2& MiddleVB2::operator=(MiddleVB2 const&)
#  781|   params: 
#-----|     0: p#0
#-----|         Type = const MiddleVB2 &
#  781| void MiddleVB2::MiddleVB2(MiddleVB2 const&)
#  781|   params: 
#-----|     0: p#0
#-----|         Type = const MiddleVB2 &
#  784| void MiddleVB2::MiddleVB2()
#  784|   params: 
#  784|   initializations: 
#  784|     0: call to Base
#  784|         Type = void
#  784|         ValueCategory = prvalue
#  784|     1: constructor init of field middlevb2_s
#  784|         Type = String
#  784|         ValueCategory = prvalue
#  784|       0: call to String
#  784|           Type = void
#  784|           ValueCategory = prvalue
#  784|   body: { ... }
#  785|     0: return ...
#  786| void MiddleVB2::~MiddleVB2()
#  786|   params: 
#  786|   body: { ... }
#  787|     0: return ...
#  786|   destructions: 
#  787|     0: destructor field destruction of middlevb2_s
#  787|         Type = String
#  787|         ValueCategory = prvalue
#  787|       0: call to ~String
#  787|           Type = void
#  787|           ValueCategory = prvalue
#  787|         -1: middlevb2_s
#  787|             Type = String
#  787|             ValueCategory = lvalue
#  787|     1: call to ~Base
#  787|         Type = void
#  787|         ValueCategory = prvalue
#  790| DerivedVB& DerivedVB::operator=(DerivedVB const&)
#  790|   params: 
#-----|     0: p#0
#-----|         Type = const DerivedVB &
#  790| void DerivedVB::DerivedVB(DerivedVB const&)
#  790|   params: 
#-----|     0: p#0
#-----|         Type = const DerivedVB &
#  793| void DerivedVB::DerivedVB()
#  793|   params: 
#  793|   initializations: 
#  793|     0: call to Base
#  793|         Type = void
#  793|         ValueCategory = prvalue
#  793|     1: call to MiddleVB1
#  793|         Type = void
#  793|         ValueCategory = prvalue
#  793|     2: call to MiddleVB2
#  793|         Type = void
#  793|         ValueCategory = prvalue
#  793|     3: constructor init of field derivedvb_s
#  793|         Type = String
#  793|         ValueCategory = prvalue
#  793|       0: call to String
#  793|           Type = void
#  793|           ValueCategory = prvalue
#  793|   body: { ... }
#  794|     0: return ...
#  795| void DerivedVB::~DerivedVB()
#  795|   params: 
#  795|   body: { ... }
#  796|     0: return ...
#  795|   destructions: 
#  796|     0: destructor field destruction of derivedvb_s
#  796|         Type = String
#  796|         ValueCategory = prvalue
#  796|       0: call to ~String
#  796|           Type = void
#  796|           ValueCategory = prvalue
#  796|         -1: derivedvb_s
#  796|             Type = String
#  796|             ValueCategory = lvalue
#  796|     1: call to ~MiddleVB2
#  796|         Type = void
#  796|         ValueCategory = prvalue
#  796|     2: call to ~MiddleVB1
#  796|         Type = void
#  796|         ValueCategory = prvalue
#  796|     3: call to ~Base
#  796|         Type = void
#  796|         ValueCategory = prvalue
#  799| void HierarchyConversions()
#  799|   params: 
#  799|   body: { ... }
#  800|     0: declaration
#  800|       0: definition of b
#  800|           Type = Base
#  800|         init: initializer for b
#  800|           expr: call to Base
#  800|               Type = void
#  800|               ValueCategory = prvalue
#  801|     1: declaration
#  801|       0: definition of m
#  801|           Type = Middle
#  801|         init: initializer for m
#  801|           expr: call to Middle
#  801|               Type = void
#  801|               ValueCategory = prvalue
#  802|     2: declaration
#  802|       0: definition of d
#  802|           Type = Derived
#  802|         init: initializer for d
#  802|           expr: call to Derived
#  802|               Type = void
#  802|               ValueCategory = prvalue
#  804|     3: declaration
#  804|       0: definition of pb
#  804|           Type = Base *
#  804|         init: initializer for pb
#  804|           expr: & ...
#  804|               Type = Base *
#  804|               ValueCategory = prvalue
#  804|             0: b
#  804|                 Type = Base
#  804|                 ValueCategory = lvalue
#  805|     4: declaration
#  805|       0: definition of pm
#  805|           Type = Middle *
#  805|         init: initializer for pm
#  805|           expr: & ...
#  805|               Type = Middle *
#  805|               ValueCategory = prvalue
#  805|             0: m
#  805|                 Type = Middle
#  805|                 ValueCategory = lvalue
#  806|     5: declaration
#  806|       0: definition of pd
#  806|           Type = Derived *
#  806|         init: initializer for pd
#  806|           expr: & ...
#  806|               Type = Derived *
#  806|               ValueCategory = prvalue
#  806|             0: d
#  806|                 Type = Derived
#  806|                 ValueCategory = lvalue
#  808|     6: ExprStmt
#  808|       0: (reference dereference)
#  808|           Type = Base
#  808|           ValueCategory = lvalue
#  808|         expr: call to operator=
#  808|             Type = Base &
#  808|             ValueCategory = prvalue
#  808|           -1: b
#  808|               Type = Base
#  808|               ValueCategory = lvalue
#  808|           0: (reference to)
#  808|               Type = const Base &
#  808|               ValueCategory = prvalue
#  808|             expr: (const Base)...
#  808|                 Conversion = base class conversion
#  808|                 Type = const Base
#  808|                 ValueCategory = lvalue
#  808|               expr: m
#  808|                   Type = Middle
#  808|                   ValueCategory = lvalue
#  809|     7: ExprStmt
#  809|       0: (reference dereference)
#  809|           Type = Base
#  809|           ValueCategory = lvalue
#  809|         expr: call to operator=
#  809|             Type = Base &
#  809|             ValueCategory = prvalue
#  809|           -1: b
#  809|               Type = Base
#  809|               ValueCategory = lvalue
#  809|           0: (reference to)
#  809|               Type = const Base &
#  809|               ValueCategory = prvalue
#  809|             expr: (const Base)...
#  809|                 Conversion = glvalue conversion
#  809|                 Type = const Base
#  809|                 ValueCategory = lvalue
#  809|               expr: call to Base
#  809|                   Type = void
#  809|                   ValueCategory = prvalue
#  809|                 0: (reference to)
#  809|                     Type = const Base &
#  809|                     ValueCategory = prvalue
#  809|                   expr: (const Base)...
#  809|                       Conversion = base class conversion
#  809|                       Type = const Base
#  809|                       ValueCategory = lvalue
#  809|                     expr: m
#  809|                         Type = Middle
#  809|                         ValueCategory = lvalue
#  810|     8: ExprStmt
#  810|       0: (reference dereference)
#  810|           Type = Base
#  810|           ValueCategory = lvalue
#  810|         expr: call to operator=
#  810|             Type = Base &
#  810|             ValueCategory = prvalue
#  810|           -1: b
#  810|               Type = Base
#  810|               ValueCategory = lvalue
#  810|           0: (reference to)
#  810|               Type = const Base &
#  810|               ValueCategory = prvalue
#  810|             expr: (const Base)...
#  810|                 Conversion = glvalue conversion
#  810|                 Type = const Base
#  810|                 ValueCategory = lvalue
#  810|               expr: call to Base
#  810|                   Type = void
#  810|                   ValueCategory = prvalue
#  810|                 0: (reference to)
#  810|                     Type = const Base &
#  810|                     ValueCategory = prvalue
#  810|                   expr: (const Base)...
#  810|                       Conversion = base class conversion
#  810|                       Type = const Base
#  810|                       ValueCategory = lvalue
#  810|                     expr: m
#  810|                         Type = Middle
#  810|                         ValueCategory = lvalue
#  811|     9: ExprStmt
#  811|       0: ... = ...
#  811|           Type = Base *
#  811|           ValueCategory = lvalue
#  811|         0: pb
#  811|             Type = Base *
#  811|             ValueCategory = lvalue
#  811|         1: (Base *)...
#  811|             Conversion = base class conversion
#  811|             Type = Base *
#  811|             ValueCategory = prvalue
#  811|           expr: pm
#  811|               Type = Middle *
#  811|               ValueCategory = prvalue(load)
#  812|     10: ExprStmt
#  812|       0: ... = ...
#  812|           Type = Base *
#  812|           ValueCategory = lvalue
#  812|         0: pb
#  812|             Type = Base *
#  812|             ValueCategory = lvalue
#  812|         1: (Base *)...
#  812|             Conversion = base class conversion
#  812|             Type = Base *
#  812|             ValueCategory = prvalue
#  812|           expr: pm
#  812|               Type = Middle *
#  812|               ValueCategory = prvalue(load)
#  813|     11: ExprStmt
#  813|       0: ... = ...
#  813|           Type = Base *
#  813|           ValueCategory = lvalue
#  813|         0: pb
#  813|             Type = Base *
#  813|             ValueCategory = lvalue
#  813|         1: static_cast<Base *>...
#  813|             Conversion = base class conversion
#  813|             Type = Base *
#  813|             ValueCategory = prvalue
#  813|           expr: pm
#  813|               Type = Middle *
#  813|               ValueCategory = prvalue(load)
#  814|     12: ExprStmt
#  814|       0: ... = ...
#  814|           Type = Base *
#  814|           ValueCategory = lvalue
#  814|         0: pb
#  814|             Type = Base *
#  814|             ValueCategory = lvalue
#  814|         1: reinterpret_cast<Base *>...
#  814|             Conversion = pointer conversion
#  814|             Type = Base *
#  814|             ValueCategory = prvalue
#  814|           expr: pm
#  814|               Type = Middle *
#  814|               ValueCategory = prvalue(load)
#  816|     13: ExprStmt
#  816|       0: (reference dereference)
#  816|           Type = Middle
#  816|           ValueCategory = lvalue
#  816|         expr: call to operator=
#  816|             Type = Middle &
#  816|             ValueCategory = prvalue
#  816|           -1: m
#  816|               Type = Middle
#  816|               ValueCategory = lvalue
#  816|           0: (reference to)
#  816|               Type = const Middle &
#  816|               ValueCategory = prvalue
#  816|             expr: (const Middle)...
#  816|                 Conversion = glvalue conversion
#  816|                 Type = const Middle
#  816|                 ValueCategory = lvalue
#  816|               expr: (Middle)...
#  816|                   Conversion = derived class conversion
#  816|                   Type = Middle
#  816|                   ValueCategory = lvalue
#  816|                 expr: b
#  816|                     Type = Base
#  816|                     ValueCategory = lvalue
#  817|     14: ExprStmt
#  817|       0: (reference dereference)
#  817|           Type = Middle
#  817|           ValueCategory = lvalue
#  817|         expr: call to operator=
#  817|             Type = Middle &
#  817|             ValueCategory = prvalue
#  817|           -1: m
#  817|               Type = Middle
#  817|               ValueCategory = lvalue
#  817|           0: (reference to)
#  817|               Type = const Middle &
#  817|               ValueCategory = prvalue
#  817|             expr: (const Middle)...
#  817|                 Conversion = glvalue conversion
#  817|                 Type = const Middle
#  817|                 ValueCategory = lvalue
#  817|               expr: static_cast<Middle>...
#  817|                   Conversion = derived class conversion
#  817|                   Type = Middle
#  817|                   ValueCategory = lvalue
#  817|                 expr: b
#  817|                     Type = Base
#  817|                     ValueCategory = lvalue
#  818|     15: ExprStmt
#  818|       0: ... = ...
#  818|           Type = Middle *
#  818|           ValueCategory = lvalue
#  818|         0: pm
#  818|             Type = Middle *
#  818|             ValueCategory = lvalue
#  818|         1: (Middle *)...
#  818|             Conversion = derived class conversion
#  818|             Type = Middle *
#  818|             ValueCategory = prvalue
#  818|           expr: pb
#  818|               Type = Base *
#  818|               ValueCategory = prvalue(load)
#  819|     16: ExprStmt
#  819|       0: ... = ...
#  819|           Type = Middle *
#  819|           ValueCategory = lvalue
#  819|         0: pm
#  819|             Type = Middle *
#  819|             ValueCategory = lvalue
#  819|         1: static_cast<Middle *>...
#  819|             Conversion = derived class conversion
#  819|             Type = Middle *
#  819|             ValueCategory = prvalue
#  819|           expr: pb
#  819|               Type = Base *
#  819|               ValueCategory = prvalue(load)
#  820|     17: ExprStmt
#  820|       0: ... = ...
#  820|           Type = Middle *
#  820|           ValueCategory = lvalue
#  820|         0: pm
#  820|             Type = Middle *
#  820|             ValueCategory = lvalue
#  820|         1: reinterpret_cast<Middle *>...
#  820|             Conversion = pointer conversion
#  820|             Type = Middle *
#  820|             ValueCategory = prvalue
#  820|           expr: pb
#  820|               Type = Base *
#  820|               ValueCategory = prvalue(load)
#  822|     18: ExprStmt
#  822|       0: (reference dereference)
#  822|           Type = Base
#  822|           ValueCategory = lvalue
#  822|         expr: call to operator=
#  822|             Type = Base &
#  822|             ValueCategory = prvalue
#  822|           -1: b
#  822|               Type = Base
#  822|               ValueCategory = lvalue
#  822|           0: (reference to)
#  822|               Type = const Base &
#  822|               ValueCategory = prvalue
#  822|             expr: (const Base)...
#  822|                 Conversion = base class conversion
#  822|                 Type = const Base
#  822|                 ValueCategory = lvalue
#  822|               expr: (const Middle)...
#  822|                   Conversion = base class conversion
#  822|                   Type = const Middle
#  822|                   ValueCategory = lvalue
#  822|                 expr: d
#  822|                     Type = Derived
#  822|                     ValueCategory = lvalue
#  823|     19: ExprStmt
#  823|       0: (reference dereference)
#  823|           Type = Base
#  823|           ValueCategory = lvalue
#  823|         expr: call to operator=
#  823|             Type = Base &
#  823|             ValueCategory = prvalue
#  823|           -1: b
#  823|               Type = Base
#  823|               ValueCategory = lvalue
#  823|           0: (reference to)
#  823|               Type = const Base &
#  823|               ValueCategory = prvalue
#  823|             expr: (const Base)...
#  823|                 Conversion = glvalue conversion
#  823|                 Type = const Base
#  823|                 ValueCategory = lvalue
#  823|               expr: call to Base
#  823|                   Type = void
#  823|                   ValueCategory = prvalue
#  823|                 0: (reference to)
#  823|                     Type = const Base &
#  823|                     ValueCategory = prvalue
#  823|                   expr: (const Base)...
#  823|                       Conversion = base class conversion
#  823|                       Type = const Base
#  823|                       ValueCategory = lvalue
#  823|                     expr: (const Middle)...
#  823|                         Conversion = base class conversion
#  823|                         Type = const Middle
#  823|                         ValueCategory = lvalue
#  823|                       expr: d
#  823|                           Type = Derived
#  823|                           ValueCategory = lvalue
#  824|     20: ExprStmt
#  824|       0: (reference dereference)
#  824|           Type = Base
#  824|           ValueCategory = lvalue
#  824|         expr: call to operator=
#  824|             Type = Base &
#  824|             ValueCategory = prvalue
#  824|           -1: b
#  824|               Type = Base
#  824|               ValueCategory = lvalue
#  824|           0: (reference to)
#  824|               Type = const Base &
#  824|               ValueCategory = prvalue
#  824|             expr: (const Base)...
#  824|                 Conversion = glvalue conversion
#  824|                 Type = const Base
#  824|                 ValueCategory = lvalue
#  824|               expr: call to Base
#  824|                   Type = void
#  824|                   ValueCategory = prvalue
#  824|                 0: (reference to)
#  824|                     Type = const Base &
#  824|                     ValueCategory = prvalue
#  824|                   expr: (const Base)...
#  824|                       Conversion = base class conversion
#  824|                       Type = const Base
#  824|                       ValueCategory = lvalue
#  824|                     expr: (const Middle)...
#  824|                         Conversion = base class conversion
#  824|                         Type = const Middle
#  824|                         ValueCategory = lvalue
#  824|                       expr: d
#  824|                           Type = Derived
#  824|                           ValueCategory = lvalue
#  825|     21: ExprStmt
#  825|       0: ... = ...
#  825|           Type = Base *
#  825|           ValueCategory = lvalue
#  825|         0: pb
#  825|             Type = Base *
#  825|             ValueCategory = lvalue
#  825|         1: (Base *)...
#  825|             Conversion = base class conversion
#  825|             Type = Base *
#  825|             ValueCategory = prvalue
#  825|           expr: (Middle *)...
#  825|               Conversion = base class conversion
#  825|               Type = Middle *
#  825|               ValueCategory = prvalue
#  825|             expr: pd
#  825|                 Type = Derived *
#  825|                 ValueCategory = prvalue(load)
#  826|     22: ExprStmt
#  826|       0: ... = ...
#  826|           Type = Base *
#  826|           ValueCategory = lvalue
#  826|         0: pb
#  826|             Type = Base *
#  826|             ValueCategory = lvalue
#  826|         1: (Base *)...
#  826|             Conversion = base class conversion
#  826|             Type = Base *
#  826|             ValueCategory = prvalue
#  826|           expr: (Middle *)...
#  826|               Conversion = base class conversion
#  826|               Type = Middle *
#  826|               ValueCategory = prvalue
#  826|             expr: pd
#  826|                 Type = Derived *
#  826|                 ValueCategory = prvalue(load)
#  827|     23: ExprStmt
#  827|       0: ... = ...
#  827|           Type = Base *
#  827|           ValueCategory = lvalue
#  827|         0: pb
#  827|             Type = Base *
#  827|             ValueCategory = lvalue
#  827|         1: static_cast<Base *>...
#  827|             Conversion = base class conversion
#  827|             Type = Base *
#  827|             ValueCategory = prvalue
#  827|           expr: (Middle *)...
#  827|               Conversion = base class conversion
#  827|               Type = Middle *
#  827|               ValueCategory = prvalue
#  827|             expr: pd
#  827|                 Type = Derived *
#  827|                 ValueCategory = prvalue(load)
#  828|     24: ExprStmt
#  828|       0: ... = ...
#  828|           Type = Base *
#  828|           ValueCategory = lvalue
#  828|         0: pb
#  828|             Type = Base *
#  828|             ValueCategory = lvalue
#  828|         1: reinterpret_cast<Base *>...
#  828|             Conversion = pointer conversion
#  828|             Type = Base *
#  828|             ValueCategory = prvalue
#  828|           expr: pd
#  828|               Type = Derived *
#  828|               ValueCategory = prvalue(load)
#  830|     25: ExprStmt
#  830|       0: (reference dereference)
#  830|           Type = Derived
#  830|           ValueCategory = lvalue
#  830|         expr: call to operator=
#  830|             Type = Derived &
#  830|             ValueCategory = prvalue
#  830|           -1: d
#  830|               Type = Derived
#  830|               ValueCategory = lvalue
#  830|           0: (reference to)
#  830|               Type = const Derived &
#  830|               ValueCategory = prvalue
#  830|             expr: (const Derived)...
#  830|                 Conversion = glvalue conversion
#  830|                 Type = const Derived
#  830|                 ValueCategory = lvalue
#  830|               expr: (Derived)...
#  830|                   Conversion = derived class conversion
#  830|                   Type = Derived
#  830|                   ValueCategory = lvalue
#  830|                 expr: (Middle)...
#  830|                     Conversion = derived class conversion
#  830|                     Type = Middle
#  830|                     ValueCategory = lvalue
#  830|                   expr: b
#  830|                       Type = Base
#  830|                       ValueCategory = lvalue
#  831|     26: ExprStmt
#  831|       0: (reference dereference)
#  831|           Type = Derived
#  831|           ValueCategory = lvalue
#  831|         expr: call to operator=
#  831|             Type = Derived &
#  831|             ValueCategory = prvalue
#  831|           -1: d
#  831|               Type = Derived
#  831|               ValueCategory = lvalue
#  831|           0: (reference to)
#  831|               Type = const Derived &
#  831|               ValueCategory = prvalue
#  831|             expr: (const Derived)...
#  831|                 Conversion = glvalue conversion
#  831|                 Type = const Derived
#  831|                 ValueCategory = lvalue
#  831|               expr: static_cast<Derived>...
#  831|                   Conversion = derived class conversion
#  831|                   Type = Derived
#  831|                   ValueCategory = lvalue
#  831|                 expr: (Middle)...
#  831|                     Conversion = derived class conversion
#  831|                     Type = Middle
#  831|                     ValueCategory = lvalue
#  831|                   expr: b
#  831|                       Type = Base
#  831|                       ValueCategory = lvalue
#  832|     27: ExprStmt
#  832|       0: ... = ...
#  832|           Type = Derived *
#  832|           ValueCategory = lvalue
#  832|         0: pd
#  832|             Type = Derived *
#  832|             ValueCategory = lvalue
#  832|         1: (Derived *)...
#  832|             Conversion = derived class conversion
#  832|             Type = Derived *
#  832|             ValueCategory = prvalue
#  832|           expr: (Middle *)...
#  832|               Conversion = derived class conversion
#  832|               Type = Middle *
#  832|               ValueCategory = prvalue
#  832|             expr: pb
#  832|                 Type = Base *
#  832|                 ValueCategory = prvalue(load)
#  833|     28: ExprStmt
#  833|       0: ... = ...
#  833|           Type = Derived *
#  833|           ValueCategory = lvalue
#  833|         0: pd
#  833|             Type = Derived *
#  833|             ValueCategory = lvalue
#  833|         1: static_cast<Derived *>...
#  833|             Conversion = derived class conversion
#  833|             Type = Derived *
#  833|             ValueCategory = prvalue
#  833|           expr: (Middle *)...
#  833|               Conversion = derived class conversion
#  833|               Type = Middle *
#  833|               ValueCategory = prvalue
#  833|             expr: pb
#  833|                 Type = Base *
#  833|                 ValueCategory = prvalue(load)
#  834|     29: ExprStmt
#  834|       0: ... = ...
#  834|           Type = Derived *
#  834|           ValueCategory = lvalue
#  834|         0: pd
#  834|             Type = Derived *
#  834|             ValueCategory = lvalue
#  834|         1: reinterpret_cast<Derived *>...
#  834|             Conversion = pointer conversion
#  834|             Type = Derived *
#  834|             ValueCategory = prvalue
#  834|           expr: pb
#  834|               Type = Base *
#  834|               ValueCategory = prvalue(load)
#  836|     30: declaration
#  836|       0: definition of pmv
#  836|           Type = MiddleVB1 *
#  836|         init: initializer for pmv
#  836|           expr: (MiddleVB1 *)...
#  836|               Conversion = pointer conversion
#  836|               Type = MiddleVB1 *
#  836|               Value = 0
#  836|               ValueCategory = prvalue
#  836|             expr: 0
#  836|                 Type = decltype(nullptr)
#  836|                 Value = 0
#  836|                 ValueCategory = prvalue
#  837|     31: declaration
#  837|       0: definition of pdv
#  837|           Type = DerivedVB *
#  837|         init: initializer for pdv
#  837|           expr: (DerivedVB *)...
#  837|               Conversion = pointer conversion
#  837|               Type = DerivedVB *
#  837|               Value = 0
#  837|               ValueCategory = prvalue
#  837|             expr: 0
#  837|                 Type = decltype(nullptr)
#  837|                 Value = 0
#  837|                 ValueCategory = prvalue
#  838|     32: ExprStmt
#  838|       0: ... = ...
#  838|           Type = Base *
#  838|           ValueCategory = lvalue
#  838|         0: pb
#  838|             Type = Base *
#  838|             ValueCategory = lvalue
#  838|         1: (Base *)...
#  838|             Conversion = base class conversion
#  838|             Type = Base *
#  838|             ValueCategory = prvalue
#  838|           expr: pmv
#  838|               Type = MiddleVB1 *
#  838|               ValueCategory = prvalue(load)
#  839|     33: ExprStmt
#  839|       0: ... = ...
#  839|           Type = Base *
#  839|           ValueCategory = lvalue
#  839|         0: pb
#  839|             Type = Base *
#  839|             ValueCategory = lvalue
#  839|         1: (Base *)...
#  839|             Conversion = base class conversion
#  839|             Type = Base *
#  839|             ValueCategory = prvalue
#  839|           expr: pdv
#  839|               Type = DerivedVB *
#  839|               ValueCategory = prvalue(load)
#  840|     34: return ...
#  842| PolymorphicBase& PolymorphicBase::operator=(PolymorphicBase const&)
#  842|   params: 
#-----|     0: p#0
#-----|         Type = const PolymorphicBase &
#  842| void PolymorphicBase::PolymorphicBase()
#  842|   params: 
#  842|   initializations: 
#  842|   body: { ... }
#  842|     0: return ...
#  842| void PolymorphicBase::PolymorphicBase(PolymorphicBase const&)
#  842|   params: 
#-----|     0: p#0
#-----|         Type = const PolymorphicBase &
#  843| void PolymorphicBase::~PolymorphicBase()
#  843|   params: 
#  846| PolymorphicDerived& PolymorphicDerived::operator=(PolymorphicDerived const&)
#  846|   params: 
#-----|     0: p#0
#-----|         Type = const PolymorphicDerived &
#  846| PolymorphicDerived& PolymorphicDerived::operator=(PolymorphicDerived&&)
#  846|   params: 
#-----|     0: p#0
#-----|         Type = PolymorphicDerived &&
#  846| void PolymorphicDerived::PolymorphicDerived()
#  846|   params: 
#  846|   initializations: 
#  846|     0: call to PolymorphicBase
#  846|         Type = void
#  846|         ValueCategory = prvalue
#  846|   body: { ... }
#  846|     0: return ...
#  846| void PolymorphicDerived::PolymorphicDerived(PolymorphicDerived const&)
#  846|   params: 
#-----|     0: p#0
#-----|         Type = const PolymorphicDerived &
#  846| void PolymorphicDerived::PolymorphicDerived(PolymorphicDerived&&)
#  846|   params: 
#-----|     0: p#0
#-----|         Type = PolymorphicDerived &&
#  846| void PolymorphicDerived::~PolymorphicDerived()
#  846|   params: 
#-----|   body: { ... }
#-----|     0: return ...
#  846|   destructions: 
#  846|     0: call to ~PolymorphicBase
#  846|         Type = void
#  846|         ValueCategory = prvalue
#  849| void DynamicCast()
#  849|   params: 
#  849|   body: { ... }
#  850|     0: declaration
#  850|       0: definition of b
#  850|           Type = PolymorphicBase
#  850|         init: initializer for b
#-----|           expr: call to PolymorphicBase
#-----|               Type = void
#-----|               ValueCategory = prvalue
#  851|     1: declaration
#  851|       0: definition of d
#  851|           Type = PolymorphicDerived
#  851|         init: initializer for d
#  851|           expr: call to PolymorphicDerived
#  851|               Type = void
#  851|               ValueCategory = prvalue
#  853|     2: declaration
#  853|       0: definition of pb
#  853|           Type = PolymorphicBase *
#  853|         init: initializer for pb
#  853|           expr: & ...
#  853|               Type = PolymorphicBase *
#  853|               ValueCategory = prvalue
#  853|             0: b
#  853|                 Type = PolymorphicBase
#  853|                 ValueCategory = lvalue
#  854|     3: declaration
#  854|       0: definition of pd
#  854|           Type = PolymorphicDerived *
#  854|         init: initializer for pd
#  854|           expr: & ...
#  854|               Type = PolymorphicDerived *
#  854|               ValueCategory = prvalue
#  854|             0: d
#  854|                 Type = PolymorphicDerived
#  854|                 ValueCategory = lvalue
#  857|     4: ExprStmt
#  857|       0: ... = ...
#  857|           Type = PolymorphicBase *
#  857|           ValueCategory = lvalue
#  857|         0: pb
#  857|             Type = PolymorphicBase *
#  857|             ValueCategory = lvalue
#  857|         1: dynamic_cast<PolymorphicBase *>...
#  857|             Conversion = dynamic_cast
#  857|             Type = PolymorphicBase *
#  857|             ValueCategory = prvalue
#  857|           expr: pd
#  857|               Type = PolymorphicDerived *
#  857|               ValueCategory = prvalue(load)
#  858|     5: declaration
#  858|       0: definition of rb
#  858|           Type = PolymorphicBase &
#  858|         init: initializer for rb
#  858|           expr: (reference to)
#  858|               Type = PolymorphicBase &
#  858|               ValueCategory = prvalue
#  858|             expr: dynamic_cast<PolymorphicBase>...
#  858|                 Conversion = dynamic_cast
#  858|                 Type = PolymorphicBase
#  858|                 ValueCategory = lvalue
#  858|               expr: d
#  858|                   Type = PolymorphicDerived
#  858|                   ValueCategory = lvalue
#  860|     6: ExprStmt
#  860|       0: ... = ...
#  860|           Type = PolymorphicDerived *
#  860|           ValueCategory = lvalue
#  860|         0: pd
#  860|             Type = PolymorphicDerived *
#  860|             ValueCategory = lvalue
#  860|         1: dynamic_cast<PolymorphicDerived *>...
#  860|             Conversion = dynamic_cast
#  860|             Type = PolymorphicDerived *
#  860|             ValueCategory = prvalue
#  860|           expr: pb
#  860|               Type = PolymorphicBase *
#  860|               ValueCategory = prvalue(load)
#  861|     7: declaration
#  861|       0: definition of rd
#  861|           Type = PolymorphicDerived &
#  861|         init: initializer for rd
#  861|           expr: (reference to)
#  861|               Type = PolymorphicDerived &
#  861|               ValueCategory = prvalue
#  861|             expr: dynamic_cast<PolymorphicDerived>...
#  861|                 Conversion = dynamic_cast
#  861|                 Type = PolymorphicDerived
#  861|                 ValueCategory = lvalue
#  861|               expr: b
#  861|                   Type = PolymorphicBase
#  861|                   ValueCategory = lvalue
#  863|     8: declaration
#  863|       0: definition of pv
#  863|           Type = void *
#  863|         init: initializer for pv
#  863|           expr: dynamic_cast<void *>...
#  863|               Conversion = dynamic_cast
#  863|               Type = void *
#  863|               ValueCategory = prvalue
#  863|             expr: pb
#  863|                 Type = PolymorphicBase *
#  863|                 ValueCategory = prvalue(load)
#  864|     9: declaration
#  864|       0: definition of pcv
#  864|           Type = const void *
#  864|         init: initializer for pcv
#  864|           expr: dynamic_cast<const void *>...
#  864|               Conversion = dynamic_cast
#  864|               Type = const void *
#  864|               ValueCategory = prvalue
#  864|             expr: pd
#  864|                 Type = PolymorphicDerived *
#  864|                 ValueCategory = prvalue(load)
#  865|     10: return ...
#  867| void String::String()
#  867|   params: 
#  867|   initializations: 
#  868|     0: call to String
#  868|         Type = void
#  868|         ValueCategory = prvalue
#  868|       0: array to pointer conversion
#  868|           Type = const char *
#  868|           ValueCategory = prvalue
#  868|         expr: 
#  868|             Type = const char[1]
#  868|             Value = ""
#  868|             ValueCategory = lvalue
#  868|   body: { ... }
#  869|     0: return ...
#  871| void ArrayConversions()
#  871|   params: 
#  871|   body: { ... }
#  872|     0: declaration
#  872|       0: definition of a
#  872|           Type = char[5]
#  873|     1: declaration
#  873|       0: definition of p
#  873|           Type = const char *
#  873|         init: initializer for p
#  873|           expr: (const char *)...
#  873|               Conversion = pointer conversion
#  873|               Type = const char *
#  873|               ValueCategory = prvalue
#  873|             expr: array to pointer conversion
#  873|                 Type = char *
#  873|                 ValueCategory = prvalue
#  873|               expr: a
#  873|                   Type = char[5]
#  873|                   ValueCategory = lvalue
#  874|     2: ExprStmt
#  874|       0: ... = ...
#  874|           Type = const char *
#  874|           ValueCategory = lvalue
#  874|         0: p
#  874|             Type = const char *
#  874|             ValueCategory = lvalue
#  874|         1: array to pointer conversion
#  874|             Type = const char *
#  874|             ValueCategory = prvalue
#  874|           expr: test
#  874|               Type = const char[5]
#  874|               Value = "test"
#  874|               ValueCategory = lvalue
#  875|     3: ExprStmt
#  875|       0: ... = ...
#  875|           Type = const char *
#  875|           ValueCategory = lvalue
#  875|         0: p
#  875|             Type = const char *
#  875|             ValueCategory = lvalue
#  875|         1: (const char *)...
#  875|             Conversion = pointer conversion
#  875|             Type = const char *
#  875|             ValueCategory = prvalue
#  875|           expr: & ...
#  875|               Type = char *
#  875|               ValueCategory = prvalue
#  875|             0: access to array
#  875|                 Type = char
#  875|                 ValueCategory = lvalue
#  875|               0: array to pointer conversion
#  875|                   Type = char *
#  875|                   ValueCategory = prvalue
#  875|                 expr: a
#  875|                     Type = char[5]
#  875|                     ValueCategory = lvalue
#  875|               1: 0
#  875|                   Type = int
#  875|                   Value = 0
#  875|                   ValueCategory = prvalue
#  876|     4: ExprStmt
#  876|       0: ... = ...
#  876|           Type = const char *
#  876|           ValueCategory = lvalue
#  876|         0: p
#  876|             Type = const char *
#  876|             ValueCategory = lvalue
#  876|         1: & ...
#  876|             Type = const char *
#  876|             ValueCategory = prvalue
#  876|           0: access to array
#  876|               Type = const char
#  876|               ValueCategory = lvalue
#  876|             0: array to pointer conversion
#  876|                 Type = const char *
#  876|                 ValueCategory = prvalue
#  876|               expr: test
#  876|                   Type = const char[5]
#  876|                   Value = "test"
#  876|                   ValueCategory = lvalue
#  876|             1: 0
#  876|                 Type = int
#  876|                 Value = 0
#  876|                 ValueCategory = prvalue
#  877|     5: declaration
#  877|       0: definition of ra
#  877|           Type = char(&)[5]
#  877|         init: initializer for ra
#  877|           expr: (reference to)
#  877|               Type = char(&)[5]
#  877|               ValueCategory = prvalue
#  877|             expr: a
#  877|                 Type = char[5]
#  877|                 ValueCategory = lvalue
#  878|     6: declaration
#  878|       0: definition of rs
#  878|           Type = const char(&)[5]
#  878|         init: initializer for rs
#  878|           expr: (reference to)
#  878|               Type = const char(&)[5]
#  878|               ValueCategory = prvalue
#  878|             expr: test
#  878|                 Type = const char[5]
#  878|                 Value = "test"
#  878|                 ValueCategory = lvalue
#  879|     7: declaration
#  879|       0: definition of pa
#  879|           Type = const char(*)[5]
#  879|         init: initializer for pa
#  879|           expr: (const char(*)[5])...
#  879|               Conversion = pointer conversion
#  879|               Type = const char(*)[5]
#  879|               ValueCategory = prvalue
#  879|             expr: & ...
#  879|                 Type = char(*)[5]
#  879|                 ValueCategory = prvalue
#  879|               0: a
#  879|                   Type = char[5]
#  879|                   ValueCategory = lvalue
#  880|     8: ExprStmt
#  880|       0: ... = ...
#  880|           Type = const char(*)[5]
#  880|           ValueCategory = lvalue
#  880|         0: pa
#  880|             Type = const char(*)[5]
#  880|             ValueCategory = lvalue
#  880|         1: & ...
#  880|             Type = const char(*)[5]
#  880|             ValueCategory = prvalue
#  880|           0: test
#  880|               Type = const char[5]
#  880|               Value = "test"
#  880|               ValueCategory = lvalue
#  881|     9: return ...
#  883| void FuncPtrConversions(int(*)(int), void*)
#  883|   params: 
#  883|     0: pfn
#  883|         Type = ..(*)(..)
#  883|     1: p
#  883|         Type = void *
#  883|   body: { ... }
#  884|     0: ExprStmt
#  884|       0: ... = ...
#  884|           Type = void *
#  884|           ValueCategory = lvalue
#  884|         0: p
#  884|             Type = void *
#  884|             ValueCategory = lvalue
#  884|         1: (void *)...
#  884|             Conversion = pointer conversion
#  884|             Type = void *
#  884|             ValueCategory = prvalue
#  884|           expr: pfn
#  884|               Type = ..(*)(..)
#  884|               ValueCategory = prvalue(load)
#  885|     1: ExprStmt
#  885|       0: ... = ...
#  885|           Type = ..(*)(..)
#  885|           ValueCategory = lvalue
#  885|         0: pfn
#  885|             Type = ..(*)(..)
#  885|             ValueCategory = lvalue
#  885|         1: (..(*)(..))...
#  885|             Conversion = pointer conversion
#  885|             Type = ..(*)(..)
#  885|             ValueCategory = prvalue
#  885|           expr: p
#  885|               Type = void *
#  885|               ValueCategory = prvalue(load)
#  886|     2: return ...
#  888| void VarArgUsage(int)
#  888|   params: 
#  888|     0: x
#  888|         Type = int
#  888|   body: { ... }
#  889|     0: declaration
#  889|       0: definition of args
#  889|           Type = __va_list_tag[1]
#  891|     1: ExprStmt
#  891|       0: __builtin_va_start
#  891|           Type = void
#  891|           ValueCategory = prvalue
#  891|         0: array to pointer conversion
#  891|             Type = __va_list_tag *
#  891|             ValueCategory = prvalue
#  891|           expr: args
#  891|               Type = __va_list_tag[1]
#  891|               ValueCategory = lvalue
#  891|         1: x
#  891|             Type = int
#  891|             ValueCategory = lvalue
#  892|     2: declaration
#  892|       0: definition of args2
#  892|           Type = __va_list_tag[1]
#  893|     3: ExprStmt
#  893|       0: __builtin_va_start
#  893|           Type = void
#  893|           ValueCategory = prvalue
#  893|         0: array to pointer conversion
#  893|             Type = __va_list_tag *
#  893|             ValueCategory = prvalue
#  893|           expr: args2
#  893|               Type = __va_list_tag[1]
#  893|               ValueCategory = lvalue
#  893|         1: array to pointer conversion
#  893|             Type = __va_list_tag *
#  893|             ValueCategory = prvalue
#  893|           expr: args
#  893|               Type = __va_list_tag[1]
#  893|               ValueCategory = lvalue
#  894|     4: declaration
#  894|       0: definition of d
#  894|           Type = double
#  894|         init: initializer for d
#  894|           expr: __builtin_va_arg
#  894|               Type = double
#  894|               ValueCategory = prvalue(load)
#  894|             0: array to pointer conversion
#  894|                 Type = __va_list_tag *
#  894|                 ValueCategory = prvalue
#  894|               expr: args
#  894|                   Type = __va_list_tag[1]
#  894|                   ValueCategory = lvalue
#  895|     5: declaration
#  895|       0: definition of f
#  895|           Type = float
#  895|         init: initializer for f
#  895|           expr: (float)...
#  895|               Conversion = floating point conversion
#  895|               Type = float
#  895|               ValueCategory = prvalue
#  895|             expr: __builtin_va_arg
#  895|                 Type = double
#  895|                 ValueCategory = prvalue(load)
#  895|               0: array to pointer conversion
#  895|                   Type = __va_list_tag *
#  895|                   ValueCategory = prvalue
#  895|                 expr: args
#  895|                     Type = __va_list_tag[1]
#  895|                     ValueCategory = lvalue
#  896|     6: ExprStmt
#  896|       0: __builtin_va_end
#  896|           Type = void
#  896|           ValueCategory = prvalue
#  896|         0: array to pointer conversion
#  896|             Type = __va_list_tag *
#  896|             ValueCategory = prvalue
#  896|           expr: args
#  896|               Type = __va_list_tag[1]
#  896|               ValueCategory = lvalue
#  897|     7: ExprStmt
#  897|       0: __builtin_va_end
#  897|           Type = void
#  897|           ValueCategory = prvalue
#  897|         0: array to pointer conversion
#  897|             Type = __va_list_tag *
#  897|             ValueCategory = prvalue
#  897|           expr: args2
#  897|               Type = __va_list_tag[1]
#  897|               ValueCategory = lvalue
#  898|     8: return ...
#  900| void CastToVoid(int)
#  900|   params: 
#  900|     0: x
#  900|         Type = int
#  900|   body: { ... }
#  901|     0: ExprStmt
#  901|       0: (void)...
#  901|           Conversion = conversion to void
#  901|           Type = void
#  901|           ValueCategory = prvalue
#  901|         expr: x
#  901|             Type = int
#  901|             ValueCategory = lvalue
#  902|     1: return ...
#  904| void ConstantConditions(int)
#  904|   params: 
#  904|     0: x
#  904|         Type = int
#  904|   body: { ... }
#  905|     0: declaration
#  905|       0: definition of a
#  905|           Type = bool
#  905|         init: initializer for a
#  905|           expr: ... && ...
#  905|               Type = bool
#  905|               Value = 1
#  905|               ValueCategory = prvalue
#  905|             0: 1
#  905|                 Type = bool
#  905|                 Value = 1
#  905|                 ValueCategory = prvalue
#  905|             1: 1
#  905|                 Type = bool
#  905|                 Value = 1
#  905|                 ValueCategory = prvalue
#  906|     1: declaration
#  906|       0: definition of b
#  906|           Type = int
#  906|         init: initializer for b
#  906|           expr: ... ? ... : ...
#  906|               Type = int
#  906|               ValueCategory = prvalue
#  906|             0: (...)
#  906|                 Type = bool
#  906|                 Value = 1
#  906|                 ValueCategory = prvalue
#  906|               expr: 1
#  906|                   Type = bool
#  906|                   Value = 1
#  906|                   ValueCategory = prvalue
#  906|             1: x
#  906|                 Type = int
#  906|                 ValueCategory = prvalue(load)
#  906|             2: x
#  906|                 Type = int
#  906|                 ValueCategory = prvalue(load)
#  907|     2: return ...
#  915| void* operator new(size_t, float)
#  915|   params: 
#  915|     0: p#0
#  915|         Type = size_t
#  915|     1: p#1
#  915|         Type = float
#  916| void* operator new[](size_t, float)
#  916|   params: 
#  916|     0: p#0
#  916|         Type = size_t
#  916|     1: p#1
#  916|         Type = float
#  917| void* operator new(size_t, std::align_val_t, float)
#  917|   params: 
#  917|     0: p#0
#  917|         Type = size_t
#  917|     1: p#1
#  917|         Type = align_val_t
#  917|     2: p#2
#  917|         Type = float
#  918| void* operator new[](size_t, std::align_val_t, float)
#  918|   params: 
#  918|     0: p#0
#  918|         Type = size_t
#  918|     1: p#1
#  918|         Type = align_val_t
#  918|     2: p#2
#  918|         Type = float
#  919| void operator delete(void*, float)
#  919|   params: 
#  919|     0: p#0
#  919|         Type = void *
#  919|     1: p#1
#  919|         Type = float
#  920| void operator delete[](void*, float)
#  920|   params: 
#  920|     0: p#0
#  920|         Type = void *
#  920|     1: p#1
#  920|         Type = float
#  921| void operator delete(void*, std::align_val_t, float)
#  921|   params: 
#  921|     0: p#0
#  921|         Type = void *
#  921|     1: p#1
#  921|         Type = align_val_t
#  921|     2: p#2
#  921|         Type = float
#  922| void operator delete[](void*, std::align_val_t, float)
#  922|   params: 
#  922|     0: p#0
#  922|         Type = void *
#  922|     1: p#1
#  922|         Type = align_val_t
#  922|     2: p#2
#  922|         Type = float
#  924| SizedDealloc& SizedDealloc::operator=(SizedDealloc const&)
#  924|   params: 
#-----|     0: p#0
#-----|         Type = const SizedDealloc &
#  924| SizedDealloc& SizedDealloc::operator=(SizedDealloc&&)
#  924|   params: 
#-----|     0: p#0
#-----|         Type = SizedDealloc &&
#  926| void* SizedDealloc::operator new(size_t)
#  926|   params: 
#  926|     0: p#0
#  926|         Type = size_t
#  927| void* SizedDealloc::operator new[](size_t)
#  927|   params: 
#  927|     0: p#0
#  927|         Type = size_t
#  928| void SizedDealloc::operator delete(void*, size_t)
#  928|   params: 
#  928|     0: p#0
#  928|         Type = void *
#  928|     1: p#1
#  928|         Type = size_t
#  929| void SizedDealloc::operator delete[](void*, size_t)
#  929|   params: 
#  929|     0: p#0
#  929|         Type = void *
#  929|     1: p#1
#  929|         Type = size_t
#  932| Overaligned& Overaligned::operator=(Overaligned const&)
#  932|   params: 
#-----|     0: p#0
#-----|         Type = const Overaligned &
#  932| Overaligned& Overaligned::operator=(Overaligned&&)
#  932|   params: 
#-----|     0: p#0
#-----|         Type = Overaligned &&
#  936| DefaultCtorWithDefaultParam& DefaultCtorWithDefaultParam::operator=(DefaultCtorWithDefaultParam const&)
#  936|   params: 
#-----|     0: p#0
#-----|         Type = const DefaultCtorWithDefaultParam &
#  936| DefaultCtorWithDefaultParam& DefaultCtorWithDefaultParam::operator=(DefaultCtorWithDefaultParam&&)
#  936|   params: 
#-----|     0: p#0
#-----|         Type = DefaultCtorWithDefaultParam &&
#  936| void DefaultCtorWithDefaultParam::DefaultCtorWithDefaultParam(DefaultCtorWithDefaultParam const&)
#  936|   params: 
#-----|     0: p#0
#-----|         Type = const DefaultCtorWithDefaultParam &
#  936| void DefaultCtorWithDefaultParam::DefaultCtorWithDefaultParam(DefaultCtorWithDefaultParam&&)
#  936|   params: 
#-----|     0: p#0
#-----|         Type = DefaultCtorWithDefaultParam &&
#  937| void DefaultCtorWithDefaultParam::DefaultCtorWithDefaultParam(double)
#  937|   params: 
#  937|     0: d
#  937|         Type = double
#  940| void OperatorNew()
#  940|   params: 
#  940|   body: { ... }
#  941|     0: ExprStmt
#  941|       0: new
#  941|           Type = int *
#  941|           ValueCategory = prvalue
#  942|     1: ExprStmt
#  942|       0: new
#  942|           Type = int *
#  942|           ValueCategory = prvalue
#  942|         0: call to operator new
#  942|             Type = void *
#  942|             ValueCategory = prvalue
#  942|           0: <error expr>
#  942|               Type = unsigned long
#  942|               ValueCategory = prvalue
#  942|           1: 1.0
#  942|               Type = float
#  942|               Value = 1.0
#  942|               ValueCategory = prvalue
#  943|     2: ExprStmt
#  943|       0: new
#  943|           Type = int *
#  943|           ValueCategory = prvalue
#  943|         1: 0
#  943|             Type = int
#  943|             Value = 0
#  943|             ValueCategory = prvalue
#  944|     3: ExprStmt
#  944|       0: new
#  944|           Type = String *
#  944|           ValueCategory = prvalue
#  944|         1: call to String
#  944|             Type = void
#  944|             ValueCategory = prvalue
#  945|     4: ExprStmt
#  945|       0: new
#  945|           Type = String *
#  945|           ValueCategory = prvalue
#  945|         0: call to operator new
#  945|             Type = void *
#  945|             ValueCategory = prvalue
#  945|           0: <error expr>
#  945|               Type = unsigned long
#  945|               ValueCategory = prvalue
#  945|           1: 1.0
#  945|               Type = float
#  945|               Value = 1.0
#  945|               ValueCategory = prvalue
#  945|         1: call to String
#  945|             Type = void
#  945|             ValueCategory = prvalue
#  945|           0: array to pointer conversion
#  945|               Type = const char *
#  945|               ValueCategory = prvalue
#  945|             expr: hello
#  945|                 Type = const char[6]
#  945|                 Value = "hello"
#  945|                 ValueCategory = lvalue
#  946|     5: ExprStmt
#  946|       0: new
#  946|           Type = Overaligned *
#  946|           ValueCategory = prvalue
#  946|         3: 128
#  946|             Type = align_val_t
#  946|             Value = 128
#  946|             ValueCategory = prvalue
#  947|     6: ExprStmt
#  947|       0: new
#  947|           Type = Overaligned *
#  947|           ValueCategory = prvalue
#  947|         0: call to operator new
#  947|             Type = void *
#  947|             ValueCategory = prvalue
#  947|           0: <error expr>
#  947|               Type = unsigned long
#  947|               ValueCategory = prvalue
#  947|           1: 128
#  947|               Type = align_val_t
#  947|               Value = 128
#  947|               ValueCategory = prvalue
#  947|           2: 1.0
#  947|               Type = float
#  947|               Value = 1.0
#  947|               ValueCategory = prvalue
#  947|         1: 0
#  947|             Type = Overaligned
#  947|             Value = 0
#  947|             ValueCategory = prvalue
#  948|     7: return ...
#  950| void OperatorNewArray(int)
#  950|   params: 
#  950|     0: n
#  950|         Type = int
#  950|   body: { ... }
#  951|     0: ExprStmt
#  951|       0: new[]
#  951|           Type = int *
#  951|           ValueCategory = prvalue
#  952|     1: ExprStmt
#  952|       0: new[]
#  952|           Type = int *
#  952|           ValueCategory = prvalue
#  952|         2: n
#  952|             Type = int
#  952|             ValueCategory = prvalue(load)
#  953|     2: ExprStmt
#  953|       0: new[]
#  953|           Type = int *
#  953|           ValueCategory = prvalue
#  953|         0: call to operator new[]
#  953|             Type = void *
#  953|             ValueCategory = prvalue
#  953|           0: <error expr>
#  953|               Type = unsigned long
#  953|               ValueCategory = prvalue
#  953|           1: 1.0
#  953|               Type = float
#  953|               Value = 1.0
#  953|               ValueCategory = prvalue
#  953|         2: n
#  953|             Type = int
#  953|             ValueCategory = prvalue(load)
#  954|     3: ExprStmt
#  954|       0: new[]
#  954|           Type = String *
#  954|           ValueCategory = prvalue
#  954|         1: {...}
#  954|             Type = String[]
#  954|             ValueCategory = prvalue
#  954|           [0]: call to String
#  954|               Type = void
#  954|               ValueCategory = prvalue
#  954|         2: n
#  954|             Type = int
#  954|             ValueCategory = prvalue(load)
#  955|     4: ExprStmt
#  955|       0: new[]
#  955|           Type = Overaligned *
#  955|           ValueCategory = prvalue
#  955|         2: n
#  955|             Type = int
#  955|             ValueCategory = prvalue(load)
#  955|         3: 128
#  955|             Type = align_val_t
#  955|             Value = 128
#  955|             ValueCategory = prvalue
#  956|     5: ExprStmt
#  956|       0: new[]
#  956|           Type = Overaligned *
#  956|           ValueCategory = prvalue
#  956|         0: call to operator new[]
#  956|             Type = void *
#  956|             ValueCategory = prvalue
#  956|           0: <error expr>
#  956|               Type = unsigned long
#  956|               ValueCategory = prvalue
#  956|           1: 128
#  956|               Type = align_val_t
#  956|               Value = 128
#  956|               ValueCategory = prvalue
#  956|           2: 1.0
#  956|               Type = float
#  956|               Value = 1.0
#  956|               ValueCategory = prvalue
#  957|     6: ExprStmt
#  957|       0: new[]
#  957|           Type = DefaultCtorWithDefaultParam *
#  957|           ValueCategory = prvalue
#  957|         1: {...}
#  957|             Type = DefaultCtorWithDefaultParam[]
#  957|             ValueCategory = prvalue
#  957|           [0]: call to DefaultCtorWithDefaultParam
#  957|               Type = void
#  957|               ValueCategory = prvalue
#  957|         2: n
#  957|             Type = int
#  957|             ValueCategory = prvalue(load)
#  958|     7: ExprStmt
#  958|       0: new[]
#  958|           Type = int *
#  958|           ValueCategory = prvalue
#  958|         1: {...}
#  958|             Type = int[3]
#  958|             ValueCategory = prvalue
#  958|           [0]: 0
#  958|               Type = int
#  958|               Value = 0
#  958|               ValueCategory = prvalue
#  958|           [1]: 1
#  958|               Type = int
#  958|               Value = 1
#  958|               ValueCategory = prvalue
#  958|           [2]: 2
#  958|               Type = int
#  958|               Value = 2
#  958|               ValueCategory = prvalue
#  958|         2: n
#  958|             Type = int
#  958|             ValueCategory = prvalue(load)
#  959|     8: return ...
#  961| int designatedInit()
#  961|   params: 
#  961|   body: { ... }
#  962|     0: declaration
#  962|       0: definition of a1
#  962|           Type = int[1000]
#  962|         init: initializer for a1
#  962|           expr: {...}
#  962|               Type = int[1000]
#  962|               ValueCategory = prvalue
#  962|             [2]: 10002
#  962|                 Type = int
#  962|                 Value = 10002
#  962|                 ValueCategory = prvalue
#  962|             [900]: 10900
#  962|                 Type = int
#  962|                 Value = 10900
#  962|                 ValueCategory = prvalue
#  963|     1: return ...
#  963|       0: access to array
#  963|           Type = int
#  963|           ValueCategory = prvalue(load)
#  963|         0: array to pointer conversion
#  963|             Type = int *
#  963|             ValueCategory = prvalue
#  963|           expr: a1
#  963|               Type = int[1000]
#  963|               ValueCategory = lvalue
#  963|         1: 900
#  963|             Type = int
#  963|             Value = 900
#  963|             ValueCategory = prvalue
#  966| void IfStmtWithDeclaration(int, int)
#  966|   params: 
#  966|     0: x
#  966|         Type = int
#  966|     1: y
#  966|         Type = int
#  966|   body: { ... }
#  967|     0: if (...) ... 
#  967|       0: (condition decl)
#  967|           Type = bool
#  967|           ValueCategory = prvalue
#  967|         0: b
#  967|             Type = bool
#  967|             ValueCategory = prvalue(load)
#  967|       1: { ... }
#  968|         0: ExprStmt
#  968|           0: ... = ...
#  968|               Type = int
#  968|               ValueCategory = lvalue
#  968|             0: x
#  968|                 Type = int
#  968|                 ValueCategory = lvalue
#  968|             1: 5
#  968|                 Type = int
#  968|                 Value = 5
#  968|                 ValueCategory = prvalue
#  970|       2: if (...) ... 
#  970|         0: (condition decl)
#  970|             Type = bool
#  970|             ValueCategory = prvalue
#  970|           0: (bool)...
#  970|               Conversion = conversion to bool
#  970|               Type = bool
#  970|               ValueCategory = prvalue
#  970|             expr: z
#  970|                 Type = int
#  970|                 ValueCategory = prvalue(load)
#  970|         1: { ... }
#  971|           0: ExprStmt
#  971|             0: ... = ...
#  971|                 Type = int
#  971|                 ValueCategory = lvalue
#  971|               0: y
#  971|                   Type = int
#  971|                   ValueCategory = lvalue
#  971|               1: 7
#  971|                   Type = int
#  971|                   Value = 7
#  971|                   ValueCategory = prvalue
#  973|         2: if (...) ... 
#  973|           0: (condition decl)
#  973|               Type = bool
#  973|               ValueCategory = prvalue
#  973|             0: (bool)...
#  973|                 Conversion = conversion to bool
#  973|                 Type = bool
#  973|                 ValueCategory = prvalue
#  973|               expr: p
#  973|                   Type = int *
#  973|                   ValueCategory = prvalue(load)
#  973|           1: { ... }
#  974|             0: ExprStmt
#  974|               0: ... = ...
#  974|                   Type = int
#  974|                   ValueCategory = lvalue
#  974|                 0: * ...
#  974|                     Type = int
#  974|                     ValueCategory = lvalue
#  974|                   0: p
#  974|                       Type = int *
#  974|                       ValueCategory = prvalue(load)
#  974|                 1: 2
#  974|                     Type = int
#  974|                     Value = 2
#  974|                     ValueCategory = prvalue
#  976|     1: return ...
#  978| void WhileStmtWithDeclaration(int, int)
#  978|   params: 
#  978|     0: x
#  978|         Type = int
#  978|     1: y
#  978|         Type = int
#  978|   body: { ... }
#  979|     0: while (...) ...
#  979|       0: (condition decl)
#  979|           Type = bool
#  979|           ValueCategory = prvalue
#  979|         0: b
#  979|             Type = bool
#  979|             ValueCategory = prvalue(load)
#  979|       1: { ... }
#  981|     1: while (...) ...
#  981|       0: (condition decl)
#  981|           Type = bool
#  981|           ValueCategory = prvalue
#  981|         0: (bool)...
#  981|             Conversion = conversion to bool
#  981|             Type = bool
#  981|             ValueCategory = prvalue
#  981|           expr: z
#  981|               Type = int
#  981|               ValueCategory = prvalue(load)
#  981|       1: { ... }
#  983|     2: while (...) ...
#  983|       0: (condition decl)
#  983|           Type = bool
#  983|           ValueCategory = prvalue
#  983|         0: (bool)...
#  983|             Conversion = conversion to bool
#  983|             Type = bool
#  983|             ValueCategory = prvalue
#  983|           expr: p
#  983|               Type = int *
#  983|               ValueCategory = prvalue(load)
#  983|       1: { ... }
#  985|     3: return ...
#  987| int PointerDecay(int[], int(float))
#  987|   params: 
#  987|     0: a
#  987|         Type = int[]
#  987|     1: fn
#  987|         Type = ..()(..)
#  987|   body: { ... }
#  988|     0: return ...
#  988|       0: ... + ...
#  988|           Type = int
#  988|           ValueCategory = prvalue
#  988|         0: access to array
#  988|             Type = int
#  988|             ValueCategory = prvalue(load)
#  988|           0: a
#  988|               Type = int *
#  988|               ValueCategory = prvalue(load)
#  988|           1: 0
#  988|               Type = int
#  988|               Value = 0
#  988|               ValueCategory = prvalue
#  988|         1: call to expression
#  988|             Type = int
#  988|             ValueCategory = prvalue
#  988|           0: fn
#  988|               Type = ..(*)(..)
#  988|               ValueCategory = prvalue(load)
#  988|           1: (float)...
#  988|               Conversion = floating point conversion
#  988|               Type = float
#  988|               Value = 1.0
#  988|               ValueCategory = prvalue
#  988|             expr: 1.0
#  988|                 Type = double
#  988|                 Value = 1.0
#  988|                 ValueCategory = prvalue
#  991| int ExprStmt(int, int, int)
#  991|   params: 
#  991|     0: b
#  991|         Type = int
#  991|     1: y
#  991|         Type = int
#  991|     2: z
#  991|         Type = int
#  991|   body: { ... }
#  992|     0: declaration
#  992|       0: definition of x
#  992|           Type = int
#  992|         init: initializer for x
#  992|           expr: (statement expression)
#  992|               Type = int
#  992|               ValueCategory = prvalue
# 1002|     1: return ...
# 1002|       0: (statement expression)
# 1002|           Type = int
# 1002|           ValueCategory = prvalue
# 1006| void OperatorDelete()
# 1006|   params: 
# 1006|   body: { ... }
# 1007|     0: ExprStmt
# 1007|       0: delete
# 1007|           Type = void
# 1007|           ValueCategory = prvalue
# 1007|         3: static_cast<int *>...
# 1007|             Conversion = pointer conversion
# 1007|             Type = int *
# 1007|             Value = 0
# 1007|             ValueCategory = prvalue
# 1007|           expr: 0
# 1007|               Type = decltype(nullptr)
# 1007|               Value = 0
# 1007|               ValueCategory = prvalue
# 1008|     1: ExprStmt
# 1008|       0: delete
# 1008|           Type = void
# 1008|           ValueCategory = prvalue
# 1008|         1: call to ~String
# 1008|             Type = void
# 1008|             ValueCategory = prvalue
# 1008|           -1: static_cast<String *>...
# 1008|               Conversion = pointer conversion
# 1008|               Type = String *
# 1008|               Value = 0
# 1008|               ValueCategory = prvalue
# 1008|             expr: 0
# 1008|                 Type = decltype(nullptr)
# 1008|                 Value = 0
# 1008|                 ValueCategory = prvalue
# 1009|     2: ExprStmt
# 1009|       0: delete
# 1009|           Type = void
# 1009|           ValueCategory = prvalue
# 1009|         0: call to operator delete
# 1009|             Type = void
# 1009|             ValueCategory = prvalue
# 1009|         3: static_cast<SizedDealloc *>...
# 1009|             Conversion = pointer conversion
# 1009|             Type = SizedDealloc *
# 1009|             Value = 0
# 1009|             ValueCategory = prvalue
# 1009|           expr: 0
# 1009|               Type = decltype(nullptr)
# 1009|               Value = 0
# 1009|               ValueCategory = prvalue
# 1010|     3: ExprStmt
# 1010|       0: delete
# 1010|           Type = void
# 1010|           ValueCategory = prvalue
# 1010|         3: static_cast<Overaligned *>...
# 1010|             Conversion = pointer conversion
# 1010|             Type = Overaligned *
# 1010|             Value = 0
# 1010|             ValueCategory = prvalue
# 1010|           expr: 0
# 1010|               Type = decltype(nullptr)
# 1010|               Value = 0
# 1010|               ValueCategory = prvalue
# 1011|     4: ExprStmt
# 1011|       0: delete
# 1011|           Type = void
# 1011|           ValueCategory = prvalue
# 1011|         1: call to ~PolymorphicBase
# 1011|             Type = void
# 1011|             ValueCategory = prvalue
# 1011|           -1: static_cast<PolymorphicBase *>...
# 1011|               Conversion = pointer conversion
# 1011|               Type = PolymorphicBase *
# 1011|               Value = 0
# 1011|               ValueCategory = prvalue
# 1011|             expr: 0
# 1011|                 Type = decltype(nullptr)
# 1011|                 Value = 0
# 1011|                 ValueCategory = prvalue
# 1012|     5: return ...
# 1015| void OperatorDeleteArray()
# 1015|   params: 
# 1015|   body: { ... }
# 1016|     0: ExprStmt
# 1016|       0: delete[]
# 1016|           Type = void
# 1016|           ValueCategory = prvalue
# 1016|         3: static_cast<int *>...
# 1016|             Conversion = pointer conversion
# 1016|             Type = int *
# 1016|             Value = 0
# 1016|             ValueCategory = prvalue
# 1016|           expr: 0
# 1016|               Type = decltype(nullptr)
# 1016|               Value = 0
# 1016|               ValueCategory = prvalue
# 1017|     1: ExprStmt
# 1017|       0: delete[]
# 1017|           Type = void
# 1017|           ValueCategory = prvalue
# 1017|         1: call to ~String
# 1017|             Type = void
# 1017|             ValueCategory = prvalue
# 1017|           -1: static_cast<String *>...
# 1017|               Conversion = pointer conversion
# 1017|               Type = String *
# 1017|               Value = 0
# 1017|               ValueCategory = prvalue
# 1017|             expr: 0
# 1017|                 Type = decltype(nullptr)
# 1017|                 Value = 0
# 1017|                 ValueCategory = prvalue
# 1018|     2: ExprStmt
# 1018|       0: delete[]
# 1018|           Type = void
# 1018|           ValueCategory = prvalue
# 1018|         0: call to operator delete[]
# 1018|             Type = void
# 1018|             ValueCategory = prvalue
# 1018|         3: static_cast<SizedDealloc *>...
# 1018|             Conversion = pointer conversion
# 1018|             Type = SizedDealloc *
# 1018|             Value = 0
# 1018|             ValueCategory = prvalue
# 1018|           expr: 0
# 1018|               Type = decltype(nullptr)
# 1018|               Value = 0
# 1018|               ValueCategory = prvalue
# 1019|     3: ExprStmt
# 1019|       0: delete[]
# 1019|           Type = void
# 1019|           ValueCategory = prvalue
# 1019|         3: static_cast<Overaligned *>...
# 1019|             Conversion = pointer conversion
# 1019|             Type = Overaligned *
# 1019|             Value = 0
# 1019|             ValueCategory = prvalue
# 1019|           expr: 0
# 1019|               Type = decltype(nullptr)
# 1019|               Value = 0
# 1019|               ValueCategory = prvalue
# 1020|     4: ExprStmt
# 1020|       0: delete[]
# 1020|           Type = void
# 1020|           ValueCategory = prvalue
# 1020|         1: call to ~PolymorphicBase
# 1020|             Type = void
# 1020|             ValueCategory = prvalue
# 1020|           -1: static_cast<PolymorphicBase *>...
# 1020|               Conversion = pointer conversion
# 1020|               Type = PolymorphicBase *
# 1020|               Value = 0
# 1020|               ValueCategory = prvalue
# 1020|             expr: 0
# 1020|                 Type = decltype(nullptr)
# 1020|                 Value = 0
# 1020|                 ValueCategory = prvalue
# 1021|     5: return ...
# 1023| EmptyStruct& EmptyStruct::operator=(EmptyStruct const&)
# 1023|   params: 
#-----|     0: p#0
#-----|         Type = const EmptyStruct &
# 1023| EmptyStruct& EmptyStruct::operator=(EmptyStruct&&)
# 1023|   params: 
#-----|     0: p#0
#-----|         Type = EmptyStruct &&
# 1025| void EmptyStructInit()
# 1025|   params: 
# 1025|   body: { ... }
# 1026|     0: declaration
# 1026|       0: definition of s
# 1026|           Type = EmptyStruct
# 1026|         init: initializer for s
# 1026|           expr: {...}
# 1026|               Type = EmptyStruct
# 1026|               ValueCategory = prvalue
# 1027|     1: return ...
# 1029| (lambda [] type at line 1029, col. 12)& (lambda [] type at line 1029, col. 12)::operator=((lambda [] type at line 1029, col. 12) const&)
# 1029|   params: 
#-----|     0: p#0
#-----|         Type = const lambda [] type at line 1029, col. 12 &
# 1029| void (lambda [] type at line 1029, col. 12)::(constructor)((lambda [] type at line 1029, col. 12) const&)
# 1029|   params: 
#-----|     0: p#0
#-----|         Type = const lambda [] type at line 1029, col. 12 &
# 1029| void (lambda [] type at line 1029, col. 12)::(constructor)((lambda [] type at line 1029, col. 12)&&)
# 1029|   params: 
#-----|     0: p#0
#-----|         Type = lambda [] type at line 1029, col. 12 &&
# 1029|   initializations: 
# 1029|   body: { ... }
# 1029|     0: return ...
# 1029| void (lambda [] type at line 1029, col. 12)::(constructor)()
# 1029|   params: 
# 1029| void (lambda [] type at line 1029, col. 12)::_FUN()
# 1029|   params: 
# 1029| void (lambda [] type at line 1029, col. 12)::operator()() const
# 1029|   params: 
# 1029|   body: { ... }
# 1029|     0: return ...
# 1029| void(* (lambda [] type at line 1029, col. 12)::operator void (*)()() const)()
# 1029|   params: 
#-----|   body: { ... }
# 1029|     0: return ...
# 1029|       0: _FUN
# 1029|           Type = ..(*)(..)
# 1029|           ValueCategory = prvalue(load)
# 1031| void Lambda(int, String const&)
# 1031|   params: 
# 1031|     0: x
# 1031|         Type = int
# 1031|     1: s
# 1031|         Type = const String &
# 1031|   body: { ... }
# 1032|     0: declaration
# 1032|       0: definition of lambda_empty
# 1032|           Type = decltype([...](...){...})
# 1032|         init: initializer for lambda_empty
# 1032|           expr: [...](...){...}
# 1032|               Type = decltype([...](...){...})
# 1032|               ValueCategory = prvalue
# 1033|     1: ExprStmt
# 1033|       0: call to operator()
# 1033|           Type = char
# 1033|           Value = 65
# 1033|           ValueCategory = prvalue
# 1033|         -1: (const lambda [] type at line 1032, col. 23)...
# 1033|             Conversion = glvalue conversion
# 1033|             Type = const lambda [] type at line 1032, col. 23
# 1033|             ValueCategory = lvalue
# 1033|           expr: lambda_empty
# 1033|               Type = decltype([...](...){...})
# 1033|               ValueCategory = lvalue
# 1033|         0: (float)...
# 1033|             Conversion = integral to floating point conversion
# 1033|             Type = float
# 1033|             Value = 0.0
# 1033|             ValueCategory = prvalue
# 1033|           expr: 0
# 1033|               Type = int
# 1033|               Value = 0
# 1033|               ValueCategory = prvalue
# 1034|     2: declaration
# 1034|       0: definition of lambda_ref
# 1034|           Type = decltype([...](...){...})
# 1034|         init: initializer for lambda_ref
# 1034|           expr: [...](...){...}
# 1034|               Type = decltype([...](...){...})
# 1034|               ValueCategory = prvalue
# 1034|             0: {...}
# 1034|                 Type = decltype([...](...){...})
# 1034|                 ValueCategory = prvalue
# 1034|               .s: (reference to)
# 1034|                   Type = const String &
# 1034|                   ValueCategory = prvalue
# 1034|                 expr: (reference dereference)
# 1034|                     Type = const String
# 1034|                     ValueCategory = lvalue
#-----|                   expr: s
#-----|                       Type = const String &
#-----|                       ValueCategory = prvalue(load)
#-----|               .x: (reference to)
#-----|                   Type = int &
#-----|                   ValueCategory = prvalue
#-----|                 expr: x
#-----|                     Type = int
#-----|                     ValueCategory = lvalue
# 1035|     3: ExprStmt
# 1035|       0: call to operator()
# 1035|           Type = char
# 1035|           ValueCategory = prvalue
# 1035|         -1: (const lambda [] type at line 1034, col. 21)...
# 1035|             Conversion = glvalue conversion
# 1035|             Type = const lambda [] type at line 1034, col. 21
# 1035|             ValueCategory = lvalue
# 1035|           expr: lambda_ref
# 1035|               Type = decltype([...](...){...})
# 1035|               ValueCategory = lvalue
# 1035|         0: (float)...
# 1035|             Conversion = integral to floating point conversion
# 1035|             Type = float
# 1035|             Value = 1.0
# 1035|             ValueCategory = prvalue
# 1035|           expr: 1
# 1035|               Type = int
# 1035|               Value = 1
# 1035|               ValueCategory = prvalue
# 1036|     4: declaration
# 1036|       0: definition of lambda_val
# 1036|           Type = decltype([...](...){...})
# 1036|         init: initializer for lambda_val
# 1036|           expr: call to (constructor)
# 1036|               Type = void
# 1036|               ValueCategory = prvalue
# 1036|             0: (reference to)
# 1036|                 Type = lambda [] type at line 1036, col. 21 &
# 1036|                 ValueCategory = prvalue
# 1036|               expr: [...](...){...}
# 1036|                   Type = decltype([...](...){...})
# 1036|                   ValueCategory = xvalue
# 1036|                 0: {...}
# 1036|                     Type = decltype([...](...){...})
# 1036|                     ValueCategory = prvalue
#-----|                   .s: call to String
#-----|                       Type = void
#-----|                       ValueCategory = prvalue
#-----|                   .x: x
#-----|                       Type = int
#-----|                       ValueCategory = prvalue(load)
# 1037|     5: ExprStmt
# 1037|       0: call to operator()
# 1037|           Type = char
# 1037|           ValueCategory = prvalue
# 1037|         -1: (const lambda [] type at line 1036, col. 21)...
# 1037|             Conversion = glvalue conversion
# 1037|             Type = const lambda [] type at line 1036, col. 21
# 1037|             ValueCategory = lvalue
# 1037|           expr: lambda_val
# 1037|               Type = decltype([...](...){...})
# 1037|               ValueCategory = lvalue
# 1037|         0: (float)...
# 1037|             Conversion = integral to floating point conversion
# 1037|             Type = float
# 1037|             Value = 2.0
# 1037|             ValueCategory = prvalue
# 1037|           expr: 2
# 1037|               Type = int
# 1037|               Value = 2
# 1037|               ValueCategory = prvalue
# 1038|     6: declaration
# 1038|       0: definition of lambda_ref_explicit
# 1038|           Type = decltype([...](...){...})
# 1038|         init: initializer for lambda_ref_explicit
# 1038|           expr: [...](...){...}
# 1038|               Type = decltype([...](...){...})
# 1038|               ValueCategory = prvalue
# 1038|             0: {...}
# 1038|                 Type = decltype([...](...){...})
# 1038|                 ValueCategory = prvalue
# 1038|               .s: (reference to)
# 1038|                   Type = const String &
# 1038|                   ValueCategory = prvalue
# 1038|                 expr: (reference dereference)
# 1038|                     Type = const String
# 1038|                     ValueCategory = lvalue
# 1038|                   expr: s
# 1038|                       Type = const String &
# 1038|                       ValueCategory = prvalue(load)
# 1039|     7: ExprStmt
# 1039|       0: call to operator()
# 1039|           Type = char
# 1039|           ValueCategory = prvalue
# 1039|         -1: (const lambda [] type at line 1038, col. 30)...
# 1039|             Conversion = glvalue conversion
# 1039|             Type = const lambda [] type at line 1038, col. 30
# 1039|             ValueCategory = lvalue
# 1039|           expr: lambda_ref_explicit
# 1039|               Type = decltype([...](...){...})
# 1039|               ValueCategory = lvalue
# 1039|         0: (float)...
# 1039|             Conversion = integral to floating point conversion
# 1039|             Type = float
# 1039|             Value = 3.0
# 1039|             ValueCategory = prvalue
# 1039|           expr: 3
# 1039|               Type = int
# 1039|               Value = 3
# 1039|               ValueCategory = prvalue
# 1040|     8: declaration
# 1040|       0: definition of lambda_val_explicit
# 1040|           Type = decltype([...](...){...})
# 1040|         init: initializer for lambda_val_explicit
# 1040|           expr: call to (constructor)
# 1040|               Type = void
# 1040|               ValueCategory = prvalue
# 1040|             0: (reference to)
# 1040|                 Type = lambda [] type at line 1040, col. 30 &
# 1040|                 ValueCategory = prvalue
# 1040|               expr: [...](...){...}
# 1040|                   Type = decltype([...](...){...})
# 1040|                   ValueCategory = xvalue
# 1040|                 0: {...}
# 1040|                     Type = decltype([...](...){...})
# 1040|                     ValueCategory = prvalue
#-----|                   .s: call to String
#-----|                       Type = void
#-----|                       ValueCategory = prvalue
# 1041|     9: ExprStmt
# 1041|       0: call to operator()
# 1041|           Type = char
# 1041|           ValueCategory = prvalue
# 1041|         -1: (const lambda [] type at line 1040, col. 30)...
# 1041|             Conversion = glvalue conversion
# 1041|             Type = const lambda [] type at line 1040, col. 30
# 1041|             ValueCategory = lvalue
# 1041|           expr: lambda_val_explicit
# 1041|               Type = decltype([...](...){...})
# 1041|               ValueCategory = lvalue
# 1041|         0: (float)...
# 1041|             Conversion = integral to floating point conversion
# 1041|             Type = float
# 1041|             Value = 4.0
# 1041|             ValueCategory = prvalue
# 1041|           expr: 4
# 1041|               Type = int
# 1041|               Value = 4
# 1041|               ValueCategory = prvalue
# 1042|     10: declaration
# 1042|       0: definition of lambda_mixed_explicit
# 1042|           Type = decltype([...](...){...})
# 1042|         init: initializer for lambda_mixed_explicit
# 1042|           expr: [...](...){...}
# 1042|               Type = decltype([...](...){...})
# 1042|               ValueCategory = prvalue
# 1042|             0: {...}
# 1042|                 Type = decltype([...](...){...})
# 1042|                 ValueCategory = prvalue
# 1042|               .s: (reference to)
# 1042|                   Type = const String &
# 1042|                   ValueCategory = prvalue
# 1042|                 expr: (reference dereference)
# 1042|                     Type = const String
# 1042|                     ValueCategory = lvalue
# 1042|                   expr: s
# 1042|                       Type = const String &
# 1042|                       ValueCategory = prvalue(load)
# 1042|               .x: x
# 1042|                   Type = int
# 1042|                   ValueCategory = prvalue(load)
# 1043|     11: ExprStmt
# 1043|       0: call to operator()
# 1043|           Type = char
# 1043|           ValueCategory = prvalue
# 1043|         -1: (const lambda [] type at line 1042, col. 32)...
# 1043|             Conversion = glvalue conversion
# 1043|             Type = const lambda [] type at line 1042, col. 32
# 1043|             ValueCategory = lvalue
# 1043|           expr: lambda_mixed_explicit
# 1043|               Type = decltype([...](...){...})
# 1043|               ValueCategory = lvalue
# 1043|         0: (float)...
# 1043|             Conversion = integral to floating point conversion
# 1043|             Type = float
# 1043|             Value = 5.0
# 1043|             ValueCategory = prvalue
# 1043|           expr: 5
# 1043|               Type = int
# 1043|               Value = 5
# 1043|               ValueCategory = prvalue
# 1044|     12: declaration
# 1044|       0: definition of r
# 1044|           Type = int
# 1044|         init: initializer for r
# 1044|           expr: ... - ...
# 1044|               Type = int
# 1044|               ValueCategory = prvalue
# 1044|             0: x
# 1044|                 Type = int
# 1044|                 ValueCategory = prvalue(load)
# 1044|             1: 1
# 1044|                 Type = int
# 1044|                 Value = 1
# 1044|                 ValueCategory = prvalue
# 1045|     13: declaration
# 1045|       0: definition of lambda_inits
# 1045|           Type = decltype([...](...){...})
# 1045|         init: initializer for lambda_inits
# 1045|           expr: [...](...){...}
# 1045|               Type = decltype([...](...){...})
# 1045|               ValueCategory = prvalue
# 1045|             0: {...}
# 1045|                 Type = decltype([...](...){...})
# 1045|                 ValueCategory = prvalue
# 1045|               .s: (reference to)
# 1045|                   Type = const String &
# 1045|                   ValueCategory = prvalue
# 1045|                 expr: (reference dereference)
# 1045|                     Type = const String
# 1045|                     ValueCategory = lvalue
# 1045|                   expr: s
# 1045|                       Type = const String &
# 1045|                       ValueCategory = prvalue(load)
# 1045|               .x: x
# 1045|                   Type = int
# 1045|                   ValueCategory = prvalue(load)
# 1045|               .i: ... + ...
# 1045|                   Type = int
# 1045|                   ValueCategory = prvalue
# 1045|                 0: x
# 1045|                     Type = int
# 1045|                     ValueCategory = prvalue(load)
# 1045|                 1: 1
# 1045|                     Type = int
# 1045|                     Value = 1
# 1045|                     ValueCategory = prvalue
# 1045|               .j: (reference to)
# 1045|                   Type = int &
# 1045|                   ValueCategory = prvalue
# 1045|                 expr: r
# 1045|                     Type = int
# 1045|                     ValueCategory = lvalue
# 1046|     14: ExprStmt
# 1046|       0: call to operator()
# 1046|           Type = char
# 1046|           ValueCategory = prvalue
# 1046|         -1: (const lambda [] type at line 1045, col. 23)...
# 1046|             Conversion = glvalue conversion
# 1046|             Type = const lambda [] type at line 1045, col. 23
# 1046|             ValueCategory = lvalue
# 1046|           expr: lambda_inits
# 1046|               Type = decltype([...](...){...})
# 1046|               ValueCategory = lvalue
# 1046|         0: (float)...
# 1046|             Conversion = integral to floating point conversion
# 1046|             Type = float
# 1046|             Value = 6.0
# 1046|             ValueCategory = prvalue
# 1046|           expr: 6
# 1046|               Type = int
# 1046|               Value = 6
# 1046|               ValueCategory = prvalue
# 1047|     15: return ...
# 1032| (void Lambda(int, String const&))::(lambda [] type at line 1032, col. 23)& (void Lambda(int, String const&))::(lambda [] type at line 1032, col. 23)::operator=((void Lambda(int, String const&))::(lambda [] type at line 1032, col. 23) const&)
# 1032|   params: 
#-----|     0: p#0
#-----|         Type = const lambda [] type at line 1032, col. 23 &
# 1032| void (void Lambda(int, String const&))::(lambda [] type at line 1032, col. 23)::(constructor)((void Lambda(int, String const&))::(lambda [] type at line 1032, col. 23) const&)
# 1032|   params: 
#-----|     0: p#0
#-----|         Type = const lambda [] type at line 1032, col. 23 &
# 1032| void (void Lambda(int, String const&))::(lambda [] type at line 1032, col. 23)::(constructor)((void Lambda(int, String const&))::(lambda [] type at line 1032, col. 23)&&)
# 1032|   params: 
#-----|     0: p#0
#-----|         Type = lambda [] type at line 1032, col. 23 &&
# 1032|   initializations: 
# 1032|   body: { ... }
# 1032|     0: return ...
# 1032| void (void Lambda(int, String const&))::(lambda [] type at line 1032, col. 23)::(constructor)()
# 1032|   params: 
# 1032| char (void Lambda(int, String const&))::(lambda [] type at line 1032, col. 23)::_FUN(float)
# 1032|   params: 
# 1032|     0: f
# 1032|         Type = float
# 1032| char (void Lambda(int, String const&))::(lambda [] type at line 1032, col. 23)::operator()(float) const
# 1032|   params: 
# 1032|     0: f
# 1032|         Type = float
# 1032|   body: { ... }
# 1032|     0: return ...
# 1032|       0: 65
# 1032|           Type = char
# 1032|           Value = 65
# 1032|           ValueCategory = prvalue
# 1032| char(* (void Lambda(int, String const&))::(lambda [] type at line 1032, col. 23)::operator char (*)(float)() const)(float)
# 1032|   params: 
#-----|   body: { ... }
# 1032|     0: return ...
# 1032|       0: _FUN
# 1032|           Type = ..(*)(..)
# 1032|           ValueCategory = prvalue(load)
# 1034| (void Lambda(int, String const&))::(lambda [] type at line 1034, col. 21)& (void Lambda(int, String const&))::(lambda [] type at line 1034, col. 21)::operator=((void Lambda(int, String const&))::(lambda [] type at line 1034, col. 21) const&)
# 1034|   params: 
#-----|     0: p#0
#-----|         Type = const lambda [] type at line 1034, col. 21 &
# 1034| void (void Lambda(int, String const&))::(lambda [] type at line 1034, col. 21)::(constructor)((void Lambda(int, String const&))::(lambda [] type at line 1034, col. 21) const&)
# 1034|   params: 
#-----|     0: p#0
#-----|         Type = const lambda [] type at line 1034, col. 21 &
# 1034| void (void Lambda(int, String const&))::(lambda [] type at line 1034, col. 21)::(constructor)((void Lambda(int, String const&))::(lambda [] type at line 1034, col. 21)&&)
# 1034|   params: 
#-----|     0: p#0
#-----|         Type = lambda [] type at line 1034, col. 21 &&
# 1034|   initializations: 
# 1034|     0: constructor init of field s
# 1034|         Type = const String &
# 1034|         ValueCategory = prvalue
# 1034|       0: Unknown literal
# 1034|           Type = const String &
# 1034|           ValueCategory = prvalue
# 1034|     1: constructor init of field x
# 1034|         Type = int &
# 1034|         ValueCategory = prvalue
# 1034|       0: Unknown literal
# 1034|           Type = int &
# 1034|           ValueCategory = prvalue
# 1034|   body: { ... }
# 1034|     0: return ...
# 1034| void (void Lambda(int, String const&))::(lambda [] type at line 1034, col. 21)::(constructor)()
# 1034|   params: 
# 1034| char (void Lambda(int, String const&))::(lambda [] type at line 1034, col. 21)::operator()(float) const
# 1034|   params: 
# 1034|     0: f
# 1034|         Type = float
# 1034|   body: { ... }
# 1034|     0: return ...
# 1034|       0: access to array
# 1034|           Type = char
# 1034|           ValueCategory = prvalue(load)
# 1034|         0: call to c_str
# 1034|             Type = const char *
# 1034|             ValueCategory = prvalue
# 1034|           -1: (reference dereference)
# 1034|               Type = const String
# 1034|               ValueCategory = lvalue
#-----|             expr: s
#-----|                 Type = const String &
#-----|                 ValueCategory = prvalue(load)
#-----|               -1: this
#-----|                   Type = const lambda [] type at line 1034, col. 21 *
#-----|                   ValueCategory = prvalue(load)
# 1034|         1: (reference dereference)
# 1034|             Type = int
# 1034|             ValueCategory = prvalue(load)
#-----|           expr: x
#-----|               Type = int &
#-----|               ValueCategory = prvalue(load)
#-----|             -1: this
#-----|                 Type = const lambda [] type at line 1034, col. 21 *
#-----|                 ValueCategory = prvalue(load)
# 1036| (void Lambda(int, String const&))::(lambda [] type at line 1036, col. 21)& (void Lambda(int, String const&))::(lambda [] type at line 1036, col. 21)::operator=((void Lambda(int, String const&))::(lambda [] type at line 1036, col. 21) const&)
# 1036|   params: 
#-----|     0: p#0
#-----|         Type = const lambda [] type at line 1036, col. 21 &
# 1036| void (void Lambda(int, String const&))::(lambda [] type at line 1036, col. 21)::(constructor)((void Lambda(int, String const&))::(lambda [] type at line 1036, col. 21) const&)
# 1036|   params: 
#-----|     0: p#0
#-----|         Type = const lambda [] type at line 1036, col. 21 &
# 1036| void (void Lambda(int, String const&))::(lambda [] type at line 1036, col. 21)::(constructor)((void Lambda(int, String const&))::(lambda [] type at line 1036, col. 21)&&)
# 1036|   params: 
#-----|     0: p#0
#-----|         Type = lambda [] type at line 1036, col. 21 &&
# 1036|   initializations: 
# 1036|     0: constructor init of field s
# 1036|         Type = const String
# 1036|         ValueCategory = prvalue
# 1036|       0: call to String
# 1036|           Type = void
# 1036|           ValueCategory = prvalue
# 1036|     1: constructor init of field x
# 1036|         Type = int
# 1036|         ValueCategory = prvalue
# 1036|       0: Unknown literal
# 1036|           Type = int
# 1036|           ValueCategory = prvalue
# 1036|   body: { ... }
# 1036|     0: return ...
# 1036| void (void Lambda(int, String const&))::(lambda [] type at line 1036, col. 21)::(constructor)()
# 1036|   params: 
# 1036| void (void Lambda(int, String const&))::(lambda [] type at line 1036, col. 21)::~<unnamed>()
# 1036|   params: 
#-----|   body: { ... }
#-----|     0: return ...
# 1036|   destructions: 
# 1036|     0: destructor field destruction of s
# 1036|         Type = const String
# 1036|         ValueCategory = prvalue
# 1036|       0: call to ~String
# 1036|           Type = void
# 1036|           ValueCategory = prvalue
# 1036|         -1: s
# 1036|             Type = const String
# 1036|             ValueCategory = lvalue
# 1036| char (void Lambda(int, String const&))::(lambda [] type at line 1036, col. 21)::operator()(float) const
# 1036|   params: 
# 1036|     0: f
# 1036|         Type = float
# 1036|   body: { ... }
# 1036|     0: return ...
# 1036|       0: access to array
# 1036|           Type = char
# 1036|           ValueCategory = prvalue(load)
# 1036|         0: call to c_str
# 1036|             Type = const char *
# 1036|             ValueCategory = prvalue
#-----|           -1: s
#-----|               Type = const String
#-----|               ValueCategory = lvalue
#-----|             -1: this
#-----|                 Type = const lambda [] type at line 1036, col. 21 *
#-----|                 ValueCategory = prvalue(load)
#-----|         1: x
#-----|             Type = int
#-----|             ValueCategory = prvalue(load)
#-----|           -1: this
#-----|               Type = const lambda [] type at line 1036, col. 21 *
#-----|               ValueCategory = prvalue(load)
# 1038| (void Lambda(int, String const&))::(lambda [] type at line 1038, col. 30)& (void Lambda(int, String const&))::(lambda [] type at line 1038, col. 30)::operator=((void Lambda(int, String const&))::(lambda [] type at line 1038, col. 30) const&)
# 1038|   params: 
#-----|     0: p#0
#-----|         Type = const lambda [] type at line 1038, col. 30 &
# 1038| void (void Lambda(int, String const&))::(lambda [] type at line 1038, col. 30)::(constructor)((void Lambda(int, String const&))::(lambda [] type at line 1038, col. 30) const&)
# 1038|   params: 
#-----|     0: p#0
#-----|         Type = const lambda [] type at line 1038, col. 30 &
# 1038| void (void Lambda(int, String const&))::(lambda [] type at line 1038, col. 30)::(constructor)((void Lambda(int, String const&))::(lambda [] type at line 1038, col. 30)&&)
# 1038|   params: 
#-----|     0: p#0
#-----|         Type = lambda [] type at line 1038, col. 30 &&
# 1038|   initializations: 
# 1038|     0: constructor init of field s
# 1038|         Type = const String &
# 1038|         ValueCategory = prvalue
# 1038|       0: Unknown literal
# 1038|           Type = const String &
# 1038|           ValueCategory = prvalue
# 1038|   body: { ... }
# 1038|     0: return ...
# 1038| void (void Lambda(int, String const&))::(lambda [] type at line 1038, col. 30)::(constructor)()
# 1038|   params: 
# 1038| char (void Lambda(int, String const&))::(lambda [] type at line 1038, col. 30)::operator()(float) const
# 1038|   params: 
# 1038|     0: f
# 1038|         Type = float
# 1038|   body: { ... }
# 1038|     0: return ...
# 1038|       0: access to array
# 1038|           Type = char
# 1038|           ValueCategory = prvalue(load)
# 1038|         0: call to c_str
# 1038|             Type = const char *
# 1038|             ValueCategory = prvalue
# 1038|           -1: (reference dereference)
# 1038|               Type = const String
# 1038|               ValueCategory = lvalue
#-----|             expr: s
#-----|                 Type = const String &
#-----|                 ValueCategory = prvalue(load)
#-----|               -1: this
#-----|                   Type = const lambda [] type at line 1038, col. 30 *
#-----|                   ValueCategory = prvalue(load)
# 1038|         1: 0
# 1038|             Type = int
# 1038|             Value = 0
# 1038|             ValueCategory = prvalue
# 1040| (void Lambda(int, String const&))::(lambda [] type at line 1040, col. 30)& (void Lambda(int, String const&))::(lambda [] type at line 1040, col. 30)::operator=((void Lambda(int, String const&))::(lambda [] type at line 1040, col. 30) const&)
# 1040|   params: 
#-----|     0: p#0
#-----|         Type = const lambda [] type at line 1040, col. 30 &
# 1040| void (void Lambda(int, String const&))::(lambda [] type at line 1040, col. 30)::(constructor)((void Lambda(int, String const&))::(lambda [] type at line 1040, col. 30) const&)
# 1040|   params: 
#-----|     0: p#0
#-----|         Type = const lambda [] type at line 1040, col. 30 &
# 1040| void (void Lambda(int, String const&))::(lambda [] type at line 1040, col. 30)::(constructor)((void Lambda(int, String const&))::(lambda [] type at line 1040, col. 30)&&)
# 1040|   params: 
#-----|     0: p#0
#-----|         Type = lambda [] type at line 1040, col. 30 &&
# 1040|   initializations: 
# 1040|     0: constructor init of field s
# 1040|         Type = const String
# 1040|         ValueCategory = prvalue
# 1040|       0: call to String
# 1040|           Type = void
# 1040|           ValueCategory = prvalue
# 1040|   body: { ... }
# 1040|     0: return ...
# 1040| void (void Lambda(int, String const&))::(lambda [] type at line 1040, col. 30)::(constructor)()
# 1040|   params: 
# 1040| void (void Lambda(int, String const&))::(lambda [] type at line 1040, col. 30)::~<unnamed>()
# 1040|   params: 
#-----|   body: { ... }
#-----|     0: return ...
# 1040|   destructions: 
# 1040|     0: destructor field destruction of s
# 1040|         Type = const String
# 1040|         ValueCategory = prvalue
# 1040|       0: call to ~String
# 1040|           Type = void
# 1040|           ValueCategory = prvalue
# 1040|         -1: s
# 1040|             Type = const String
# 1040|             ValueCategory = lvalue
# 1040| char (void Lambda(int, String const&))::(lambda [] type at line 1040, col. 30)::operator()(float) const
# 1040|   params: 
# 1040|     0: f
# 1040|         Type = float
# 1040|   body: { ... }
# 1040|     0: return ...
# 1040|       0: access to array
# 1040|           Type = char
# 1040|           ValueCategory = prvalue(load)
# 1040|         0: call to c_str
# 1040|             Type = const char *
# 1040|             ValueCategory = prvalue
#-----|           -1: s
#-----|               Type = const String
#-----|               ValueCategory = lvalue
#-----|             -1: this
#-----|                 Type = const lambda [] type at line 1040, col. 30 *
#-----|                 ValueCategory = prvalue(load)
# 1040|         1: 0
# 1040|             Type = int
# 1040|             Value = 0
# 1040|             ValueCategory = prvalue
# 1042| (void Lambda(int, String const&))::(lambda [] type at line 1042, col. 32)& (void Lambda(int, String const&))::(lambda [] type at line 1042, col. 32)::operator=((void Lambda(int, String const&))::(lambda [] type at line 1042, col. 32) const&)
# 1042|   params: 
#-----|     0: p#0
#-----|         Type = const lambda [] type at line 1042, col. 32 &
# 1042| void (void Lambda(int, String const&))::(lambda [] type at line 1042, col. 32)::(constructor)((void Lambda(int, String const&))::(lambda [] type at line 1042, col. 32) const&)
# 1042|   params: 
#-----|     0: p#0
#-----|         Type = const lambda [] type at line 1042, col. 32 &
# 1042| void (void Lambda(int, String const&))::(lambda [] type at line 1042, col. 32)::(constructor)((void Lambda(int, String const&))::(lambda [] type at line 1042, col. 32)&&)
# 1042|   params: 
#-----|     0: p#0
#-----|         Type = lambda [] type at line 1042, col. 32 &&
# 1042|   initializations: 
# 1042|     0: constructor init of field s
# 1042|         Type = const String &
# 1042|         ValueCategory = prvalue
# 1042|       0: Unknown literal
# 1042|           Type = const String &
# 1042|           ValueCategory = prvalue
# 1042|     1: constructor init of field x
# 1042|         Type = int
# 1042|         ValueCategory = prvalue
# 1042|       0: Unknown literal
# 1042|           Type = int
# 1042|           ValueCategory = prvalue
# 1042|   body: { ... }
# 1042|     0: return ...
# 1042| void (void Lambda(int, String const&))::(lambda [] type at line 1042, col. 32)::(constructor)()
# 1042|   params: 
# 1042| char (void Lambda(int, String const&))::(lambda [] type at line 1042, col. 32)::operator()(float) const
# 1042|   params: 
# 1042|     0: f
# 1042|         Type = float
# 1042|   body: { ... }
# 1042|     0: return ...
# 1042|       0: access to array
# 1042|           Type = char
# 1042|           ValueCategory = prvalue(load)
# 1042|         0: call to c_str
# 1042|             Type = const char *
# 1042|             ValueCategory = prvalue
# 1042|           -1: (reference dereference)
# 1042|               Type = const String
# 1042|               ValueCategory = lvalue
#-----|             expr: s
#-----|                 Type = const String &
#-----|                 ValueCategory = prvalue(load)
#-----|               -1: this
#-----|                   Type = const lambda [] type at line 1042, col. 32 *
#-----|                   ValueCategory = prvalue(load)
#-----|         1: x
#-----|             Type = int
#-----|             ValueCategory = prvalue(load)
#-----|           -1: this
#-----|               Type = const lambda [] type at line 1042, col. 32 *
#-----|               ValueCategory = prvalue(load)
# 1045| (void Lambda(int, String const&))::(lambda [] type at line 1045, col. 23)& (void Lambda(int, String const&))::(lambda [] type at line 1045, col. 23)::operator=((void Lambda(int, String const&))::(lambda [] type at line 1045, col. 23) const&)
# 1045|   params: 
#-----|     0: p#0
#-----|         Type = const lambda [] type at line 1045, col. 23 &
# 1045| void (void Lambda(int, String const&))::(lambda [] type at line 1045, col. 23)::(constructor)((void Lambda(int, String const&))::(lambda [] type at line 1045, col. 23) const&)
# 1045|   params: 
#-----|     0: p#0
#-----|         Type = const lambda [] type at line 1045, col. 23 &
# 1045| void (void Lambda(int, String const&))::(lambda [] type at line 1045, col. 23)::(constructor)((void Lambda(int, String const&))::(lambda [] type at line 1045, col. 23)&&)
# 1045|   params: 
#-----|     0: p#0
#-----|         Type = lambda [] type at line 1045, col. 23 &&
# 1045|   initializations: 
# 1045|     0: constructor init of field s
# 1045|         Type = const String &
# 1045|         ValueCategory = prvalue
# 1045|       0: Unknown literal
# 1045|           Type = const String &
# 1045|           ValueCategory = prvalue
# 1045|     1: constructor init of field x
# 1045|         Type = int
# 1045|         ValueCategory = prvalue
# 1045|       0: Unknown literal
# 1045|           Type = int
# 1045|           ValueCategory = prvalue
# 1045|     2: constructor init of field i
# 1045|         Type = int
# 1045|         ValueCategory = prvalue
# 1045|       0: Unknown literal
# 1045|           Type = int
# 1045|           ValueCategory = prvalue
# 1045|     3: constructor init of field j
# 1045|         Type = int &
# 1045|         ValueCategory = prvalue
# 1045|       0: Unknown literal
# 1045|           Type = int &
# 1045|           ValueCategory = prvalue
# 1045|   body: { ... }
# 1045|     0: return ...
# 1045| void (void Lambda(int, String const&))::(lambda [] type at line 1045, col. 23)::(constructor)()
# 1045|   params: 
# 1045| char (void Lambda(int, String const&))::(lambda [] type at line 1045, col. 23)::operator()(float) const
# 1045|   params: 
# 1045|     0: f
# 1045|         Type = float
# 1045|   body: { ... }
# 1045|     0: return ...
# 1045|       0: access to array
# 1045|           Type = char
# 1045|           ValueCategory = prvalue(load)
# 1045|         0: call to c_str
# 1045|             Type = const char *
# 1045|             ValueCategory = prvalue
# 1045|           -1: (reference dereference)
# 1045|               Type = const String
# 1045|               ValueCategory = lvalue
#-----|             expr: s
#-----|                 Type = const String &
#-----|                 ValueCategory = prvalue(load)
#-----|               -1: this
#-----|                   Type = const lambda [] type at line 1045, col. 23 *
#-----|                   ValueCategory = prvalue(load)
# 1045|         1: ... - ...
# 1045|             Type = int
# 1045|             ValueCategory = prvalue
# 1045|           0: ... + ...
# 1045|               Type = int
# 1045|               ValueCategory = prvalue
#-----|             0: x
#-----|                 Type = int
#-----|                 ValueCategory = prvalue(load)
#-----|               -1: this
#-----|                   Type = const lambda [] type at line 1045, col. 23 *
#-----|                   ValueCategory = prvalue(load)
# 1045|             1: i
# 1045|                 Type = int
# 1045|                 ValueCategory = prvalue(load)
#-----|               -1: this
#-----|                   Type = const lambda [] type at line 1045, col. 23 *
#-----|                   ValueCategory = prvalue(load)
# 1045|           1: (reference dereference)
# 1045|               Type = int
# 1045|               ValueCategory = prvalue(load)
# 1045|             expr: j
# 1045|                 Type = int &
# 1045|                 ValueCategory = prvalue(load)
#-----|               -1: this
#-----|                   Type = const lambda [] type at line 1045, col. 23 *
#-----|                   ValueCategory = prvalue(load)
# 1050| vector<int>& vector<int>::operator=(vector<int> const&)
# 1050|   params: 
#-----|     0: p#0
#-----|         Type = const vector<int> &
# 1050| vector<int>& vector<int>::operator=(vector<int>&&)
# 1050|   params: 
#-----|     0: p#0
#-----|         Type = vector<int> &&
# 1051| vector<int>::iterator& vector<int>::iterator::operator=(vector<int>::iterator const public&)
# 1051|   params: 
#-----|     0: p#0
#-----|         Type = const iterator &
# 1051| vector<int>::iterator& vector<int>::iterator::operator=(vector<int>::iterator&&)
# 1051|   params: 
#-----|     0: p#0
#-----|         Type = iterator &&
# 1053| vector<T>::iterator& vector<T>::iterator::operator++()
# 1053|   params: 
# 1053| vector<int>::iterator& vector<int>::iterator::operator++()
# 1053|   params: 
# 1054| T& vector<T>::iterator::operator*() const
# 1054|   params: 
# 1054| int& vector<int>::iterator::operator*() const
# 1054|   params: 
# 1056| bool vector<T>::iterator::operator!=(vector<T>::iterator) const
# 1056|   params: 
# 1056|     0: right
# 1056|         Type = iterator
# 1056| bool vector<int>::iterator::operator!=(vector<int>::iterator) const
# 1056|   params: 
# 1056|     0: right
# 1056|         Type = iterator
# 1059| vector<T>::iterator vector<T>::begin() const
# 1059|   params: 
# 1059| vector<int>::iterator vector<int>::begin() const
# 1059|   params: 
# 1060| vector<T>::iterator vector<T>::end() const
# 1060|   params: 
# 1060| vector<int>::iterator vector<int>::end() const
# 1060|   params: 
# 1064| bool operator==<T>(iterator, iterator)
# 1064|   params: 
# 1064|     0: left
# 1064|         Type = iterator
# 1064|     1: right
# 1064|         Type = iterator
# 1066| bool operator!=<T>(iterator, iterator)
# 1066|   params: 
# 1066|     0: left
# 1066|         Type = iterator
# 1066|     1: right
# 1066|         Type = iterator
# 1068| void RangeBasedFor(vector<int> const&)
# 1068|   params: 
# 1068|     0: v
# 1068|         Type = const vector<int> &
# 1068|   body: { ... }
# 1069|     0: for(...:...) ...
# 1069|       0: declaration
# 1069|       1: declaration
# 1069|       2: call to operator!=
# 1069|           Type = bool
# 1069|           ValueCategory = prvalue
#-----|         -1: (const iterator)...
#-----|             Conversion = glvalue conversion
#-----|             Type = const iterator
#-----|             ValueCategory = lvalue
#-----|           expr: (__begin)
#-----|               Type = iterator
#-----|               ValueCategory = lvalue
#-----|         0: (__end)
#-----|             Type = iterator
#-----|             ValueCategory = prvalue(load)
# 1069|       3: (reference dereference)
# 1069|           Type = iterator
# 1069|           ValueCategory = lvalue
# 1069|         expr: call to operator++
# 1069|             Type = iterator &
# 1069|             ValueCategory = prvalue
#-----|           -1: (__begin)
#-----|               Type = iterator
#-----|               ValueCategory = lvalue
# 1069|       4: declaration
# 1069|       5: { ... }
# 1070|         0: if (...) ... 
# 1070|           0: ... > ...
# 1070|               Type = bool
# 1070|               ValueCategory = prvalue
# 1070|             0: e
# 1070|                 Type = int
# 1070|                 ValueCategory = prvalue(load)
# 1070|             1: 0
# 1070|                 Type = int
# 1070|                 Value = 0
# 1070|                 ValueCategory = prvalue
# 1070|           1: { ... }
# 1071|             0: continue;
# 1069|         1: label ...:
# 1075|     1: for(...:...) ...
# 1075|       0: declaration
# 1075|       1: declaration
# 1075|       2: call to operator!=
# 1075|           Type = bool
# 1075|           ValueCategory = prvalue
#-----|         -1: (const iterator)...
#-----|             Conversion = glvalue conversion
#-----|             Type = const iterator
#-----|             ValueCategory = lvalue
#-----|           expr: (__begin)
#-----|               Type = iterator
#-----|               ValueCategory = lvalue
#-----|         0: (__end)
#-----|             Type = iterator
#-----|             ValueCategory = prvalue(load)
# 1075|       3: (reference dereference)
# 1075|           Type = iterator
# 1075|           ValueCategory = lvalue
# 1075|         expr: call to operator++
# 1075|             Type = iterator &
# 1075|             ValueCategory = prvalue
#-----|           -1: (__begin)
#-----|               Type = iterator
#-----|               ValueCategory = lvalue
# 1075|       4: declaration
# 1075|       5: { ... }
# 1076|         0: if (...) ... 
# 1076|           0: ... < ...
# 1076|               Type = bool
# 1076|               ValueCategory = prvalue
# 1076|             0: (reference dereference)
# 1076|                 Type = int
# 1076|                 ValueCategory = prvalue(load)
# 1076|               expr: e
# 1076|                   Type = const int &
# 1076|                   ValueCategory = prvalue(load)
# 1076|             1: 5
# 1076|                 Type = int
# 1076|                 Value = 5
# 1076|                 ValueCategory = prvalue
# 1076|           1: { ... }
# 1077|             0: break;
# 1079|     2: label ...:
# 1080|     3: return ...
# 1099| int AsmStmt(int)
# 1099|   params: 
# 1099|     0: x
# 1099|         Type = int
# 1099|   body: { ... }
# 1100|     0: asm statement
# 1101|     1: return ...
# 1101|       0: x
# 1101|           Type = int
# 1101|           ValueCategory = prvalue(load)
# 1104| void AsmStmtWithOutputs(unsigned int&, unsigned int&, unsigned int&, unsigned int&)
# 1104|   params: 
# 1104|     0: a
# 1104|         Type = unsigned int &
# 1104|     1: b
# 1104|         Type = unsigned int &
# 1104|     2: c
# 1104|         Type = unsigned int &
# 1104|     3: d
# 1104|         Type = unsigned int &
# 1105|   body: { ... }
# 1106|     0: asm statement
# 1109|       0: (reference dereference)
# 1109|           Type = unsigned int
# 1109|           ValueCategory = lvalue
# 1109|         expr: a
# 1109|             Type = unsigned int &
# 1109|             ValueCategory = prvalue(load)
# 1109|       1: (reference dereference)
# 1109|           Type = unsigned int
# 1109|           ValueCategory = lvalue
# 1109|         expr: b
# 1109|             Type = unsigned int &
# 1109|             ValueCategory = prvalue(load)
# 1109|       2: (reference dereference)
# 1109|           Type = unsigned int
# 1109|           ValueCategory = lvalue
# 1109|         expr: c
# 1109|             Type = unsigned int &
# 1109|             ValueCategory = prvalue(load)
# 1109|       3: (reference dereference)
# 1109|           Type = unsigned int
# 1109|           ValueCategory = lvalue
# 1109|         expr: d
# 1109|             Type = unsigned int &
# 1109|             ValueCategory = prvalue(load)
# 1111|     1: return ...

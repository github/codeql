#-----| [CopyAssignmentOperator] __va_list_tag& __va_list_tag::operator=(__va_list_tag const&)
#-----|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const __va_list_tag &
#-----| [MoveAssignmentOperator] __va_list_tag& __va_list_tag::operator=(__va_list_tag&&)
#-----|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [RValueReferenceType] __va_list_tag &&
#-----| [Operator,TopLevelFunction] void operator delete(void*)
#-----|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [VoidPointerType] void *
#-----| [Operator,TopLevelFunction] void operator delete(void*, unsigned long)
#-----|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [VoidPointerType] void *
#-----|     1: [Parameter] p#1
#-----|         Type = [LongType] unsigned long
#-----| [Operator,TopLevelFunction] void operator delete(void*, unsigned long, std::align_val_t)
#-----|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [VoidPointerType] void *
#-----|     1: [Parameter] p#1
#-----|         Type = [LongType] unsigned long
#-----|     2: [Parameter] p#2
#-----|         Type = [ScopedEnum] align_val_t
#-----| [Operator,TopLevelFunction] void operator delete[](void*, unsigned long)
#-----|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [VoidPointerType] void *
#-----|     1: [Parameter] p#1
#-----|         Type = [LongType] unsigned long
#-----| [Operator,TopLevelFunction] void operator delete[](void*, unsigned long, std::align_val_t)
#-----|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [VoidPointerType] void *
#-----|     1: [Parameter] p#1
#-----|         Type = [LongType] unsigned long
#-----|     2: [Parameter] p#2
#-----|         Type = [ScopedEnum] align_val_t
#-----| [Operator,TopLevelFunction] void* operator new(unsigned long)
#-----|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LongType] unsigned long
#-----| [Operator,TopLevelFunction] void* operator new(unsigned long, std::align_val_t)
#-----|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LongType] unsigned long
#-----|     1: [Parameter] p#1
#-----|         Type = [ScopedEnum] align_val_t
#-----| [Operator,TopLevelFunction] void* operator new[](unsigned long)
#-----|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LongType] unsigned long
#-----| [Operator,TopLevelFunction] void* operator new[](unsigned long, std::align_val_t)
#-----|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LongType] unsigned long
#-----|     1: [Parameter] p#1
#-----|         Type = [ScopedEnum] align_val_t
bad_asts.cpp:
#    5| [CopyAssignmentOperator] Bad::S& Bad::S::operator=(Bad::S const&)
#    5|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const S &
#    5| [MoveAssignmentOperator] Bad::S& Bad::S::operator=(Bad::S&&)
#    5|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [RValueReferenceType] S &&
#    9| [FunctionTemplateInstantiation,MemberFunction] int Bad::S::MemberFunction<int 6>(int)
#    9|   params: 
#    9|     0: [Parameter] y
#    9|         Type = [IntType] int
#    9|   body: [Block] { ... }
#   10|     0: [ReturnStmt] return ...
#   10|       0: [AddExpr] ... + ...
#   10|           Type = [IntType] int
#   10|           ValueCategory = prvalue
#   10|         0: [AddExpr] ... + ...
#   10|             Type = [IntType] int
#   10|             ValueCategory = prvalue
#   10|           0: [Literal] 6
#   10|               Type = [IntType] int
#   10|               Value = [Literal] 6
#   10|               ValueCategory = prvalue
#   10|           1: [PointerFieldAccess] x
#   10|               Type = [IntType] int
#   10|               ValueCategory = prvalue(load)
#-----|             -1: [ThisExpr] this
#-----|                 Type = [PointerType] S *
#-----|                 ValueCategory = prvalue(load)
#   10|         1: [VariableAccess] y
#   10|             Type = [IntType] int
#   10|             ValueCategory = prvalue(load)
#    9| [MemberFunction,TemplateFunction] int Bad::S::MemberFunction<int t>(int)
#    9|   params: 
#    9|     0: [Parameter] y
#    9|         Type = [IntType] int
#    9|   body: [Block] { ... }
#   10|     0: [ReturnStmt] return ...
#   10|       0: [AddExpr] ... + ...
#   10|           Type = [IntType] int
#   10|           ValueCategory = prvalue
#   10|         0: [AddExpr] ... + ...
#   10|             Type = [IntType] int
#   10|             ValueCategory = prvalue
#   10|           0: [Literal] t
#   10|               Type = [IntType] int
#   10|               Value = [Literal] t
#   10|               ValueCategory = prvalue
#   10|           1: [PointerFieldAccess] x
#   10|               Type = [IntType] int
#   10|               ValueCategory = prvalue(load)
#-----|             -1: [ThisExpr] this
#-----|                 Type = [PointerType] S *
#-----|                 ValueCategory = prvalue(load)
#   10|         1: [VariableAccess] y
#   10|             Type = [IntType] int
#   10|             ValueCategory = prvalue(load)
#   14| [TopLevelFunction] void Bad::CallBadMemberFunction()
#   14|   params: 
#   14|   body: [Block] { ... }
#   15|     0: [DeclStmt] declaration
#   15|       0: [VariableDeclarationEntry] definition of s
#   15|           Type = [Struct] S
#   15|         init: [Initializer] initializer for s
#   15|           expr: [ClassAggregateLiteral] {...}
#   15|               Type = [Struct] S
#   15|               ValueCategory = prvalue
#   16|     1: [ExprStmt] ExprStmt
#   16|       0: [FunctionCall] call to MemberFunction
#   16|           Type = [IntType] int
#   16|           ValueCategory = prvalue
#   16|         -1: [VariableAccess] s
#   16|             Type = [Struct] S
#   16|             ValueCategory = lvalue
#   16|         0: [Literal] 1
#   16|             Type = [IntType] int
#   16|             Value = [Literal] 1
#   16|             ValueCategory = prvalue
#   17|     2: [ReturnStmt] return ...
#   19| [CopyAssignmentOperator] Bad::Point& Bad::Point::operator=(Bad::Point const&)
#   19|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const Point &
#   19| [MoveAssignmentOperator] Bad::Point& Bad::Point::operator=(Bad::Point&&)
#   19|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [RValueReferenceType] Point &&
#   19| [CopyConstructor] void Bad::Point::Point(Bad::Point const&)
#   19|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const Point &
#   19|   initializations: 
#   19|     0: [ConstructorFieldInit] constructor init of field x
#   19|         Type = [IntType] int
#   19|         ValueCategory = prvalue
#   19|       0: [Literal] Unknown literal
#   19|           Type = [IntType] int
#   19|           ValueCategory = prvalue
#   19|     1: [ConstructorFieldInit] constructor init of field y
#   19|         Type = [IntType] int
#   19|         ValueCategory = prvalue
#   19|       0: [Literal] Unknown literal
#   19|           Type = [IntType] int
#   19|           ValueCategory = prvalue
#   19|   body: [Block] { ... }
#   19|     0: [ReturnStmt] return ...
#   19| [MoveConstructor] void Bad::Point::Point(Bad::Point&&)
#   19|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [RValueReferenceType] Point &&
#   22| [Constructor] void Bad::Point::Point()
#   22|   params: 
#   22|   initializations: 
#   22|   body: [Block] { ... }
#   23|     0: [ReturnStmt] return ...
#   26| [TopLevelFunction] void Bad::CallCopyConstructor(Bad::Point const&)
#   26|   params: 
#   26|     0: [Parameter] a
#   26|         Type = [LValueReferenceType] const Point &
#   26|   body: [Block] { ... }
#   27|     0: [DeclStmt] declaration
#   27|       0: [VariableDeclarationEntry] definition of b
#   27|           Type = [Struct] Point
#   27|         init: [Initializer] initializer for b
#   27|           expr: [CStyleCast] (Point)...
#   27|               Conversion = [GlvalueConversion] glvalue conversion
#   27|               Type = [Struct] Point
#   27|               ValueCategory = prvalue(load)
#   27|             expr: [ReferenceDereferenceExpr] (reference dereference)
#   27|                 Type = [SpecifiedType] const Point
#   27|                 ValueCategory = lvalue
#   27|               expr: [VariableAccess] a
#   27|                   Type = [LValueReferenceType] const Point &
#   27|                   ValueCategory = prvalue(load)
#   28|     1: [ReturnStmt] return ...
#   30| [TopLevelFunction] void Bad::errorExpr()
#   30|   params: 
#   30|   body: [Block] { ... }
#   31|     0: [DeclStmt] declaration
#   31|       0: [VariableDeclarationEntry] definition of intref
#   31|           Type = [LValueReferenceType] int &
#   31|         init: [Initializer] initializer for intref
#   31|           expr: [ErrorExpr] <error expr>
#   31|               Type = [ErroneousType] error
#   31|               ValueCategory = prvalue
#   32|     1: [DeclStmt] declaration
#   32|       0: [VariableDeclarationEntry] definition of x
#   32|           Type = [IntType] int
#   32|         init: [Initializer] initializer for x
#   32|           expr: [ErrorExpr] <error expr>
#   32|               Type = [ErroneousType] error
#   32|               ValueCategory = prvalue
#   33|     2: [ExprStmt] ExprStmt
#   33|       0: [AssignExpr] ... = ...
#   33|           Type = [IntType] int
#   33|           ValueCategory = lvalue
#   33|         0: [VariableAccess] x
#   33|             Type = [IntType] int
#   33|             ValueCategory = lvalue
#-----|         1: [ErrorExpr] <error expr>
#-----|             Type = [ErroneousType] error
#-----|             ValueCategory = prvalue(load)
#   34|     3: [ReturnStmt] return ...
clang.cpp:
#    5| [TopLevelFunction] int* globalIntAddress()
#    5|   params: 
#    5|   body: [Block] { ... }
#    6|     0: [ReturnStmt] return ...
#    6|       0: [BuiltInOperationBuiltInAddressOf] __builtin_addressof ...
#    6|           Type = [IntPointerType] int *
#    6|           ValueCategory = prvalue
#    6|         0: [VariableAccess] globalInt
#    6|             Type = [IntType] int
#    6|             ValueCategory = lvalue
complex.c:
#    1| [TopLevelFunction] void complex_literals()
#    1|   params: 
#    1|   body: [Block] { ... }
#    2|     0: [DeclStmt] declaration
#    2|       0: [VariableDeclarationEntry] definition of cf
#    2|           Type = [ArithmeticType] _Complex float
#    2|         init: [Initializer] initializer for cf
#    2|           expr: [CStyleCast] (_Complex float)...
#    2|               Conversion = [FloatingPointConversion] floating point conversion
#    2|               Type = [ArithmeticType] _Complex float
#    2|               ValueCategory = prvalue
#    2|             expr: [Literal] 2.0
#    2|                 Type = [DoubleType] double
#    2|                 Value = [Literal] 2.0
#    2|                 ValueCategory = prvalue
#    3|     1: [ExprStmt] ExprStmt
#    3|       0: [AssignExpr] ... = ...
#    3|           Type = [ArithmeticType] _Complex float
#    3|           ValueCategory = prvalue
#    3|         0: [VariableAccess] cf
#    3|             Type = [ArithmeticType] _Complex float
#    3|             ValueCategory = lvalue
#    3|         1: [CStyleCast] (_Complex float)...
#    3|             Conversion = [FloatingPointConversion] floating point conversion
#    3|             Type = [ArithmeticType] _Complex float
#    3|             ValueCategory = prvalue
#    3|           expr: [Literal] 1.0i
#    3|               Type = [ArithmeticType] _Imaginary float
#    3|               Value = [Literal] 1.0i
#    3|               ValueCategory = prvalue
#    4|     2: [DeclStmt] declaration
#    4|       0: [VariableDeclarationEntry] definition of cd
#    4|           Type = [ArithmeticType] _Complex double
#    4|         init: [Initializer] initializer for cd
#    4|           expr: [CStyleCast] (_Complex double)...
#    4|               Conversion = [FloatingPointConversion] floating point conversion
#    4|               Type = [ArithmeticType] _Complex double
#    4|               ValueCategory = prvalue
#    4|             expr: [Literal] 3.0
#    4|                 Type = [DoubleType] double
#    4|                 Value = [Literal] 3.0
#    4|                 ValueCategory = prvalue
#    5|     3: [ExprStmt] ExprStmt
#    5|       0: [AssignExpr] ... = ...
#    5|           Type = [ArithmeticType] _Complex double
#    5|           ValueCategory = prvalue
#    5|         0: [VariableAccess] cd
#    5|             Type = [ArithmeticType] _Complex double
#    5|             ValueCategory = lvalue
#    5|         1: [CStyleCast] (_Complex double)...
#    5|             Conversion = [FloatingPointConversion] floating point conversion
#    5|             Type = [ArithmeticType] _Complex double
#    5|             ValueCategory = prvalue
#    5|           expr: [Literal] 1.0i
#    5|               Type = [ArithmeticType] _Imaginary float
#    5|               Value = [Literal] 1.0i
#    5|               ValueCategory = prvalue
#    6|     4: [DeclStmt] declaration
#    6|       0: [VariableDeclarationEntry] definition of cld
#    6|           Type = [ArithmeticType] _Complex long double
#    6|         init: [Initializer] initializer for cld
#    6|           expr: [CStyleCast] (_Complex long double)...
#    6|               Conversion = [FloatingPointConversion] floating point conversion
#    6|               Type = [ArithmeticType] _Complex long double
#    6|               ValueCategory = prvalue
#    6|             expr: [Literal] 5.0
#    6|                 Type = [DoubleType] double
#    6|                 Value = [Literal] 5.0
#    6|                 ValueCategory = prvalue
#    7|     5: [ExprStmt] ExprStmt
#    7|       0: [AssignExpr] ... = ...
#    7|           Type = [ArithmeticType] _Complex long double
#    7|           ValueCategory = prvalue
#    7|         0: [VariableAccess] cld
#    7|             Type = [ArithmeticType] _Complex long double
#    7|             ValueCategory = lvalue
#    7|         1: [CStyleCast] (_Complex long double)...
#    7|             Conversion = [FloatingPointConversion] floating point conversion
#    7|             Type = [ArithmeticType] _Complex long double
#    7|             ValueCategory = prvalue
#    7|           expr: [Literal] 1.0i
#    7|               Type = [ArithmeticType] _Imaginary float
#    7|               Value = [Literal] 1.0i
#    7|               ValueCategory = prvalue
#    9|     6: [DeclStmt] declaration
#    9|       0: [VariableDeclarationEntry] definition of jf
#    9|           Type = [ArithmeticType] _Imaginary float
#    9|         init: [Initializer] initializer for jf
#    9|           expr: [Literal] 1.0i
#    9|               Type = [ArithmeticType] _Imaginary float
#    9|               Value = [Literal] 1.0i
#    9|               ValueCategory = prvalue
#   10|     7: [DeclStmt] declaration
#   10|       0: [VariableDeclarationEntry] definition of jd
#   10|           Type = [ArithmeticType] _Imaginary double
#   10|         init: [Initializer] initializer for jd
#   10|           expr: [CStyleCast] (_Imaginary double)...
#   10|               Conversion = [FloatingPointConversion] floating point conversion
#   10|               Type = [ArithmeticType] _Imaginary double
#   10|               ValueCategory = prvalue
#   10|             expr: [Literal] 1.0i
#   10|                 Type = [ArithmeticType] _Imaginary float
#   10|                 Value = [Literal] 1.0i
#   10|                 ValueCategory = prvalue
#   11|     8: [DeclStmt] declaration
#   11|       0: [VariableDeclarationEntry] definition of jld
#   11|           Type = [ArithmeticType] _Imaginary long double
#   11|         init: [Initializer] initializer for jld
#   11|           expr: [CStyleCast] (_Imaginary long double)...
#   11|               Conversion = [FloatingPointConversion] floating point conversion
#   11|               Type = [ArithmeticType] _Imaginary long double
#   11|               ValueCategory = prvalue
#   11|             expr: [Literal] 1.0i
#   11|                 Type = [ArithmeticType] _Imaginary float
#   11|                 Value = [Literal] 1.0i
#   11|                 ValueCategory = prvalue
#   12|     9: [ReturnStmt] return ...
#   14| [TopLevelFunction] void complex_arithmetic()
#   14|   params: 
#   14|   body: [Block] { ... }
#   15|     0: [DeclStmt] declaration
#   15|       0: [VariableDeclarationEntry] definition of f1
#   15|           Type = [FloatType] float
#   15|         init: [Initializer] initializer for f1
#   15|           expr: [CStyleCast] (float)...
#   15|               Conversion = [FloatingPointConversion] floating point conversion
#   15|               Type = [FloatType] float
#   15|               Value = [CStyleCast] 5.0
#   15|               ValueCategory = prvalue
#   15|             expr: [Literal] 5.0
#   15|                 Type = [DoubleType] double
#   15|                 Value = [Literal] 5.0
#   15|                 ValueCategory = prvalue
#   16|     1: [DeclStmt] declaration
#   16|       0: [VariableDeclarationEntry] definition of f2
#   16|           Type = [FloatType] float
#   16|         init: [Initializer] initializer for f2
#   16|           expr: [CStyleCast] (float)...
#   16|               Conversion = [FloatingPointConversion] floating point conversion
#   16|               Type = [FloatType] float
#   16|               Value = [CStyleCast] 7.0
#   16|               ValueCategory = prvalue
#   16|             expr: [Literal] 7.0
#   16|                 Type = [DoubleType] double
#   16|                 Value = [Literal] 7.0
#   16|                 ValueCategory = prvalue
#   17|     2: [DeclStmt] declaration
#   17|       0: [VariableDeclarationEntry] definition of f3
#   17|           Type = [FloatType] float
#   18|     3: [DeclStmt] declaration
#   18|       0: [VariableDeclarationEntry] definition of cf1
#   18|           Type = [ArithmeticType] _Complex float
#   18|         init: [Initializer] initializer for cf1
#   18|           expr: [CStyleCast] (_Complex float)...
#   18|               Conversion = [FloatingPointConversion] floating point conversion
#   18|               Type = [ArithmeticType] _Complex float
#   18|               ValueCategory = prvalue
#   18|             expr: [Literal] 2.0
#   18|                 Type = [DoubleType] double
#   18|                 Value = [Literal] 2.0
#   18|                 ValueCategory = prvalue
#   19|     4: [DeclStmt] declaration
#   19|       0: [VariableDeclarationEntry] definition of cf2
#   19|           Type = [ArithmeticType] _Complex float
#   19|         init: [Initializer] initializer for cf2
#   19|           expr: [CStyleCast] (_Complex float)...
#   19|               Conversion = [FloatingPointConversion] floating point conversion
#   19|               Type = [ArithmeticType] _Complex float
#   19|               ValueCategory = prvalue
#   19|             expr: [Literal] 1.0i
#   19|                 Type = [ArithmeticType] _Imaginary float
#   19|                 Value = [Literal] 1.0i
#   19|                 ValueCategory = prvalue
#   20|     5: [DeclStmt] declaration
#   20|       0: [VariableDeclarationEntry] definition of cf3
#   20|           Type = [ArithmeticType] _Complex float
#   21|     6: [DeclStmt] declaration
#   21|       0: [VariableDeclarationEntry] definition of jf1
#   21|           Type = [ArithmeticType] _Imaginary float
#   21|         init: [Initializer] initializer for jf1
#   21|           expr: [Literal] 1.0i
#   21|               Type = [ArithmeticType] _Imaginary float
#   21|               Value = [Literal] 1.0i
#   21|               ValueCategory = prvalue
#   22|     7: [DeclStmt] declaration
#   22|       0: [VariableDeclarationEntry] definition of jf2
#   22|           Type = [ArithmeticType] _Imaginary float
#   22|         init: [Initializer] initializer for jf2
#   22|           expr: [Literal] 1.0i
#   22|               Type = [ArithmeticType] _Imaginary float
#   22|               Value = [Literal] 1.0i
#   22|               ValueCategory = prvalue
#   23|     8: [DeclStmt] declaration
#   23|       0: [VariableDeclarationEntry] definition of jf3
#   23|           Type = [ArithmeticType] _Imaginary float
#   26|     9: [ExprStmt] ExprStmt
#   26|       0: [AssignExpr] ... = ...
#   26|           Type = [ArithmeticType] _Complex float
#   26|           ValueCategory = prvalue
#   26|         0: [VariableAccess] cf3
#   26|             Type = [ArithmeticType] _Complex float
#   26|             ValueCategory = lvalue
#   26|         1: [UnaryPlusExpr] + ...
#   26|             Type = [ArithmeticType] _Complex float
#   26|             ValueCategory = prvalue
#   26|           0: [VariableAccess] cf1
#   26|               Type = [ArithmeticType] _Complex float
#   26|               ValueCategory = prvalue(load)
#   27|     10: [ExprStmt] ExprStmt
#   27|       0: [AssignExpr] ... = ...
#   27|           Type = [ArithmeticType] _Complex float
#   27|           ValueCategory = prvalue
#   27|         0: [VariableAccess] cf3
#   27|             Type = [ArithmeticType] _Complex float
#   27|             ValueCategory = lvalue
#   27|         1: [UnaryMinusExpr] - ...
#   27|             Type = [ArithmeticType] _Complex float
#   27|             ValueCategory = prvalue
#   27|           0: [VariableAccess] cf1
#   27|               Type = [ArithmeticType] _Complex float
#   27|               ValueCategory = prvalue(load)
#   30|     11: [ExprStmt] ExprStmt
#   30|       0: [AssignExpr] ... = ...
#   30|           Type = [ArithmeticType] _Complex float
#   30|           ValueCategory = prvalue
#   30|         0: [VariableAccess] cf3
#   30|             Type = [ArithmeticType] _Complex float
#   30|             ValueCategory = lvalue
#   30|         1: [AddExpr] ... + ...
#   30|             Type = [ArithmeticType] _Complex float
#   30|             ValueCategory = prvalue
#   30|           0: [VariableAccess] cf1
#   30|               Type = [ArithmeticType] _Complex float
#   30|               ValueCategory = prvalue(load)
#   30|           1: [VariableAccess] cf2
#   30|               Type = [ArithmeticType] _Complex float
#   30|               ValueCategory = prvalue(load)
#   31|     12: [ExprStmt] ExprStmt
#   31|       0: [AssignExpr] ... = ...
#   31|           Type = [ArithmeticType] _Complex float
#   31|           ValueCategory = prvalue
#   31|         0: [VariableAccess] cf3
#   31|             Type = [ArithmeticType] _Complex float
#   31|             ValueCategory = lvalue
#   31|         1: [SubExpr] ... - ...
#   31|             Type = [ArithmeticType] _Complex float
#   31|             ValueCategory = prvalue
#   31|           0: [VariableAccess] cf1
#   31|               Type = [ArithmeticType] _Complex float
#   31|               ValueCategory = prvalue(load)
#   31|           1: [VariableAccess] cf2
#   31|               Type = [ArithmeticType] _Complex float
#   31|               ValueCategory = prvalue(load)
#   32|     13: [ExprStmt] ExprStmt
#   32|       0: [AssignExpr] ... = ...
#   32|           Type = [ArithmeticType] _Complex float
#   32|           ValueCategory = prvalue
#   32|         0: [VariableAccess] cf3
#   32|             Type = [ArithmeticType] _Complex float
#   32|             ValueCategory = lvalue
#   32|         1: [MulExpr] ... * ...
#   32|             Type = [ArithmeticType] _Complex float
#   32|             ValueCategory = prvalue
#   32|           0: [VariableAccess] cf1
#   32|               Type = [ArithmeticType] _Complex float
#   32|               ValueCategory = prvalue(load)
#   32|           1: [VariableAccess] cf2
#   32|               Type = [ArithmeticType] _Complex float
#   32|               ValueCategory = prvalue(load)
#   33|     14: [ExprStmt] ExprStmt
#   33|       0: [AssignExpr] ... = ...
#   33|           Type = [ArithmeticType] _Complex float
#   33|           ValueCategory = prvalue
#   33|         0: [VariableAccess] cf3
#   33|             Type = [ArithmeticType] _Complex float
#   33|             ValueCategory = lvalue
#   33|         1: [DivExpr] ... / ...
#   33|             Type = [ArithmeticType] _Complex float
#   33|             ValueCategory = prvalue
#   33|           0: [VariableAccess] cf1
#   33|               Type = [ArithmeticType] _Complex float
#   33|               ValueCategory = prvalue(load)
#   33|           1: [VariableAccess] cf2
#   33|               Type = [ArithmeticType] _Complex float
#   33|               ValueCategory = prvalue(load)
#   36|     15: [ExprStmt] ExprStmt
#   36|       0: [AssignExpr] ... = ...
#   36|           Type = [ArithmeticType] _Imaginary float
#   36|           ValueCategory = prvalue
#   36|         0: [VariableAccess] jf3
#   36|             Type = [ArithmeticType] _Imaginary float
#   36|             ValueCategory = lvalue
#   36|         1: [UnaryPlusExpr] + ...
#   36|             Type = [ArithmeticType] _Imaginary float
#   36|             ValueCategory = prvalue
#   36|           0: [VariableAccess] jf1
#   36|               Type = [ArithmeticType] _Imaginary float
#   36|               ValueCategory = prvalue(load)
#   37|     16: [ExprStmt] ExprStmt
#   37|       0: [AssignExpr] ... = ...
#   37|           Type = [ArithmeticType] _Imaginary float
#   37|           ValueCategory = prvalue
#   37|         0: [VariableAccess] jf3
#   37|             Type = [ArithmeticType] _Imaginary float
#   37|             ValueCategory = lvalue
#   37|         1: [UnaryMinusExpr] - ...
#   37|             Type = [ArithmeticType] _Imaginary float
#   37|             ValueCategory = prvalue
#   37|           0: [VariableAccess] jf1
#   37|               Type = [ArithmeticType] _Imaginary float
#   37|               ValueCategory = prvalue(load)
#   40|     17: [ExprStmt] ExprStmt
#   40|       0: [AssignExpr] ... = ...
#   40|           Type = [ArithmeticType] _Imaginary float
#   40|           ValueCategory = prvalue
#   40|         0: [VariableAccess] jf3
#   40|             Type = [ArithmeticType] _Imaginary float
#   40|             ValueCategory = lvalue
#   40|         1: [AddExpr] ... + ...
#   40|             Type = [ArithmeticType] _Imaginary float
#   40|             ValueCategory = prvalue
#   40|           0: [VariableAccess] jf1
#   40|               Type = [ArithmeticType] _Imaginary float
#   40|               ValueCategory = prvalue(load)
#   40|           1: [VariableAccess] jf2
#   40|               Type = [ArithmeticType] _Imaginary float
#   40|               ValueCategory = prvalue(load)
#   41|     18: [ExprStmt] ExprStmt
#   41|       0: [AssignExpr] ... = ...
#   41|           Type = [ArithmeticType] _Imaginary float
#   41|           ValueCategory = prvalue
#   41|         0: [VariableAccess] jf3
#   41|             Type = [ArithmeticType] _Imaginary float
#   41|             ValueCategory = lvalue
#   41|         1: [SubExpr] ... - ...
#   41|             Type = [ArithmeticType] _Imaginary float
#   41|             ValueCategory = prvalue
#   41|           0: [VariableAccess] jf1
#   41|               Type = [ArithmeticType] _Imaginary float
#   41|               ValueCategory = prvalue(load)
#   41|           1: [VariableAccess] jf2
#   41|               Type = [ArithmeticType] _Imaginary float
#   41|               ValueCategory = prvalue(load)
#   42|     19: [ExprStmt] ExprStmt
#   42|       0: [AssignExpr] ... = ...
#   42|           Type = [FloatType] float
#   42|           ValueCategory = prvalue
#   42|         0: [VariableAccess] f3
#   42|             Type = [FloatType] float
#   42|             ValueCategory = lvalue
#   42|         1: [ImaginaryMulExpr] ... * ...
#   42|             Type = [FloatType] float
#   42|             ValueCategory = prvalue
#   42|           0: [VariableAccess] jf1
#   42|               Type = [ArithmeticType] _Imaginary float
#   42|               ValueCategory = prvalue(load)
#   42|           1: [VariableAccess] jf2
#   42|               Type = [ArithmeticType] _Imaginary float
#   42|               ValueCategory = prvalue(load)
#   43|     20: [ExprStmt] ExprStmt
#   43|       0: [AssignExpr] ... = ...
#   43|           Type = [FloatType] float
#   43|           ValueCategory = prvalue
#   43|         0: [VariableAccess] f3
#   43|             Type = [FloatType] float
#   43|             ValueCategory = lvalue
#   43|         1: [DivExpr] ... / ...
#   43|             Type = [FloatType] float
#   43|             ValueCategory = prvalue
#   43|           0: [VariableAccess] jf1
#   43|               Type = [ArithmeticType] _Imaginary float
#   43|               ValueCategory = prvalue(load)
#   43|           1: [VariableAccess] jf2
#   43|               Type = [ArithmeticType] _Imaginary float
#   43|               ValueCategory = prvalue(load)
#   46|     21: [ExprStmt] ExprStmt
#   46|       0: [AssignExpr] ... = ...
#   46|           Type = [ArithmeticType] _Complex float
#   46|           ValueCategory = prvalue
#   46|         0: [VariableAccess] cf3
#   46|             Type = [ArithmeticType] _Complex float
#   46|             ValueCategory = lvalue
#   46|         1: [ImaginaryRealAddExpr] ... + ...
#   46|             Type = [ArithmeticType] _Complex float
#   46|             ValueCategory = prvalue
#   46|           0: [VariableAccess] jf1
#   46|               Type = [ArithmeticType] _Imaginary float
#   46|               ValueCategory = prvalue(load)
#   46|           1: [VariableAccess] f2
#   46|               Type = [FloatType] float
#   46|               ValueCategory = prvalue(load)
#   47|     22: [ExprStmt] ExprStmt
#   47|       0: [AssignExpr] ... = ...
#   47|           Type = [ArithmeticType] _Complex float
#   47|           ValueCategory = prvalue
#   47|         0: [VariableAccess] cf3
#   47|             Type = [ArithmeticType] _Complex float
#   47|             ValueCategory = lvalue
#   47|         1: [ImaginaryRealSubExpr] ... - ...
#   47|             Type = [ArithmeticType] _Complex float
#   47|             ValueCategory = prvalue
#   47|           0: [VariableAccess] jf1
#   47|               Type = [ArithmeticType] _Imaginary float
#   47|               ValueCategory = prvalue(load)
#   47|           1: [VariableAccess] f2
#   47|               Type = [FloatType] float
#   47|               ValueCategory = prvalue(load)
#   48|     23: [ExprStmt] ExprStmt
#   48|       0: [AssignExpr] ... = ...
#   48|           Type = [ArithmeticType] _Imaginary float
#   48|           ValueCategory = prvalue
#   48|         0: [VariableAccess] jf3
#   48|             Type = [ArithmeticType] _Imaginary float
#   48|             ValueCategory = lvalue
#   48|         1: [MulExpr] ... * ...
#   48|             Type = [ArithmeticType] _Imaginary float
#   48|             ValueCategory = prvalue
#   48|           0: [VariableAccess] jf1
#   48|               Type = [ArithmeticType] _Imaginary float
#   48|               ValueCategory = prvalue(load)
#   48|           1: [VariableAccess] f2
#   48|               Type = [FloatType] float
#   48|               ValueCategory = prvalue(load)
#   49|     24: [ExprStmt] ExprStmt
#   49|       0: [AssignExpr] ... = ...
#   49|           Type = [ArithmeticType] _Imaginary float
#   49|           ValueCategory = prvalue
#   49|         0: [VariableAccess] jf3
#   49|             Type = [ArithmeticType] _Imaginary float
#   49|             ValueCategory = lvalue
#   49|         1: [DivExpr] ... / ...
#   49|             Type = [ArithmeticType] _Imaginary float
#   49|             ValueCategory = prvalue
#   49|           0: [VariableAccess] jf1
#   49|               Type = [ArithmeticType] _Imaginary float
#   49|               ValueCategory = prvalue(load)
#   49|           1: [VariableAccess] f2
#   49|               Type = [FloatType] float
#   49|               ValueCategory = prvalue(load)
#   52|     25: [ExprStmt] ExprStmt
#   52|       0: [AssignExpr] ... = ...
#   52|           Type = [ArithmeticType] _Complex float
#   52|           ValueCategory = prvalue
#   52|         0: [VariableAccess] cf3
#   52|             Type = [ArithmeticType] _Complex float
#   52|             ValueCategory = lvalue
#   52|         1: [RealImaginaryAddExpr] ... + ...
#   52|             Type = [ArithmeticType] _Complex float
#   52|             ValueCategory = prvalue
#   52|           0: [VariableAccess] f1
#   52|               Type = [FloatType] float
#   52|               ValueCategory = prvalue(load)
#   52|           1: [VariableAccess] jf2
#   52|               Type = [ArithmeticType] _Imaginary float
#   52|               ValueCategory = prvalue(load)
#   53|     26: [ExprStmt] ExprStmt
#   53|       0: [AssignExpr] ... = ...
#   53|           Type = [ArithmeticType] _Complex float
#   53|           ValueCategory = prvalue
#   53|         0: [VariableAccess] cf3
#   53|             Type = [ArithmeticType] _Complex float
#   53|             ValueCategory = lvalue
#   53|         1: [RealImaginarySubExpr] ... - ...
#   53|             Type = [ArithmeticType] _Complex float
#   53|             ValueCategory = prvalue
#   53|           0: [VariableAccess] f1
#   53|               Type = [FloatType] float
#   53|               ValueCategory = prvalue(load)
#   53|           1: [VariableAccess] jf2
#   53|               Type = [ArithmeticType] _Imaginary float
#   53|               ValueCategory = prvalue(load)
#   54|     27: [ExprStmt] ExprStmt
#   54|       0: [AssignExpr] ... = ...
#   54|           Type = [ArithmeticType] _Imaginary float
#   54|           ValueCategory = prvalue
#   54|         0: [VariableAccess] jf3
#   54|             Type = [ArithmeticType] _Imaginary float
#   54|             ValueCategory = lvalue
#   54|         1: [MulExpr] ... * ...
#   54|             Type = [ArithmeticType] _Imaginary float
#   54|             ValueCategory = prvalue
#   54|           0: [VariableAccess] f1
#   54|               Type = [FloatType] float
#   54|               ValueCategory = prvalue(load)
#   54|           1: [VariableAccess] jf2
#   54|               Type = [ArithmeticType] _Imaginary float
#   54|               ValueCategory = prvalue(load)
#   55|     28: [ExprStmt] ExprStmt
#   55|       0: [AssignExpr] ... = ...
#   55|           Type = [ArithmeticType] _Imaginary float
#   55|           ValueCategory = prvalue
#   55|         0: [VariableAccess] jf3
#   55|             Type = [ArithmeticType] _Imaginary float
#   55|             ValueCategory = lvalue
#   55|         1: [ImaginaryDivExpr] ... / ...
#   55|             Type = [ArithmeticType] _Imaginary float
#   55|             ValueCategory = prvalue
#   55|           0: [VariableAccess] f1
#   55|               Type = [FloatType] float
#   55|               ValueCategory = prvalue(load)
#   55|           1: [VariableAccess] jf2
#   55|               Type = [ArithmeticType] _Imaginary float
#   55|               ValueCategory = prvalue(load)
#   56|     29: [ReturnStmt] return ...
#   58| [TopLevelFunction] void complex_conversions()
#   58|   params: 
#   58|   body: [Block] { ... }
#   59|     0: [DeclStmt] declaration
#   59|       0: [VariableDeclarationEntry] definition of f
#   59|           Type = [FloatType] float
#   59|         init: [Initializer] initializer for f
#   59|           expr: [CStyleCast] (float)...
#   59|               Conversion = [FloatingPointConversion] floating point conversion
#   59|               Type = [FloatType] float
#   59|               Value = [CStyleCast] 2.0
#   59|               ValueCategory = prvalue
#   59|             expr: [Literal] 2.0
#   59|                 Type = [DoubleType] double
#   59|                 Value = [Literal] 2.0
#   59|                 ValueCategory = prvalue
#   60|     1: [DeclStmt] declaration
#   60|       0: [VariableDeclarationEntry] definition of d
#   60|           Type = [DoubleType] double
#   60|         init: [Initializer] initializer for d
#   60|           expr: [Literal] 3.0
#   60|               Type = [DoubleType] double
#   60|               Value = [Literal] 3.0
#   60|               ValueCategory = prvalue
#   61|     2: [DeclStmt] declaration
#   61|       0: [VariableDeclarationEntry] definition of ld
#   61|           Type = [LongDoubleType] long double
#   61|         init: [Initializer] initializer for ld
#   61|           expr: [CStyleCast] (long double)...
#   61|               Conversion = [FloatingPointConversion] floating point conversion
#   61|               Type = [LongDoubleType] long double
#   61|               Value = [CStyleCast] 5.0
#   61|               ValueCategory = prvalue
#   61|             expr: [Literal] 5.0
#   61|                 Type = [DoubleType] double
#   61|                 Value = [Literal] 5.0
#   61|                 ValueCategory = prvalue
#   62|     3: [DeclStmt] declaration
#   62|       0: [VariableDeclarationEntry] definition of cf
#   62|           Type = [ArithmeticType] _Complex float
#   62|         init: [Initializer] initializer for cf
#   62|           expr: [CStyleCast] (_Complex float)...
#   62|               Conversion = [FloatingPointConversion] floating point conversion
#   62|               Type = [ArithmeticType] _Complex float
#   62|               ValueCategory = prvalue
#   62|             expr: [Literal] 7.0
#   62|                 Type = [DoubleType] double
#   62|                 Value = [Literal] 7.0
#   62|                 ValueCategory = prvalue
#   63|     4: [DeclStmt] declaration
#   63|       0: [VariableDeclarationEntry] definition of cd
#   63|           Type = [ArithmeticType] _Complex double
#   63|         init: [Initializer] initializer for cd
#   63|           expr: [CStyleCast] (_Complex double)...
#   63|               Conversion = [FloatingPointConversion] floating point conversion
#   63|               Type = [ArithmeticType] _Complex double
#   63|               ValueCategory = prvalue
#   63|             expr: [Literal] 11.0
#   63|                 Type = [DoubleType] double
#   63|                 Value = [Literal] 11.0
#   63|                 ValueCategory = prvalue
#   64|     5: [DeclStmt] declaration
#   64|       0: [VariableDeclarationEntry] definition of cld
#   64|           Type = [ArithmeticType] _Complex long double
#   64|         init: [Initializer] initializer for cld
#   64|           expr: [CStyleCast] (_Complex long double)...
#   64|               Conversion = [FloatingPointConversion] floating point conversion
#   64|               Type = [ArithmeticType] _Complex long double
#   64|               ValueCategory = prvalue
#   64|             expr: [Literal] 13.0
#   64|                 Type = [DoubleType] double
#   64|                 Value = [Literal] 13.0
#   64|                 ValueCategory = prvalue
#   65|     6: [DeclStmt] declaration
#   65|       0: [VariableDeclarationEntry] definition of jf
#   65|           Type = [ArithmeticType] _Imaginary float
#   65|         init: [Initializer] initializer for jf
#   65|           expr: [Literal] 1.0i
#   65|               Type = [ArithmeticType] _Imaginary float
#   65|               Value = [Literal] 1.0i
#   65|               ValueCategory = prvalue
#   66|     7: [DeclStmt] declaration
#   66|       0: [VariableDeclarationEntry] definition of jd
#   66|           Type = [ArithmeticType] _Imaginary double
#   66|         init: [Initializer] initializer for jd
#   66|           expr: [CStyleCast] (_Imaginary double)...
#   66|               Conversion = [FloatingPointConversion] floating point conversion
#   66|               Type = [ArithmeticType] _Imaginary double
#   66|               ValueCategory = prvalue
#   66|             expr: [Literal] 1.0i
#   66|                 Type = [ArithmeticType] _Imaginary float
#   66|                 Value = [Literal] 1.0i
#   66|                 ValueCategory = prvalue
#   67|     8: [DeclStmt] declaration
#   67|       0: [VariableDeclarationEntry] definition of jld
#   67|           Type = [ArithmeticType] _Imaginary long double
#   67|         init: [Initializer] initializer for jld
#   67|           expr: [CStyleCast] (_Imaginary long double)...
#   67|               Conversion = [FloatingPointConversion] floating point conversion
#   67|               Type = [ArithmeticType] _Imaginary long double
#   67|               ValueCategory = prvalue
#   67|             expr: [Literal] 1.0i
#   67|                 Type = [ArithmeticType] _Imaginary float
#   67|                 Value = [Literal] 1.0i
#   67|                 ValueCategory = prvalue
#   70|     9: [ExprStmt] ExprStmt
#   70|       0: [AssignExpr] ... = ...
#   70|           Type = [ArithmeticType] _Complex float
#   70|           ValueCategory = prvalue
#   70|         0: [VariableAccess] cf
#   70|             Type = [ArithmeticType] _Complex float
#   70|             ValueCategory = lvalue
#   70|         1: [VariableAccess] cf
#   70|             Type = [ArithmeticType] _Complex float
#   70|             ValueCategory = prvalue(load)
#   71|     10: [ExprStmt] ExprStmt
#   71|       0: [AssignExpr] ... = ...
#   71|           Type = [ArithmeticType] _Complex float
#   71|           ValueCategory = prvalue
#   71|         0: [VariableAccess] cf
#   71|             Type = [ArithmeticType] _Complex float
#   71|             ValueCategory = lvalue
#   71|         1: [CStyleCast] (_Complex float)...
#   71|             Conversion = [FloatingPointConversion] floating point conversion
#   71|             Type = [ArithmeticType] _Complex float
#   71|             ValueCategory = prvalue
#   71|           expr: [VariableAccess] cd
#   71|               Type = [ArithmeticType] _Complex double
#   71|               ValueCategory = prvalue(load)
#   72|     11: [ExprStmt] ExprStmt
#   72|       0: [AssignExpr] ... = ...
#   72|           Type = [ArithmeticType] _Complex float
#   72|           ValueCategory = prvalue
#   72|         0: [VariableAccess] cf
#   72|             Type = [ArithmeticType] _Complex float
#   72|             ValueCategory = lvalue
#   72|         1: [CStyleCast] (_Complex float)...
#   72|             Conversion = [FloatingPointConversion] floating point conversion
#   72|             Type = [ArithmeticType] _Complex float
#   72|             ValueCategory = prvalue
#   72|           expr: [VariableAccess] cld
#   72|               Type = [ArithmeticType] _Complex long double
#   72|               ValueCategory = prvalue(load)
#   73|     12: [ExprStmt] ExprStmt
#   73|       0: [AssignExpr] ... = ...
#   73|           Type = [ArithmeticType] _Complex double
#   73|           ValueCategory = prvalue
#   73|         0: [VariableAccess] cd
#   73|             Type = [ArithmeticType] _Complex double
#   73|             ValueCategory = lvalue
#   73|         1: [CStyleCast] (_Complex double)...
#   73|             Conversion = [FloatingPointConversion] floating point conversion
#   73|             Type = [ArithmeticType] _Complex double
#   73|             ValueCategory = prvalue
#   73|           expr: [VariableAccess] cf
#   73|               Type = [ArithmeticType] _Complex float
#   73|               ValueCategory = prvalue(load)
#   74|     13: [ExprStmt] ExprStmt
#   74|       0: [AssignExpr] ... = ...
#   74|           Type = [ArithmeticType] _Complex double
#   74|           ValueCategory = prvalue
#   74|         0: [VariableAccess] cd
#   74|             Type = [ArithmeticType] _Complex double
#   74|             ValueCategory = lvalue
#   74|         1: [VariableAccess] cd
#   74|             Type = [ArithmeticType] _Complex double
#   74|             ValueCategory = prvalue(load)
#   75|     14: [ExprStmt] ExprStmt
#   75|       0: [AssignExpr] ... = ...
#   75|           Type = [ArithmeticType] _Complex double
#   75|           ValueCategory = prvalue
#   75|         0: [VariableAccess] cd
#   75|             Type = [ArithmeticType] _Complex double
#   75|             ValueCategory = lvalue
#   75|         1: [CStyleCast] (_Complex double)...
#   75|             Conversion = [FloatingPointConversion] floating point conversion
#   75|             Type = [ArithmeticType] _Complex double
#   75|             ValueCategory = prvalue
#   75|           expr: [VariableAccess] cld
#   75|               Type = [ArithmeticType] _Complex long double
#   75|               ValueCategory = prvalue(load)
#   76|     15: [ExprStmt] ExprStmt
#   76|       0: [AssignExpr] ... = ...
#   76|           Type = [ArithmeticType] _Complex long double
#   76|           ValueCategory = prvalue
#   76|         0: [VariableAccess] cld
#   76|             Type = [ArithmeticType] _Complex long double
#   76|             ValueCategory = lvalue
#   76|         1: [CStyleCast] (_Complex long double)...
#   76|             Conversion = [FloatingPointConversion] floating point conversion
#   76|             Type = [ArithmeticType] _Complex long double
#   76|             ValueCategory = prvalue
#   76|           expr: [VariableAccess] cf
#   76|               Type = [ArithmeticType] _Complex float
#   76|               ValueCategory = prvalue(load)
#   77|     16: [ExprStmt] ExprStmt
#   77|       0: [AssignExpr] ... = ...
#   77|           Type = [ArithmeticType] _Complex long double
#   77|           ValueCategory = prvalue
#   77|         0: [VariableAccess] cld
#   77|             Type = [ArithmeticType] _Complex long double
#   77|             ValueCategory = lvalue
#   77|         1: [CStyleCast] (_Complex long double)...
#   77|             Conversion = [FloatingPointConversion] floating point conversion
#   77|             Type = [ArithmeticType] _Complex long double
#   77|             ValueCategory = prvalue
#   77|           expr: [VariableAccess] cd
#   77|               Type = [ArithmeticType] _Complex double
#   77|               ValueCategory = prvalue(load)
#   78|     17: [ExprStmt] ExprStmt
#   78|       0: [AssignExpr] ... = ...
#   78|           Type = [ArithmeticType] _Complex long double
#   78|           ValueCategory = prvalue
#   78|         0: [VariableAccess] cld
#   78|             Type = [ArithmeticType] _Complex long double
#   78|             ValueCategory = lvalue
#   78|         1: [VariableAccess] cld
#   78|             Type = [ArithmeticType] _Complex long double
#   78|             ValueCategory = prvalue(load)
#   81|     18: [ExprStmt] ExprStmt
#   81|       0: [AssignExpr] ... = ...
#   81|           Type = [ArithmeticType] _Complex float
#   81|           ValueCategory = prvalue
#   81|         0: [VariableAccess] cf
#   81|             Type = [ArithmeticType] _Complex float
#   81|             ValueCategory = lvalue
#   81|         1: [CStyleCast] (_Complex float)...
#   81|             Conversion = [FloatingPointConversion] floating point conversion
#   81|             Type = [ArithmeticType] _Complex float
#   81|             ValueCategory = prvalue
#   81|           expr: [VariableAccess] f
#   81|               Type = [FloatType] float
#   81|               ValueCategory = prvalue(load)
#   82|     19: [ExprStmt] ExprStmt
#   82|       0: [AssignExpr] ... = ...
#   82|           Type = [ArithmeticType] _Complex float
#   82|           ValueCategory = prvalue
#   82|         0: [VariableAccess] cf
#   82|             Type = [ArithmeticType] _Complex float
#   82|             ValueCategory = lvalue
#   82|         1: [CStyleCast] (_Complex float)...
#   82|             Conversion = [FloatingPointConversion] floating point conversion
#   82|             Type = [ArithmeticType] _Complex float
#   82|             ValueCategory = prvalue
#   82|           expr: [VariableAccess] d
#   82|               Type = [DoubleType] double
#   82|               ValueCategory = prvalue(load)
#   83|     20: [ExprStmt] ExprStmt
#   83|       0: [AssignExpr] ... = ...
#   83|           Type = [ArithmeticType] _Complex float
#   83|           ValueCategory = prvalue
#   83|         0: [VariableAccess] cf
#   83|             Type = [ArithmeticType] _Complex float
#   83|             ValueCategory = lvalue
#   83|         1: [CStyleCast] (_Complex float)...
#   83|             Conversion = [FloatingPointConversion] floating point conversion
#   83|             Type = [ArithmeticType] _Complex float
#   83|             ValueCategory = prvalue
#   83|           expr: [VariableAccess] ld
#   83|               Type = [LongDoubleType] long double
#   83|               ValueCategory = prvalue(load)
#   84|     21: [ExprStmt] ExprStmt
#   84|       0: [AssignExpr] ... = ...
#   84|           Type = [ArithmeticType] _Complex double
#   84|           ValueCategory = prvalue
#   84|         0: [VariableAccess] cd
#   84|             Type = [ArithmeticType] _Complex double
#   84|             ValueCategory = lvalue
#   84|         1: [CStyleCast] (_Complex double)...
#   84|             Conversion = [FloatingPointConversion] floating point conversion
#   84|             Type = [ArithmeticType] _Complex double
#   84|             ValueCategory = prvalue
#   84|           expr: [VariableAccess] f
#   84|               Type = [FloatType] float
#   84|               ValueCategory = prvalue(load)
#   85|     22: [ExprStmt] ExprStmt
#   85|       0: [AssignExpr] ... = ...
#   85|           Type = [ArithmeticType] _Complex double
#   85|           ValueCategory = prvalue
#   85|         0: [VariableAccess] cd
#   85|             Type = [ArithmeticType] _Complex double
#   85|             ValueCategory = lvalue
#   85|         1: [CStyleCast] (_Complex double)...
#   85|             Conversion = [FloatingPointConversion] floating point conversion
#   85|             Type = [ArithmeticType] _Complex double
#   85|             ValueCategory = prvalue
#   85|           expr: [VariableAccess] d
#   85|               Type = [DoubleType] double
#   85|               ValueCategory = prvalue(load)
#   86|     23: [ExprStmt] ExprStmt
#   86|       0: [AssignExpr] ... = ...
#   86|           Type = [ArithmeticType] _Complex double
#   86|           ValueCategory = prvalue
#   86|         0: [VariableAccess] cd
#   86|             Type = [ArithmeticType] _Complex double
#   86|             ValueCategory = lvalue
#   86|         1: [CStyleCast] (_Complex double)...
#   86|             Conversion = [FloatingPointConversion] floating point conversion
#   86|             Type = [ArithmeticType] _Complex double
#   86|             ValueCategory = prvalue
#   86|           expr: [VariableAccess] ld
#   86|               Type = [LongDoubleType] long double
#   86|               ValueCategory = prvalue(load)
#   87|     24: [ExprStmt] ExprStmt
#   87|       0: [AssignExpr] ... = ...
#   87|           Type = [ArithmeticType] _Complex long double
#   87|           ValueCategory = prvalue
#   87|         0: [VariableAccess] cld
#   87|             Type = [ArithmeticType] _Complex long double
#   87|             ValueCategory = lvalue
#   87|         1: [CStyleCast] (_Complex long double)...
#   87|             Conversion = [FloatingPointConversion] floating point conversion
#   87|             Type = [ArithmeticType] _Complex long double
#   87|             ValueCategory = prvalue
#   87|           expr: [VariableAccess] f
#   87|               Type = [FloatType] float
#   87|               ValueCategory = prvalue(load)
#   88|     25: [ExprStmt] ExprStmt
#   88|       0: [AssignExpr] ... = ...
#   88|           Type = [ArithmeticType] _Complex long double
#   88|           ValueCategory = prvalue
#   88|         0: [VariableAccess] cld
#   88|             Type = [ArithmeticType] _Complex long double
#   88|             ValueCategory = lvalue
#   88|         1: [CStyleCast] (_Complex long double)...
#   88|             Conversion = [FloatingPointConversion] floating point conversion
#   88|             Type = [ArithmeticType] _Complex long double
#   88|             ValueCategory = prvalue
#   88|           expr: [VariableAccess] d
#   88|               Type = [DoubleType] double
#   88|               ValueCategory = prvalue(load)
#   89|     26: [ExprStmt] ExprStmt
#   89|       0: [AssignExpr] ... = ...
#   89|           Type = [ArithmeticType] _Complex long double
#   89|           ValueCategory = prvalue
#   89|         0: [VariableAccess] cld
#   89|             Type = [ArithmeticType] _Complex long double
#   89|             ValueCategory = lvalue
#   89|         1: [CStyleCast] (_Complex long double)...
#   89|             Conversion = [FloatingPointConversion] floating point conversion
#   89|             Type = [ArithmeticType] _Complex long double
#   89|             ValueCategory = prvalue
#   89|           expr: [VariableAccess] ld
#   89|               Type = [LongDoubleType] long double
#   89|               ValueCategory = prvalue(load)
#   92|     27: [ExprStmt] ExprStmt
#   92|       0: [AssignExpr] ... = ...
#   92|           Type = [FloatType] float
#   92|           ValueCategory = prvalue
#   92|         0: [VariableAccess] f
#   92|             Type = [FloatType] float
#   92|             ValueCategory = lvalue
#   92|         1: [CStyleCast] (float)...
#   92|             Conversion = [FloatingPointConversion] floating point conversion
#   92|             Type = [FloatType] float
#   92|             ValueCategory = prvalue
#   92|           expr: [VariableAccess] cf
#   92|               Type = [ArithmeticType] _Complex float
#   92|               ValueCategory = prvalue(load)
#   93|     28: [ExprStmt] ExprStmt
#   93|       0: [AssignExpr] ... = ...
#   93|           Type = [FloatType] float
#   93|           ValueCategory = prvalue
#   93|         0: [VariableAccess] f
#   93|             Type = [FloatType] float
#   93|             ValueCategory = lvalue
#   93|         1: [CStyleCast] (float)...
#   93|             Conversion = [FloatingPointConversion] floating point conversion
#   93|             Type = [FloatType] float
#   93|             ValueCategory = prvalue
#   93|           expr: [VariableAccess] cd
#   93|               Type = [ArithmeticType] _Complex double
#   93|               ValueCategory = prvalue(load)
#   94|     29: [ExprStmt] ExprStmt
#   94|       0: [AssignExpr] ... = ...
#   94|           Type = [FloatType] float
#   94|           ValueCategory = prvalue
#   94|         0: [VariableAccess] f
#   94|             Type = [FloatType] float
#   94|             ValueCategory = lvalue
#   94|         1: [CStyleCast] (float)...
#   94|             Conversion = [FloatingPointConversion] floating point conversion
#   94|             Type = [FloatType] float
#   94|             ValueCategory = prvalue
#   94|           expr: [VariableAccess] cld
#   94|               Type = [ArithmeticType] _Complex long double
#   94|               ValueCategory = prvalue(load)
#   95|     30: [ExprStmt] ExprStmt
#   95|       0: [AssignExpr] ... = ...
#   95|           Type = [DoubleType] double
#   95|           ValueCategory = prvalue
#   95|         0: [VariableAccess] d
#   95|             Type = [DoubleType] double
#   95|             ValueCategory = lvalue
#   95|         1: [CStyleCast] (double)...
#   95|             Conversion = [FloatingPointConversion] floating point conversion
#   95|             Type = [DoubleType] double
#   95|             ValueCategory = prvalue
#   95|           expr: [VariableAccess] cf
#   95|               Type = [ArithmeticType] _Complex float
#   95|               ValueCategory = prvalue(load)
#   96|     31: [ExprStmt] ExprStmt
#   96|       0: [AssignExpr] ... = ...
#   96|           Type = [DoubleType] double
#   96|           ValueCategory = prvalue
#   96|         0: [VariableAccess] d
#   96|             Type = [DoubleType] double
#   96|             ValueCategory = lvalue
#   96|         1: [CStyleCast] (double)...
#   96|             Conversion = [FloatingPointConversion] floating point conversion
#   96|             Type = [DoubleType] double
#   96|             ValueCategory = prvalue
#   96|           expr: [VariableAccess] cd
#   96|               Type = [ArithmeticType] _Complex double
#   96|               ValueCategory = prvalue(load)
#   97|     32: [ExprStmt] ExprStmt
#   97|       0: [AssignExpr] ... = ...
#   97|           Type = [DoubleType] double
#   97|           ValueCategory = prvalue
#   97|         0: [VariableAccess] d
#   97|             Type = [DoubleType] double
#   97|             ValueCategory = lvalue
#   97|         1: [CStyleCast] (double)...
#   97|             Conversion = [FloatingPointConversion] floating point conversion
#   97|             Type = [DoubleType] double
#   97|             ValueCategory = prvalue
#   97|           expr: [VariableAccess] cld
#   97|               Type = [ArithmeticType] _Complex long double
#   97|               ValueCategory = prvalue(load)
#   98|     33: [ExprStmt] ExprStmt
#   98|       0: [AssignExpr] ... = ...
#   98|           Type = [LongDoubleType] long double
#   98|           ValueCategory = prvalue
#   98|         0: [VariableAccess] ld
#   98|             Type = [LongDoubleType] long double
#   98|             ValueCategory = lvalue
#   98|         1: [CStyleCast] (long double)...
#   98|             Conversion = [FloatingPointConversion] floating point conversion
#   98|             Type = [LongDoubleType] long double
#   98|             ValueCategory = prvalue
#   98|           expr: [VariableAccess] cf
#   98|               Type = [ArithmeticType] _Complex float
#   98|               ValueCategory = prvalue(load)
#   99|     34: [ExprStmt] ExprStmt
#   99|       0: [AssignExpr] ... = ...
#   99|           Type = [LongDoubleType] long double
#   99|           ValueCategory = prvalue
#   99|         0: [VariableAccess] ld
#   99|             Type = [LongDoubleType] long double
#   99|             ValueCategory = lvalue
#   99|         1: [CStyleCast] (long double)...
#   99|             Conversion = [FloatingPointConversion] floating point conversion
#   99|             Type = [LongDoubleType] long double
#   99|             ValueCategory = prvalue
#   99|           expr: [VariableAccess] cd
#   99|               Type = [ArithmeticType] _Complex double
#   99|               ValueCategory = prvalue(load)
#  100|     35: [ExprStmt] ExprStmt
#  100|       0: [AssignExpr] ... = ...
#  100|           Type = [LongDoubleType] long double
#  100|           ValueCategory = prvalue
#  100|         0: [VariableAccess] ld
#  100|             Type = [LongDoubleType] long double
#  100|             ValueCategory = lvalue
#  100|         1: [CStyleCast] (long double)...
#  100|             Conversion = [FloatingPointConversion] floating point conversion
#  100|             Type = [LongDoubleType] long double
#  100|             ValueCategory = prvalue
#  100|           expr: [VariableAccess] cld
#  100|               Type = [ArithmeticType] _Complex long double
#  100|               ValueCategory = prvalue(load)
#  103|     36: [ExprStmt] ExprStmt
#  103|       0: [AssignExpr] ... = ...
#  103|           Type = [ArithmeticType] _Complex float
#  103|           ValueCategory = prvalue
#  103|         0: [VariableAccess] cf
#  103|             Type = [ArithmeticType] _Complex float
#  103|             ValueCategory = lvalue
#  103|         1: [CStyleCast] (_Complex float)...
#  103|             Conversion = [FloatingPointConversion] floating point conversion
#  103|             Type = [ArithmeticType] _Complex float
#  103|             ValueCategory = prvalue
#  103|           expr: [VariableAccess] jf
#  103|               Type = [ArithmeticType] _Imaginary float
#  103|               ValueCategory = prvalue(load)
#  104|     37: [ExprStmt] ExprStmt
#  104|       0: [AssignExpr] ... = ...
#  104|           Type = [ArithmeticType] _Complex float
#  104|           ValueCategory = prvalue
#  104|         0: [VariableAccess] cf
#  104|             Type = [ArithmeticType] _Complex float
#  104|             ValueCategory = lvalue
#  104|         1: [CStyleCast] (_Complex float)...
#  104|             Conversion = [FloatingPointConversion] floating point conversion
#  104|             Type = [ArithmeticType] _Complex float
#  104|             ValueCategory = prvalue
#  104|           expr: [VariableAccess] jd
#  104|               Type = [ArithmeticType] _Imaginary double
#  104|               ValueCategory = prvalue(load)
#  105|     38: [ExprStmt] ExprStmt
#  105|       0: [AssignExpr] ... = ...
#  105|           Type = [ArithmeticType] _Complex float
#  105|           ValueCategory = prvalue
#  105|         0: [VariableAccess] cf
#  105|             Type = [ArithmeticType] _Complex float
#  105|             ValueCategory = lvalue
#  105|         1: [CStyleCast] (_Complex float)...
#  105|             Conversion = [FloatingPointConversion] floating point conversion
#  105|             Type = [ArithmeticType] _Complex float
#  105|             ValueCategory = prvalue
#  105|           expr: [VariableAccess] jld
#  105|               Type = [ArithmeticType] _Imaginary long double
#  105|               ValueCategory = prvalue(load)
#  106|     39: [ExprStmt] ExprStmt
#  106|       0: [AssignExpr] ... = ...
#  106|           Type = [ArithmeticType] _Complex double
#  106|           ValueCategory = prvalue
#  106|         0: [VariableAccess] cd
#  106|             Type = [ArithmeticType] _Complex double
#  106|             ValueCategory = lvalue
#  106|         1: [CStyleCast] (_Complex double)...
#  106|             Conversion = [FloatingPointConversion] floating point conversion
#  106|             Type = [ArithmeticType] _Complex double
#  106|             ValueCategory = prvalue
#  106|           expr: [VariableAccess] jf
#  106|               Type = [ArithmeticType] _Imaginary float
#  106|               ValueCategory = prvalue(load)
#  107|     40: [ExprStmt] ExprStmt
#  107|       0: [AssignExpr] ... = ...
#  107|           Type = [ArithmeticType] _Complex double
#  107|           ValueCategory = prvalue
#  107|         0: [VariableAccess] cd
#  107|             Type = [ArithmeticType] _Complex double
#  107|             ValueCategory = lvalue
#  107|         1: [CStyleCast] (_Complex double)...
#  107|             Conversion = [FloatingPointConversion] floating point conversion
#  107|             Type = [ArithmeticType] _Complex double
#  107|             ValueCategory = prvalue
#  107|           expr: [VariableAccess] jd
#  107|               Type = [ArithmeticType] _Imaginary double
#  107|               ValueCategory = prvalue(load)
#  108|     41: [ExprStmt] ExprStmt
#  108|       0: [AssignExpr] ... = ...
#  108|           Type = [ArithmeticType] _Complex double
#  108|           ValueCategory = prvalue
#  108|         0: [VariableAccess] cd
#  108|             Type = [ArithmeticType] _Complex double
#  108|             ValueCategory = lvalue
#  108|         1: [CStyleCast] (_Complex double)...
#  108|             Conversion = [FloatingPointConversion] floating point conversion
#  108|             Type = [ArithmeticType] _Complex double
#  108|             ValueCategory = prvalue
#  108|           expr: [VariableAccess] jld
#  108|               Type = [ArithmeticType] _Imaginary long double
#  108|               ValueCategory = prvalue(load)
#  109|     42: [ExprStmt] ExprStmt
#  109|       0: [AssignExpr] ... = ...
#  109|           Type = [ArithmeticType] _Complex long double
#  109|           ValueCategory = prvalue
#  109|         0: [VariableAccess] cld
#  109|             Type = [ArithmeticType] _Complex long double
#  109|             ValueCategory = lvalue
#  109|         1: [CStyleCast] (_Complex long double)...
#  109|             Conversion = [FloatingPointConversion] floating point conversion
#  109|             Type = [ArithmeticType] _Complex long double
#  109|             ValueCategory = prvalue
#  109|           expr: [VariableAccess] jf
#  109|               Type = [ArithmeticType] _Imaginary float
#  109|               ValueCategory = prvalue(load)
#  110|     43: [ExprStmt] ExprStmt
#  110|       0: [AssignExpr] ... = ...
#  110|           Type = [ArithmeticType] _Complex long double
#  110|           ValueCategory = prvalue
#  110|         0: [VariableAccess] cld
#  110|             Type = [ArithmeticType] _Complex long double
#  110|             ValueCategory = lvalue
#  110|         1: [CStyleCast] (_Complex long double)...
#  110|             Conversion = [FloatingPointConversion] floating point conversion
#  110|             Type = [ArithmeticType] _Complex long double
#  110|             ValueCategory = prvalue
#  110|           expr: [VariableAccess] jd
#  110|               Type = [ArithmeticType] _Imaginary double
#  110|               ValueCategory = prvalue(load)
#  111|     44: [ExprStmt] ExprStmt
#  111|       0: [AssignExpr] ... = ...
#  111|           Type = [ArithmeticType] _Complex long double
#  111|           ValueCategory = prvalue
#  111|         0: [VariableAccess] cld
#  111|             Type = [ArithmeticType] _Complex long double
#  111|             ValueCategory = lvalue
#  111|         1: [CStyleCast] (_Complex long double)...
#  111|             Conversion = [FloatingPointConversion] floating point conversion
#  111|             Type = [ArithmeticType] _Complex long double
#  111|             ValueCategory = prvalue
#  111|           expr: [VariableAccess] jld
#  111|               Type = [ArithmeticType] _Imaginary long double
#  111|               ValueCategory = prvalue(load)
#  114|     45: [ExprStmt] ExprStmt
#  114|       0: [AssignExpr] ... = ...
#  114|           Type = [ArithmeticType] _Imaginary float
#  114|           ValueCategory = prvalue
#  114|         0: [VariableAccess] jf
#  114|             Type = [ArithmeticType] _Imaginary float
#  114|             ValueCategory = lvalue
#  114|         1: [CStyleCast] (_Imaginary float)...
#  114|             Conversion = [FloatingPointConversion] floating point conversion
#  114|             Type = [ArithmeticType] _Imaginary float
#  114|             ValueCategory = prvalue
#  114|           expr: [VariableAccess] cf
#  114|               Type = [ArithmeticType] _Complex float
#  114|               ValueCategory = prvalue(load)
#  115|     46: [ExprStmt] ExprStmt
#  115|       0: [AssignExpr] ... = ...
#  115|           Type = [ArithmeticType] _Imaginary float
#  115|           ValueCategory = prvalue
#  115|         0: [VariableAccess] jf
#  115|             Type = [ArithmeticType] _Imaginary float
#  115|             ValueCategory = lvalue
#  115|         1: [CStyleCast] (_Imaginary float)...
#  115|             Conversion = [FloatingPointConversion] floating point conversion
#  115|             Type = [ArithmeticType] _Imaginary float
#  115|             ValueCategory = prvalue
#  115|           expr: [VariableAccess] cd
#  115|               Type = [ArithmeticType] _Complex double
#  115|               ValueCategory = prvalue(load)
#  116|     47: [ExprStmt] ExprStmt
#  116|       0: [AssignExpr] ... = ...
#  116|           Type = [ArithmeticType] _Imaginary float
#  116|           ValueCategory = prvalue
#  116|         0: [VariableAccess] jf
#  116|             Type = [ArithmeticType] _Imaginary float
#  116|             ValueCategory = lvalue
#  116|         1: [CStyleCast] (_Imaginary float)...
#  116|             Conversion = [FloatingPointConversion] floating point conversion
#  116|             Type = [ArithmeticType] _Imaginary float
#  116|             ValueCategory = prvalue
#  116|           expr: [VariableAccess] cld
#  116|               Type = [ArithmeticType] _Complex long double
#  116|               ValueCategory = prvalue(load)
#  117|     48: [ExprStmt] ExprStmt
#  117|       0: [AssignExpr] ... = ...
#  117|           Type = [ArithmeticType] _Imaginary double
#  117|           ValueCategory = prvalue
#  117|         0: [VariableAccess] jd
#  117|             Type = [ArithmeticType] _Imaginary double
#  117|             ValueCategory = lvalue
#  117|         1: [CStyleCast] (_Imaginary double)...
#  117|             Conversion = [FloatingPointConversion] floating point conversion
#  117|             Type = [ArithmeticType] _Imaginary double
#  117|             ValueCategory = prvalue
#  117|           expr: [VariableAccess] cf
#  117|               Type = [ArithmeticType] _Complex float
#  117|               ValueCategory = prvalue(load)
#  118|     49: [ExprStmt] ExprStmt
#  118|       0: [AssignExpr] ... = ...
#  118|           Type = [ArithmeticType] _Imaginary double
#  118|           ValueCategory = prvalue
#  118|         0: [VariableAccess] jd
#  118|             Type = [ArithmeticType] _Imaginary double
#  118|             ValueCategory = lvalue
#  118|         1: [CStyleCast] (_Imaginary double)...
#  118|             Conversion = [FloatingPointConversion] floating point conversion
#  118|             Type = [ArithmeticType] _Imaginary double
#  118|             ValueCategory = prvalue
#  118|           expr: [VariableAccess] cd
#  118|               Type = [ArithmeticType] _Complex double
#  118|               ValueCategory = prvalue(load)
#  119|     50: [ExprStmt] ExprStmt
#  119|       0: [AssignExpr] ... = ...
#  119|           Type = [ArithmeticType] _Imaginary double
#  119|           ValueCategory = prvalue
#  119|         0: [VariableAccess] jd
#  119|             Type = [ArithmeticType] _Imaginary double
#  119|             ValueCategory = lvalue
#  119|         1: [CStyleCast] (_Imaginary double)...
#  119|             Conversion = [FloatingPointConversion] floating point conversion
#  119|             Type = [ArithmeticType] _Imaginary double
#  119|             ValueCategory = prvalue
#  119|           expr: [VariableAccess] cld
#  119|               Type = [ArithmeticType] _Complex long double
#  119|               ValueCategory = prvalue(load)
#  120|     51: [ExprStmt] ExprStmt
#  120|       0: [AssignExpr] ... = ...
#  120|           Type = [ArithmeticType] _Imaginary long double
#  120|           ValueCategory = prvalue
#  120|         0: [VariableAccess] jld
#  120|             Type = [ArithmeticType] _Imaginary long double
#  120|             ValueCategory = lvalue
#  120|         1: [CStyleCast] (_Imaginary long double)...
#  120|             Conversion = [FloatingPointConversion] floating point conversion
#  120|             Type = [ArithmeticType] _Imaginary long double
#  120|             ValueCategory = prvalue
#  120|           expr: [VariableAccess] cf
#  120|               Type = [ArithmeticType] _Complex float
#  120|               ValueCategory = prvalue(load)
#  121|     52: [ExprStmt] ExprStmt
#  121|       0: [AssignExpr] ... = ...
#  121|           Type = [ArithmeticType] _Imaginary long double
#  121|           ValueCategory = prvalue
#  121|         0: [VariableAccess] jld
#  121|             Type = [ArithmeticType] _Imaginary long double
#  121|             ValueCategory = lvalue
#  121|         1: [CStyleCast] (_Imaginary long double)...
#  121|             Conversion = [FloatingPointConversion] floating point conversion
#  121|             Type = [ArithmeticType] _Imaginary long double
#  121|             ValueCategory = prvalue
#  121|           expr: [VariableAccess] cd
#  121|               Type = [ArithmeticType] _Complex double
#  121|               ValueCategory = prvalue(load)
#  122|     53: [ExprStmt] ExprStmt
#  122|       0: [AssignExpr] ... = ...
#  122|           Type = [ArithmeticType] _Imaginary long double
#  122|           ValueCategory = prvalue
#  122|         0: [VariableAccess] jld
#  122|             Type = [ArithmeticType] _Imaginary long double
#  122|             ValueCategory = lvalue
#  122|         1: [CStyleCast] (_Imaginary long double)...
#  122|             Conversion = [FloatingPointConversion] floating point conversion
#  122|             Type = [ArithmeticType] _Imaginary long double
#  122|             ValueCategory = prvalue
#  122|           expr: [VariableAccess] cld
#  122|               Type = [ArithmeticType] _Complex long double
#  122|               ValueCategory = prvalue(load)
#  125|     54: [ExprStmt] ExprStmt
#  125|       0: [AssignExpr] ... = ...
#  125|           Type = [ArithmeticType] _Imaginary float
#  125|           ValueCategory = prvalue
#  125|         0: [VariableAccess] jf
#  125|             Type = [ArithmeticType] _Imaginary float
#  125|             ValueCategory = lvalue
#  125|         1: [CStyleCast] (_Imaginary float)...
#  125|             Conversion = [FloatingPointConversion] floating point conversion
#  125|             Type = [ArithmeticType] _Imaginary float
#  125|             ValueCategory = prvalue
#  125|           expr: [VariableAccess] f
#  125|               Type = [FloatType] float
#  125|               ValueCategory = prvalue(load)
#  126|     55: [ExprStmt] ExprStmt
#  126|       0: [AssignExpr] ... = ...
#  126|           Type = [ArithmeticType] _Imaginary float
#  126|           ValueCategory = prvalue
#  126|         0: [VariableAccess] jf
#  126|             Type = [ArithmeticType] _Imaginary float
#  126|             ValueCategory = lvalue
#  126|         1: [CStyleCast] (_Imaginary float)...
#  126|             Conversion = [FloatingPointConversion] floating point conversion
#  126|             Type = [ArithmeticType] _Imaginary float
#  126|             ValueCategory = prvalue
#  126|           expr: [VariableAccess] d
#  126|               Type = [DoubleType] double
#  126|               ValueCategory = prvalue(load)
#  127|     56: [ExprStmt] ExprStmt
#  127|       0: [AssignExpr] ... = ...
#  127|           Type = [ArithmeticType] _Imaginary float
#  127|           ValueCategory = prvalue
#  127|         0: [VariableAccess] jf
#  127|             Type = [ArithmeticType] _Imaginary float
#  127|             ValueCategory = lvalue
#  127|         1: [CStyleCast] (_Imaginary float)...
#  127|             Conversion = [FloatingPointConversion] floating point conversion
#  127|             Type = [ArithmeticType] _Imaginary float
#  127|             ValueCategory = prvalue
#  127|           expr: [VariableAccess] ld
#  127|               Type = [LongDoubleType] long double
#  127|               ValueCategory = prvalue(load)
#  128|     57: [ExprStmt] ExprStmt
#  128|       0: [AssignExpr] ... = ...
#  128|           Type = [ArithmeticType] _Imaginary double
#  128|           ValueCategory = prvalue
#  128|         0: [VariableAccess] jd
#  128|             Type = [ArithmeticType] _Imaginary double
#  128|             ValueCategory = lvalue
#  128|         1: [CStyleCast] (_Imaginary double)...
#  128|             Conversion = [FloatingPointConversion] floating point conversion
#  128|             Type = [ArithmeticType] _Imaginary double
#  128|             ValueCategory = prvalue
#  128|           expr: [VariableAccess] f
#  128|               Type = [FloatType] float
#  128|               ValueCategory = prvalue(load)
#  129|     58: [ExprStmt] ExprStmt
#  129|       0: [AssignExpr] ... = ...
#  129|           Type = [ArithmeticType] _Imaginary double
#  129|           ValueCategory = prvalue
#  129|         0: [VariableAccess] jd
#  129|             Type = [ArithmeticType] _Imaginary double
#  129|             ValueCategory = lvalue
#  129|         1: [CStyleCast] (_Imaginary double)...
#  129|             Conversion = [FloatingPointConversion] floating point conversion
#  129|             Type = [ArithmeticType] _Imaginary double
#  129|             ValueCategory = prvalue
#  129|           expr: [VariableAccess] d
#  129|               Type = [DoubleType] double
#  129|               ValueCategory = prvalue(load)
#  130|     59: [ExprStmt] ExprStmt
#  130|       0: [AssignExpr] ... = ...
#  130|           Type = [ArithmeticType] _Imaginary double
#  130|           ValueCategory = prvalue
#  130|         0: [VariableAccess] jd
#  130|             Type = [ArithmeticType] _Imaginary double
#  130|             ValueCategory = lvalue
#  130|         1: [CStyleCast] (_Imaginary double)...
#  130|             Conversion = [FloatingPointConversion] floating point conversion
#  130|             Type = [ArithmeticType] _Imaginary double
#  130|             ValueCategory = prvalue
#  130|           expr: [VariableAccess] ld
#  130|               Type = [LongDoubleType] long double
#  130|               ValueCategory = prvalue(load)
#  131|     60: [ExprStmt] ExprStmt
#  131|       0: [AssignExpr] ... = ...
#  131|           Type = [ArithmeticType] _Imaginary long double
#  131|           ValueCategory = prvalue
#  131|         0: [VariableAccess] jld
#  131|             Type = [ArithmeticType] _Imaginary long double
#  131|             ValueCategory = lvalue
#  131|         1: [CStyleCast] (_Imaginary long double)...
#  131|             Conversion = [FloatingPointConversion] floating point conversion
#  131|             Type = [ArithmeticType] _Imaginary long double
#  131|             ValueCategory = prvalue
#  131|           expr: [VariableAccess] f
#  131|               Type = [FloatType] float
#  131|               ValueCategory = prvalue(load)
#  132|     61: [ExprStmt] ExprStmt
#  132|       0: [AssignExpr] ... = ...
#  132|           Type = [ArithmeticType] _Imaginary long double
#  132|           ValueCategory = prvalue
#  132|         0: [VariableAccess] jld
#  132|             Type = [ArithmeticType] _Imaginary long double
#  132|             ValueCategory = lvalue
#  132|         1: [CStyleCast] (_Imaginary long double)...
#  132|             Conversion = [FloatingPointConversion] floating point conversion
#  132|             Type = [ArithmeticType] _Imaginary long double
#  132|             ValueCategory = prvalue
#  132|           expr: [VariableAccess] d
#  132|               Type = [DoubleType] double
#  132|               ValueCategory = prvalue(load)
#  133|     62: [ExprStmt] ExprStmt
#  133|       0: [AssignExpr] ... = ...
#  133|           Type = [ArithmeticType] _Imaginary long double
#  133|           ValueCategory = prvalue
#  133|         0: [VariableAccess] jld
#  133|             Type = [ArithmeticType] _Imaginary long double
#  133|             ValueCategory = lvalue
#  133|         1: [CStyleCast] (_Imaginary long double)...
#  133|             Conversion = [FloatingPointConversion] floating point conversion
#  133|             Type = [ArithmeticType] _Imaginary long double
#  133|             ValueCategory = prvalue
#  133|           expr: [VariableAccess] ld
#  133|               Type = [LongDoubleType] long double
#  133|               ValueCategory = prvalue(load)
#  136|     63: [ExprStmt] ExprStmt
#  136|       0: [AssignExpr] ... = ...
#  136|           Type = [FloatType] float
#  136|           ValueCategory = prvalue
#  136|         0: [VariableAccess] f
#  136|             Type = [FloatType] float
#  136|             ValueCategory = lvalue
#  136|         1: [CStyleCast] (float)...
#  136|             Conversion = [FloatingPointConversion] floating point conversion
#  136|             Type = [FloatType] float
#  136|             ValueCategory = prvalue
#  136|           expr: [VariableAccess] jf
#  136|               Type = [ArithmeticType] _Imaginary float
#  136|               ValueCategory = prvalue(load)
#  137|     64: [ExprStmt] ExprStmt
#  137|       0: [AssignExpr] ... = ...
#  137|           Type = [FloatType] float
#  137|           ValueCategory = prvalue
#  137|         0: [VariableAccess] f
#  137|             Type = [FloatType] float
#  137|             ValueCategory = lvalue
#  137|         1: [CStyleCast] (float)...
#  137|             Conversion = [FloatingPointConversion] floating point conversion
#  137|             Type = [FloatType] float
#  137|             ValueCategory = prvalue
#  137|           expr: [VariableAccess] jd
#  137|               Type = [ArithmeticType] _Imaginary double
#  137|               ValueCategory = prvalue(load)
#  138|     65: [ExprStmt] ExprStmt
#  138|       0: [AssignExpr] ... = ...
#  138|           Type = [FloatType] float
#  138|           ValueCategory = prvalue
#  138|         0: [VariableAccess] f
#  138|             Type = [FloatType] float
#  138|             ValueCategory = lvalue
#  138|         1: [CStyleCast] (float)...
#  138|             Conversion = [FloatingPointConversion] floating point conversion
#  138|             Type = [FloatType] float
#  138|             ValueCategory = prvalue
#  138|           expr: [VariableAccess] jld
#  138|               Type = [ArithmeticType] _Imaginary long double
#  138|               ValueCategory = prvalue(load)
#  139|     66: [ExprStmt] ExprStmt
#  139|       0: [AssignExpr] ... = ...
#  139|           Type = [DoubleType] double
#  139|           ValueCategory = prvalue
#  139|         0: [VariableAccess] d
#  139|             Type = [DoubleType] double
#  139|             ValueCategory = lvalue
#  139|         1: [CStyleCast] (double)...
#  139|             Conversion = [FloatingPointConversion] floating point conversion
#  139|             Type = [DoubleType] double
#  139|             ValueCategory = prvalue
#  139|           expr: [VariableAccess] jf
#  139|               Type = [ArithmeticType] _Imaginary float
#  139|               ValueCategory = prvalue(load)
#  140|     67: [ExprStmt] ExprStmt
#  140|       0: [AssignExpr] ... = ...
#  140|           Type = [DoubleType] double
#  140|           ValueCategory = prvalue
#  140|         0: [VariableAccess] d
#  140|             Type = [DoubleType] double
#  140|             ValueCategory = lvalue
#  140|         1: [CStyleCast] (double)...
#  140|             Conversion = [FloatingPointConversion] floating point conversion
#  140|             Type = [DoubleType] double
#  140|             ValueCategory = prvalue
#  140|           expr: [VariableAccess] jd
#  140|               Type = [ArithmeticType] _Imaginary double
#  140|               ValueCategory = prvalue(load)
#  141|     68: [ExprStmt] ExprStmt
#  141|       0: [AssignExpr] ... = ...
#  141|           Type = [DoubleType] double
#  141|           ValueCategory = prvalue
#  141|         0: [VariableAccess] d
#  141|             Type = [DoubleType] double
#  141|             ValueCategory = lvalue
#  141|         1: [CStyleCast] (double)...
#  141|             Conversion = [FloatingPointConversion] floating point conversion
#  141|             Type = [DoubleType] double
#  141|             ValueCategory = prvalue
#  141|           expr: [VariableAccess] jld
#  141|               Type = [ArithmeticType] _Imaginary long double
#  141|               ValueCategory = prvalue(load)
#  142|     69: [ExprStmt] ExprStmt
#  142|       0: [AssignExpr] ... = ...
#  142|           Type = [LongDoubleType] long double
#  142|           ValueCategory = prvalue
#  142|         0: [VariableAccess] ld
#  142|             Type = [LongDoubleType] long double
#  142|             ValueCategory = lvalue
#  142|         1: [CStyleCast] (long double)...
#  142|             Conversion = [FloatingPointConversion] floating point conversion
#  142|             Type = [LongDoubleType] long double
#  142|             ValueCategory = prvalue
#  142|           expr: [VariableAccess] jf
#  142|               Type = [ArithmeticType] _Imaginary float
#  142|               ValueCategory = prvalue(load)
#  143|     70: [ExprStmt] ExprStmt
#  143|       0: [AssignExpr] ... = ...
#  143|           Type = [LongDoubleType] long double
#  143|           ValueCategory = prvalue
#  143|         0: [VariableAccess] ld
#  143|             Type = [LongDoubleType] long double
#  143|             ValueCategory = lvalue
#  143|         1: [CStyleCast] (long double)...
#  143|             Conversion = [FloatingPointConversion] floating point conversion
#  143|             Type = [LongDoubleType] long double
#  143|             ValueCategory = prvalue
#  143|           expr: [VariableAccess] jd
#  143|               Type = [ArithmeticType] _Imaginary double
#  143|               ValueCategory = prvalue(load)
#  144|     71: [ExprStmt] ExprStmt
#  144|       0: [AssignExpr] ... = ...
#  144|           Type = [LongDoubleType] long double
#  144|           ValueCategory = prvalue
#  144|         0: [VariableAccess] ld
#  144|             Type = [LongDoubleType] long double
#  144|             ValueCategory = lvalue
#  144|         1: [CStyleCast] (long double)...
#  144|             Conversion = [FloatingPointConversion] floating point conversion
#  144|             Type = [LongDoubleType] long double
#  144|             ValueCategory = prvalue
#  144|           expr: [VariableAccess] jld
#  144|               Type = [ArithmeticType] _Imaginary long double
#  144|               ValueCategory = prvalue(load)
#  145|     72: [ReturnStmt] return ...
ir.cpp:
#    1| [TopLevelFunction] void Constants()
#    1|   params: 
#    1|   body: [Block] { ... }
#    2|     0: [DeclStmt] declaration
#    2|       0: [VariableDeclarationEntry] definition of c_i
#    2|           Type = [PlainCharType] char
#    2|         init: [Initializer] initializer for c_i
#    2|           expr: [CStyleCast] (char)...
#    2|               Conversion = [IntegralConversion] integral conversion
#    2|               Type = [PlainCharType] char
#    2|               Value = [CStyleCast] 1
#    2|               ValueCategory = prvalue
#    2|             expr: [Literal] 1
#    2|                 Type = [IntType] int
#    2|                 Value = [Literal] 1
#    2|                 ValueCategory = prvalue
#    3|     1: [DeclStmt] declaration
#    3|       0: [VariableDeclarationEntry] definition of c_c
#    3|           Type = [PlainCharType] char
#    3|         init: [Initializer] initializer for c_c
#    3|           expr: [CharLiteral] 65
#    3|               Type = [PlainCharType] char
#    3|               Value = [CharLiteral] 65
#    3|               ValueCategory = prvalue
#    5|     2: [DeclStmt] declaration
#    5|       0: [VariableDeclarationEntry] definition of sc_i
#    5|           Type = [SignedCharType] signed char
#    5|         init: [Initializer] initializer for sc_i
#    5|           expr: [CStyleCast] (signed char)...
#    5|               Conversion = [IntegralConversion] integral conversion
#    5|               Type = [SignedCharType] signed char
#    5|               Value = [CStyleCast] -1
#    5|               ValueCategory = prvalue
#    5|             expr: [UnaryMinusExpr] - ...
#    5|                 Type = [IntType] int
#    5|                 Value = [UnaryMinusExpr] -1
#    5|                 ValueCategory = prvalue
#    5|               0: [Literal] 1
#    5|                   Type = [IntType] int
#    5|                   Value = [Literal] 1
#    5|                   ValueCategory = prvalue
#    6|     3: [DeclStmt] declaration
#    6|       0: [VariableDeclarationEntry] definition of sc_c
#    6|           Type = [SignedCharType] signed char
#    6|         init: [Initializer] initializer for sc_c
#    6|           expr: [CStyleCast] (signed char)...
#    6|               Conversion = [IntegralConversion] integral conversion
#    6|               Type = [SignedCharType] signed char
#    6|               Value = [CStyleCast] 65
#    6|               ValueCategory = prvalue
#    6|             expr: [CharLiteral] 65
#    6|                 Type = [PlainCharType] char
#    6|                 Value = [CharLiteral] 65
#    6|                 ValueCategory = prvalue
#    8|     4: [DeclStmt] declaration
#    8|       0: [VariableDeclarationEntry] definition of uc_i
#    8|           Type = [UnsignedCharType] unsigned char
#    8|         init: [Initializer] initializer for uc_i
#    8|           expr: [CStyleCast] (unsigned char)...
#    8|               Conversion = [IntegralConversion] integral conversion
#    8|               Type = [UnsignedCharType] unsigned char
#    8|               Value = [CStyleCast] 5
#    8|               ValueCategory = prvalue
#    8|             expr: [Literal] 5
#    8|                 Type = [IntType] int
#    8|                 Value = [Literal] 5
#    8|                 ValueCategory = prvalue
#    9|     5: [DeclStmt] declaration
#    9|       0: [VariableDeclarationEntry] definition of uc_c
#    9|           Type = [UnsignedCharType] unsigned char
#    9|         init: [Initializer] initializer for uc_c
#    9|           expr: [CStyleCast] (unsigned char)...
#    9|               Conversion = [IntegralConversion] integral conversion
#    9|               Type = [UnsignedCharType] unsigned char
#    9|               Value = [CStyleCast] 65
#    9|               ValueCategory = prvalue
#    9|             expr: [CharLiteral] 65
#    9|                 Type = [PlainCharType] char
#    9|                 Value = [CharLiteral] 65
#    9|                 ValueCategory = prvalue
#   11|     6: [DeclStmt] declaration
#   11|       0: [VariableDeclarationEntry] definition of s
#   11|           Type = [ShortType] short
#   11|         init: [Initializer] initializer for s
#   11|           expr: [CStyleCast] (short)...
#   11|               Conversion = [IntegralConversion] integral conversion
#   11|               Type = [ShortType] short
#   11|               Value = [CStyleCast] 5
#   11|               ValueCategory = prvalue
#   11|             expr: [Literal] 5
#   11|                 Type = [IntType] int
#   11|                 Value = [Literal] 5
#   11|                 ValueCategory = prvalue
#   12|     7: [DeclStmt] declaration
#   12|       0: [VariableDeclarationEntry] definition of us
#   12|           Type = [ShortType] unsigned short
#   12|         init: [Initializer] initializer for us
#   12|           expr: [CStyleCast] (unsigned short)...
#   12|               Conversion = [IntegralConversion] integral conversion
#   12|               Type = [ShortType] unsigned short
#   12|               Value = [CStyleCast] 5
#   12|               ValueCategory = prvalue
#   12|             expr: [Literal] 5
#   12|                 Type = [IntType] int
#   12|                 Value = [Literal] 5
#   12|                 ValueCategory = prvalue
#   14|     8: [DeclStmt] declaration
#   14|       0: [VariableDeclarationEntry] definition of i
#   14|           Type = [IntType] int
#   14|         init: [Initializer] initializer for i
#   14|           expr: [Literal] 5
#   14|               Type = [IntType] int
#   14|               Value = [Literal] 5
#   14|               ValueCategory = prvalue
#   15|     9: [DeclStmt] declaration
#   15|       0: [VariableDeclarationEntry] definition of ui
#   15|           Type = [IntType] unsigned int
#   15|         init: [Initializer] initializer for ui
#   15|           expr: [CStyleCast] (unsigned int)...
#   15|               Conversion = [IntegralConversion] integral conversion
#   15|               Type = [IntType] unsigned int
#   15|               Value = [CStyleCast] 5
#   15|               ValueCategory = prvalue
#   15|             expr: [Literal] 5
#   15|                 Type = [IntType] int
#   15|                 Value = [Literal] 5
#   15|                 ValueCategory = prvalue
#   17|     10: [DeclStmt] declaration
#   17|       0: [VariableDeclarationEntry] definition of l
#   17|           Type = [LongType] long
#   17|         init: [Initializer] initializer for l
#   17|           expr: [CStyleCast] (long)...
#   17|               Conversion = [IntegralConversion] integral conversion
#   17|               Type = [LongType] long
#   17|               Value = [CStyleCast] 5
#   17|               ValueCategory = prvalue
#   17|             expr: [Literal] 5
#   17|                 Type = [IntType] int
#   17|                 Value = [Literal] 5
#   17|                 ValueCategory = prvalue
#   18|     11: [DeclStmt] declaration
#   18|       0: [VariableDeclarationEntry] definition of ul
#   18|           Type = [LongType] unsigned long
#   18|         init: [Initializer] initializer for ul
#   18|           expr: [CStyleCast] (unsigned long)...
#   18|               Conversion = [IntegralConversion] integral conversion
#   18|               Type = [LongType] unsigned long
#   18|               Value = [CStyleCast] 5
#   18|               ValueCategory = prvalue
#   18|             expr: [Literal] 5
#   18|                 Type = [IntType] int
#   18|                 Value = [Literal] 5
#   18|                 ValueCategory = prvalue
#   20|     12: [DeclStmt] declaration
#   20|       0: [VariableDeclarationEntry] definition of ll_i
#   20|           Type = [LongLongType] long long
#   20|         init: [Initializer] initializer for ll_i
#   20|           expr: [CStyleCast] (long long)...
#   20|               Conversion = [IntegralConversion] integral conversion
#   20|               Type = [LongLongType] long long
#   20|               Value = [CStyleCast] 5
#   20|               ValueCategory = prvalue
#   20|             expr: [Literal] 5
#   20|                 Type = [IntType] int
#   20|                 Value = [Literal] 5
#   20|                 ValueCategory = prvalue
#   21|     13: [DeclStmt] declaration
#   21|       0: [VariableDeclarationEntry] definition of ll_ll
#   21|           Type = [LongLongType] long long
#   21|         init: [Initializer] initializer for ll_ll
#   21|           expr: [Literal] 5
#   21|               Type = [LongLongType] long long
#   21|               Value = [Literal] 5
#   21|               ValueCategory = prvalue
#   22|     14: [DeclStmt] declaration
#   22|       0: [VariableDeclarationEntry] definition of ull_i
#   22|           Type = [LongLongType] unsigned long long
#   22|         init: [Initializer] initializer for ull_i
#   22|           expr: [CStyleCast] (unsigned long long)...
#   22|               Conversion = [IntegralConversion] integral conversion
#   22|               Type = [LongLongType] unsigned long long
#   22|               Value = [CStyleCast] 5
#   22|               ValueCategory = prvalue
#   22|             expr: [Literal] 5
#   22|                 Type = [IntType] int
#   22|                 Value = [Literal] 5
#   22|                 ValueCategory = prvalue
#   23|     15: [DeclStmt] declaration
#   23|       0: [VariableDeclarationEntry] definition of ull_ull
#   23|           Type = [LongLongType] unsigned long long
#   23|         init: [Initializer] initializer for ull_ull
#   23|           expr: [Literal] 5
#   23|               Type = [LongLongType] unsigned long long
#   23|               Value = [Literal] 5
#   23|               ValueCategory = prvalue
#   25|     16: [DeclStmt] declaration
#   25|       0: [VariableDeclarationEntry] definition of b_t
#   25|           Type = [BoolType] bool
#   25|         init: [Initializer] initializer for b_t
#   25|           expr: [Literal] 1
#   25|               Type = [BoolType] bool
#   25|               Value = [Literal] 1
#   25|               ValueCategory = prvalue
#   26|     17: [DeclStmt] declaration
#   26|       0: [VariableDeclarationEntry] definition of b_f
#   26|           Type = [BoolType] bool
#   26|         init: [Initializer] initializer for b_f
#   26|           expr: [Literal] 0
#   26|               Type = [BoolType] bool
#   26|               Value = [Literal] 0
#   26|               ValueCategory = prvalue
#   28|     18: [DeclStmt] declaration
#   28|       0: [VariableDeclarationEntry] definition of wc_i
#   28|           Type = [Wchar_t,WideCharType] wchar_t
#   28|         init: [Initializer] initializer for wc_i
#   28|           expr: [CStyleCast] (wchar_t)...
#   28|               Conversion = [IntegralConversion] integral conversion
#   28|               Type = [Wchar_t,WideCharType] wchar_t
#   28|               Value = [CStyleCast] 5
#   28|               ValueCategory = prvalue
#   28|             expr: [Literal] 5
#   28|                 Type = [IntType] int
#   28|                 Value = [Literal] 5
#   28|                 ValueCategory = prvalue
#   29|     19: [DeclStmt] declaration
#   29|       0: [VariableDeclarationEntry] definition of wc_c
#   29|           Type = [Wchar_t,WideCharType] wchar_t
#   29|         init: [Initializer] initializer for wc_c
#   29|           expr: [CharLiteral] 65
#   29|               Type = [Wchar_t,WideCharType] wchar_t
#   29|               Value = [CharLiteral] 65
#   29|               ValueCategory = prvalue
#   31|     20: [DeclStmt] declaration
#   31|       0: [VariableDeclarationEntry] definition of c16
#   31|           Type = [Char16Type] char16_t
#   31|         init: [Initializer] initializer for c16
#   31|           expr: [Literal] 65
#   31|               Type = [Char16Type] char16_t
#   31|               Value = [Literal] 65
#   31|               ValueCategory = prvalue
#   32|     21: [DeclStmt] declaration
#   32|       0: [VariableDeclarationEntry] definition of c32
#   32|           Type = [Char32Type] char32_t
#   32|         init: [Initializer] initializer for c32
#   32|           expr: [Literal] 65
#   32|               Type = [Char32Type] char32_t
#   32|               Value = [Literal] 65
#   32|               ValueCategory = prvalue
#   34|     22: [DeclStmt] declaration
#   34|       0: [VariableDeclarationEntry] definition of f_i
#   34|           Type = [FloatType] float
#   34|         init: [Initializer] initializer for f_i
#   34|           expr: [CStyleCast] (float)...
#   34|               Conversion = [IntegralToFloatingPointConversion] integral to floating point conversion
#   34|               Type = [FloatType] float
#   34|               Value = [CStyleCast] 1.0
#   34|               ValueCategory = prvalue
#   34|             expr: [Literal] 1
#   34|                 Type = [IntType] int
#   34|                 Value = [Literal] 1
#   34|                 ValueCategory = prvalue
#   35|     23: [DeclStmt] declaration
#   35|       0: [VariableDeclarationEntry] definition of f_f
#   35|           Type = [FloatType] float
#   35|         init: [Initializer] initializer for f_f
#   35|           expr: [Literal] 1.0
#   35|               Type = [FloatType] float
#   35|               Value = [Literal] 1.0
#   35|               ValueCategory = prvalue
#   36|     24: [DeclStmt] declaration
#   36|       0: [VariableDeclarationEntry] definition of f_d
#   36|           Type = [FloatType] float
#   36|         init: [Initializer] initializer for f_d
#   36|           expr: [CStyleCast] (float)...
#   36|               Conversion = [FloatingPointConversion] floating point conversion
#   36|               Type = [FloatType] float
#   36|               Value = [CStyleCast] 1.0
#   36|               ValueCategory = prvalue
#   36|             expr: [Literal] 1.0
#   36|                 Type = [DoubleType] double
#   36|                 Value = [Literal] 1.0
#   36|                 ValueCategory = prvalue
#   38|     25: [DeclStmt] declaration
#   38|       0: [VariableDeclarationEntry] definition of d_i
#   38|           Type = [DoubleType] double
#   38|         init: [Initializer] initializer for d_i
#   38|           expr: [CStyleCast] (double)...
#   38|               Conversion = [IntegralToFloatingPointConversion] integral to floating point conversion
#   38|               Type = [DoubleType] double
#   38|               Value = [CStyleCast] 1.0
#   38|               ValueCategory = prvalue
#   38|             expr: [Literal] 1
#   38|                 Type = [IntType] int
#   38|                 Value = [Literal] 1
#   38|                 ValueCategory = prvalue
#   39|     26: [DeclStmt] declaration
#   39|       0: [VariableDeclarationEntry] definition of d_f
#   39|           Type = [DoubleType] double
#   39|         init: [Initializer] initializer for d_f
#   39|           expr: [CStyleCast] (double)...
#   39|               Conversion = [FloatingPointConversion] floating point conversion
#   39|               Type = [DoubleType] double
#   39|               Value = [CStyleCast] 1.0
#   39|               ValueCategory = prvalue
#   39|             expr: [Literal] 1.0
#   39|                 Type = [FloatType] float
#   39|                 Value = [Literal] 1.0
#   39|                 ValueCategory = prvalue
#   40|     27: [DeclStmt] declaration
#   40|       0: [VariableDeclarationEntry] definition of d_d
#   40|           Type = [DoubleType] double
#   40|         init: [Initializer] initializer for d_d
#   40|           expr: [Literal] 1.0
#   40|               Type = [DoubleType] double
#   40|               Value = [Literal] 1.0
#   40|               ValueCategory = prvalue
#   41|     28: [ReturnStmt] return ...
#   43| [TopLevelFunction] void Foo()
#   43|   params: 
#   43|   body: [Block] { ... }
#   44|     0: [DeclStmt] declaration
#   44|       0: [VariableDeclarationEntry] definition of x
#   44|           Type = [IntType] int
#   44|         init: [Initializer] initializer for x
#   44|           expr: [AddExpr] ... + ...
#   44|               Type = [IntType] int
#   44|               Value = [AddExpr] 17
#   44|               ValueCategory = prvalue
#   44|             0: [Literal] 5
#   44|                 Type = [IntType] int
#   44|                 Value = [Literal] 5
#   44|                 ValueCategory = prvalue
#   44|             1: [Literal] 12
#   44|                 Type = [IntType] int
#   44|                 Value = [Literal] 12
#   44|                 ValueCategory = prvalue
#   45|     1: [DeclStmt] declaration
#   45|       0: [VariableDeclarationEntry] definition of y
#   45|           Type = [ShortType] short
#   45|         init: [Initializer] initializer for y
#   45|           expr: [CStyleCast] (short)...
#   45|               Conversion = [IntegralConversion] integral conversion
#   45|               Type = [ShortType] short
#   45|               Value = [CStyleCast] 7
#   45|               ValueCategory = prvalue
#   45|             expr: [Literal] 7
#   45|                 Type = [IntType] int
#   45|                 Value = [Literal] 7
#   45|                 ValueCategory = prvalue
#   46|     2: [ExprStmt] ExprStmt
#   46|       0: [AssignExpr] ... = ...
#   46|           Type = [ShortType] short
#   46|           ValueCategory = lvalue
#   46|         0: [VariableAccess] y
#   46|             Type = [ShortType] short
#   46|             ValueCategory = lvalue
#   46|         1: [CStyleCast] (short)...
#   46|             Conversion = [IntegralConversion] integral conversion
#   46|             Type = [ShortType] short
#   46|             ValueCategory = prvalue
#   46|           expr: [AddExpr] ... + ...
#   46|               Type = [IntType] int
#   46|               ValueCategory = prvalue
#   46|             0: [VariableAccess] x
#   46|                 Type = [IntType] int
#   46|                 ValueCategory = prvalue(load)
#   46|             1: [CStyleCast] (int)...
#   46|                 Conversion = [IntegralConversion] integral conversion
#   46|                 Type = [IntType] int
#   46|                 ValueCategory = prvalue
#   46|               expr: [VariableAccess] y
#   46|                   Type = [ShortType] short
#   46|                   ValueCategory = prvalue(load)
#   47|     3: [ExprStmt] ExprStmt
#   47|       0: [AssignExpr] ... = ...
#   47|           Type = [IntType] int
#   47|           ValueCategory = lvalue
#   47|         0: [VariableAccess] x
#   47|             Type = [IntType] int
#   47|             ValueCategory = lvalue
#   47|         1: [MulExpr] ... * ...
#   47|             Type = [IntType] int
#   47|             ValueCategory = prvalue
#   47|           0: [VariableAccess] x
#   47|               Type = [IntType] int
#   47|               ValueCategory = prvalue(load)
#   47|           1: [CStyleCast] (int)...
#   47|               Conversion = [IntegralConversion] integral conversion
#   47|               Type = [IntType] int
#   47|               ValueCategory = prvalue
#   47|             expr: [VariableAccess] y
#   47|                 Type = [ShortType] short
#   47|                 ValueCategory = prvalue(load)
#   48|     4: [ReturnStmt] return ...
#   50| [TopLevelFunction] void IntegerOps(int, int)
#   50|   params: 
#   50|     0: [Parameter] x
#   50|         Type = [IntType] int
#   50|     1: [Parameter] y
#   50|         Type = [IntType] int
#   50|   body: [Block] { ... }
#   51|     0: [DeclStmt] declaration
#   51|       0: [VariableDeclarationEntry] definition of z
#   51|           Type = [IntType] int
#   53|     1: [ExprStmt] ExprStmt
#   53|       0: [AssignExpr] ... = ...
#   53|           Type = [IntType] int
#   53|           ValueCategory = lvalue
#   53|         0: [VariableAccess] z
#   53|             Type = [IntType] int
#   53|             ValueCategory = lvalue
#   53|         1: [AddExpr] ... + ...
#   53|             Type = [IntType] int
#   53|             ValueCategory = prvalue
#   53|           0: [VariableAccess] x
#   53|               Type = [IntType] int
#   53|               ValueCategory = prvalue(load)
#   53|           1: [VariableAccess] y
#   53|               Type = [IntType] int
#   53|               ValueCategory = prvalue(load)
#   54|     2: [ExprStmt] ExprStmt
#   54|       0: [AssignExpr] ... = ...
#   54|           Type = [IntType] int
#   54|           ValueCategory = lvalue
#   54|         0: [VariableAccess] z
#   54|             Type = [IntType] int
#   54|             ValueCategory = lvalue
#   54|         1: [SubExpr] ... - ...
#   54|             Type = [IntType] int
#   54|             ValueCategory = prvalue
#   54|           0: [VariableAccess] x
#   54|               Type = [IntType] int
#   54|               ValueCategory = prvalue(load)
#   54|           1: [VariableAccess] y
#   54|               Type = [IntType] int
#   54|               ValueCategory = prvalue(load)
#   55|     3: [ExprStmt] ExprStmt
#   55|       0: [AssignExpr] ... = ...
#   55|           Type = [IntType] int
#   55|           ValueCategory = lvalue
#   55|         0: [VariableAccess] z
#   55|             Type = [IntType] int
#   55|             ValueCategory = lvalue
#   55|         1: [MulExpr] ... * ...
#   55|             Type = [IntType] int
#   55|             ValueCategory = prvalue
#   55|           0: [VariableAccess] x
#   55|               Type = [IntType] int
#   55|               ValueCategory = prvalue(load)
#   55|           1: [VariableAccess] y
#   55|               Type = [IntType] int
#   55|               ValueCategory = prvalue(load)
#   56|     4: [ExprStmt] ExprStmt
#   56|       0: [AssignExpr] ... = ...
#   56|           Type = [IntType] int
#   56|           ValueCategory = lvalue
#   56|         0: [VariableAccess] z
#   56|             Type = [IntType] int
#   56|             ValueCategory = lvalue
#   56|         1: [DivExpr] ... / ...
#   56|             Type = [IntType] int
#   56|             ValueCategory = prvalue
#   56|           0: [VariableAccess] x
#   56|               Type = [IntType] int
#   56|               ValueCategory = prvalue(load)
#   56|           1: [VariableAccess] y
#   56|               Type = [IntType] int
#   56|               ValueCategory = prvalue(load)
#   57|     5: [ExprStmt] ExprStmt
#   57|       0: [AssignExpr] ... = ...
#   57|           Type = [IntType] int
#   57|           ValueCategory = lvalue
#   57|         0: [VariableAccess] z
#   57|             Type = [IntType] int
#   57|             ValueCategory = lvalue
#   57|         1: [RemExpr] ... % ...
#   57|             Type = [IntType] int
#   57|             ValueCategory = prvalue
#   57|           0: [VariableAccess] x
#   57|               Type = [IntType] int
#   57|               ValueCategory = prvalue(load)
#   57|           1: [VariableAccess] y
#   57|               Type = [IntType] int
#   57|               ValueCategory = prvalue(load)
#   59|     6: [ExprStmt] ExprStmt
#   59|       0: [AssignExpr] ... = ...
#   59|           Type = [IntType] int
#   59|           ValueCategory = lvalue
#   59|         0: [VariableAccess] z
#   59|             Type = [IntType] int
#   59|             ValueCategory = lvalue
#   59|         1: [BitwiseAndExpr] ... & ...
#   59|             Type = [IntType] int
#   59|             ValueCategory = prvalue
#   59|           0: [VariableAccess] x
#   59|               Type = [IntType] int
#   59|               ValueCategory = prvalue(load)
#   59|           1: [VariableAccess] y
#   59|               Type = [IntType] int
#   59|               ValueCategory = prvalue(load)
#   60|     7: [ExprStmt] ExprStmt
#   60|       0: [AssignExpr] ... = ...
#   60|           Type = [IntType] int
#   60|           ValueCategory = lvalue
#   60|         0: [VariableAccess] z
#   60|             Type = [IntType] int
#   60|             ValueCategory = lvalue
#   60|         1: [BitwiseOrExpr] ... | ...
#   60|             Type = [IntType] int
#   60|             ValueCategory = prvalue
#   60|           0: [VariableAccess] x
#   60|               Type = [IntType] int
#   60|               ValueCategory = prvalue(load)
#   60|           1: [VariableAccess] y
#   60|               Type = [IntType] int
#   60|               ValueCategory = prvalue(load)
#   61|     8: [ExprStmt] ExprStmt
#   61|       0: [AssignExpr] ... = ...
#   61|           Type = [IntType] int
#   61|           ValueCategory = lvalue
#   61|         0: [VariableAccess] z
#   61|             Type = [IntType] int
#   61|             ValueCategory = lvalue
#   61|         1: [BitwiseXorExpr] ... ^ ...
#   61|             Type = [IntType] int
#   61|             ValueCategory = prvalue
#   61|           0: [VariableAccess] x
#   61|               Type = [IntType] int
#   61|               ValueCategory = prvalue(load)
#   61|           1: [VariableAccess] y
#   61|               Type = [IntType] int
#   61|               ValueCategory = prvalue(load)
#   63|     9: [ExprStmt] ExprStmt
#   63|       0: [AssignExpr] ... = ...
#   63|           Type = [IntType] int
#   63|           ValueCategory = lvalue
#   63|         0: [VariableAccess] z
#   63|             Type = [IntType] int
#   63|             ValueCategory = lvalue
#   63|         1: [LShiftExpr] ... << ...
#   63|             Type = [IntType] int
#   63|             ValueCategory = prvalue
#   63|           0: [VariableAccess] x
#   63|               Type = [IntType] int
#   63|               ValueCategory = prvalue(load)
#   63|           1: [VariableAccess] y
#   63|               Type = [IntType] int
#   63|               ValueCategory = prvalue(load)
#   64|     10: [ExprStmt] ExprStmt
#   64|       0: [AssignExpr] ... = ...
#   64|           Type = [IntType] int
#   64|           ValueCategory = lvalue
#   64|         0: [VariableAccess] z
#   64|             Type = [IntType] int
#   64|             ValueCategory = lvalue
#   64|         1: [RShiftExpr] ... >> ...
#   64|             Type = [IntType] int
#   64|             ValueCategory = prvalue
#   64|           0: [VariableAccess] x
#   64|               Type = [IntType] int
#   64|               ValueCategory = prvalue(load)
#   64|           1: [VariableAccess] y
#   64|               Type = [IntType] int
#   64|               ValueCategory = prvalue(load)
#   66|     11: [ExprStmt] ExprStmt
#   66|       0: [AssignExpr] ... = ...
#   66|           Type = [IntType] int
#   66|           ValueCategory = lvalue
#   66|         0: [VariableAccess] z
#   66|             Type = [IntType] int
#   66|             ValueCategory = lvalue
#   66|         1: [VariableAccess] x
#   66|             Type = [IntType] int
#   66|             ValueCategory = prvalue(load)
#   68|     12: [ExprStmt] ExprStmt
#   68|       0: [AssignAddExpr] ... += ...
#   68|           Type = [IntType] int
#   68|           ValueCategory = lvalue
#   68|         0: [VariableAccess] z
#   68|             Type = [IntType] int
#   68|             ValueCategory = lvalue
#   68|         1: [VariableAccess] x
#   68|             Type = [IntType] int
#   68|             ValueCategory = prvalue(load)
#   69|     13: [ExprStmt] ExprStmt
#   69|       0: [AssignSubExpr] ... -= ...
#   69|           Type = [IntType] int
#   69|           ValueCategory = lvalue
#   69|         0: [VariableAccess] z
#   69|             Type = [IntType] int
#   69|             ValueCategory = lvalue
#   69|         1: [VariableAccess] x
#   69|             Type = [IntType] int
#   69|             ValueCategory = prvalue(load)
#   70|     14: [ExprStmt] ExprStmt
#   70|       0: [AssignMulExpr] ... *= ...
#   70|           Type = [IntType] int
#   70|           ValueCategory = lvalue
#   70|         0: [VariableAccess] z
#   70|             Type = [IntType] int
#   70|             ValueCategory = lvalue
#   70|         1: [VariableAccess] x
#   70|             Type = [IntType] int
#   70|             ValueCategory = prvalue(load)
#   71|     15: [ExprStmt] ExprStmt
#   71|       0: [AssignDivExpr] ... /= ...
#   71|           Type = [IntType] int
#   71|           ValueCategory = lvalue
#   71|         0: [VariableAccess] z
#   71|             Type = [IntType] int
#   71|             ValueCategory = lvalue
#   71|         1: [VariableAccess] x
#   71|             Type = [IntType] int
#   71|             ValueCategory = prvalue(load)
#   72|     16: [ExprStmt] ExprStmt
#   72|       0: [AssignRemExpr] ... %= ...
#   72|           Type = [IntType] int
#   72|           ValueCategory = lvalue
#   72|         0: [VariableAccess] z
#   72|             Type = [IntType] int
#   72|             ValueCategory = lvalue
#   72|         1: [VariableAccess] x
#   72|             Type = [IntType] int
#   72|             ValueCategory = prvalue(load)
#   74|     17: [ExprStmt] ExprStmt
#   74|       0: [AssignAndExpr] ... &= ...
#   74|           Type = [IntType] int
#   74|           ValueCategory = lvalue
#   74|         0: [VariableAccess] z
#   74|             Type = [IntType] int
#   74|             ValueCategory = lvalue
#   74|         1: [VariableAccess] x
#   74|             Type = [IntType] int
#   74|             ValueCategory = prvalue(load)
#   75|     18: [ExprStmt] ExprStmt
#   75|       0: [AssignOrExpr] ... |= ...
#   75|           Type = [IntType] int
#   75|           ValueCategory = lvalue
#   75|         0: [VariableAccess] z
#   75|             Type = [IntType] int
#   75|             ValueCategory = lvalue
#   75|         1: [VariableAccess] x
#   75|             Type = [IntType] int
#   75|             ValueCategory = prvalue(load)
#   76|     19: [ExprStmt] ExprStmt
#   76|       0: [AssignXorExpr] ... ^= ...
#   76|           Type = [IntType] int
#   76|           ValueCategory = lvalue
#   76|         0: [VariableAccess] z
#   76|             Type = [IntType] int
#   76|             ValueCategory = lvalue
#   76|         1: [VariableAccess] x
#   76|             Type = [IntType] int
#   76|             ValueCategory = prvalue(load)
#   78|     20: [ExprStmt] ExprStmt
#   78|       0: [AssignLShiftExpr] ... <<= ...
#   78|           Type = [IntType] int
#   78|           ValueCategory = lvalue
#   78|         0: [VariableAccess] z
#   78|             Type = [IntType] int
#   78|             ValueCategory = lvalue
#   78|         1: [VariableAccess] x
#   78|             Type = [IntType] int
#   78|             ValueCategory = prvalue(load)
#   79|     21: [ExprStmt] ExprStmt
#   79|       0: [AssignRShiftExpr] ... >>= ...
#   79|           Type = [IntType] int
#   79|           ValueCategory = lvalue
#   79|         0: [VariableAccess] z
#   79|             Type = [IntType] int
#   79|             ValueCategory = lvalue
#   79|         1: [VariableAccess] x
#   79|             Type = [IntType] int
#   79|             ValueCategory = prvalue(load)
#   81|     22: [ExprStmt] ExprStmt
#   81|       0: [AssignExpr] ... = ...
#   81|           Type = [IntType] int
#   81|           ValueCategory = lvalue
#   81|         0: [VariableAccess] z
#   81|             Type = [IntType] int
#   81|             ValueCategory = lvalue
#   81|         1: [UnaryPlusExpr] + ...
#   81|             Type = [IntType] int
#   81|             ValueCategory = prvalue
#   81|           0: [VariableAccess] x
#   81|               Type = [IntType] int
#   81|               ValueCategory = prvalue(load)
#   82|     23: [ExprStmt] ExprStmt
#   82|       0: [AssignExpr] ... = ...
#   82|           Type = [IntType] int
#   82|           ValueCategory = lvalue
#   82|         0: [VariableAccess] z
#   82|             Type = [IntType] int
#   82|             ValueCategory = lvalue
#   82|         1: [UnaryMinusExpr] - ...
#   82|             Type = [IntType] int
#   82|             ValueCategory = prvalue
#   82|           0: [VariableAccess] x
#   82|               Type = [IntType] int
#   82|               ValueCategory = prvalue(load)
#   83|     24: [ExprStmt] ExprStmt
#   83|       0: [AssignExpr] ... = ...
#   83|           Type = [IntType] int
#   83|           ValueCategory = lvalue
#   83|         0: [VariableAccess] z
#   83|             Type = [IntType] int
#   83|             ValueCategory = lvalue
#   83|         1: [ComplementExpr] ~ ...
#   83|             Type = [IntType] int
#   83|             ValueCategory = prvalue
#   83|           0: [VariableAccess] x
#   83|               Type = [IntType] int
#   83|               ValueCategory = prvalue(load)
#   84|     25: [ExprStmt] ExprStmt
#   84|       0: [AssignExpr] ... = ...
#   84|           Type = [IntType] int
#   84|           ValueCategory = lvalue
#   84|         0: [VariableAccess] z
#   84|             Type = [IntType] int
#   84|             ValueCategory = lvalue
#   84|         1: [CStyleCast] (int)...
#   84|             Conversion = [IntegralConversion] integral conversion
#   84|             Type = [IntType] int
#   84|             ValueCategory = prvalue
#   84|           expr: [NotExpr] ! ...
#   84|               Type = [BoolType] bool
#   84|               ValueCategory = prvalue
#   84|             0: [CStyleCast] (bool)...
#   84|                 Conversion = [BoolConversion] conversion to bool
#   84|                 Type = [BoolType] bool
#   84|                 ValueCategory = prvalue
#   84|               expr: [VariableAccess] x
#   84|                   Type = [IntType] int
#   84|                   ValueCategory = prvalue(load)
#   85|     26: [ReturnStmt] return ...
#   87| [TopLevelFunction] void IntegerCompare(int, int)
#   87|   params: 
#   87|     0: [Parameter] x
#   87|         Type = [IntType] int
#   87|     1: [Parameter] y
#   87|         Type = [IntType] int
#   87|   body: [Block] { ... }
#   88|     0: [DeclStmt] declaration
#   88|       0: [VariableDeclarationEntry] definition of b
#   88|           Type = [BoolType] bool
#   90|     1: [ExprStmt] ExprStmt
#   90|       0: [AssignExpr] ... = ...
#   90|           Type = [BoolType] bool
#   90|           ValueCategory = lvalue
#   90|         0: [VariableAccess] b
#   90|             Type = [BoolType] bool
#   90|             ValueCategory = lvalue
#   90|         1: [EQExpr] ... == ...
#   90|             Type = [BoolType] bool
#   90|             ValueCategory = prvalue
#   90|           0: [VariableAccess] x
#   90|               Type = [IntType] int
#   90|               ValueCategory = prvalue(load)
#   90|           1: [VariableAccess] y
#   90|               Type = [IntType] int
#   90|               ValueCategory = prvalue(load)
#   91|     2: [ExprStmt] ExprStmt
#   91|       0: [AssignExpr] ... = ...
#   91|           Type = [BoolType] bool
#   91|           ValueCategory = lvalue
#   91|         0: [VariableAccess] b
#   91|             Type = [BoolType] bool
#   91|             ValueCategory = lvalue
#   91|         1: [NEExpr] ... != ...
#   91|             Type = [BoolType] bool
#   91|             ValueCategory = prvalue
#   91|           0: [VariableAccess] x
#   91|               Type = [IntType] int
#   91|               ValueCategory = prvalue(load)
#   91|           1: [VariableAccess] y
#   91|               Type = [IntType] int
#   91|               ValueCategory = prvalue(load)
#   92|     3: [ExprStmt] ExprStmt
#   92|       0: [AssignExpr] ... = ...
#   92|           Type = [BoolType] bool
#   92|           ValueCategory = lvalue
#   92|         0: [VariableAccess] b
#   92|             Type = [BoolType] bool
#   92|             ValueCategory = lvalue
#   92|         1: [LTExpr] ... < ...
#   92|             Type = [BoolType] bool
#   92|             ValueCategory = prvalue
#   92|           0: [VariableAccess] x
#   92|               Type = [IntType] int
#   92|               ValueCategory = prvalue(load)
#   92|           1: [VariableAccess] y
#   92|               Type = [IntType] int
#   92|               ValueCategory = prvalue(load)
#   93|     4: [ExprStmt] ExprStmt
#   93|       0: [AssignExpr] ... = ...
#   93|           Type = [BoolType] bool
#   93|           ValueCategory = lvalue
#   93|         0: [VariableAccess] b
#   93|             Type = [BoolType] bool
#   93|             ValueCategory = lvalue
#   93|         1: [GTExpr] ... > ...
#   93|             Type = [BoolType] bool
#   93|             ValueCategory = prvalue
#   93|           0: [VariableAccess] x
#   93|               Type = [IntType] int
#   93|               ValueCategory = prvalue(load)
#   93|           1: [VariableAccess] y
#   93|               Type = [IntType] int
#   93|               ValueCategory = prvalue(load)
#   94|     5: [ExprStmt] ExprStmt
#   94|       0: [AssignExpr] ... = ...
#   94|           Type = [BoolType] bool
#   94|           ValueCategory = lvalue
#   94|         0: [VariableAccess] b
#   94|             Type = [BoolType] bool
#   94|             ValueCategory = lvalue
#   94|         1: [LEExpr] ... <= ...
#   94|             Type = [BoolType] bool
#   94|             ValueCategory = prvalue
#   94|           0: [VariableAccess] x
#   94|               Type = [IntType] int
#   94|               ValueCategory = prvalue(load)
#   94|           1: [VariableAccess] y
#   94|               Type = [IntType] int
#   94|               ValueCategory = prvalue(load)
#   95|     6: [ExprStmt] ExprStmt
#   95|       0: [AssignExpr] ... = ...
#   95|           Type = [BoolType] bool
#   95|           ValueCategory = lvalue
#   95|         0: [VariableAccess] b
#   95|             Type = [BoolType] bool
#   95|             ValueCategory = lvalue
#   95|         1: [GEExpr] ... >= ...
#   95|             Type = [BoolType] bool
#   95|             ValueCategory = prvalue
#   95|           0: [VariableAccess] x
#   95|               Type = [IntType] int
#   95|               ValueCategory = prvalue(load)
#   95|           1: [VariableAccess] y
#   95|               Type = [IntType] int
#   95|               ValueCategory = prvalue(load)
#   96|     7: [ReturnStmt] return ...
#   98| [TopLevelFunction] void IntegerCrement(int)
#   98|   params: 
#   98|     0: [Parameter] x
#   98|         Type = [IntType] int
#   98|   body: [Block] { ... }
#   99|     0: [DeclStmt] declaration
#   99|       0: [VariableDeclarationEntry] definition of y
#   99|           Type = [IntType] int
#  101|     1: [ExprStmt] ExprStmt
#  101|       0: [AssignExpr] ... = ...
#  101|           Type = [IntType] int
#  101|           ValueCategory = lvalue
#  101|         0: [VariableAccess] y
#  101|             Type = [IntType] int
#  101|             ValueCategory = lvalue
#  101|         1: [PrefixIncrExpr] ++ ...
#  101|             Type = [IntType] int
#  101|             ValueCategory = prvalue
#  101|           0: [VariableAccess] x
#  101|               Type = [IntType] int
#  101|               ValueCategory = lvalue
#  102|     2: [ExprStmt] ExprStmt
#  102|       0: [AssignExpr] ... = ...
#  102|           Type = [IntType] int
#  102|           ValueCategory = lvalue
#  102|         0: [VariableAccess] y
#  102|             Type = [IntType] int
#  102|             ValueCategory = lvalue
#  102|         1: [PrefixDecrExpr] -- ...
#  102|             Type = [IntType] int
#  102|             ValueCategory = prvalue
#  102|           0: [VariableAccess] x
#  102|               Type = [IntType] int
#  102|               ValueCategory = lvalue
#  103|     3: [ExprStmt] ExprStmt
#  103|       0: [AssignExpr] ... = ...
#  103|           Type = [IntType] int
#  103|           ValueCategory = lvalue
#  103|         0: [VariableAccess] y
#  103|             Type = [IntType] int
#  103|             ValueCategory = lvalue
#  103|         1: [PostfixIncrExpr] ... ++
#  103|             Type = [IntType] int
#  103|             ValueCategory = prvalue
#  103|           0: [VariableAccess] x
#  103|               Type = [IntType] int
#  103|               ValueCategory = lvalue
#  104|     4: [ExprStmt] ExprStmt
#  104|       0: [AssignExpr] ... = ...
#  104|           Type = [IntType] int
#  104|           ValueCategory = lvalue
#  104|         0: [VariableAccess] y
#  104|             Type = [IntType] int
#  104|             ValueCategory = lvalue
#  104|         1: [PostfixDecrExpr] ... --
#  104|             Type = [IntType] int
#  104|             ValueCategory = prvalue
#  104|           0: [VariableAccess] x
#  104|               Type = [IntType] int
#  104|               ValueCategory = lvalue
#  105|     5: [ReturnStmt] return ...
#  107| [TopLevelFunction] void IntegerCrement_LValue(int)
#  107|   params: 
#  107|     0: [Parameter] x
#  107|         Type = [IntType] int
#  107|   body: [Block] { ... }
#  108|     0: [DeclStmt] declaration
#  108|       0: [VariableDeclarationEntry] definition of p
#  108|           Type = [IntPointerType] int *
#  110|     1: [ExprStmt] ExprStmt
#  110|       0: [AssignExpr] ... = ...
#  110|           Type = [IntPointerType] int *
#  110|           ValueCategory = lvalue
#  110|         0: [VariableAccess] p
#  110|             Type = [IntPointerType] int *
#  110|             ValueCategory = lvalue
#  110|         1: [AddressOfExpr] & ...
#  110|             Type = [IntPointerType] int *
#  110|             ValueCategory = prvalue
#  110|           0: [ParenthesisExpr] (...)
#  110|               Type = [IntType] int
#  110|               ValueCategory = lvalue
#  110|             expr: [PrefixIncrExpr] ++ ...
#  110|                 Type = [IntType] int
#  110|                 ValueCategory = lvalue
#  110|               0: [VariableAccess] x
#  110|                   Type = [IntType] int
#  110|                   ValueCategory = lvalue
#  111|     2: [ExprStmt] ExprStmt
#  111|       0: [AssignExpr] ... = ...
#  111|           Type = [IntPointerType] int *
#  111|           ValueCategory = lvalue
#  111|         0: [VariableAccess] p
#  111|             Type = [IntPointerType] int *
#  111|             ValueCategory = lvalue
#  111|         1: [AddressOfExpr] & ...
#  111|             Type = [IntPointerType] int *
#  111|             ValueCategory = prvalue
#  111|           0: [ParenthesisExpr] (...)
#  111|               Type = [IntType] int
#  111|               ValueCategory = lvalue
#  111|             expr: [PrefixDecrExpr] -- ...
#  111|                 Type = [IntType] int
#  111|                 ValueCategory = lvalue
#  111|               0: [VariableAccess] x
#  111|                   Type = [IntType] int
#  111|                   ValueCategory = lvalue
#  112|     3: [ReturnStmt] return ...
#  114| [TopLevelFunction] void FloatOps(double, double)
#  114|   params: 
#  114|     0: [Parameter] x
#  114|         Type = [DoubleType] double
#  114|     1: [Parameter] y
#  114|         Type = [DoubleType] double
#  114|   body: [Block] { ... }
#  115|     0: [DeclStmt] declaration
#  115|       0: [VariableDeclarationEntry] definition of z
#  115|           Type = [DoubleType] double
#  117|     1: [ExprStmt] ExprStmt
#  117|       0: [AssignExpr] ... = ...
#  117|           Type = [DoubleType] double
#  117|           ValueCategory = lvalue
#  117|         0: [VariableAccess] z
#  117|             Type = [DoubleType] double
#  117|             ValueCategory = lvalue
#  117|         1: [AddExpr] ... + ...
#  117|             Type = [DoubleType] double
#  117|             ValueCategory = prvalue
#  117|           0: [VariableAccess] x
#  117|               Type = [DoubleType] double
#  117|               ValueCategory = prvalue(load)
#  117|           1: [VariableAccess] y
#  117|               Type = [DoubleType] double
#  117|               ValueCategory = prvalue(load)
#  118|     2: [ExprStmt] ExprStmt
#  118|       0: [AssignExpr] ... = ...
#  118|           Type = [DoubleType] double
#  118|           ValueCategory = lvalue
#  118|         0: [VariableAccess] z
#  118|             Type = [DoubleType] double
#  118|             ValueCategory = lvalue
#  118|         1: [SubExpr] ... - ...
#  118|             Type = [DoubleType] double
#  118|             ValueCategory = prvalue
#  118|           0: [VariableAccess] x
#  118|               Type = [DoubleType] double
#  118|               ValueCategory = prvalue(load)
#  118|           1: [VariableAccess] y
#  118|               Type = [DoubleType] double
#  118|               ValueCategory = prvalue(load)
#  119|     3: [ExprStmt] ExprStmt
#  119|       0: [AssignExpr] ... = ...
#  119|           Type = [DoubleType] double
#  119|           ValueCategory = lvalue
#  119|         0: [VariableAccess] z
#  119|             Type = [DoubleType] double
#  119|             ValueCategory = lvalue
#  119|         1: [MulExpr] ... * ...
#  119|             Type = [DoubleType] double
#  119|             ValueCategory = prvalue
#  119|           0: [VariableAccess] x
#  119|               Type = [DoubleType] double
#  119|               ValueCategory = prvalue(load)
#  119|           1: [VariableAccess] y
#  119|               Type = [DoubleType] double
#  119|               ValueCategory = prvalue(load)
#  120|     4: [ExprStmt] ExprStmt
#  120|       0: [AssignExpr] ... = ...
#  120|           Type = [DoubleType] double
#  120|           ValueCategory = lvalue
#  120|         0: [VariableAccess] z
#  120|             Type = [DoubleType] double
#  120|             ValueCategory = lvalue
#  120|         1: [DivExpr] ... / ...
#  120|             Type = [DoubleType] double
#  120|             ValueCategory = prvalue
#  120|           0: [VariableAccess] x
#  120|               Type = [DoubleType] double
#  120|               ValueCategory = prvalue(load)
#  120|           1: [VariableAccess] y
#  120|               Type = [DoubleType] double
#  120|               ValueCategory = prvalue(load)
#  122|     5: [ExprStmt] ExprStmt
#  122|       0: [AssignExpr] ... = ...
#  122|           Type = [DoubleType] double
#  122|           ValueCategory = lvalue
#  122|         0: [VariableAccess] z
#  122|             Type = [DoubleType] double
#  122|             ValueCategory = lvalue
#  122|         1: [VariableAccess] x
#  122|             Type = [DoubleType] double
#  122|             ValueCategory = prvalue(load)
#  124|     6: [ExprStmt] ExprStmt
#  124|       0: [AssignAddExpr] ... += ...
#  124|           Type = [DoubleType] double
#  124|           ValueCategory = lvalue
#  124|         0: [VariableAccess] z
#  124|             Type = [DoubleType] double
#  124|             ValueCategory = lvalue
#  124|         1: [VariableAccess] x
#  124|             Type = [DoubleType] double
#  124|             ValueCategory = prvalue(load)
#  125|     7: [ExprStmt] ExprStmt
#  125|       0: [AssignSubExpr] ... -= ...
#  125|           Type = [DoubleType] double
#  125|           ValueCategory = lvalue
#  125|         0: [VariableAccess] z
#  125|             Type = [DoubleType] double
#  125|             ValueCategory = lvalue
#  125|         1: [VariableAccess] x
#  125|             Type = [DoubleType] double
#  125|             ValueCategory = prvalue(load)
#  126|     8: [ExprStmt] ExprStmt
#  126|       0: [AssignMulExpr] ... *= ...
#  126|           Type = [DoubleType] double
#  126|           ValueCategory = lvalue
#  126|         0: [VariableAccess] z
#  126|             Type = [DoubleType] double
#  126|             ValueCategory = lvalue
#  126|         1: [VariableAccess] x
#  126|             Type = [DoubleType] double
#  126|             ValueCategory = prvalue(load)
#  127|     9: [ExprStmt] ExprStmt
#  127|       0: [AssignDivExpr] ... /= ...
#  127|           Type = [DoubleType] double
#  127|           ValueCategory = lvalue
#  127|         0: [VariableAccess] z
#  127|             Type = [DoubleType] double
#  127|             ValueCategory = lvalue
#  127|         1: [VariableAccess] x
#  127|             Type = [DoubleType] double
#  127|             ValueCategory = prvalue(load)
#  129|     10: [ExprStmt] ExprStmt
#  129|       0: [AssignExpr] ... = ...
#  129|           Type = [DoubleType] double
#  129|           ValueCategory = lvalue
#  129|         0: [VariableAccess] z
#  129|             Type = [DoubleType] double
#  129|             ValueCategory = lvalue
#  129|         1: [UnaryPlusExpr] + ...
#  129|             Type = [DoubleType] double
#  129|             ValueCategory = prvalue
#  129|           0: [VariableAccess] x
#  129|               Type = [DoubleType] double
#  129|               ValueCategory = prvalue(load)
#  130|     11: [ExprStmt] ExprStmt
#  130|       0: [AssignExpr] ... = ...
#  130|           Type = [DoubleType] double
#  130|           ValueCategory = lvalue
#  130|         0: [VariableAccess] z
#  130|             Type = [DoubleType] double
#  130|             ValueCategory = lvalue
#  130|         1: [UnaryMinusExpr] - ...
#  130|             Type = [DoubleType] double
#  130|             ValueCategory = prvalue
#  130|           0: [VariableAccess] x
#  130|               Type = [DoubleType] double
#  130|               ValueCategory = prvalue(load)
#  131|     12: [ReturnStmt] return ...
#  133| [TopLevelFunction] void FloatCompare(double, double)
#  133|   params: 
#  133|     0: [Parameter] x
#  133|         Type = [DoubleType] double
#  133|     1: [Parameter] y
#  133|         Type = [DoubleType] double
#  133|   body: [Block] { ... }
#  134|     0: [DeclStmt] declaration
#  134|       0: [VariableDeclarationEntry] definition of b
#  134|           Type = [BoolType] bool
#  136|     1: [ExprStmt] ExprStmt
#  136|       0: [AssignExpr] ... = ...
#  136|           Type = [BoolType] bool
#  136|           ValueCategory = lvalue
#  136|         0: [VariableAccess] b
#  136|             Type = [BoolType] bool
#  136|             ValueCategory = lvalue
#  136|         1: [EQExpr] ... == ...
#  136|             Type = [BoolType] bool
#  136|             ValueCategory = prvalue
#  136|           0: [VariableAccess] x
#  136|               Type = [DoubleType] double
#  136|               ValueCategory = prvalue(load)
#  136|           1: [VariableAccess] y
#  136|               Type = [DoubleType] double
#  136|               ValueCategory = prvalue(load)
#  137|     2: [ExprStmt] ExprStmt
#  137|       0: [AssignExpr] ... = ...
#  137|           Type = [BoolType] bool
#  137|           ValueCategory = lvalue
#  137|         0: [VariableAccess] b
#  137|             Type = [BoolType] bool
#  137|             ValueCategory = lvalue
#  137|         1: [NEExpr] ... != ...
#  137|             Type = [BoolType] bool
#  137|             ValueCategory = prvalue
#  137|           0: [VariableAccess] x
#  137|               Type = [DoubleType] double
#  137|               ValueCategory = prvalue(load)
#  137|           1: [VariableAccess] y
#  137|               Type = [DoubleType] double
#  137|               ValueCategory = prvalue(load)
#  138|     3: [ExprStmt] ExprStmt
#  138|       0: [AssignExpr] ... = ...
#  138|           Type = [BoolType] bool
#  138|           ValueCategory = lvalue
#  138|         0: [VariableAccess] b
#  138|             Type = [BoolType] bool
#  138|             ValueCategory = lvalue
#  138|         1: [LTExpr] ... < ...
#  138|             Type = [BoolType] bool
#  138|             ValueCategory = prvalue
#  138|           0: [VariableAccess] x
#  138|               Type = [DoubleType] double
#  138|               ValueCategory = prvalue(load)
#  138|           1: [VariableAccess] y
#  138|               Type = [DoubleType] double
#  138|               ValueCategory = prvalue(load)
#  139|     4: [ExprStmt] ExprStmt
#  139|       0: [AssignExpr] ... = ...
#  139|           Type = [BoolType] bool
#  139|           ValueCategory = lvalue
#  139|         0: [VariableAccess] b
#  139|             Type = [BoolType] bool
#  139|             ValueCategory = lvalue
#  139|         1: [GTExpr] ... > ...
#  139|             Type = [BoolType] bool
#  139|             ValueCategory = prvalue
#  139|           0: [VariableAccess] x
#  139|               Type = [DoubleType] double
#  139|               ValueCategory = prvalue(load)
#  139|           1: [VariableAccess] y
#  139|               Type = [DoubleType] double
#  139|               ValueCategory = prvalue(load)
#  140|     5: [ExprStmt] ExprStmt
#  140|       0: [AssignExpr] ... = ...
#  140|           Type = [BoolType] bool
#  140|           ValueCategory = lvalue
#  140|         0: [VariableAccess] b
#  140|             Type = [BoolType] bool
#  140|             ValueCategory = lvalue
#  140|         1: [LEExpr] ... <= ...
#  140|             Type = [BoolType] bool
#  140|             ValueCategory = prvalue
#  140|           0: [VariableAccess] x
#  140|               Type = [DoubleType] double
#  140|               ValueCategory = prvalue(load)
#  140|           1: [VariableAccess] y
#  140|               Type = [DoubleType] double
#  140|               ValueCategory = prvalue(load)
#  141|     6: [ExprStmt] ExprStmt
#  141|       0: [AssignExpr] ... = ...
#  141|           Type = [BoolType] bool
#  141|           ValueCategory = lvalue
#  141|         0: [VariableAccess] b
#  141|             Type = [BoolType] bool
#  141|             ValueCategory = lvalue
#  141|         1: [GEExpr] ... >= ...
#  141|             Type = [BoolType] bool
#  141|             ValueCategory = prvalue
#  141|           0: [VariableAccess] x
#  141|               Type = [DoubleType] double
#  141|               ValueCategory = prvalue(load)
#  141|           1: [VariableAccess] y
#  141|               Type = [DoubleType] double
#  141|               ValueCategory = prvalue(load)
#  142|     7: [ReturnStmt] return ...
#  144| [TopLevelFunction] void FloatCrement(float)
#  144|   params: 
#  144|     0: [Parameter] x
#  144|         Type = [FloatType] float
#  144|   body: [Block] { ... }
#  145|     0: [DeclStmt] declaration
#  145|       0: [VariableDeclarationEntry] definition of y
#  145|           Type = [FloatType] float
#  147|     1: [ExprStmt] ExprStmt
#  147|       0: [AssignExpr] ... = ...
#  147|           Type = [FloatType] float
#  147|           ValueCategory = lvalue
#  147|         0: [VariableAccess] y
#  147|             Type = [FloatType] float
#  147|             ValueCategory = lvalue
#  147|         1: [PrefixIncrExpr] ++ ...
#  147|             Type = [FloatType] float
#  147|             ValueCategory = prvalue
#  147|           0: [VariableAccess] x
#  147|               Type = [FloatType] float
#  147|               ValueCategory = lvalue
#  148|     2: [ExprStmt] ExprStmt
#  148|       0: [AssignExpr] ... = ...
#  148|           Type = [FloatType] float
#  148|           ValueCategory = lvalue
#  148|         0: [VariableAccess] y
#  148|             Type = [FloatType] float
#  148|             ValueCategory = lvalue
#  148|         1: [PrefixDecrExpr] -- ...
#  148|             Type = [FloatType] float
#  148|             ValueCategory = prvalue
#  148|           0: [VariableAccess] x
#  148|               Type = [FloatType] float
#  148|               ValueCategory = lvalue
#  149|     3: [ExprStmt] ExprStmt
#  149|       0: [AssignExpr] ... = ...
#  149|           Type = [FloatType] float
#  149|           ValueCategory = lvalue
#  149|         0: [VariableAccess] y
#  149|             Type = [FloatType] float
#  149|             ValueCategory = lvalue
#  149|         1: [PostfixIncrExpr] ... ++
#  149|             Type = [FloatType] float
#  149|             ValueCategory = prvalue
#  149|           0: [VariableAccess] x
#  149|               Type = [FloatType] float
#  149|               ValueCategory = lvalue
#  150|     4: [ExprStmt] ExprStmt
#  150|       0: [AssignExpr] ... = ...
#  150|           Type = [FloatType] float
#  150|           ValueCategory = lvalue
#  150|         0: [VariableAccess] y
#  150|             Type = [FloatType] float
#  150|             ValueCategory = lvalue
#  150|         1: [PostfixDecrExpr] ... --
#  150|             Type = [FloatType] float
#  150|             ValueCategory = prvalue
#  150|           0: [VariableAccess] x
#  150|               Type = [FloatType] float
#  150|               ValueCategory = lvalue
#  151|     5: [ReturnStmt] return ...
#  153| [TopLevelFunction] void PointerOps(int*, int)
#  153|   params: 
#  153|     0: [Parameter] p
#  153|         Type = [IntPointerType] int *
#  153|     1: [Parameter] i
#  153|         Type = [IntType] int
#  153|   body: [Block] { ... }
#  154|     0: [DeclStmt] declaration
#  154|       0: [VariableDeclarationEntry] definition of q
#  154|           Type = [IntPointerType] int *
#  155|     1: [DeclStmt] declaration
#  155|       0: [VariableDeclarationEntry] definition of b
#  155|           Type = [BoolType] bool
#  157|     2: [ExprStmt] ExprStmt
#  157|       0: [AssignExpr] ... = ...
#  157|           Type = [IntPointerType] int *
#  157|           ValueCategory = lvalue
#  157|         0: [VariableAccess] q
#  157|             Type = [IntPointerType] int *
#  157|             ValueCategory = lvalue
#  157|         1: [PointerAddExpr] ... + ...
#  157|             Type = [IntPointerType] int *
#  157|             ValueCategory = prvalue
#  157|           0: [VariableAccess] p
#  157|               Type = [IntPointerType] int *
#  157|               ValueCategory = prvalue(load)
#  157|           1: [VariableAccess] i
#  157|               Type = [IntType] int
#  157|               ValueCategory = prvalue(load)
#  158|     3: [ExprStmt] ExprStmt
#  158|       0: [AssignExpr] ... = ...
#  158|           Type = [IntPointerType] int *
#  158|           ValueCategory = lvalue
#  158|         0: [VariableAccess] q
#  158|             Type = [IntPointerType] int *
#  158|             ValueCategory = lvalue
#  158|         1: [PointerAddExpr] ... + ...
#  158|             Type = [IntPointerType] int *
#  158|             ValueCategory = prvalue
#  158|           0: [VariableAccess] i
#  158|               Type = [IntType] int
#  158|               ValueCategory = prvalue(load)
#  158|           1: [VariableAccess] p
#  158|               Type = [IntPointerType] int *
#  158|               ValueCategory = prvalue(load)
#  159|     4: [ExprStmt] ExprStmt
#  159|       0: [AssignExpr] ... = ...
#  159|           Type = [IntPointerType] int *
#  159|           ValueCategory = lvalue
#  159|         0: [VariableAccess] q
#  159|             Type = [IntPointerType] int *
#  159|             ValueCategory = lvalue
#  159|         1: [PointerSubExpr] ... - ...
#  159|             Type = [IntPointerType] int *
#  159|             ValueCategory = prvalue
#  159|           0: [VariableAccess] p
#  159|               Type = [IntPointerType] int *
#  159|               ValueCategory = prvalue(load)
#  159|           1: [VariableAccess] i
#  159|               Type = [IntType] int
#  159|               ValueCategory = prvalue(load)
#  160|     5: [ExprStmt] ExprStmt
#  160|       0: [AssignExpr] ... = ...
#  160|           Type = [IntType] int
#  160|           ValueCategory = lvalue
#  160|         0: [VariableAccess] i
#  160|             Type = [IntType] int
#  160|             ValueCategory = lvalue
#  160|         1: [CStyleCast] (int)...
#  160|             Conversion = [IntegralConversion] integral conversion
#  160|             Type = [IntType] int
#  160|             ValueCategory = prvalue
#  160|           expr: [PointerDiffExpr] ... - ...
#  160|               Type = [LongType] long
#  160|               ValueCategory = prvalue
#  160|             0: [VariableAccess] p
#  160|                 Type = [IntPointerType] int *
#  160|                 ValueCategory = prvalue(load)
#  160|             1: [VariableAccess] q
#  160|                 Type = [IntPointerType] int *
#  160|                 ValueCategory = prvalue(load)
#  162|     6: [ExprStmt] ExprStmt
#  162|       0: [AssignExpr] ... = ...
#  162|           Type = [IntPointerType] int *
#  162|           ValueCategory = lvalue
#  162|         0: [VariableAccess] q
#  162|             Type = [IntPointerType] int *
#  162|             ValueCategory = lvalue
#  162|         1: [VariableAccess] p
#  162|             Type = [IntPointerType] int *
#  162|             ValueCategory = prvalue(load)
#  164|     7: [ExprStmt] ExprStmt
#  164|       0: [AssignPointerAddExpr] ... += ...
#  164|           Type = [IntPointerType] int *
#  164|           ValueCategory = lvalue
#  164|         0: [VariableAccess] q
#  164|             Type = [IntPointerType] int *
#  164|             ValueCategory = lvalue
#  164|         1: [VariableAccess] i
#  164|             Type = [IntType] int
#  164|             ValueCategory = prvalue(load)
#  165|     8: [ExprStmt] ExprStmt
#  165|       0: [AssignPointerSubExpr] ... -= ...
#  165|           Type = [IntPointerType] int *
#  165|           ValueCategory = lvalue
#  165|         0: [VariableAccess] q
#  165|             Type = [IntPointerType] int *
#  165|             ValueCategory = lvalue
#  165|         1: [VariableAccess] i
#  165|             Type = [IntType] int
#  165|             ValueCategory = prvalue(load)
#  167|     9: [ExprStmt] ExprStmt
#  167|       0: [AssignExpr] ... = ...
#  167|           Type = [BoolType] bool
#  167|           ValueCategory = lvalue
#  167|         0: [VariableAccess] b
#  167|             Type = [BoolType] bool
#  167|             ValueCategory = lvalue
#  167|         1: [CStyleCast] (bool)...
#  167|             Conversion = [BoolConversion] conversion to bool
#  167|             Type = [BoolType] bool
#  167|             ValueCategory = prvalue
#  167|           expr: [VariableAccess] p
#  167|               Type = [IntPointerType] int *
#  167|               ValueCategory = prvalue(load)
#  168|     10: [ExprStmt] ExprStmt
#  168|       0: [AssignExpr] ... = ...
#  168|           Type = [BoolType] bool
#  168|           ValueCategory = lvalue
#  168|         0: [VariableAccess] b
#  168|             Type = [BoolType] bool
#  168|             ValueCategory = lvalue
#  168|         1: [NotExpr] ! ...
#  168|             Type = [BoolType] bool
#  168|             ValueCategory = prvalue
#  168|           0: [CStyleCast] (bool)...
#  168|               Conversion = [BoolConversion] conversion to bool
#  168|               Type = [BoolType] bool
#  168|               ValueCategory = prvalue
#  168|             expr: [VariableAccess] p
#  168|                 Type = [IntPointerType] int *
#  168|                 ValueCategory = prvalue(load)
#  169|     11: [ReturnStmt] return ...
#  171| [TopLevelFunction] void ArrayAccess(int*, int)
#  171|   params: 
#  171|     0: [Parameter] p
#  171|         Type = [IntPointerType] int *
#  171|     1: [Parameter] i
#  171|         Type = [IntType] int
#  171|   body: [Block] { ... }
#  172|     0: [DeclStmt] declaration
#  172|       0: [VariableDeclarationEntry] definition of x
#  172|           Type = [IntType] int
#  174|     1: [ExprStmt] ExprStmt
#  174|       0: [AssignExpr] ... = ...
#  174|           Type = [IntType] int
#  174|           ValueCategory = lvalue
#  174|         0: [VariableAccess] x
#  174|             Type = [IntType] int
#  174|             ValueCategory = lvalue
#  174|         1: [ArrayExpr] access to array
#  174|             Type = [IntType] int
#  174|             ValueCategory = prvalue(load)
#  174|           0: [VariableAccess] p
#  174|               Type = [IntPointerType] int *
#  174|               ValueCategory = prvalue(load)
#  174|           1: [VariableAccess] i
#  174|               Type = [IntType] int
#  174|               ValueCategory = prvalue(load)
#  175|     2: [ExprStmt] ExprStmt
#  175|       0: [AssignExpr] ... = ...
#  175|           Type = [IntType] int
#  175|           ValueCategory = lvalue
#  175|         0: [VariableAccess] x
#  175|             Type = [IntType] int
#  175|             ValueCategory = lvalue
#  175|         1: [ArrayExpr] access to array
#  175|             Type = [IntType] int
#  175|             ValueCategory = prvalue(load)
#  175|           0: [VariableAccess] p
#  175|               Type = [IntPointerType] int *
#  175|               ValueCategory = prvalue(load)
#  175|           1: [VariableAccess] i
#  175|               Type = [IntType] int
#  175|               ValueCategory = prvalue(load)
#  177|     3: [ExprStmt] ExprStmt
#  177|       0: [AssignExpr] ... = ...
#  177|           Type = [IntType] int
#  177|           ValueCategory = lvalue
#  177|         0: [ArrayExpr] access to array
#  177|             Type = [IntType] int
#  177|             ValueCategory = lvalue
#  177|           0: [VariableAccess] p
#  177|               Type = [IntPointerType] int *
#  177|               ValueCategory = prvalue(load)
#  177|           1: [VariableAccess] i
#  177|               Type = [IntType] int
#  177|               ValueCategory = prvalue(load)
#  177|         1: [VariableAccess] x
#  177|             Type = [IntType] int
#  177|             ValueCategory = prvalue(load)
#  178|     4: [ExprStmt] ExprStmt
#  178|       0: [AssignExpr] ... = ...
#  178|           Type = [IntType] int
#  178|           ValueCategory = lvalue
#  178|         0: [ArrayExpr] access to array
#  178|             Type = [IntType] int
#  178|             ValueCategory = lvalue
#  178|           0: [VariableAccess] p
#  178|               Type = [IntPointerType] int *
#  178|               ValueCategory = prvalue(load)
#  178|           1: [VariableAccess] i
#  178|               Type = [IntType] int
#  178|               ValueCategory = prvalue(load)
#  178|         1: [VariableAccess] x
#  178|             Type = [IntType] int
#  178|             ValueCategory = prvalue(load)
#  180|     5: [DeclStmt] declaration
#  180|       0: [VariableDeclarationEntry] definition of a
#  180|           Type = [ArrayType] int[10]
#  181|     6: [ExprStmt] ExprStmt
#  181|       0: [AssignExpr] ... = ...
#  181|           Type = [IntType] int
#  181|           ValueCategory = lvalue
#  181|         0: [VariableAccess] x
#  181|             Type = [IntType] int
#  181|             ValueCategory = lvalue
#  181|         1: [ArrayExpr] access to array
#  181|             Type = [IntType] int
#  181|             ValueCategory = prvalue(load)
#  181|           0: [ArrayToPointerConversion] array to pointer conversion
#  181|               Type = [IntPointerType] int *
#  181|               ValueCategory = prvalue
#  181|             expr: [VariableAccess] a
#  181|                 Type = [ArrayType] int[10]
#  181|                 ValueCategory = lvalue
#  181|           1: [VariableAccess] i
#  181|               Type = [IntType] int
#  181|               ValueCategory = prvalue(load)
#  182|     7: [ExprStmt] ExprStmt
#  182|       0: [AssignExpr] ... = ...
#  182|           Type = [IntType] int
#  182|           ValueCategory = lvalue
#  182|         0: [VariableAccess] x
#  182|             Type = [IntType] int
#  182|             ValueCategory = lvalue
#  182|         1: [ArrayExpr] access to array
#  182|             Type = [IntType] int
#  182|             ValueCategory = prvalue(load)
#  182|           0: [ArrayToPointerConversion] array to pointer conversion
#  182|               Type = [IntPointerType] int *
#  182|               ValueCategory = prvalue
#  182|             expr: [VariableAccess] a
#  182|                 Type = [ArrayType] int[10]
#  182|                 ValueCategory = lvalue
#  182|           1: [VariableAccess] i
#  182|               Type = [IntType] int
#  182|               ValueCategory = prvalue(load)
#  183|     8: [ExprStmt] ExprStmt
#  183|       0: [AssignExpr] ... = ...
#  183|           Type = [IntType] int
#  183|           ValueCategory = lvalue
#  183|         0: [ArrayExpr] access to array
#  183|             Type = [IntType] int
#  183|             ValueCategory = lvalue
#  183|           0: [ArrayToPointerConversion] array to pointer conversion
#  183|               Type = [IntPointerType] int *
#  183|               ValueCategory = prvalue
#  183|             expr: [VariableAccess] a
#  183|                 Type = [ArrayType] int[10]
#  183|                 ValueCategory = lvalue
#  183|           1: [VariableAccess] i
#  183|               Type = [IntType] int
#  183|               ValueCategory = prvalue(load)
#  183|         1: [VariableAccess] x
#  183|             Type = [IntType] int
#  183|             ValueCategory = prvalue(load)
#  184|     9: [ExprStmt] ExprStmt
#  184|       0: [AssignExpr] ... = ...
#  184|           Type = [IntType] int
#  184|           ValueCategory = lvalue
#  184|         0: [ArrayExpr] access to array
#  184|             Type = [IntType] int
#  184|             ValueCategory = lvalue
#  184|           0: [ArrayToPointerConversion] array to pointer conversion
#  184|               Type = [IntPointerType] int *
#  184|               ValueCategory = prvalue
#  184|             expr: [VariableAccess] a
#  184|                 Type = [ArrayType] int[10]
#  184|                 ValueCategory = lvalue
#  184|           1: [VariableAccess] i
#  184|               Type = [IntType] int
#  184|               ValueCategory = prvalue(load)
#  184|         1: [VariableAccess] x
#  184|             Type = [IntType] int
#  184|             ValueCategory = prvalue(load)
#  185|     10: [ReturnStmt] return ...
#  187| [TopLevelFunction] void StringLiteral(int)
#  187|   params: 
#  187|     0: [Parameter] i
#  187|         Type = [IntType] int
#  187|   body: [Block] { ... }
#  188|     0: [DeclStmt] declaration
#  188|       0: [VariableDeclarationEntry] definition of c
#  188|           Type = [PlainCharType] char
#  188|         init: [Initializer] initializer for c
#  188|           expr: [ArrayExpr] access to array
#  188|               Type = [PlainCharType] char
#  188|               ValueCategory = prvalue(load)
#  188|             0: [ArrayToPointerConversion] array to pointer conversion
#  188|                 Type = [PointerType] const char *
#  188|                 ValueCategory = prvalue
#  188|               expr: Foo
#  188|                   Type = [ArrayType] const char[4]
#  188|                   Value = [StringLiteral] "Foo"
#  188|                   ValueCategory = lvalue
#  188|             1: [VariableAccess] i
#  188|                 Type = [IntType] int
#  188|                 ValueCategory = prvalue(load)
#  189|     1: [DeclStmt] declaration
#  189|       0: [VariableDeclarationEntry] definition of pwc
#  189|           Type = [PointerType] wchar_t *
#  189|         init: [Initializer] initializer for pwc
#  189|           expr: [CStyleCast] (wchar_t *)...
#  189|               Conversion = [PointerConversion] pointer conversion
#  189|               Type = [PointerType] wchar_t *
#  189|               ValueCategory = prvalue
#  189|             expr: [ArrayToPointerConversion] array to pointer conversion
#  189|                 Type = [PointerType] const wchar_t *
#  189|                 ValueCategory = prvalue
#  189|               expr: Bar
#  189|                   Type = [ArrayType] const wchar_t[4]
#  189|                   Value = [StringLiteral] "Bar"
#  189|                   ValueCategory = lvalue
#  190|     2: [DeclStmt] declaration
#  190|       0: [VariableDeclarationEntry] definition of wc
#  190|           Type = [Wchar_t,WideCharType] wchar_t
#  190|         init: [Initializer] initializer for wc
#  190|           expr: [ArrayExpr] access to array
#  190|               Type = [Wchar_t,WideCharType] wchar_t
#  190|               ValueCategory = prvalue(load)
#  190|             0: [VariableAccess] pwc
#  190|                 Type = [PointerType] wchar_t *
#  190|                 ValueCategory = prvalue(load)
#  190|             1: [VariableAccess] i
#  190|                 Type = [IntType] int
#  190|                 ValueCategory = prvalue(load)
#  191|     3: [ReturnStmt] return ...
#  193| [TopLevelFunction] void PointerCompare(int*, int*)
#  193|   params: 
#  193|     0: [Parameter] p
#  193|         Type = [IntPointerType] int *
#  193|     1: [Parameter] q
#  193|         Type = [IntPointerType] int *
#  193|   body: [Block] { ... }
#  194|     0: [DeclStmt] declaration
#  194|       0: [VariableDeclarationEntry] definition of b
#  194|           Type = [BoolType] bool
#  196|     1: [ExprStmt] ExprStmt
#  196|       0: [AssignExpr] ... = ...
#  196|           Type = [BoolType] bool
#  196|           ValueCategory = lvalue
#  196|         0: [VariableAccess] b
#  196|             Type = [BoolType] bool
#  196|             ValueCategory = lvalue
#  196|         1: [EQExpr] ... == ...
#  196|             Type = [BoolType] bool
#  196|             ValueCategory = prvalue
#  196|           0: [VariableAccess] p
#  196|               Type = [IntPointerType] int *
#  196|               ValueCategory = prvalue(load)
#  196|           1: [VariableAccess] q
#  196|               Type = [IntPointerType] int *
#  196|               ValueCategory = prvalue(load)
#  197|     2: [ExprStmt] ExprStmt
#  197|       0: [AssignExpr] ... = ...
#  197|           Type = [BoolType] bool
#  197|           ValueCategory = lvalue
#  197|         0: [VariableAccess] b
#  197|             Type = [BoolType] bool
#  197|             ValueCategory = lvalue
#  197|         1: [NEExpr] ... != ...
#  197|             Type = [BoolType] bool
#  197|             ValueCategory = prvalue
#  197|           0: [VariableAccess] p
#  197|               Type = [IntPointerType] int *
#  197|               ValueCategory = prvalue(load)
#  197|           1: [VariableAccess] q
#  197|               Type = [IntPointerType] int *
#  197|               ValueCategory = prvalue(load)
#  198|     3: [ExprStmt] ExprStmt
#  198|       0: [AssignExpr] ... = ...
#  198|           Type = [BoolType] bool
#  198|           ValueCategory = lvalue
#  198|         0: [VariableAccess] b
#  198|             Type = [BoolType] bool
#  198|             ValueCategory = lvalue
#  198|         1: [LTExpr] ... < ...
#  198|             Type = [BoolType] bool
#  198|             ValueCategory = prvalue
#  198|           0: [VariableAccess] p
#  198|               Type = [IntPointerType] int *
#  198|               ValueCategory = prvalue(load)
#  198|           1: [VariableAccess] q
#  198|               Type = [IntPointerType] int *
#  198|               ValueCategory = prvalue(load)
#  199|     4: [ExprStmt] ExprStmt
#  199|       0: [AssignExpr] ... = ...
#  199|           Type = [BoolType] bool
#  199|           ValueCategory = lvalue
#  199|         0: [VariableAccess] b
#  199|             Type = [BoolType] bool
#  199|             ValueCategory = lvalue
#  199|         1: [GTExpr] ... > ...
#  199|             Type = [BoolType] bool
#  199|             ValueCategory = prvalue
#  199|           0: [VariableAccess] p
#  199|               Type = [IntPointerType] int *
#  199|               ValueCategory = prvalue(load)
#  199|           1: [VariableAccess] q
#  199|               Type = [IntPointerType] int *
#  199|               ValueCategory = prvalue(load)
#  200|     5: [ExprStmt] ExprStmt
#  200|       0: [AssignExpr] ... = ...
#  200|           Type = [BoolType] bool
#  200|           ValueCategory = lvalue
#  200|         0: [VariableAccess] b
#  200|             Type = [BoolType] bool
#  200|             ValueCategory = lvalue
#  200|         1: [LEExpr] ... <= ...
#  200|             Type = [BoolType] bool
#  200|             ValueCategory = prvalue
#  200|           0: [VariableAccess] p
#  200|               Type = [IntPointerType] int *
#  200|               ValueCategory = prvalue(load)
#  200|           1: [VariableAccess] q
#  200|               Type = [IntPointerType] int *
#  200|               ValueCategory = prvalue(load)
#  201|     6: [ExprStmt] ExprStmt
#  201|       0: [AssignExpr] ... = ...
#  201|           Type = [BoolType] bool
#  201|           ValueCategory = lvalue
#  201|         0: [VariableAccess] b
#  201|             Type = [BoolType] bool
#  201|             ValueCategory = lvalue
#  201|         1: [GEExpr] ... >= ...
#  201|             Type = [BoolType] bool
#  201|             ValueCategory = prvalue
#  201|           0: [VariableAccess] p
#  201|               Type = [IntPointerType] int *
#  201|               ValueCategory = prvalue(load)
#  201|           1: [VariableAccess] q
#  201|               Type = [IntPointerType] int *
#  201|               ValueCategory = prvalue(load)
#  202|     7: [ReturnStmt] return ...
#  204| [TopLevelFunction] void PointerCrement(int*)
#  204|   params: 
#  204|     0: [Parameter] p
#  204|         Type = [IntPointerType] int *
#  204|   body: [Block] { ... }
#  205|     0: [DeclStmt] declaration
#  205|       0: [VariableDeclarationEntry] definition of q
#  205|           Type = [IntPointerType] int *
#  207|     1: [ExprStmt] ExprStmt
#  207|       0: [AssignExpr] ... = ...
#  207|           Type = [IntPointerType] int *
#  207|           ValueCategory = lvalue
#  207|         0: [VariableAccess] q
#  207|             Type = [IntPointerType] int *
#  207|             ValueCategory = lvalue
#  207|         1: [PrefixIncrExpr] ++ ...
#  207|             Type = [IntPointerType] int *
#  207|             ValueCategory = prvalue
#  207|           0: [VariableAccess] p
#  207|               Type = [IntPointerType] int *
#  207|               ValueCategory = lvalue
#  208|     2: [ExprStmt] ExprStmt
#  208|       0: [AssignExpr] ... = ...
#  208|           Type = [IntPointerType] int *
#  208|           ValueCategory = lvalue
#  208|         0: [VariableAccess] q
#  208|             Type = [IntPointerType] int *
#  208|             ValueCategory = lvalue
#  208|         1: [PrefixDecrExpr] -- ...
#  208|             Type = [IntPointerType] int *
#  208|             ValueCategory = prvalue
#  208|           0: [VariableAccess] p
#  208|               Type = [IntPointerType] int *
#  208|               ValueCategory = lvalue
#  209|     3: [ExprStmt] ExprStmt
#  209|       0: [AssignExpr] ... = ...
#  209|           Type = [IntPointerType] int *
#  209|           ValueCategory = lvalue
#  209|         0: [VariableAccess] q
#  209|             Type = [IntPointerType] int *
#  209|             ValueCategory = lvalue
#  209|         1: [PostfixIncrExpr] ... ++
#  209|             Type = [IntPointerType] int *
#  209|             ValueCategory = prvalue
#  209|           0: [VariableAccess] p
#  209|               Type = [IntPointerType] int *
#  209|               ValueCategory = lvalue
#  210|     4: [ExprStmt] ExprStmt
#  210|       0: [AssignExpr] ... = ...
#  210|           Type = [IntPointerType] int *
#  210|           ValueCategory = lvalue
#  210|         0: [VariableAccess] q
#  210|             Type = [IntPointerType] int *
#  210|             ValueCategory = lvalue
#  210|         1: [PostfixDecrExpr] ... --
#  210|             Type = [IntPointerType] int *
#  210|             ValueCategory = prvalue
#  210|           0: [VariableAccess] p
#  210|               Type = [IntPointerType] int *
#  210|               ValueCategory = lvalue
#  211|     5: [ReturnStmt] return ...
#  213| [TopLevelFunction] void CompoundAssignment()
#  213|   params: 
#  213|   body: [Block] { ... }
#  215|     0: [DeclStmt] declaration
#  215|       0: [VariableDeclarationEntry] definition of x
#  215|           Type = [IntType] int
#  215|         init: [Initializer] initializer for x
#  215|           expr: [Literal] 5
#  215|               Type = [IntType] int
#  215|               Value = [Literal] 5
#  215|               ValueCategory = prvalue
#  216|     1: [ExprStmt] ExprStmt
#  216|       0: [AssignAddExpr] ... += ...
#  216|           Type = [IntType] int
#  216|           ValueCategory = lvalue
#  216|         0: [VariableAccess] x
#  216|             Type = [IntType] int
#  216|             ValueCategory = lvalue
#  216|         1: [Literal] 7
#  216|             Type = [IntType] int
#  216|             Value = [Literal] 7
#  216|             ValueCategory = prvalue
#  219|     2: [DeclStmt] declaration
#  219|       0: [VariableDeclarationEntry] definition of y
#  219|           Type = [ShortType] short
#  219|         init: [Initializer] initializer for y
#  219|           expr: [CStyleCast] (short)...
#  219|               Conversion = [IntegralConversion] integral conversion
#  219|               Type = [ShortType] short
#  219|               Value = [CStyleCast] 5
#  219|               ValueCategory = prvalue
#  219|             expr: [Literal] 5
#  219|                 Type = [IntType] int
#  219|                 Value = [Literal] 5
#  219|                 ValueCategory = prvalue
#  220|     3: [ExprStmt] ExprStmt
#  220|       0: [AssignAddExpr] ... += ...
#  220|           Type = [ShortType] short
#  220|           ValueCategory = lvalue
#  220|         0: [VariableAccess] y
#  220|             Type = [ShortType] short
#  220|             ValueCategory = lvalue
#  220|         1: [VariableAccess] x
#  220|             Type = [IntType] int
#  220|             ValueCategory = prvalue(load)
#  223|     4: [ExprStmt] ExprStmt
#  223|       0: [AssignLShiftExpr] ... <<= ...
#  223|           Type = [ShortType] short
#  223|           ValueCategory = lvalue
#  223|         0: [VariableAccess] y
#  223|             Type = [ShortType] short
#  223|             ValueCategory = lvalue
#  223|         1: [Literal] 1
#  223|             Type = [IntType] int
#  223|             Value = [Literal] 1
#  223|             ValueCategory = prvalue
#  226|     5: [DeclStmt] declaration
#  226|       0: [VariableDeclarationEntry] definition of z
#  226|           Type = [LongType] long
#  226|         init: [Initializer] initializer for z
#  226|           expr: [CStyleCast] (long)...
#  226|               Conversion = [IntegralConversion] integral conversion
#  226|               Type = [LongType] long
#  226|               Value = [CStyleCast] 7
#  226|               ValueCategory = prvalue
#  226|             expr: [Literal] 7
#  226|                 Type = [IntType] int
#  226|                 Value = [Literal] 7
#  226|                 ValueCategory = prvalue
#  227|     6: [ExprStmt] ExprStmt
#  227|       0: [AssignAddExpr] ... += ...
#  227|           Type = [LongType] long
#  227|           ValueCategory = lvalue
#  227|         0: [VariableAccess] z
#  227|             Type = [LongType] long
#  227|             ValueCategory = lvalue
#  227|         1: [Literal] 2.0
#  227|             Type = [FloatType] float
#  227|             Value = [Literal] 2.0
#  227|             ValueCategory = prvalue
#  228|     7: [ReturnStmt] return ...
#  230| [TopLevelFunction] void UninitializedVariables()
#  230|   params: 
#  230|   body: [Block] { ... }
#  231|     0: [DeclStmt] declaration
#  231|       0: [VariableDeclarationEntry] definition of x
#  231|           Type = [IntType] int
#  232|     1: [DeclStmt] declaration
#  232|       0: [VariableDeclarationEntry] definition of y
#  232|           Type = [IntType] int
#  232|         init: [Initializer] initializer for y
#  232|           expr: [VariableAccess] x
#  232|               Type = [IntType] int
#  232|               ValueCategory = prvalue(load)
#  233|     2: [ReturnStmt] return ...
#  235| [TopLevelFunction] int Parameters(int, int)
#  235|   params: 
#  235|     0: [Parameter] x
#  235|         Type = [IntType] int
#  235|     1: [Parameter] y
#  235|         Type = [IntType] int
#  235|   body: [Block] { ... }
#  236|     0: [ReturnStmt] return ...
#  236|       0: [RemExpr] ... % ...
#  236|           Type = [IntType] int
#  236|           ValueCategory = prvalue
#  236|         0: [VariableAccess] x
#  236|             Type = [IntType] int
#  236|             ValueCategory = prvalue(load)
#  236|         1: [VariableAccess] y
#  236|             Type = [IntType] int
#  236|             ValueCategory = prvalue(load)
#  239| [TopLevelFunction] void IfStatements(bool, int, int)
#  239|   params: 
#  239|     0: [Parameter] b
#  239|         Type = [BoolType] bool
#  239|     1: [Parameter] x
#  239|         Type = [IntType] int
#  239|     2: [Parameter] y
#  239|         Type = [IntType] int
#  239|   body: [Block] { ... }
#  240|     0: [IfStmt] if (...) ... 
#  240|       0: [VariableAccess] b
#  240|           Type = [BoolType] bool
#  240|           ValueCategory = prvalue(load)
#  240|       1: [Block] { ... }
#  243|     1: [IfStmt] if (...) ... 
#  243|       0: [VariableAccess] b
#  243|           Type = [BoolType] bool
#  243|           ValueCategory = prvalue(load)
#  243|       1: [Block] { ... }
#  244|         0: [ExprStmt] ExprStmt
#  244|           0: [AssignExpr] ... = ...
#  244|               Type = [IntType] int
#  244|               ValueCategory = lvalue
#  244|             0: [VariableAccess] x
#  244|                 Type = [IntType] int
#  244|                 ValueCategory = lvalue
#  244|             1: [VariableAccess] y
#  244|                 Type = [IntType] int
#  244|                 ValueCategory = prvalue(load)
#  247|     2: [IfStmt] if (...) ... 
#  247|       0: [LTExpr] ... < ...
#  247|           Type = [BoolType] bool
#  247|           ValueCategory = prvalue
#  247|         0: [VariableAccess] x
#  247|             Type = [IntType] int
#  247|             ValueCategory = prvalue(load)
#  247|         1: [Literal] 7
#  247|             Type = [IntType] int
#  247|             Value = [Literal] 7
#  247|             ValueCategory = prvalue
#  248|       1: [ExprStmt] ExprStmt
#  248|         0: [AssignExpr] ... = ...
#  248|             Type = [IntType] int
#  248|             ValueCategory = lvalue
#  248|           0: [VariableAccess] x
#  248|               Type = [IntType] int
#  248|               ValueCategory = lvalue
#  248|           1: [Literal] 2
#  248|               Type = [IntType] int
#  248|               Value = [Literal] 2
#  248|               ValueCategory = prvalue
#  250|       2: [ExprStmt] ExprStmt
#  250|         0: [AssignExpr] ... = ...
#  250|             Type = [IntType] int
#  250|             ValueCategory = lvalue
#  250|           0: [VariableAccess] x
#  250|               Type = [IntType] int
#  250|               ValueCategory = lvalue
#  250|           1: [Literal] 7
#  250|               Type = [IntType] int
#  250|               Value = [Literal] 7
#  250|               ValueCategory = prvalue
#  251|     3: [ReturnStmt] return ...
#  253| [TopLevelFunction] void WhileStatements(int)
#  253|   params: 
#  253|     0: [Parameter] n
#  253|         Type = [IntType] int
#  253|   body: [Block] { ... }
#  254|     0: [WhileStmt] while (...) ...
#  254|       0: [GTExpr] ... > ...
#  254|           Type = [BoolType] bool
#  254|           ValueCategory = prvalue
#  254|         0: [VariableAccess] n
#  254|             Type = [IntType] int
#  254|             ValueCategory = prvalue(load)
#  254|         1: [Literal] 0
#  254|             Type = [IntType] int
#  254|             Value = [Literal] 0
#  254|             ValueCategory = prvalue
#  254|       1: [Block] { ... }
#  255|         0: [ExprStmt] ExprStmt
#  255|           0: [AssignSubExpr] ... -= ...
#  255|               Type = [IntType] int
#  255|               ValueCategory = lvalue
#  255|             0: [VariableAccess] n
#  255|                 Type = [IntType] int
#  255|                 ValueCategory = lvalue
#  255|             1: [Literal] 1
#  255|                 Type = [IntType] int
#  255|                 Value = [Literal] 1
#  255|                 ValueCategory = prvalue
#  257|     1: [ReturnStmt] return ...
#  259| [TopLevelFunction] void DoStatements(int)
#  259|   params: 
#  259|     0: [Parameter] n
#  259|         Type = [IntType] int
#  259|   body: [Block] { ... }
#  260|     0: [DoStmt] do (...) ...
#  262|       0: [GTExpr] ... > ...
#  262|           Type = [BoolType] bool
#  262|           ValueCategory = prvalue
#  262|         0: [VariableAccess] n
#  262|             Type = [IntType] int
#  262|             ValueCategory = prvalue(load)
#  262|         1: [Literal] 0
#  262|             Type = [IntType] int
#  262|             Value = [Literal] 0
#  262|             ValueCategory = prvalue
#  260|       1: [Block] { ... }
#  261|         0: [ExprStmt] ExprStmt
#  261|           0: [AssignSubExpr] ... -= ...
#  261|               Type = [IntType] int
#  261|               ValueCategory = lvalue
#  261|             0: [VariableAccess] n
#  261|                 Type = [IntType] int
#  261|                 ValueCategory = lvalue
#  261|             1: [Literal] 1
#  261|                 Type = [IntType] int
#  261|                 Value = [Literal] 1
#  261|                 ValueCategory = prvalue
#  263|     1: [ReturnStmt] return ...
#  265| [TopLevelFunction] void For_Empty()
#  265|   params: 
#  265|   body: [Block] { ... }
#  266|     0: [DeclStmt] declaration
#  266|       0: [VariableDeclarationEntry] definition of j
#  266|           Type = [IntType] int
#  267|     1: [ForStmt] for(...;...;...) ...
#  267|       3: [Block] { ... }
#  268|         0: [EmptyStmt] ;
#  272| [TopLevelFunction] void For_Init()
#  272|   params: 
#  272|   body: [Block] { ... }
#  273|     0: [ForStmt] for(...;...;...) ...
#  273|       0: [DeclStmt] declaration
#  273|         0: [VariableDeclarationEntry] definition of i
#  273|             Type = [IntType] int
#  273|           init: [Initializer] initializer for i
#  273|             expr: [Literal] 0
#  273|                 Type = [IntType] int
#  273|                 Value = [Literal] 0
#  273|                 ValueCategory = prvalue
#  273|       3: [Block] { ... }
#  274|         0: [EmptyStmt] ;
#  278| [TopLevelFunction] void For_Condition()
#  278|   params: 
#  278|   body: [Block] { ... }
#  279|     0: [DeclStmt] declaration
#  279|       0: [VariableDeclarationEntry] definition of i
#  279|           Type = [IntType] int
#  279|         init: [Initializer] initializer for i
#  279|           expr: [Literal] 0
#  279|               Type = [IntType] int
#  279|               Value = [Literal] 0
#  279|               ValueCategory = prvalue
#  280|     1: [ForStmt] for(...;...;...) ...
#  280|       1: [LTExpr] ... < ...
#  280|           Type = [BoolType] bool
#  280|           ValueCategory = prvalue
#  280|         0: [VariableAccess] i
#  280|             Type = [IntType] int
#  280|             ValueCategory = prvalue(load)
#  280|         1: [Literal] 10
#  280|             Type = [IntType] int
#  280|             Value = [Literal] 10
#  280|             ValueCategory = prvalue
#  280|       3: [Block] { ... }
#  281|         0: [EmptyStmt] ;
#  283|     2: [ReturnStmt] return ...
#  285| [TopLevelFunction] void For_Update()
#  285|   params: 
#  285|   body: [Block] { ... }
#  286|     0: [DeclStmt] declaration
#  286|       0: [VariableDeclarationEntry] definition of i
#  286|           Type = [IntType] int
#  286|         init: [Initializer] initializer for i
#  286|           expr: [Literal] 0
#  286|               Type = [IntType] int
#  286|               Value = [Literal] 0
#  286|               ValueCategory = prvalue
#  287|     1: [ForStmt] for(...;...;...) ...
#  287|       2: [AssignAddExpr] ... += ...
#  287|           Type = [IntType] int
#  287|           ValueCategory = lvalue
#  287|         0: [VariableAccess] i
#  287|             Type = [IntType] int
#  287|             ValueCategory = lvalue
#  287|         1: [Literal] 1
#  287|             Type = [IntType] int
#  287|             Value = [Literal] 1
#  287|             ValueCategory = prvalue
#  287|       3: [Block] { ... }
#  288|         0: [EmptyStmt] ;
#  292| [TopLevelFunction] void For_InitCondition()
#  292|   params: 
#  292|   body: [Block] { ... }
#  293|     0: [ForStmt] for(...;...;...) ...
#  293|       0: [DeclStmt] declaration
#  293|         0: [VariableDeclarationEntry] definition of i
#  293|             Type = [IntType] int
#  293|           init: [Initializer] initializer for i
#  293|             expr: [Literal] 0
#  293|                 Type = [IntType] int
#  293|                 Value = [Literal] 0
#  293|                 ValueCategory = prvalue
#  293|       1: [LTExpr] ... < ...
#  293|           Type = [BoolType] bool
#  293|           ValueCategory = prvalue
#  293|         0: [VariableAccess] i
#  293|             Type = [IntType] int
#  293|             ValueCategory = prvalue(load)
#  293|         1: [Literal] 10
#  293|             Type = [IntType] int
#  293|             Value = [Literal] 10
#  293|             ValueCategory = prvalue
#  293|       3: [Block] { ... }
#  294|         0: [EmptyStmt] ;
#  296|     1: [ReturnStmt] return ...
#  298| [TopLevelFunction] void For_InitUpdate()
#  298|   params: 
#  298|   body: [Block] { ... }
#  299|     0: [ForStmt] for(...;...;...) ...
#  299|       0: [DeclStmt] declaration
#  299|         0: [VariableDeclarationEntry] definition of i
#  299|             Type = [IntType] int
#  299|           init: [Initializer] initializer for i
#  299|             expr: [Literal] 0
#  299|                 Type = [IntType] int
#  299|                 Value = [Literal] 0
#  299|                 ValueCategory = prvalue
#  299|       2: [AssignAddExpr] ... += ...
#  299|           Type = [IntType] int
#  299|           ValueCategory = lvalue
#  299|         0: [VariableAccess] i
#  299|             Type = [IntType] int
#  299|             ValueCategory = lvalue
#  299|         1: [Literal] 1
#  299|             Type = [IntType] int
#  299|             Value = [Literal] 1
#  299|             ValueCategory = prvalue
#  299|       3: [Block] { ... }
#  300|         0: [EmptyStmt] ;
#  304| [TopLevelFunction] void For_ConditionUpdate()
#  304|   params: 
#  304|   body: [Block] { ... }
#  305|     0: [DeclStmt] declaration
#  305|       0: [VariableDeclarationEntry] definition of i
#  305|           Type = [IntType] int
#  305|         init: [Initializer] initializer for i
#  305|           expr: [Literal] 0
#  305|               Type = [IntType] int
#  305|               Value = [Literal] 0
#  305|               ValueCategory = prvalue
#  306|     1: [ForStmt] for(...;...;...) ...
#  306|       1: [LTExpr] ... < ...
#  306|           Type = [BoolType] bool
#  306|           ValueCategory = prvalue
#  306|         0: [VariableAccess] i
#  306|             Type = [IntType] int
#  306|             ValueCategory = prvalue(load)
#  306|         1: [Literal] 10
#  306|             Type = [IntType] int
#  306|             Value = [Literal] 10
#  306|             ValueCategory = prvalue
#  306|       2: [AssignAddExpr] ... += ...
#  306|           Type = [IntType] int
#  306|           ValueCategory = lvalue
#  306|         0: [VariableAccess] i
#  306|             Type = [IntType] int
#  306|             ValueCategory = lvalue
#  306|         1: [Literal] 1
#  306|             Type = [IntType] int
#  306|             Value = [Literal] 1
#  306|             ValueCategory = prvalue
#  306|       3: [Block] { ... }
#  307|         0: [EmptyStmt] ;
#  309|     2: [ReturnStmt] return ...
#  311| [TopLevelFunction] void For_InitConditionUpdate()
#  311|   params: 
#  311|   body: [Block] { ... }
#  312|     0: [ForStmt] for(...;...;...) ...
#  312|       0: [DeclStmt] declaration
#  312|         0: [VariableDeclarationEntry] definition of i
#  312|             Type = [IntType] int
#  312|           init: [Initializer] initializer for i
#  312|             expr: [Literal] 0
#  312|                 Type = [IntType] int
#  312|                 Value = [Literal] 0
#  312|                 ValueCategory = prvalue
#  312|       1: [LTExpr] ... < ...
#  312|           Type = [BoolType] bool
#  312|           ValueCategory = prvalue
#  312|         0: [VariableAccess] i
#  312|             Type = [IntType] int
#  312|             ValueCategory = prvalue(load)
#  312|         1: [Literal] 10
#  312|             Type = [IntType] int
#  312|             Value = [Literal] 10
#  312|             ValueCategory = prvalue
#  312|       2: [AssignAddExpr] ... += ...
#  312|           Type = [IntType] int
#  312|           ValueCategory = lvalue
#  312|         0: [VariableAccess] i
#  312|             Type = [IntType] int
#  312|             ValueCategory = lvalue
#  312|         1: [Literal] 1
#  312|             Type = [IntType] int
#  312|             Value = [Literal] 1
#  312|             ValueCategory = prvalue
#  312|       3: [Block] { ... }
#  313|         0: [EmptyStmt] ;
#  315|     1: [ReturnStmt] return ...
#  317| [TopLevelFunction] void For_Break()
#  317|   params: 
#  317|   body: [Block] { ... }
#  318|     0: [ForStmt] for(...;...;...) ...
#  318|       0: [DeclStmt] declaration
#  318|         0: [VariableDeclarationEntry] definition of i
#  318|             Type = [IntType] int
#  318|           init: [Initializer] initializer for i
#  318|             expr: [Literal] 0
#  318|                 Type = [IntType] int
#  318|                 Value = [Literal] 0
#  318|                 ValueCategory = prvalue
#  318|       1: [LTExpr] ... < ...
#  318|           Type = [BoolType] bool
#  318|           ValueCategory = prvalue
#  318|         0: [VariableAccess] i
#  318|             Type = [IntType] int
#  318|             ValueCategory = prvalue(load)
#  318|         1: [Literal] 10
#  318|             Type = [IntType] int
#  318|             Value = [Literal] 10
#  318|             ValueCategory = prvalue
#  318|       2: [AssignAddExpr] ... += ...
#  318|           Type = [IntType] int
#  318|           ValueCategory = lvalue
#  318|         0: [VariableAccess] i
#  318|             Type = [IntType] int
#  318|             ValueCategory = lvalue
#  318|         1: [Literal] 1
#  318|             Type = [IntType] int
#  318|             Value = [Literal] 1
#  318|             ValueCategory = prvalue
#  318|       3: [Block] { ... }
#  319|         0: [IfStmt] if (...) ... 
#  319|           0: [EQExpr] ... == ...
#  319|               Type = [BoolType] bool
#  319|               ValueCategory = prvalue
#  319|             0: [VariableAccess] i
#  319|                 Type = [IntType] int
#  319|                 ValueCategory = prvalue(load)
#  319|             1: [Literal] 5
#  319|                 Type = [IntType] int
#  319|                 Value = [Literal] 5
#  319|                 ValueCategory = prvalue
#  319|           1: [Block] { ... }
#  320|             0: [BreakStmt] break;
#  322|     1: [LabelStmt] label ...:
#  323|     2: [ReturnStmt] return ...
#  325| [TopLevelFunction] void For_Continue_Update()
#  325|   params: 
#  325|   body: [Block] { ... }
#  326|     0: [ForStmt] for(...;...;...) ...
#  326|       0: [DeclStmt] declaration
#  326|         0: [VariableDeclarationEntry] definition of i
#  326|             Type = [IntType] int
#  326|           init: [Initializer] initializer for i
#  326|             expr: [Literal] 0
#  326|                 Type = [IntType] int
#  326|                 Value = [Literal] 0
#  326|                 ValueCategory = prvalue
#  326|       1: [LTExpr] ... < ...
#  326|           Type = [BoolType] bool
#  326|           ValueCategory = prvalue
#  326|         0: [VariableAccess] i
#  326|             Type = [IntType] int
#  326|             ValueCategory = prvalue(load)
#  326|         1: [Literal] 10
#  326|             Type = [IntType] int
#  326|             Value = [Literal] 10
#  326|             ValueCategory = prvalue
#  326|       2: [AssignAddExpr] ... += ...
#  326|           Type = [IntType] int
#  326|           ValueCategory = lvalue
#  326|         0: [VariableAccess] i
#  326|             Type = [IntType] int
#  326|             ValueCategory = lvalue
#  326|         1: [Literal] 1
#  326|             Type = [IntType] int
#  326|             Value = [Literal] 1
#  326|             ValueCategory = prvalue
#  326|       3: [Block] { ... }
#  327|         0: [IfStmt] if (...) ... 
#  327|           0: [EQExpr] ... == ...
#  327|               Type = [BoolType] bool
#  327|               ValueCategory = prvalue
#  327|             0: [VariableAccess] i
#  327|                 Type = [IntType] int
#  327|                 ValueCategory = prvalue(load)
#  327|             1: [Literal] 5
#  327|                 Type = [IntType] int
#  327|                 Value = [Literal] 5
#  327|                 ValueCategory = prvalue
#  327|           1: [Block] { ... }
#  328|             0: [ContinueStmt] continue;
#  326|         1: [LabelStmt] label ...:
#  331|     1: [ReturnStmt] return ...
#  333| [TopLevelFunction] void For_Continue_NoUpdate()
#  333|   params: 
#  333|   body: [Block] { ... }
#  334|     0: [ForStmt] for(...;...;...) ...
#  334|       0: [DeclStmt] declaration
#  334|         0: [VariableDeclarationEntry] definition of i
#  334|             Type = [IntType] int
#  334|           init: [Initializer] initializer for i
#  334|             expr: [Literal] 0
#  334|                 Type = [IntType] int
#  334|                 Value = [Literal] 0
#  334|                 ValueCategory = prvalue
#  334|       1: [LTExpr] ... < ...
#  334|           Type = [BoolType] bool
#  334|           ValueCategory = prvalue
#  334|         0: [VariableAccess] i
#  334|             Type = [IntType] int
#  334|             ValueCategory = prvalue(load)
#  334|         1: [Literal] 10
#  334|             Type = [IntType] int
#  334|             Value = [Literal] 10
#  334|             ValueCategory = prvalue
#  334|       3: [Block] { ... }
#  335|         0: [IfStmt] if (...) ... 
#  335|           0: [EQExpr] ... == ...
#  335|               Type = [BoolType] bool
#  335|               ValueCategory = prvalue
#  335|             0: [VariableAccess] i
#  335|                 Type = [IntType] int
#  335|                 ValueCategory = prvalue(load)
#  335|             1: [Literal] 5
#  335|                 Type = [IntType] int
#  335|                 Value = [Literal] 5
#  335|                 ValueCategory = prvalue
#  335|           1: [Block] { ... }
#  336|             0: [ContinueStmt] continue;
#  334|         1: [LabelStmt] label ...:
#  339|     1: [ReturnStmt] return ...
#  341| [TopLevelFunction] int Dereference(int*)
#  341|   params: 
#  341|     0: [Parameter] p
#  341|         Type = [IntPointerType] int *
#  341|   body: [Block] { ... }
#  342|     0: [ExprStmt] ExprStmt
#  342|       0: [AssignExpr] ... = ...
#  342|           Type = [IntType] int
#  342|           ValueCategory = lvalue
#  342|         0: [PointerDereferenceExpr] * ...
#  342|             Type = [IntType] int
#  342|             ValueCategory = lvalue
#  342|           0: [VariableAccess] p
#  342|               Type = [IntPointerType] int *
#  342|               ValueCategory = prvalue(load)
#  342|         1: [Literal] 1
#  342|             Type = [IntType] int
#  342|             Value = [Literal] 1
#  342|             ValueCategory = prvalue
#  343|     1: [ReturnStmt] return ...
#  343|       0: [PointerDereferenceExpr] * ...
#  343|           Type = [IntType] int
#  343|           ValueCategory = prvalue(load)
#  343|         0: [VariableAccess] p
#  343|             Type = [IntPointerType] int *
#  343|             ValueCategory = prvalue(load)
#  348| [TopLevelFunction] int* AddressOf()
#  348|   params: 
#  348|   body: [Block] { ... }
#  349|     0: [ReturnStmt] return ...
#  349|       0: [AddressOfExpr] & ...
#  349|           Type = [IntPointerType] int *
#  349|           ValueCategory = prvalue
#  349|         0: [VariableAccess] g
#  349|             Type = [IntType] int
#  349|             ValueCategory = lvalue
#  352| [TopLevelFunction] void Break(int)
#  352|   params: 
#  352|     0: [Parameter] n
#  352|         Type = [IntType] int
#  352|   body: [Block] { ... }
#  353|     0: [WhileStmt] while (...) ...
#  353|       0: [GTExpr] ... > ...
#  353|           Type = [BoolType] bool
#  353|           ValueCategory = prvalue
#  353|         0: [VariableAccess] n
#  353|             Type = [IntType] int
#  353|             ValueCategory = prvalue(load)
#  353|         1: [Literal] 0
#  353|             Type = [IntType] int
#  353|             Value = [Literal] 0
#  353|             ValueCategory = prvalue
#  353|       1: [Block] { ... }
#  354|         0: [IfStmt] if (...) ... 
#  354|           0: [EQExpr] ... == ...
#  354|               Type = [BoolType] bool
#  354|               ValueCategory = prvalue
#  354|             0: [VariableAccess] n
#  354|                 Type = [IntType] int
#  354|                 ValueCategory = prvalue(load)
#  354|             1: [Literal] 1
#  354|                 Type = [IntType] int
#  354|                 Value = [Literal] 1
#  354|                 ValueCategory = prvalue
#  355|           1: [BreakStmt] break;
#  356|         1: [ExprStmt] ExprStmt
#  356|           0: [AssignSubExpr] ... -= ...
#  356|               Type = [IntType] int
#  356|               ValueCategory = lvalue
#  356|             0: [VariableAccess] n
#  356|                 Type = [IntType] int
#  356|                 ValueCategory = lvalue
#  356|             1: [Literal] 1
#  356|                 Type = [IntType] int
#  356|                 Value = [Literal] 1
#  356|                 ValueCategory = prvalue
#  357|     1: [LabelStmt] label ...:
#  358|     2: [ReturnStmt] return ...
#  360| [TopLevelFunction] void Continue(int)
#  360|   params: 
#  360|     0: [Parameter] n
#  360|         Type = [IntType] int
#  360|   body: [Block] { ... }
#  361|     0: [DoStmt] do (...) ...
#  366|       0: [GTExpr] ... > ...
#  366|           Type = [BoolType] bool
#  366|           ValueCategory = prvalue
#  366|         0: [VariableAccess] n
#  366|             Type = [IntType] int
#  366|             ValueCategory = prvalue(load)
#  366|         1: [Literal] 0
#  366|             Type = [IntType] int
#  366|             Value = [Literal] 0
#  366|             ValueCategory = prvalue
#  361|       1: [Block] { ... }
#  362|         0: [IfStmt] if (...) ... 
#  362|           0: [EQExpr] ... == ...
#  362|               Type = [BoolType] bool
#  362|               ValueCategory = prvalue
#  362|             0: [VariableAccess] n
#  362|                 Type = [IntType] int
#  362|                 ValueCategory = prvalue(load)
#  362|             1: [Literal] 1
#  362|                 Type = [IntType] int
#  362|                 Value = [Literal] 1
#  362|                 ValueCategory = prvalue
#  362|           1: [Block] { ... }
#  363|             0: [ContinueStmt] continue;
#  365|         1: [ExprStmt] ExprStmt
#  365|           0: [AssignSubExpr] ... -= ...
#  365|               Type = [IntType] int
#  365|               ValueCategory = lvalue
#  365|             0: [VariableAccess] n
#  365|                 Type = [IntType] int
#  365|                 ValueCategory = lvalue
#  365|             1: [Literal] 1
#  365|                 Type = [IntType] int
#  365|                 Value = [Literal] 1
#  365|                 ValueCategory = prvalue
#  361|         2: [LabelStmt] label ...:
#  367|     1: [ReturnStmt] return ...
#  369| [TopLevelFunction] void VoidFunc()
#  369|   params: 
#  370| [TopLevelFunction] int Add(int, int)
#  370|   params: 
#  370|     0: [Parameter] x
#  370|         Type = [IntType] int
#  370|     1: [Parameter] y
#  370|         Type = [IntType] int
#  372| [TopLevelFunction] void Call()
#  372|   params: 
#  372|   body: [Block] { ... }
#  373|     0: [ExprStmt] ExprStmt
#  373|       0: [FunctionCall] call to VoidFunc
#  373|           Type = [VoidType] void
#  373|           ValueCategory = prvalue
#  374|     1: [ReturnStmt] return ...
#  376| [TopLevelFunction] int CallAdd(int, int)
#  376|   params: 
#  376|     0: [Parameter] x
#  376|         Type = [IntType] int
#  376|     1: [Parameter] y
#  376|         Type = [IntType] int
#  376|   body: [Block] { ... }
#  377|     0: [ReturnStmt] return ...
#  377|       0: [FunctionCall] call to Add
#  377|           Type = [IntType] int
#  377|           ValueCategory = prvalue
#  377|         0: [VariableAccess] x
#  377|             Type = [IntType] int
#  377|             ValueCategory = prvalue(load)
#  377|         1: [VariableAccess] y
#  377|             Type = [IntType] int
#  377|             ValueCategory = prvalue(load)
#  380| [TopLevelFunction] int Comma(int, int)
#  380|   params: 
#  380|     0: [Parameter] x
#  380|         Type = [IntType] int
#  380|     1: [Parameter] y
#  380|         Type = [IntType] int
#  380|   body: [Block] { ... }
#  381|     0: [ReturnStmt] return ...
#  381|       0: [CommaExpr] ... , ...
#  381|           Type = [IntType] int
#  381|           ValueCategory = prvalue
#  381|         0: [FunctionCall] call to VoidFunc
#  381|             Type = [VoidType] void
#  381|             ValueCategory = prvalue
#  381|         1: [FunctionCall] call to CallAdd
#  381|             Type = [IntType] int
#  381|             ValueCategory = prvalue
#  381|           0: [VariableAccess] x
#  381|               Type = [IntType] int
#  381|               ValueCategory = prvalue(load)
#  381|           1: [VariableAccess] y
#  381|               Type = [IntType] int
#  381|               ValueCategory = prvalue(load)
#  384| [TopLevelFunction] void Switch(int)
#  384|   params: 
#  384|     0: [Parameter] x
#  384|         Type = [IntType] int
#  384|   body: [Block] { ... }
#  385|     0: [DeclStmt] declaration
#  385|       0: [VariableDeclarationEntry] definition of y
#  385|           Type = [IntType] int
#  386|     1: [SwitchStmt] switch (...) ... 
#  386|       0: [VariableAccess] x
#  386|           Type = [IntType] int
#  386|           ValueCategory = prvalue(load)
#  386|       1: [Block] { ... }
#  387|         0: [ExprStmt] ExprStmt
#  387|           0: [AssignExpr] ... = ...
#  387|               Type = [IntType] int
#  387|               ValueCategory = lvalue
#  387|             0: [VariableAccess] y
#  387|                 Type = [IntType] int
#  387|                 ValueCategory = lvalue
#  387|             1: [Literal] 1234
#  387|                 Type = [IntType] int
#  387|                 Value = [Literal] 1234
#  387|                 ValueCategory = prvalue
#  389|         1: [SwitchCase] case ...:
#  389|           0: [UnaryMinusExpr] - ...
#  389|               Type = [IntType] int
#  389|               Value = [UnaryMinusExpr] -1
#  389|               ValueCategory = prvalue
#  389|             0: [Literal] 1
#  389|                 Type = [IntType] int
#  389|                 Value = [Literal] 1
#  389|                 ValueCategory = prvalue
#  390|         2: [ExprStmt] ExprStmt
#  390|           0: [AssignExpr] ... = ...
#  390|               Type = [IntType] int
#  390|               ValueCategory = lvalue
#  390|             0: [VariableAccess] y
#  390|                 Type = [IntType] int
#  390|                 ValueCategory = lvalue
#  390|             1: [UnaryMinusExpr] - ...
#  390|                 Type = [IntType] int
#  390|                 Value = [UnaryMinusExpr] -1
#  390|                 ValueCategory = prvalue
#  390|               0: [Literal] 1
#  390|                   Type = [IntType] int
#  390|                   Value = [Literal] 1
#  390|                   ValueCategory = prvalue
#  391|         3: [BreakStmt] break;
#  393|         4: [SwitchCase] case ...:
#  393|           0: [Literal] 1
#  393|               Type = [IntType] int
#  393|               Value = [Literal] 1
#  393|               ValueCategory = prvalue
#  394|         5: [SwitchCase] case ...:
#  394|           0: [Literal] 2
#  394|               Type = [IntType] int
#  394|               Value = [Literal] 2
#  394|               ValueCategory = prvalue
#  395|         6: [ExprStmt] ExprStmt
#  395|           0: [AssignExpr] ... = ...
#  395|               Type = [IntType] int
#  395|               ValueCategory = lvalue
#  395|             0: [VariableAccess] y
#  395|                 Type = [IntType] int
#  395|                 ValueCategory = lvalue
#  395|             1: [Literal] 1
#  395|                 Type = [IntType] int
#  395|                 Value = [Literal] 1
#  395|                 ValueCategory = prvalue
#  396|         7: [BreakStmt] break;
#  398|         8: [SwitchCase] case ...:
#  398|           0: [Literal] 3
#  398|               Type = [IntType] int
#  398|               Value = [Literal] 3
#  398|               ValueCategory = prvalue
#  399|         9: [ExprStmt] ExprStmt
#  399|           0: [AssignExpr] ... = ...
#  399|               Type = [IntType] int
#  399|               ValueCategory = lvalue
#  399|             0: [VariableAccess] y
#  399|                 Type = [IntType] int
#  399|                 ValueCategory = lvalue
#  399|             1: [Literal] 3
#  399|                 Type = [IntType] int
#  399|                 Value = [Literal] 3
#  399|                 ValueCategory = prvalue
#  400|         10: [SwitchCase] case ...:
#  400|           0: [Literal] 4
#  400|               Type = [IntType] int
#  400|               Value = [Literal] 4
#  400|               ValueCategory = prvalue
#  401|         11: [ExprStmt] ExprStmt
#  401|           0: [AssignExpr] ... = ...
#  401|               Type = [IntType] int
#  401|               ValueCategory = lvalue
#  401|             0: [VariableAccess] y
#  401|                 Type = [IntType] int
#  401|                 ValueCategory = lvalue
#  401|             1: [Literal] 4
#  401|                 Type = [IntType] int
#  401|                 Value = [Literal] 4
#  401|                 ValueCategory = prvalue
#  402|         12: [BreakStmt] break;
#  404|         13: [SwitchCase] default: 
#  405|         14: [ExprStmt] ExprStmt
#  405|           0: [AssignExpr] ... = ...
#  405|               Type = [IntType] int
#  405|               ValueCategory = lvalue
#  405|             0: [VariableAccess] y
#  405|                 Type = [IntType] int
#  405|                 ValueCategory = lvalue
#  405|             1: [Literal] 0
#  405|                 Type = [IntType] int
#  405|                 Value = [Literal] 0
#  405|                 ValueCategory = prvalue
#  406|         15: [BreakStmt] break;
#  408|         16: [ExprStmt] ExprStmt
#  408|           0: [AssignExpr] ... = ...
#  408|               Type = [IntType] int
#  408|               ValueCategory = lvalue
#  408|             0: [VariableAccess] y
#  408|                 Type = [IntType] int
#  408|                 ValueCategory = lvalue
#  408|             1: [Literal] 5678
#  408|                 Type = [IntType] int
#  408|                 Value = [Literal] 5678
#  408|                 ValueCategory = prvalue
#  409|     2: [LabelStmt] label ...:
#  410|     3: [ReturnStmt] return ...
#  412| [CopyAssignmentOperator] Point& Point::operator=(Point const&)
#  412|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const Point &
#  412| [MoveAssignmentOperator] Point& Point::operator=(Point&&)
#  412|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [RValueReferenceType] Point &&
#  417| [CopyAssignmentOperator] Rect& Rect::operator=(Rect const&)
#  417|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const Rect &
#  417| [MoveAssignmentOperator] Rect& Rect::operator=(Rect&&)
#  417|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [RValueReferenceType] Rect &&
#  422| [TopLevelFunction] Point ReturnStruct(Point)
#  422|   params: 
#  422|     0: [Parameter] pt
#  422|         Type = [Struct] Point
#  422|   body: [Block] { ... }
#  423|     0: [ReturnStmt] return ...
#  423|       0: [VariableAccess] pt
#  423|           Type = [Struct] Point
#  423|           ValueCategory = prvalue(load)
#  426| [TopLevelFunction] void FieldAccess()
#  426|   params: 
#  426|   body: [Block] { ... }
#  427|     0: [DeclStmt] declaration
#  427|       0: [VariableDeclarationEntry] definition of pt
#  427|           Type = [Struct] Point
#  428|     1: [ExprStmt] ExprStmt
#  428|       0: [AssignExpr] ... = ...
#  428|           Type = [IntType] int
#  428|           ValueCategory = lvalue
#  428|         0: [ValueFieldAccess] x
#  428|             Type = [IntType] int
#  428|             ValueCategory = lvalue
#  428|           -1: [VariableAccess] pt
#  428|               Type = [Struct] Point
#  428|               ValueCategory = lvalue
#  428|         1: [Literal] 5
#  428|             Type = [IntType] int
#  428|             Value = [Literal] 5
#  428|             ValueCategory = prvalue
#  429|     2: [ExprStmt] ExprStmt
#  429|       0: [AssignExpr] ... = ...
#  429|           Type = [IntType] int
#  429|           ValueCategory = lvalue
#  429|         0: [ValueFieldAccess] y
#  429|             Type = [IntType] int
#  429|             ValueCategory = lvalue
#  429|           -1: [VariableAccess] pt
#  429|               Type = [Struct] Point
#  429|               ValueCategory = lvalue
#  429|         1: [ValueFieldAccess] x
#  429|             Type = [IntType] int
#  429|             ValueCategory = prvalue(load)
#  429|           -1: [VariableAccess] pt
#  429|               Type = [Struct] Point
#  429|               ValueCategory = lvalue
#  430|     3: [DeclStmt] declaration
#  430|       0: [VariableDeclarationEntry] definition of p
#  430|           Type = [IntPointerType] int *
#  430|         init: [Initializer] initializer for p
#  430|           expr: [AddressOfExpr] & ...
#  430|               Type = [IntPointerType] int *
#  430|               ValueCategory = prvalue
#  430|             0: [ValueFieldAccess] y
#  430|                 Type = [IntType] int
#  430|                 ValueCategory = lvalue
#  430|               -1: [VariableAccess] pt
#  430|                   Type = [Struct] Point
#  430|                   ValueCategory = lvalue
#  431|     4: [ReturnStmt] return ...
#  433| [TopLevelFunction] void LogicalOr(bool, bool)
#  433|   params: 
#  433|     0: [Parameter] a
#  433|         Type = [BoolType] bool
#  433|     1: [Parameter] b
#  433|         Type = [BoolType] bool
#  433|   body: [Block] { ... }
#  434|     0: [DeclStmt] declaration
#  434|       0: [VariableDeclarationEntry] definition of x
#  434|           Type = [IntType] int
#  435|     1: [IfStmt] if (...) ... 
#  435|       0: [LogicalOrExpr] ... || ...
#  435|           Type = [BoolType] bool
#  435|           ValueCategory = prvalue
#  435|         0: [VariableAccess] a
#  435|             Type = [BoolType] bool
#  435|             ValueCategory = prvalue(load)
#  435|         1: [VariableAccess] b
#  435|             Type = [BoolType] bool
#  435|             ValueCategory = prvalue(load)
#  435|       1: [Block] { ... }
#  436|         0: [ExprStmt] ExprStmt
#  436|           0: [AssignExpr] ... = ...
#  436|               Type = [IntType] int
#  436|               ValueCategory = lvalue
#  436|             0: [VariableAccess] x
#  436|                 Type = [IntType] int
#  436|                 ValueCategory = lvalue
#  436|             1: [Literal] 7
#  436|                 Type = [IntType] int
#  436|                 Value = [Literal] 7
#  436|                 ValueCategory = prvalue
#  439|     2: [IfStmt] if (...) ... 
#  439|       0: [LogicalOrExpr] ... || ...
#  439|           Type = [BoolType] bool
#  439|           ValueCategory = prvalue
#  439|         0: [VariableAccess] a
#  439|             Type = [BoolType] bool
#  439|             ValueCategory = prvalue(load)
#  439|         1: [VariableAccess] b
#  439|             Type = [BoolType] bool
#  439|             ValueCategory = prvalue(load)
#  439|       1: [Block] { ... }
#  440|         0: [ExprStmt] ExprStmt
#  440|           0: [AssignExpr] ... = ...
#  440|               Type = [IntType] int
#  440|               ValueCategory = lvalue
#  440|             0: [VariableAccess] x
#  440|                 Type = [IntType] int
#  440|                 ValueCategory = lvalue
#  440|             1: [Literal] 1
#  440|                 Type = [IntType] int
#  440|                 Value = [Literal] 1
#  440|                 ValueCategory = prvalue
#  442|       2: [Block] { ... }
#  443|         0: [ExprStmt] ExprStmt
#  443|           0: [AssignExpr] ... = ...
#  443|               Type = [IntType] int
#  443|               ValueCategory = lvalue
#  443|             0: [VariableAccess] x
#  443|                 Type = [IntType] int
#  443|                 ValueCategory = lvalue
#  443|             1: [Literal] 5
#  443|                 Type = [IntType] int
#  443|                 Value = [Literal] 5
#  443|                 ValueCategory = prvalue
#  445|     3: [ReturnStmt] return ...
#  447| [TopLevelFunction] void LogicalAnd(bool, bool)
#  447|   params: 
#  447|     0: [Parameter] a
#  447|         Type = [BoolType] bool
#  447|     1: [Parameter] b
#  447|         Type = [BoolType] bool
#  447|   body: [Block] { ... }
#  448|     0: [DeclStmt] declaration
#  448|       0: [VariableDeclarationEntry] definition of x
#  448|           Type = [IntType] int
#  449|     1: [IfStmt] if (...) ... 
#  449|       0: [LogicalAndExpr] ... && ...
#  449|           Type = [BoolType] bool
#  449|           ValueCategory = prvalue
#  449|         0: [VariableAccess] a
#  449|             Type = [BoolType] bool
#  449|             ValueCategory = prvalue(load)
#  449|         1: [VariableAccess] b
#  449|             Type = [BoolType] bool
#  449|             ValueCategory = prvalue(load)
#  449|       1: [Block] { ... }
#  450|         0: [ExprStmt] ExprStmt
#  450|           0: [AssignExpr] ... = ...
#  450|               Type = [IntType] int
#  450|               ValueCategory = lvalue
#  450|             0: [VariableAccess] x
#  450|                 Type = [IntType] int
#  450|                 ValueCategory = lvalue
#  450|             1: [Literal] 7
#  450|                 Type = [IntType] int
#  450|                 Value = [Literal] 7
#  450|                 ValueCategory = prvalue
#  453|     2: [IfStmt] if (...) ... 
#  453|       0: [LogicalAndExpr] ... && ...
#  453|           Type = [BoolType] bool
#  453|           ValueCategory = prvalue
#  453|         0: [VariableAccess] a
#  453|             Type = [BoolType] bool
#  453|             ValueCategory = prvalue(load)
#  453|         1: [VariableAccess] b
#  453|             Type = [BoolType] bool
#  453|             ValueCategory = prvalue(load)
#  453|       1: [Block] { ... }
#  454|         0: [ExprStmt] ExprStmt
#  454|           0: [AssignExpr] ... = ...
#  454|               Type = [IntType] int
#  454|               ValueCategory = lvalue
#  454|             0: [VariableAccess] x
#  454|                 Type = [IntType] int
#  454|                 ValueCategory = lvalue
#  454|             1: [Literal] 1
#  454|                 Type = [IntType] int
#  454|                 Value = [Literal] 1
#  454|                 ValueCategory = prvalue
#  456|       2: [Block] { ... }
#  457|         0: [ExprStmt] ExprStmt
#  457|           0: [AssignExpr] ... = ...
#  457|               Type = [IntType] int
#  457|               ValueCategory = lvalue
#  457|             0: [VariableAccess] x
#  457|                 Type = [IntType] int
#  457|                 ValueCategory = lvalue
#  457|             1: [Literal] 5
#  457|                 Type = [IntType] int
#  457|                 Value = [Literal] 5
#  457|                 ValueCategory = prvalue
#  459|     3: [ReturnStmt] return ...
#  461| [TopLevelFunction] void LogicalNot(bool, bool)
#  461|   params: 
#  461|     0: [Parameter] a
#  461|         Type = [BoolType] bool
#  461|     1: [Parameter] b
#  461|         Type = [BoolType] bool
#  461|   body: [Block] { ... }
#  462|     0: [DeclStmt] declaration
#  462|       0: [VariableDeclarationEntry] definition of x
#  462|           Type = [IntType] int
#  463|     1: [IfStmt] if (...) ... 
#  463|       0: [NotExpr] ! ...
#  463|           Type = [BoolType] bool
#  463|           ValueCategory = prvalue
#  463|         0: [VariableAccess] a
#  463|             Type = [BoolType] bool
#  463|             ValueCategory = prvalue(load)
#  463|       1: [Block] { ... }
#  464|         0: [ExprStmt] ExprStmt
#  464|           0: [AssignExpr] ... = ...
#  464|               Type = [IntType] int
#  464|               ValueCategory = lvalue
#  464|             0: [VariableAccess] x
#  464|                 Type = [IntType] int
#  464|                 ValueCategory = lvalue
#  464|             1: [Literal] 1
#  464|                 Type = [IntType] int
#  464|                 Value = [Literal] 1
#  464|                 ValueCategory = prvalue
#  467|     2: [IfStmt] if (...) ... 
#  467|       0: [NotExpr] ! ...
#  467|           Type = [BoolType] bool
#  467|           ValueCategory = prvalue
#  467|         0: [ParenthesisExpr] (...)
#  467|             Type = [BoolType] bool
#  467|             ValueCategory = prvalue
#  467|           expr: [LogicalAndExpr] ... && ...
#  467|               Type = [BoolType] bool
#  467|               ValueCategory = prvalue
#  467|             0: [VariableAccess] a
#  467|                 Type = [BoolType] bool
#  467|                 ValueCategory = prvalue(load)
#  467|             1: [VariableAccess] b
#  467|                 Type = [BoolType] bool
#  467|                 ValueCategory = prvalue(load)
#  467|       1: [Block] { ... }
#  468|         0: [ExprStmt] ExprStmt
#  468|           0: [AssignExpr] ... = ...
#  468|               Type = [IntType] int
#  468|               ValueCategory = lvalue
#  468|             0: [VariableAccess] x
#  468|                 Type = [IntType] int
#  468|                 ValueCategory = lvalue
#  468|             1: [Literal] 2
#  468|                 Type = [IntType] int
#  468|                 Value = [Literal] 2
#  468|                 ValueCategory = prvalue
#  470|       2: [Block] { ... }
#  471|         0: [ExprStmt] ExprStmt
#  471|           0: [AssignExpr] ... = ...
#  471|               Type = [IntType] int
#  471|               ValueCategory = lvalue
#  471|             0: [VariableAccess] x
#  471|                 Type = [IntType] int
#  471|                 ValueCategory = lvalue
#  471|             1: [Literal] 3
#  471|                 Type = [IntType] int
#  471|                 Value = [Literal] 3
#  471|                 ValueCategory = prvalue
#  473|     3: [ReturnStmt] return ...
#  475| [TopLevelFunction] void ConditionValues(bool, bool)
#  475|   params: 
#  475|     0: [Parameter] a
#  475|         Type = [BoolType] bool
#  475|     1: [Parameter] b
#  475|         Type = [BoolType] bool
#  475|   body: [Block] { ... }
#  476|     0: [DeclStmt] declaration
#  476|       0: [VariableDeclarationEntry] definition of x
#  476|           Type = [BoolType] bool
#  477|     1: [ExprStmt] ExprStmt
#  477|       0: [AssignExpr] ... = ...
#  477|           Type = [BoolType] bool
#  477|           ValueCategory = lvalue
#  477|         0: [VariableAccess] x
#  477|             Type = [BoolType] bool
#  477|             ValueCategory = lvalue
#  477|         1: [LogicalAndExpr] ... && ...
#  477|             Type = [BoolType] bool
#  477|             ValueCategory = prvalue
#  477|           0: [VariableAccess] a
#  477|               Type = [BoolType] bool
#  477|               ValueCategory = prvalue(load)
#  477|           1: [VariableAccess] b
#  477|               Type = [BoolType] bool
#  477|               ValueCategory = prvalue(load)
#  478|     2: [ExprStmt] ExprStmt
#  478|       0: [AssignExpr] ... = ...
#  478|           Type = [BoolType] bool
#  478|           ValueCategory = lvalue
#  478|         0: [VariableAccess] x
#  478|             Type = [BoolType] bool
#  478|             ValueCategory = lvalue
#  478|         1: [LogicalOrExpr] ... || ...
#  478|             Type = [BoolType] bool
#  478|             ValueCategory = prvalue
#  478|           0: [VariableAccess] a
#  478|               Type = [BoolType] bool
#  478|               ValueCategory = prvalue(load)
#  478|           1: [VariableAccess] b
#  478|               Type = [BoolType] bool
#  478|               ValueCategory = prvalue(load)
#  479|     3: [ExprStmt] ExprStmt
#  479|       0: [AssignExpr] ... = ...
#  479|           Type = [BoolType] bool
#  479|           ValueCategory = lvalue
#  479|         0: [VariableAccess] x
#  479|             Type = [BoolType] bool
#  479|             ValueCategory = lvalue
#  479|         1: [NotExpr] ! ...
#  479|             Type = [BoolType] bool
#  479|             ValueCategory = prvalue
#  479|           0: [ParenthesisExpr] (...)
#  479|               Type = [BoolType] bool
#  479|               ValueCategory = prvalue
#  479|             expr: [LogicalOrExpr] ... || ...
#  479|                 Type = [BoolType] bool
#  479|                 ValueCategory = prvalue
#  479|               0: [VariableAccess] a
#  479|                   Type = [BoolType] bool
#  479|                   ValueCategory = prvalue(load)
#  479|               1: [VariableAccess] b
#  479|                   Type = [BoolType] bool
#  479|                   ValueCategory = prvalue(load)
#  480|     4: [ReturnStmt] return ...
#  482| [TopLevelFunction] void Conditional(bool, int, int)
#  482|   params: 
#  482|     0: [Parameter] a
#  482|         Type = [BoolType] bool
#  482|     1: [Parameter] x
#  482|         Type = [IntType] int
#  482|     2: [Parameter] y
#  482|         Type = [IntType] int
#  482|   body: [Block] { ... }
#  483|     0: [DeclStmt] declaration
#  483|       0: [VariableDeclarationEntry] definition of z
#  483|           Type = [IntType] int
#  483|         init: [Initializer] initializer for z
#  483|           expr: [ConditionalExpr] ... ? ... : ...
#  483|               Type = [IntType] int
#  483|               ValueCategory = prvalue
#  483|             0: [VariableAccess] a
#  483|                 Type = [BoolType] bool
#  483|                 ValueCategory = prvalue(load)
#  483|             1: [VariableAccess] x
#  483|                 Type = [IntType] int
#  483|                 ValueCategory = prvalue(load)
#  483|             2: [VariableAccess] y
#  483|                 Type = [IntType] int
#  483|                 ValueCategory = prvalue(load)
#  484|     1: [ReturnStmt] return ...
#  486| [TopLevelFunction] void Conditional_LValue(bool)
#  486|   params: 
#  486|     0: [Parameter] a
#  486|         Type = [BoolType] bool
#  486|   body: [Block] { ... }
#  487|     0: [DeclStmt] declaration
#  487|       0: [VariableDeclarationEntry] definition of x
#  487|           Type = [IntType] int
#  488|     1: [DeclStmt] declaration
#  488|       0: [VariableDeclarationEntry] definition of y
#  488|           Type = [IntType] int
#  489|     2: [ExprStmt] ExprStmt
#  489|       0: [AssignExpr] ... = ...
#  489|           Type = [IntType] int
#  489|           ValueCategory = lvalue
#  489|         0: [ParenthesisExpr] (...)
#  489|             Type = [IntType] int
#  489|             ValueCategory = lvalue
#  489|           expr: [ConditionalExpr] ... ? ... : ...
#  489|               Type = [IntType] int
#  489|               ValueCategory = lvalue
#  489|             0: [VariableAccess] a
#  489|                 Type = [BoolType] bool
#  489|                 ValueCategory = prvalue(load)
#  489|             1: [VariableAccess] x
#  489|                 Type = [IntType] int
#  489|                 ValueCategory = lvalue
#  489|             2: [VariableAccess] y
#  489|                 Type = [IntType] int
#  489|                 ValueCategory = lvalue
#  489|         1: [Literal] 5
#  489|             Type = [IntType] int
#  489|             Value = [Literal] 5
#  489|             ValueCategory = prvalue
#  490|     3: [ReturnStmt] return ...
#  492| [TopLevelFunction] void Conditional_Void(bool)
#  492|   params: 
#  492|     0: [Parameter] a
#  492|         Type = [BoolType] bool
#  492|   body: [Block] { ... }
#  493|     0: [ExprStmt] ExprStmt
#  493|       0: [ConditionalExpr] ... ? ... : ...
#  493|           Type = [VoidType] void
#  493|           ValueCategory = prvalue
#  493|         0: [VariableAccess] a
#  493|             Type = [BoolType] bool
#  493|             ValueCategory = prvalue(load)
#  493|         1: [FunctionCall] call to VoidFunc
#  493|             Type = [VoidType] void
#  493|             ValueCategory = prvalue
#  493|         2: [FunctionCall] call to VoidFunc
#  493|             Type = [VoidType] void
#  493|             ValueCategory = prvalue
#  494|     1: [ReturnStmt] return ...
#  496| [TopLevelFunction] void Nullptr()
#  496|   params: 
#  496|   body: [Block] { ... }
#  497|     0: [DeclStmt] declaration
#  497|       0: [VariableDeclarationEntry] definition of p
#  497|           Type = [IntPointerType] int *
#  497|         init: [Initializer] initializer for p
#  497|           expr: [CStyleCast] (int *)...
#  497|               Conversion = [PointerConversion] pointer conversion
#  497|               Type = [IntPointerType] int *
#  497|               Value = [CStyleCast] 0
#  497|               ValueCategory = prvalue
#  497|             expr: [Literal] 0
#  497|                 Type = [NullPointerType] decltype(nullptr)
#  497|                 Value = [Literal] 0
#  497|                 ValueCategory = prvalue
#  498|     1: [DeclStmt] declaration
#  498|       0: [VariableDeclarationEntry] definition of q
#  498|           Type = [IntPointerType] int *
#  498|         init: [Initializer] initializer for q
#  498|           expr: [CStyleCast] (int *)...
#  498|               Conversion = [IntegralToPointerConversion] integral to pointer conversion
#  498|               Type = [IntPointerType] int *
#  498|               Value = [CStyleCast] 0
#  498|               ValueCategory = prvalue
#  498|             expr: [Literal] 0
#  498|                 Type = [IntType] int
#  498|                 Value = [Literal] 0
#  498|                 ValueCategory = prvalue
#  499|     2: [ExprStmt] ExprStmt
#  499|       0: [AssignExpr] ... = ...
#  499|           Type = [IntPointerType] int *
#  499|           ValueCategory = lvalue
#  499|         0: [VariableAccess] p
#  499|             Type = [IntPointerType] int *
#  499|             ValueCategory = lvalue
#  499|         1: [CStyleCast] (int *)...
#  499|             Conversion = [PointerConversion] pointer conversion
#  499|             Type = [IntPointerType] int *
#  499|             Value = [CStyleCast] 0
#  499|             ValueCategory = prvalue
#  499|           expr: [Literal] 0
#  499|               Type = [NullPointerType] decltype(nullptr)
#  499|               Value = [Literal] 0
#  499|               ValueCategory = prvalue
#  500|     3: [ExprStmt] ExprStmt
#  500|       0: [AssignExpr] ... = ...
#  500|           Type = [IntPointerType] int *
#  500|           ValueCategory = lvalue
#  500|         0: [VariableAccess] q
#  500|             Type = [IntPointerType] int *
#  500|             ValueCategory = lvalue
#  500|         1: [CStyleCast] (int *)...
#  500|             Conversion = [IntegralToPointerConversion] integral to pointer conversion
#  500|             Type = [IntPointerType] int *
#  500|             Value = [CStyleCast] 0
#  500|             ValueCategory = prvalue
#  500|           expr: [Literal] 0
#  500|               Type = [IntType] int
#  500|               Value = [Literal] 0
#  500|               ValueCategory = prvalue
#  501|     4: [ReturnStmt] return ...
#  503| [TopLevelFunction] void InitList(int, float)
#  503|   params: 
#  503|     0: [Parameter] x
#  503|         Type = [IntType] int
#  503|     1: [Parameter] f
#  503|         Type = [FloatType] float
#  503|   body: [Block] { ... }
#  504|     0: [DeclStmt] declaration
#  504|       0: [VariableDeclarationEntry] definition of pt1
#  504|           Type = [Struct] Point
#  504|         init: [Initializer] initializer for pt1
#  504|           expr: [ClassAggregateLiteral] {...}
#  504|               Type = [Struct] Point
#  504|               ValueCategory = prvalue
#  504|             .x: [VariableAccess] x
#  504|                 Type = [IntType] int
#  504|                 ValueCategory = prvalue(load)
#  504|             .y: [CStyleCast] (int)...
#  504|                 Conversion = [FloatingPointToIntegralConversion] floating point to integral conversion
#  504|                 Type = [IntType] int
#  504|                 ValueCategory = prvalue
#  504|               expr: [VariableAccess] f
#  504|                   Type = [FloatType] float
#  504|                   ValueCategory = prvalue(load)
#  505|     1: [DeclStmt] declaration
#  505|       0: [VariableDeclarationEntry] definition of pt2
#  505|           Type = [Struct] Point
#  505|         init: [Initializer] initializer for pt2
#  505|           expr: [ClassAggregateLiteral] {...}
#  505|               Type = [Struct] Point
#  505|               ValueCategory = prvalue
#  505|             .x: [VariableAccess] x
#  505|                 Type = [IntType] int
#  505|                 ValueCategory = prvalue(load)
#  506|     2: [DeclStmt] declaration
#  506|       0: [VariableDeclarationEntry] definition of pt3
#  506|           Type = [Struct] Point
#  506|         init: [Initializer] initializer for pt3
#  506|           expr: [ClassAggregateLiteral] {...}
#  506|               Type = [Struct] Point
#  506|               ValueCategory = prvalue
#  508|     3: [DeclStmt] declaration
#  508|       0: [VariableDeclarationEntry] definition of x1
#  508|           Type = [IntType] int
#  508|         init: [Initializer] initializer for x1
#  508|           expr: [Literal] 1
#  508|               Type = [IntType] int
#  508|               Value = [Literal] 1
#  508|               ValueCategory = prvalue
#  509|     4: [DeclStmt] declaration
#  509|       0: [VariableDeclarationEntry] definition of x2
#  509|           Type = [IntType] int
#  509|         init: [Initializer] initializer for x2
#  509|           expr: [Literal] 0
#  509|               Type = [IntType] int
#  509|               Value = [Literal] 0
#  509|               ValueCategory = prvalue
#  510|     5: [ReturnStmt] return ...
#  512| [TopLevelFunction] void NestedInitList(int, float)
#  512|   params: 
#  512|     0: [Parameter] x
#  512|         Type = [IntType] int
#  512|     1: [Parameter] f
#  512|         Type = [FloatType] float
#  512|   body: [Block] { ... }
#  513|     0: [DeclStmt] declaration
#  513|       0: [VariableDeclarationEntry] definition of r1
#  513|           Type = [Struct] Rect
#  513|         init: [Initializer] initializer for r1
#  513|           expr: [ClassAggregateLiteral] {...}
#  513|               Type = [Struct] Rect
#  513|               ValueCategory = prvalue
#  514|     1: [DeclStmt] declaration
#  514|       0: [VariableDeclarationEntry] definition of r2
#  514|           Type = [Struct] Rect
#  514|         init: [Initializer] initializer for r2
#  514|           expr: [ClassAggregateLiteral] {...}
#  514|               Type = [Struct] Rect
#  514|               ValueCategory = prvalue
#  514|             .topLeft: [ClassAggregateLiteral] {...}
#  514|                 Type = [Struct] Point
#  514|                 ValueCategory = prvalue
#  514|               .x: [VariableAccess] x
#  514|                   Type = [IntType] int
#  514|                   ValueCategory = prvalue(load)
#  514|               .y: [CStyleCast] (int)...
#  514|                   Conversion = [FloatingPointToIntegralConversion] floating point to integral conversion
#  514|                   Type = [IntType] int
#  514|                   ValueCategory = prvalue
#  514|                 expr: [VariableAccess] f
#  514|                     Type = [FloatType] float
#  514|                     ValueCategory = prvalue(load)
#  515|     2: [DeclStmt] declaration
#  515|       0: [VariableDeclarationEntry] definition of r3
#  515|           Type = [Struct] Rect
#  515|         init: [Initializer] initializer for r3
#  515|           expr: [ClassAggregateLiteral] {...}
#  515|               Type = [Struct] Rect
#  515|               ValueCategory = prvalue
#  515|             .topLeft: [ClassAggregateLiteral] {...}
#  515|                 Type = [Struct] Point
#  515|                 ValueCategory = prvalue
#  515|               .x: [VariableAccess] x
#  515|                   Type = [IntType] int
#  515|                   ValueCategory = prvalue(load)
#  515|               .y: [CStyleCast] (int)...
#  515|                   Conversion = [FloatingPointToIntegralConversion] floating point to integral conversion
#  515|                   Type = [IntType] int
#  515|                   ValueCategory = prvalue
#  515|                 expr: [VariableAccess] f
#  515|                     Type = [FloatType] float
#  515|                     ValueCategory = prvalue(load)
#  515|             .bottomRight: [ClassAggregateLiteral] {...}
#  515|                 Type = [Struct] Point
#  515|                 ValueCategory = prvalue
#  515|               .x: [VariableAccess] x
#  515|                   Type = [IntType] int
#  515|                   ValueCategory = prvalue(load)
#  515|               .y: [CStyleCast] (int)...
#  515|                   Conversion = [FloatingPointToIntegralConversion] floating point to integral conversion
#  515|                   Type = [IntType] int
#  515|                   ValueCategory = prvalue
#  515|                 expr: [VariableAccess] f
#  515|                     Type = [FloatType] float
#  515|                     ValueCategory = prvalue(load)
#  516|     3: [DeclStmt] declaration
#  516|       0: [VariableDeclarationEntry] definition of r4
#  516|           Type = [Struct] Rect
#  516|         init: [Initializer] initializer for r4
#  516|           expr: [ClassAggregateLiteral] {...}
#  516|               Type = [Struct] Rect
#  516|               ValueCategory = prvalue
#  516|             .topLeft: [ClassAggregateLiteral] {...}
#  516|                 Type = [Struct] Point
#  516|                 ValueCategory = prvalue
#  516|               .x: [VariableAccess] x
#  516|                   Type = [IntType] int
#  516|                   ValueCategory = prvalue(load)
#  516|             .bottomRight: [ClassAggregateLiteral] {...}
#  516|                 Type = [Struct] Point
#  516|                 ValueCategory = prvalue
#  516|               .x: [VariableAccess] x
#  516|                   Type = [IntType] int
#  516|                   ValueCategory = prvalue(load)
#  517|     4: [ReturnStmt] return ...
#  519| [TopLevelFunction] void ArrayInit(int, float)
#  519|   params: 
#  519|     0: [Parameter] x
#  519|         Type = [IntType] int
#  519|     1: [Parameter] f
#  519|         Type = [FloatType] float
#  519|   body: [Block] { ... }
#  520|     0: [DeclStmt] declaration
#  520|       0: [VariableDeclarationEntry] definition of a1
#  520|           Type = [ArrayType] int[3]
#  520|         init: [Initializer] initializer for a1
#  520|           expr: [ArrayAggregateLiteral] {...}
#  520|               Type = [ArrayType] int[3]
#  520|               ValueCategory = prvalue
#  521|     1: [DeclStmt] declaration
#  521|       0: [VariableDeclarationEntry] definition of a2
#  521|           Type = [ArrayType] int[3]
#  521|         init: [Initializer] initializer for a2
#  521|           expr: [ArrayAggregateLiteral] {...}
#  521|               Type = [ArrayType] int[3]
#  521|               ValueCategory = prvalue
#  521|             [0]: [VariableAccess] x
#  521|                 Type = [IntType] int
#  521|                 ValueCategory = prvalue(load)
#  521|             [1]: [CStyleCast] (int)...
#  521|                 Conversion = [FloatingPointToIntegralConversion] floating point to integral conversion
#  521|                 Type = [IntType] int
#  521|                 ValueCategory = prvalue
#  521|               expr: [VariableAccess] f
#  521|                   Type = [FloatType] float
#  521|                   ValueCategory = prvalue(load)
#  521|             [2]: [Literal] 0
#  521|                 Type = [IntType] int
#  521|                 Value = [Literal] 0
#  521|                 ValueCategory = prvalue
#  522|     2: [DeclStmt] declaration
#  522|       0: [VariableDeclarationEntry] definition of a3
#  522|           Type = [ArrayType] int[3]
#  522|         init: [Initializer] initializer for a3
#  522|           expr: [ArrayAggregateLiteral] {...}
#  522|               Type = [ArrayType] int[3]
#  522|               ValueCategory = prvalue
#  522|             [0]: [VariableAccess] x
#  522|                 Type = [IntType] int
#  522|                 ValueCategory = prvalue(load)
#  523|     3: [ReturnStmt] return ...
#  525| [CopyAssignmentOperator] U& U::operator=(U const&)
#  525|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const U &
#  525| [MoveAssignmentOperator] U& U::operator=(U&&)
#  525|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [RValueReferenceType] U &&
#  530| [TopLevelFunction] void UnionInit(int, float)
#  530|   params: 
#  530|     0: [Parameter] x
#  530|         Type = [IntType] int
#  530|     1: [Parameter] f
#  530|         Type = [FloatType] float
#  530|   body: [Block] { ... }
#  531|     0: [DeclStmt] declaration
#  531|       0: [VariableDeclarationEntry] definition of u1
#  531|           Type = [Union] U
#  531|         init: [Initializer] initializer for u1
#  531|           expr: [ClassAggregateLiteral] {...}
#  531|               Type = [Union] U
#  531|               ValueCategory = prvalue
#  531|             .d: [CStyleCast] (double)...
#  531|                 Conversion = [FloatingPointConversion] floating point conversion
#  531|                 Type = [DoubleType] double
#  531|                 ValueCategory = prvalue
#  531|               expr: [VariableAccess] f
#  531|                   Type = [FloatType] float
#  531|                   ValueCategory = prvalue(load)
#  533|     1: [ReturnStmt] return ...
#  535| [TopLevelFunction] void EarlyReturn(int, int)
#  535|   params: 
#  535|     0: [Parameter] x
#  535|         Type = [IntType] int
#  535|     1: [Parameter] y
#  535|         Type = [IntType] int
#  535|   body: [Block] { ... }
#  536|     0: [IfStmt] if (...) ... 
#  536|       0: [LTExpr] ... < ...
#  536|           Type = [BoolType] bool
#  536|           ValueCategory = prvalue
#  536|         0: [VariableAccess] x
#  536|             Type = [IntType] int
#  536|             ValueCategory = prvalue(load)
#  536|         1: [VariableAccess] y
#  536|             Type = [IntType] int
#  536|             ValueCategory = prvalue(load)
#  536|       1: [Block] { ... }
#  537|         0: [ReturnStmt] return ...
#  540|     1: [ExprStmt] ExprStmt
#  540|       0: [AssignExpr] ... = ...
#  540|           Type = [IntType] int
#  540|           ValueCategory = lvalue
#  540|         0: [VariableAccess] y
#  540|             Type = [IntType] int
#  540|             ValueCategory = lvalue
#  540|         1: [VariableAccess] x
#  540|             Type = [IntType] int
#  540|             ValueCategory = prvalue(load)
#  541|     2: [ReturnStmt] return ...
#  543| [TopLevelFunction] int EarlyReturnValue(int, int)
#  543|   params: 
#  543|     0: [Parameter] x
#  543|         Type = [IntType] int
#  543|     1: [Parameter] y
#  543|         Type = [IntType] int
#  543|   body: [Block] { ... }
#  544|     0: [IfStmt] if (...) ... 
#  544|       0: [LTExpr] ... < ...
#  544|           Type = [BoolType] bool
#  544|           ValueCategory = prvalue
#  544|         0: [VariableAccess] x
#  544|             Type = [IntType] int
#  544|             ValueCategory = prvalue(load)
#  544|         1: [VariableAccess] y
#  544|             Type = [IntType] int
#  544|             ValueCategory = prvalue(load)
#  544|       1: [Block] { ... }
#  545|         0: [ReturnStmt] return ...
#  545|           0: [VariableAccess] x
#  545|               Type = [IntType] int
#  545|               ValueCategory = prvalue(load)
#  548|     1: [ReturnStmt] return ...
#  548|       0: [AddExpr] ... + ...
#  548|           Type = [IntType] int
#  548|           ValueCategory = prvalue
#  548|         0: [VariableAccess] x
#  548|             Type = [IntType] int
#  548|             ValueCategory = prvalue(load)
#  548|         1: [VariableAccess] y
#  548|             Type = [IntType] int
#  548|             ValueCategory = prvalue(load)
#  551| [TopLevelFunction] int CallViaFuncPtr(int(*)(int))
#  551|   params: 
#  551|     0: [Parameter] pfn
#  551|         Type = [FunctionPointerType] ..(*)(..)
#  551|   body: [Block] { ... }
#  552|     0: [ReturnStmt] return ...
#  552|       0: [VariableCall] call to expression
#  552|           Type = [IntType] int
#  552|           ValueCategory = prvalue
#  552|         0: [VariableAccess] pfn
#  552|             Type = [FunctionPointerType] ..(*)(..)
#  552|             ValueCategory = prvalue(load)
#  552|         1: [Literal] 5
#  552|             Type = [IntType] int
#  552|             Value = [Literal] 5
#  552|             ValueCategory = prvalue
#  560| [TopLevelFunction] int EnumSwitch(E)
#  560|   params: 
#  560|     0: [Parameter] e
#  560|         Type = [CTypedefType] E
#  560|   body: [Block] { ... }
#  561|     0: [SwitchStmt] switch (...) ... 
#  561|       0: [CStyleCast] (int)...
#  561|           Conversion = [IntegralConversion] integral conversion
#  561|           Type = [IntType] int
#  561|           ValueCategory = prvalue
#  561|         expr: [VariableAccess] e
#  561|             Type = [CTypedefType] E
#  561|             ValueCategory = prvalue(load)
#  561|       1: [Block] { ... }
#  562|         0: [SwitchCase] case ...:
#  562|           0: [CStyleCast] (int)...
#  562|               Conversion = [IntegralConversion] integral conversion
#  562|               Type = [IntType] int
#  562|               Value = [CStyleCast] 0
#  562|               ValueCategory = prvalue
#  562|             expr: [EnumConstantAccess] E_0
#  562|                 Type = [Enum] E
#  562|                 Value = [EnumConstantAccess] 0
#  562|                 ValueCategory = prvalue
#  563|         1: [ReturnStmt] return ...
#  563|           0: [Literal] 0
#  563|               Type = [IntType] int
#  563|               Value = [Literal] 0
#  563|               ValueCategory = prvalue
#  564|         2: [SwitchCase] case ...:
#  564|           0: [CStyleCast] (int)...
#  564|               Conversion = [IntegralConversion] integral conversion
#  564|               Type = [IntType] int
#  564|               Value = [CStyleCast] 1
#  564|               ValueCategory = prvalue
#  564|             expr: [EnumConstantAccess] E_1
#  564|                 Type = [Enum] E
#  564|                 Value = [EnumConstantAccess] 1
#  564|                 ValueCategory = prvalue
#  565|         3: [ReturnStmt] return ...
#  565|           0: [Literal] 1
#  565|               Type = [IntType] int
#  565|               Value = [Literal] 1
#  565|               ValueCategory = prvalue
#  566|         4: [SwitchCase] default: 
#  567|         5: [ReturnStmt] return ...
#  567|           0: [UnaryMinusExpr] - ...
#  567|               Type = [IntType] int
#  567|               Value = [UnaryMinusExpr] -1
#  567|               ValueCategory = prvalue
#  567|             0: [Literal] 1
#  567|                 Type = [IntType] int
#  567|                 Value = [Literal] 1
#  567|                 ValueCategory = prvalue
#  571| [TopLevelFunction] void InitArray()
#  571|   params: 
#  571|   body: [Block] { ... }
#  572|     0: [DeclStmt] declaration
#  572|       0: [VariableDeclarationEntry] definition of a_pad
#  572|           Type = [ArrayType] char[32]
#  572|         init: [Initializer] initializer for a_pad
#  572|           expr: 
#  572|               Type = [ArrayType] const char[32]
#  572|               Value = [StringLiteral] ""
#  572|               ValueCategory = lvalue
#  573|     1: [DeclStmt] declaration
#  573|       0: [VariableDeclarationEntry] definition of a_nopad
#  573|           Type = [ArrayType] char[4]
#  573|         init: [Initializer] initializer for a_nopad
#  573|           expr: foo
#  573|               Type = [ArrayType] const char[4]
#  573|               Value = [StringLiteral] "foo"
#  573|               ValueCategory = lvalue
#  574|     2: [DeclStmt] declaration
#  574|       0: [VariableDeclarationEntry] definition of a_infer
#  574|           Type = [ArrayType] char[]
#  574|         init: [Initializer] initializer for a_infer
#  574|           expr: blah
#  574|               Type = [ArrayType] const char[5]
#  574|               Value = [StringLiteral] "blah"
#  574|               ValueCategory = lvalue
#  575|     3: [DeclStmt] declaration
#  575|       0: [VariableDeclarationEntry] definition of b
#  575|           Type = [ArrayType] char[2]
#  576|     4: [DeclStmt] declaration
#  576|       0: [VariableDeclarationEntry] definition of c
#  576|           Type = [ArrayType] char[2]
#  576|         init: [Initializer] initializer for c
#  576|           expr: [ArrayAggregateLiteral] {...}
#  576|               Type = [ArrayType] char[2]
#  576|               ValueCategory = prvalue
#  577|     5: [DeclStmt] declaration
#  577|       0: [VariableDeclarationEntry] definition of d
#  577|           Type = [ArrayType] char[2]
#  577|         init: [Initializer] initializer for d
#  577|           expr: [ArrayAggregateLiteral] {...}
#  577|               Type = [ArrayType] char[2]
#  577|               ValueCategory = prvalue
#  577|             [0]: [CStyleCast] (char)...
#  577|                 Conversion = [IntegralConversion] integral conversion
#  577|                 Type = [PlainCharType] char
#  577|                 Value = [CStyleCast] 0
#  577|                 ValueCategory = prvalue
#  577|               expr: [Literal] 0
#  577|                   Type = [IntType] int
#  577|                   Value = [Literal] 0
#  577|                   ValueCategory = prvalue
#  578|     6: [DeclStmt] declaration
#  578|       0: [VariableDeclarationEntry] definition of e
#  578|           Type = [ArrayType] char[2]
#  578|         init: [Initializer] initializer for e
#  578|           expr: [ArrayAggregateLiteral] {...}
#  578|               Type = [ArrayType] char[2]
#  578|               ValueCategory = prvalue
#  578|             [0]: [CStyleCast] (char)...
#  578|                 Conversion = [IntegralConversion] integral conversion
#  578|                 Type = [PlainCharType] char
#  578|                 Value = [CStyleCast] 0
#  578|                 ValueCategory = prvalue
#  578|               expr: [Literal] 0
#  578|                   Type = [IntType] int
#  578|                   Value = [Literal] 0
#  578|                   ValueCategory = prvalue
#  578|             [1]: [CStyleCast] (char)...
#  578|                 Conversion = [IntegralConversion] integral conversion
#  578|                 Type = [PlainCharType] char
#  578|                 Value = [CStyleCast] 1
#  578|                 ValueCategory = prvalue
#  578|               expr: [Literal] 1
#  578|                   Type = [IntType] int
#  578|                   Value = [Literal] 1
#  578|                   ValueCategory = prvalue
#  579|     7: [DeclStmt] declaration
#  579|       0: [VariableDeclarationEntry] definition of f
#  579|           Type = [ArrayType] char[3]
#  579|         init: [Initializer] initializer for f
#  579|           expr: [ArrayAggregateLiteral] {...}
#  579|               Type = [ArrayType] char[3]
#  579|               ValueCategory = prvalue
#  579|             [0]: [CStyleCast] (char)...
#  579|                 Conversion = [IntegralConversion] integral conversion
#  579|                 Type = [PlainCharType] char
#  579|                 Value = [CStyleCast] 0
#  579|                 ValueCategory = prvalue
#  579|               expr: [Literal] 0
#  579|                   Type = [IntType] int
#  579|                   Value = [Literal] 0
#  579|                   ValueCategory = prvalue
#  580|     8: [ReturnStmt] return ...
#  582| [TopLevelFunction] void VarArgFunction(char const*)
#  582|   params: 
#  582|     0: [Parameter] s
#  582|         Type = [PointerType] const char *
#  584| [TopLevelFunction] void VarArgs()
#  584|   params: 
#  584|   body: [Block] { ... }
#  585|     0: [ExprStmt] ExprStmt
#  585|       0: [FunctionCall] call to VarArgFunction
#  585|           Type = [VoidType] void
#  585|           ValueCategory = prvalue
#  585|         0: [ArrayToPointerConversion] array to pointer conversion
#  585|             Type = [PointerType] const char *
#  585|             ValueCategory = prvalue
#  585|           expr: %d %s
#  585|               Type = [ArrayType] const char[6]
#  585|               Value = [StringLiteral] "%d %s"
#  585|               ValueCategory = lvalue
#  585|         1: [Literal] 1
#  585|             Type = [IntType] int
#  585|             Value = [Literal] 1
#  585|             ValueCategory = prvalue
#  585|         2: [ArrayToPointerConversion] array to pointer conversion
#  585|             Type = [PointerType] const char *
#  585|             ValueCategory = prvalue
#  585|           expr: string
#  585|               Type = [ArrayType] const char[7]
#  585|               Value = [StringLiteral] "string"
#  585|               ValueCategory = lvalue
#  586|     1: [ReturnStmt] return ...
#  588| [TopLevelFunction] int FuncPtrTarget(int)
#  588|   params: 
#  588|     0: [Parameter] p#0
#  588|         Type = [IntType] int
#  590| [TopLevelFunction] void SetFuncPtr()
#  590|   params: 
#  590|   body: [Block] { ... }
#  591|     0: [DeclStmt] declaration
#  591|       0: [VariableDeclarationEntry] definition of pfn
#  591|           Type = [FunctionPointerType] ..(*)(..)
#  591|         init: [Initializer] initializer for pfn
#  591|           expr: [FunctionAccess] FuncPtrTarget
#  591|               Type = [FunctionPointerType] ..(*)(..)
#  591|               ValueCategory = prvalue(load)
#  592|     1: [ExprStmt] ExprStmt
#  592|       0: [AssignExpr] ... = ...
#  592|           Type = [FunctionPointerType] ..(*)(..)
#  592|           ValueCategory = lvalue
#  592|         0: [VariableAccess] pfn
#  592|             Type = [FunctionPointerType] ..(*)(..)
#  592|             ValueCategory = lvalue
#  592|         1: [AddressOfExpr] & ...
#  592|             Type = [FunctionPointerType] ..(*)(..)
#  592|             ValueCategory = prvalue
#  592|           0: [FunctionAccess] FuncPtrTarget
#  592|               Type = [RoutineType] ..()(..)
#  592|               ValueCategory = lvalue
#  593|     2: [ExprStmt] ExprStmt
#  593|       0: [AssignExpr] ... = ...
#  593|           Type = [FunctionPointerType] ..(*)(..)
#  593|           ValueCategory = lvalue
#  593|         0: [VariableAccess] pfn
#  593|             Type = [FunctionPointerType] ..(*)(..)
#  593|             ValueCategory = lvalue
#  593|         1: [PointerDereferenceExpr] * ...
#  593|             Type = [FunctionPointerType] ..(*)(..)
#  593|             ValueCategory = prvalue(load)
#  593|           0: [FunctionAccess] FuncPtrTarget
#  593|               Type = [FunctionPointerType] ..(*)(..)
#  593|               ValueCategory = prvalue(load)
#  594|     3: [ExprStmt] ExprStmt
#  594|       0: [AssignExpr] ... = ...
#  594|           Type = [FunctionPointerType] ..(*)(..)
#  594|           ValueCategory = lvalue
#  594|         0: [VariableAccess] pfn
#  594|             Type = [FunctionPointerType] ..(*)(..)
#  594|             ValueCategory = lvalue
#  594|         1: [PointerDereferenceExpr] * ...
#  594|             Type = [FunctionPointerType] ..(*)(..)
#  594|             ValueCategory = prvalue(load)
#  594|           0: [PointerDereferenceExpr] * ...
#  594|               Type = [FunctionPointerType] ..(*)(..)
#  594|               ValueCategory = prvalue(load)
#  594|             0: [PointerDereferenceExpr] * ...
#  594|                 Type = [FunctionPointerType] ..(*)(..)
#  594|                 ValueCategory = prvalue(load)
#  594|               0: [AddressOfExpr] & ...
#  594|                   Type = [FunctionPointerType] ..(*)(..)
#  594|                   ValueCategory = prvalue
#  594|                 0: [FunctionAccess] FuncPtrTarget
#  594|                     Type = [RoutineType] ..()(..)
#  594|                     ValueCategory = lvalue
#  595|     4: [ReturnStmt] return ...
#  599| [CopyConstructor] void String::String(String const&)
#  599|   params: 
#  599|     0: [Parameter] p#0
#  599|         Type = [LValueReferenceType] const String &
#  600| [MoveConstructor] void String::String(String&&)
#  600|   params: 
#  600|     0: [Parameter] p#0
#  600|         Type = [RValueReferenceType] String &&
#  601| [ConversionConstructor] void String::String(char const*)
#  601|   params: 
#  601|     0: [Parameter] p#0
#  601|         Type = [PointerType] const char *
#  602| [Destructor] void String::~String()
#  602|   params: 
#  604| [CopyAssignmentOperator] String& String::operator=(String const&)
#  604|   params: 
#  604|     0: [Parameter] p#0
#  604|         Type = [LValueReferenceType] const String &
#  605| [MoveAssignmentOperator] String& String::operator=(String&&)
#  605|   params: 
#  605|     0: [Parameter] p#0
#  605|         Type = [RValueReferenceType] String &&
#  607| [ConstMemberFunction] char const* String::c_str() const
#  607|   params: 
#  613| [TopLevelFunction] String ReturnObject()
#  613|   params: 
#  615| [TopLevelFunction] void DeclareObject()
#  615|   params: 
#  615|   body: [Block] { ... }
#  616|     0: [DeclStmt] declaration
#  616|       0: [VariableDeclarationEntry] definition of s1
#  616|           Type = [Struct] String
#  616|         init: [Initializer] initializer for s1
#  616|           expr: [ConstructorCall] call to String
#  616|               Type = [VoidType] void
#  616|               ValueCategory = prvalue
#  617|     1: [DeclStmt] declaration
#  617|       0: [VariableDeclarationEntry] definition of s2
#  617|           Type = [Struct] String
#  617|         init: [Initializer] initializer for s2
#  617|           expr: [ConstructorCall] call to String
#  617|               Type = [VoidType] void
#  617|               ValueCategory = prvalue
#  617|             0: [ArrayToPointerConversion] array to pointer conversion
#  617|                 Type = [PointerType] const char *
#  617|                 ValueCategory = prvalue
#  617|               expr: hello
#  617|                   Type = [ArrayType] const char[6]
#  617|                   Value = [StringLiteral] "hello"
#  617|                   ValueCategory = lvalue
#  618|     2: [DeclStmt] declaration
#  618|       0: [VariableDeclarationEntry] definition of s3
#  618|           Type = [Struct] String
#  618|         init: [Initializer] initializer for s3
#  618|           expr: [FunctionCall] call to ReturnObject
#  618|               Type = [Struct] String
#  618|               ValueCategory = prvalue
#  619|     3: [DeclStmt] declaration
#  619|       0: [VariableDeclarationEntry] definition of s4
#  619|           Type = [Struct] String
#  619|         init: [Initializer] initializer for s4
#  619|           expr: [ConstructorCall] call to String
#  619|               Type = [VoidType] void
#  619|               ValueCategory = prvalue
#  619|             0: [ArrayToPointerConversion] array to pointer conversion
#  619|                 Type = [PointerType] const char *
#  619|                 ValueCategory = prvalue
#  619|               expr: test
#  619|                   Type = [ArrayType] const char[5]
#  619|                   Value = [StringLiteral] "test"
#  619|                   ValueCategory = lvalue
#  620|     4: [ReturnStmt] return ...
#  622| [TopLevelFunction] void CallMethods(String&, String*, String)
#  622|   params: 
#  622|     0: [Parameter] r
#  622|         Type = [LValueReferenceType] String &
#  622|     1: [Parameter] p
#  622|         Type = [PointerType] String *
#  622|     2: [Parameter] s
#  622|         Type = [Struct] String
#  622|   body: [Block] { ... }
#  623|     0: [ExprStmt] ExprStmt
#  623|       0: [FunctionCall] call to c_str
#  623|           Type = [PointerType] const char *
#  623|           ValueCategory = prvalue
#  623|         -1: [CStyleCast] (const String)...
#  623|             Conversion = [GlvalueConversion] glvalue conversion
#  623|             Type = [SpecifiedType] const String
#  623|             ValueCategory = lvalue
#  623|           expr: [ReferenceDereferenceExpr] (reference dereference)
#  623|               Type = [Struct] String
#  623|               ValueCategory = lvalue
#  623|             expr: [VariableAccess] r
#  623|                 Type = [LValueReferenceType] String &
#  623|                 ValueCategory = prvalue(load)
#  624|     1: [ExprStmt] ExprStmt
#  624|       0: [FunctionCall] call to c_str
#  624|           Type = [PointerType] const char *
#  624|           ValueCategory = prvalue
#  624|         -1: [CStyleCast] (const String *)...
#  624|             Conversion = [PointerConversion] pointer conversion
#  624|             Type = [PointerType] const String *
#  624|             ValueCategory = prvalue
#  624|           expr: [VariableAccess] p
#  624|               Type = [PointerType] String *
#  624|               ValueCategory = prvalue(load)
#  625|     2: [ExprStmt] ExprStmt
#  625|       0: [FunctionCall] call to c_str
#  625|           Type = [PointerType] const char *
#  625|           ValueCategory = prvalue
#  625|         -1: [CStyleCast] (const String)...
#  625|             Conversion = [GlvalueConversion] glvalue conversion
#  625|             Type = [SpecifiedType] const String
#  625|             ValueCategory = lvalue
#  625|           expr: [VariableAccess] s
#  625|               Type = [Struct] String
#  625|               ValueCategory = lvalue
#  626|     3: [ReturnStmt] return ...
#  628| [CopyAssignmentOperator] C& C::operator=(C const&)
#  628|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const C &
#  628| [MoveAssignmentOperator] C& C::operator=(C&&)
#  628|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [RValueReferenceType] C &&
#  628| [CopyConstructor] void C::C(C const&)
#  628|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const C &
#  628| [MoveConstructor] void C::C(C&&)
#  628|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [RValueReferenceType] C &&
#  628| [Destructor] void C::~C()
#  628|   params: 
#-----|   body: [Block] { ... }
#-----|     0: [ReturnStmt] return ...
#  628|   destructions: 
#  628|     0: [DestructorFieldDestruction] destructor field destruction of m_f
#  628|         Type = [Struct] String
#  628|         ValueCategory = prvalue
#  628|       0: [DestructorCall] call to ~String
#  628|           Type = [VoidType] void
#  628|           ValueCategory = prvalue
#  628|         -1: [ImplicitThisFieldAccess] m_f
#  628|             Type = [Struct] String
#  628|             ValueCategory = lvalue
#  628|     1: [DestructorFieldDestruction] destructor field destruction of m_b
#  628|         Type = [Struct] String
#  628|         ValueCategory = prvalue
#  628|       0: [DestructorCall] call to ~String
#  628|           Type = [VoidType] void
#  628|           ValueCategory = prvalue
#  628|         -1: [ImplicitThisFieldAccess] m_b
#  628|             Type = [Struct] String
#  628|             ValueCategory = lvalue
#  630| [MemberFunction] int C::StaticMemberFunction(int)
#  630|   params: 
#  630|     0: [Parameter] x
#  630|         Type = [IntType] int
#  630|   body: [Block] { ... }
#  631|     0: [ReturnStmt] return ...
#  631|       0: [VariableAccess] x
#  631|           Type = [IntType] int
#  631|           ValueCategory = prvalue(load)
#  634| [MemberFunction] int C::InstanceMemberFunction(int)
#  634|   params: 
#  634|     0: [Parameter] x
#  634|         Type = [IntType] int
#  634|   body: [Block] { ... }
#  635|     0: [ReturnStmt] return ...
#  635|       0: [VariableAccess] x
#  635|           Type = [IntType] int
#  635|           ValueCategory = prvalue(load)
#  638| [VirtualFunction] int C::VirtualMemberFunction(int)
#  638|   params: 
#  638|     0: [Parameter] x
#  638|         Type = [IntType] int
#  638|   body: [Block] { ... }
#  639|     0: [ReturnStmt] return ...
#  639|       0: [VariableAccess] x
#  639|           Type = [IntType] int
#  639|           ValueCategory = prvalue(load)
#  642| [MemberFunction] void C::FieldAccess()
#  642|   params: 
#  642|   body: [Block] { ... }
#  643|     0: [ExprStmt] ExprStmt
#  643|       0: [AssignExpr] ... = ...
#  643|           Type = [IntType] int
#  643|           ValueCategory = lvalue
#  643|         0: [PointerFieldAccess] m_a
#  643|             Type = [IntType] int
#  643|             ValueCategory = lvalue
#  643|           -1: [ThisExpr] this
#  643|               Type = [PointerType] C *
#  643|               ValueCategory = prvalue(load)
#  643|         1: [Literal] 0
#  643|             Type = [IntType] int
#  643|             Value = [Literal] 0
#  643|             ValueCategory = prvalue
#  644|     1: [ExprStmt] ExprStmt
#  644|       0: [AssignExpr] ... = ...
#  644|           Type = [IntType] int
#  644|           ValueCategory = lvalue
#  644|         0: [ValueFieldAccess] m_a
#  644|             Type = [IntType] int
#  644|             ValueCategory = lvalue
#  644|           -1: [ParenthesisExpr] (...)
#  644|               Type = [Class] C
#  644|               ValueCategory = lvalue
#  644|             expr: [PointerDereferenceExpr] * ...
#  644|                 Type = [Class] C
#  644|                 ValueCategory = lvalue
#  644|               0: [ThisExpr] this
#  644|                   Type = [PointerType] C *
#  644|                   ValueCategory = prvalue(load)
#  644|         1: [Literal] 1
#  644|             Type = [IntType] int
#  644|             Value = [Literal] 1
#  644|             ValueCategory = prvalue
#  645|     2: [ExprStmt] ExprStmt
#  645|       0: [AssignExpr] ... = ...
#  645|           Type = [IntType] int
#  645|           ValueCategory = lvalue
#  645|         0: [PointerFieldAccess] m_a
#  645|             Type = [IntType] int
#  645|             ValueCategory = lvalue
#-----|           -1: [ThisExpr] this
#-----|               Type = [PointerType] C *
#-----|               ValueCategory = prvalue(load)
#  645|         1: [Literal] 2
#  645|             Type = [IntType] int
#  645|             Value = [Literal] 2
#  645|             ValueCategory = prvalue
#  646|     3: [DeclStmt] declaration
#  646|       0: [VariableDeclarationEntry] definition of x
#  646|           Type = [IntType] int
#  647|     4: [ExprStmt] ExprStmt
#  647|       0: [AssignExpr] ... = ...
#  647|           Type = [IntType] int
#  647|           ValueCategory = lvalue
#  647|         0: [VariableAccess] x
#  647|             Type = [IntType] int
#  647|             ValueCategory = lvalue
#  647|         1: [PointerFieldAccess] m_a
#  647|             Type = [IntType] int
#  647|             ValueCategory = prvalue(load)
#  647|           -1: [ThisExpr] this
#  647|               Type = [PointerType] C *
#  647|               ValueCategory = prvalue(load)
#  648|     5: [ExprStmt] ExprStmt
#  648|       0: [AssignExpr] ... = ...
#  648|           Type = [IntType] int
#  648|           ValueCategory = lvalue
#  648|         0: [VariableAccess] x
#  648|             Type = [IntType] int
#  648|             ValueCategory = lvalue
#  648|         1: [ValueFieldAccess] m_a
#  648|             Type = [IntType] int
#  648|             ValueCategory = prvalue(load)
#  648|           -1: [ParenthesisExpr] (...)
#  648|               Type = [Class] C
#  648|               ValueCategory = lvalue
#  648|             expr: [PointerDereferenceExpr] * ...
#  648|                 Type = [Class] C
#  648|                 ValueCategory = lvalue
#  648|               0: [ThisExpr] this
#  648|                   Type = [PointerType] C *
#  648|                   ValueCategory = prvalue(load)
#  649|     6: [ExprStmt] ExprStmt
#  649|       0: [AssignExpr] ... = ...
#  649|           Type = [IntType] int
#  649|           ValueCategory = lvalue
#  649|         0: [VariableAccess] x
#  649|             Type = [IntType] int
#  649|             ValueCategory = lvalue
#  649|         1: [PointerFieldAccess] m_a
#  649|             Type = [IntType] int
#  649|             ValueCategory = prvalue(load)
#-----|           -1: [ThisExpr] this
#-----|               Type = [PointerType] C *
#-----|               ValueCategory = prvalue(load)
#  650|     7: [ReturnStmt] return ...
#  652| [MemberFunction] void C::MethodCalls()
#  652|   params: 
#  652|   body: [Block] { ... }
#  653|     0: [ExprStmt] ExprStmt
#  653|       0: [FunctionCall] call to InstanceMemberFunction
#  653|           Type = [IntType] int
#  653|           ValueCategory = prvalue
#  653|         -1: [ThisExpr] this
#  653|             Type = [PointerType] C *
#  653|             ValueCategory = prvalue(load)
#  653|         0: [Literal] 0
#  653|             Type = [IntType] int
#  653|             Value = [Literal] 0
#  653|             ValueCategory = prvalue
#  654|     1: [ExprStmt] ExprStmt
#  654|       0: [FunctionCall] call to InstanceMemberFunction
#  654|           Type = [IntType] int
#  654|           ValueCategory = prvalue
#  654|         -1: [ParenthesisExpr] (...)
#  654|             Type = [Class] C
#  654|             ValueCategory = lvalue
#  654|           expr: [PointerDereferenceExpr] * ...
#  654|               Type = [Class] C
#  654|               ValueCategory = lvalue
#  654|             0: [ThisExpr] this
#  654|                 Type = [PointerType] C *
#  654|                 ValueCategory = prvalue(load)
#  654|         0: [Literal] 1
#  654|             Type = [IntType] int
#  654|             Value = [Literal] 1
#  654|             ValueCategory = prvalue
#  655|     2: [ExprStmt] ExprStmt
#  655|       0: [FunctionCall] call to InstanceMemberFunction
#  655|           Type = [IntType] int
#  655|           ValueCategory = prvalue
#-----|         -1: [ThisExpr] this
#-----|             Type = [PointerType] C *
#-----|             ValueCategory = prvalue(load)
#  655|         0: [Literal] 2
#  655|             Type = [IntType] int
#  655|             Value = [Literal] 2
#  655|             ValueCategory = prvalue
#  656|     3: [ReturnStmt] return ...
#  658| [Constructor] void C::C()
#  658|   params: 
#  658|   initializations: 
#  659|     0: [ConstructorFieldInit] constructor init of field m_a
#  659|         Type = [IntType] int
#  659|         ValueCategory = prvalue
#  659|       0: [Literal] 1
#  659|           Type = [IntType] int
#  659|           Value = [Literal] 1
#  659|           ValueCategory = prvalue
#  663|     1: [ConstructorFieldInit] constructor init of field m_b
#  663|         Type = [Struct] String
#  663|         ValueCategory = prvalue
#  663|       0: [ConstructorCall] call to String
#  663|           Type = [VoidType] void
#  663|           ValueCategory = prvalue
#  660|     2: [ConstructorFieldInit] constructor init of field m_c
#  660|         Type = [PlainCharType] char
#  660|         ValueCategory = prvalue
#  660|       0: [CStyleCast] (char)...
#  660|           Conversion = [IntegralConversion] integral conversion
#  660|           Type = [PlainCharType] char
#  660|           Value = [CStyleCast] 3
#  660|           ValueCategory = prvalue
#  660|         expr: [Literal] 3
#  660|             Type = [IntType] int
#  660|             Value = [Literal] 3
#  660|             ValueCategory = prvalue
#  661|     3: [ConstructorFieldInit] constructor init of field m_e
#  661|         Type = [VoidPointerType] void *
#  661|         ValueCategory = prvalue
#  661|       0: [Literal] 0
#  661|           Type = [VoidPointerType] void *
#  661|           Value = [Literal] 0
#  661|           ValueCategory = prvalue
#  662|     4: [ConstructorFieldInit] constructor init of field m_f
#  662|         Type = [Struct] String
#  662|         ValueCategory = prvalue
#  662|       0: [ConstructorCall] call to String
#  662|           Type = [VoidType] void
#  662|           ValueCategory = prvalue
#  662|         0: [ArrayToPointerConversion] array to pointer conversion
#  662|             Type = [PointerType] const char *
#  662|             ValueCategory = prvalue
#  662|           expr: test
#  662|               Type = [ArrayType] const char[5]
#  662|               Value = [StringLiteral] "test"
#  662|               ValueCategory = lvalue
#  663|   body: [Block] { ... }
#  664|     0: [ReturnStmt] return ...
#  675| [TopLevelFunction] int DerefReference(int&)
#  675|   params: 
#  675|     0: [Parameter] r
#  675|         Type = [LValueReferenceType] int &
#  675|   body: [Block] { ... }
#  676|     0: [ReturnStmt] return ...
#  676|       0: [ReferenceDereferenceExpr] (reference dereference)
#  676|           Type = [IntType] int
#  676|           ValueCategory = prvalue(load)
#  676|         expr: [VariableAccess] r
#  676|             Type = [LValueReferenceType] int &
#  676|             ValueCategory = prvalue(load)
#  679| [TopLevelFunction] int& TakeReference()
#  679|   params: 
#  679|   body: [Block] { ... }
#  680|     0: [ReturnStmt] return ...
#  680|       0: [ReferenceToExpr] (reference to)
#  680|           Type = [LValueReferenceType] int &
#  680|           ValueCategory = prvalue
#  680|         expr: [VariableAccess] g
#  680|             Type = [IntType] int
#  680|             ValueCategory = lvalue
#  683| [TopLevelFunction] String& ReturnReference()
#  683|   params: 
#  685| [TopLevelFunction] void InitReference(int)
#  685|   params: 
#  685|     0: [Parameter] x
#  685|         Type = [IntType] int
#  685|   body: [Block] { ... }
#  686|     0: [DeclStmt] declaration
#  686|       0: [VariableDeclarationEntry] definition of r
#  686|           Type = [LValueReferenceType] int &
#  686|         init: [Initializer] initializer for r
#  686|           expr: [ReferenceToExpr] (reference to)
#  686|               Type = [LValueReferenceType] int &
#  686|               ValueCategory = prvalue
#  686|             expr: [VariableAccess] x
#  686|                 Type = [IntType] int
#  686|                 ValueCategory = lvalue
#  687|     1: [DeclStmt] declaration
#  687|       0: [VariableDeclarationEntry] definition of r2
#  687|           Type = [LValueReferenceType] int &
#  687|         init: [Initializer] initializer for r2
#  687|           expr: [ReferenceToExpr] (reference to)
#  687|               Type = [LValueReferenceType] int &
#  687|               ValueCategory = prvalue
#  687|             expr: [ReferenceDereferenceExpr] (reference dereference)
#  687|                 Type = [IntType] int
#  687|                 ValueCategory = lvalue
#  687|               expr: [VariableAccess] r
#  687|                   Type = [LValueReferenceType] int &
#  687|                   ValueCategory = prvalue(load)
#  688|     2: [DeclStmt] declaration
#  688|       0: [VariableDeclarationEntry] definition of r3
#  688|           Type = [LValueReferenceType] const String &
#  688|         init: [Initializer] initializer for r3
#  688|           expr: [ReferenceToExpr] (reference to)
#  688|               Type = [LValueReferenceType] const String &
#  688|               ValueCategory = prvalue
#  688|             expr: [CStyleCast] (const String)...
#  688|                 Conversion = [GlvalueConversion] glvalue conversion
#  688|                 Type = [SpecifiedType] const String
#  688|                 ValueCategory = lvalue
#  688|               expr: [ReferenceDereferenceExpr] (reference dereference)
#  688|                   Type = [Struct] String
#  688|                   ValueCategory = lvalue
#  688|                 expr: [FunctionCall] call to ReturnReference
#  688|                     Type = [LValueReferenceType] String &
#  688|                     ValueCategory = prvalue
#  689|     3: [ReturnStmt] return ...
#  691| [TopLevelFunction] void ArrayReferences()
#  691|   params: 
#  691|   body: [Block] { ... }
#  692|     0: [DeclStmt] declaration
#  692|       0: [VariableDeclarationEntry] definition of a
#  692|           Type = [ArrayType] int[10]
#  693|     1: [DeclStmt] declaration
#  693|       0: [VariableDeclarationEntry] definition of ra
#  693|           Type = [LValueReferenceType] int(&)[10]
#  693|         init: [Initializer] initializer for ra
#  693|           expr: [ReferenceToExpr] (reference to)
#  693|               Type = [LValueReferenceType] int(&)[10]
#  693|               ValueCategory = prvalue
#  693|             expr: [VariableAccess] a
#  693|                 Type = [ArrayType] int[10]
#  693|                 ValueCategory = lvalue
#  694|     2: [DeclStmt] declaration
#  694|       0: [VariableDeclarationEntry] definition of x
#  694|           Type = [IntType] int
#  694|         init: [Initializer] initializer for x
#  694|           expr: [ArrayExpr] access to array
#  694|               Type = [IntType] int
#  694|               ValueCategory = prvalue(load)
#  694|             0: [ArrayToPointerConversion] array to pointer conversion
#  694|                 Type = [IntPointerType] int *
#  694|                 ValueCategory = prvalue
#  694|               expr: [ReferenceDereferenceExpr] (reference dereference)
#  694|                   Type = [ArrayType] int[10]
#  694|                   ValueCategory = lvalue
#  694|                 expr: [VariableAccess] ra
#  694|                     Type = [LValueReferenceType] int(&)[10]
#  694|                     ValueCategory = prvalue(load)
#  694|             1: [Literal] 5
#  694|                 Type = [IntType] int
#  694|                 Value = [Literal] 5
#  694|                 ValueCategory = prvalue
#  695|     3: [ReturnStmt] return ...
#  697| [TopLevelFunction] void FunctionReferences()
#  697|   params: 
#  697|   body: [Block] { ... }
#  698|     0: [DeclStmt] declaration
#  698|       0: [VariableDeclarationEntry] definition of rfn
#  698|           Type = [FunctionReferenceType] ..(&)(..)
#  698|         init: [Initializer] initializer for rfn
#  698|           expr: [ReferenceToExpr] (reference to)
#  698|               Type = [FunctionReferenceType] ..(&)(..)
#  698|               ValueCategory = prvalue
#  698|             expr: [FunctionAccess] FuncPtrTarget
#  698|                 Type = [RoutineType] ..()(..)
#  698|                 ValueCategory = lvalue
#  699|     1: [DeclStmt] declaration
#  699|       0: [VariableDeclarationEntry] definition of pfn
#  699|           Type = [FunctionPointerType] ..(*)(..)
#  699|         init: [Initializer] initializer for pfn
#  699|           expr: [ReferenceDereferenceExpr] (reference dereference)
#  699|               Type = [FunctionPointerType] ..(*)(..)
#  699|               ValueCategory = prvalue(load)
#  699|             expr: [VariableAccess] rfn
#  699|                 Type = [FunctionReferenceType] ..(&)(..)
#  699|                 ValueCategory = prvalue(load)
#  700|     2: [ExprStmt] ExprStmt
#  700|       0: [VariableCall] call to expression
#  700|           Type = [IntType] int
#  700|           ValueCategory = prvalue
#  700|         0: [ReferenceDereferenceExpr] (reference dereference)
#  700|             Type = [FunctionPointerType] ..(*)(..)
#  700|             ValueCategory = prvalue(load)
#  700|           expr: [VariableAccess] rfn
#  700|               Type = [FunctionReferenceType] ..(&)(..)
#  700|               ValueCategory = prvalue(load)
#  700|         1: [Literal] 5
#  700|             Type = [IntType] int
#  700|             Value = [Literal] 5
#  700|             ValueCategory = prvalue
#  701|     3: [ReturnStmt] return ...
#  704| [TemplateFunction,TopLevelFunction] T min<T>(T, T)
#  704|   params: 
#  704|     0: [Parameter] x
#  704|         Type = [TemplateParameter] T
#  704|     1: [Parameter] y
#  704|         Type = [TemplateParameter] T
#  704|   body: [Block] { ... }
#  705|     0: [ReturnStmt] return ...
#  705|       0: [ConditionalExpr] ... ? ... : ...
#  705|           Type = [UnknownType] unknown
#  705|           ValueCategory = prvalue
#  705|         0: [CStyleCast] (bool)...
#  705|             Conversion = [BoolConversion] conversion to bool
#  705|             Type = [BoolType] bool
#  705|             ValueCategory = prvalue
#  705|           expr: [ParenthesisExpr] (...)
#  705|               Type = [UnknownType] unknown
#  705|               ValueCategory = prvalue
#  705|             expr: [LTExpr] ... < ...
#  705|                 Type = [UnknownType] unknown
#  705|                 ValueCategory = prvalue
#  705|               0: [VariableAccess] x
#  705|                   Type = [TemplateParameter] T
#  705|                   ValueCategory = lvalue
#  705|               1: [VariableAccess] y
#  705|                   Type = [TemplateParameter] T
#  705|                   ValueCategory = lvalue
#  705|         1: [VariableAccess] x
#  705|             Type = [TemplateParameter] T
#  705|             ValueCategory = lvalue
#  705|         2: [VariableAccess] y
#  705|             Type = [TemplateParameter] T
#  705|             ValueCategory = lvalue
#  704| [FunctionTemplateInstantiation,TopLevelFunction] int min<int>(int, int)
#  704|   params: 
#  704|     0: [Parameter] x
#  704|         Type = [IntType] int
#  704|     1: [Parameter] y
#  704|         Type = [IntType] int
#  704|   body: [Block] { ... }
#  705|     0: [ReturnStmt] return ...
#  705|       0: [ConditionalExpr] ... ? ... : ...
#  705|           Type = [IntType] int
#  705|           ValueCategory = prvalue
#  705|         0: [ParenthesisExpr] (...)
#  705|             Type = [BoolType] bool
#  705|             ValueCategory = prvalue
#  705|           expr: [LTExpr] ... < ...
#  705|               Type = [BoolType] bool
#  705|               ValueCategory = prvalue
#  705|             0: [VariableAccess] x
#  705|                 Type = [IntType] int
#  705|                 ValueCategory = prvalue(load)
#  705|             1: [VariableAccess] y
#  705|                 Type = [IntType] int
#  705|                 ValueCategory = prvalue(load)
#  705|         1: [VariableAccess] x
#  705|             Type = [IntType] int
#  705|             ValueCategory = prvalue(load)
#  705|         2: [VariableAccess] y
#  705|             Type = [IntType] int
#  705|             ValueCategory = prvalue(load)
#  708| [TopLevelFunction] int CallMin(int, int)
#  708|   params: 
#  708|     0: [Parameter] x
#  708|         Type = [IntType] int
#  708|     1: [Parameter] y
#  708|         Type = [IntType] int
#  708|   body: [Block] { ... }
#  709|     0: [ReturnStmt] return ...
#  709|       0: [FunctionCall] call to min
#  709|           Type = [IntType] int
#  709|           ValueCategory = prvalue
#  709|         0: [VariableAccess] x
#  709|             Type = [IntType] int
#  709|             ValueCategory = prvalue(load)
#  709|         1: [VariableAccess] y
#  709|             Type = [IntType] int
#  709|             ValueCategory = prvalue(load)
#  713| [CopyAssignmentOperator] Outer<long>& Outer<long>::operator=(Outer<long> const&)
#  713|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const Outer<long> &
#  713| [MoveAssignmentOperator] Outer<long>& Outer<long>::operator=(Outer<long>&&)
#  713|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [RValueReferenceType] Outer<long> &&
#  715| [MemberFunction,TemplateFunction] T Outer<T>::Func<U, V>(U, V)
#  715|   params: 
#  715|     0: [Parameter] x
#  715|         Type = [TemplateParameter] U
#  715|     1: [Parameter] y
#  715|         Type = [TemplateParameter] V
#  715|   body: [Block] { ... }
#  716|     0: [ReturnStmt] return ...
#  716|       0: [Literal] 0
#  716|           Type = [TemplateParameter] T
#  716|           Value = [Literal] 0
#  716|           ValueCategory = prvalue
#  715| [MemberFunction,TemplateFunction] long Outer<long>::Func<U, V>(U, V)
#  715|   params: 
#  715|     0: [Parameter] x
#  715|         Type = [TemplateParameter] U
#  715|     1: [Parameter] y
#  715|         Type = [TemplateParameter] V
#  715| [FunctionTemplateInstantiation,MemberFunction] long Outer<long>::Func<void*, char>(void*, char)
#  715|   params: 
#  715|     0: [Parameter] x
#  715|         Type = [VoidPointerType] void *
#  715|     1: [Parameter] y
#  715|         Type = [PlainCharType] char
#  715|   body: [Block] { ... }
#  716|     0: [ReturnStmt] return ...
#  716|       0: [Literal] 0
#  716|           Type = [LongType] long
#  716|           Value = [Literal] 0
#  716|           ValueCategory = prvalue
#  720| [TopLevelFunction] double CallNestedTemplateFunc()
#  720|   params: 
#  720|   body: [Block] { ... }
#  721|     0: [ReturnStmt] return ...
#  721|       0: [CStyleCast] (double)...
#  721|           Conversion = [IntegralToFloatingPointConversion] integral to floating point conversion
#  721|           Type = [DoubleType] double
#  721|           ValueCategory = prvalue
#  721|         expr: [FunctionCall] call to Func
#  721|             Type = [LongType] long
#  721|             ValueCategory = prvalue
#  721|           0: [CStyleCast] (void *)...
#  721|               Conversion = [PointerConversion] pointer conversion
#  721|               Type = [VoidPointerType] void *
#  721|               Value = [CStyleCast] 0
#  721|               ValueCategory = prvalue
#  721|             expr: [Literal] 0
#  721|                 Type = [NullPointerType] decltype(nullptr)
#  721|                 Value = [Literal] 0
#  721|                 ValueCategory = prvalue
#  721|           1: [CharLiteral] 111
#  721|               Type = [PlainCharType] char
#  721|               Value = [CharLiteral] 111
#  721|               ValueCategory = prvalue
#  724| [TopLevelFunction] void TryCatch(bool)
#  724|   params: 
#  724|     0: [Parameter] b
#  724|         Type = [BoolType] bool
#  724|   body: [Block] { ... }
#  725|     0: [TryStmt] try { ... }
#  725|       0: [Block] { ... }
#  726|         0: [DeclStmt] declaration
#  726|           0: [VariableDeclarationEntry] definition of x
#  726|               Type = [IntType] int
#  726|             init: [Initializer] initializer for x
#  726|               expr: [Literal] 5
#  726|                   Type = [IntType] int
#  726|                   Value = [Literal] 5
#  726|                   ValueCategory = prvalue
#  727|         1: [IfStmt] if (...) ... 
#  727|           0: [VariableAccess] b
#  727|               Type = [BoolType] bool
#  727|               ValueCategory = prvalue(load)
#  727|           1: [Block] { ... }
#  728|             0: [ExprStmt] ExprStmt
#  728|               0: [ThrowExpr] throw ...
#  728|                   Type = [PointerType] const char *
#  728|                   ValueCategory = prvalue
#  728|                 0: [ArrayToPointerConversion] array to pointer conversion
#  728|                     Type = [PointerType] const char *
#  728|                     ValueCategory = prvalue
#  728|                   expr: string literal
#  728|                       Type = [ArrayType] const char[15]
#  728|                       Value = [StringLiteral] "string literal"
#  728|                       ValueCategory = lvalue
#  730|           2: [IfStmt] if (...) ... 
#  730|             0: [LTExpr] ... < ...
#  730|                 Type = [BoolType] bool
#  730|                 ValueCategory = prvalue
#  730|               0: [VariableAccess] x
#  730|                   Type = [IntType] int
#  730|                   ValueCategory = prvalue(load)
#  730|               1: [Literal] 2
#  730|                   Type = [IntType] int
#  730|                   Value = [Literal] 2
#  730|                   ValueCategory = prvalue
#  730|             1: [Block] { ... }
#  731|               0: [ExprStmt] ExprStmt
#  731|                 0: [AssignExpr] ... = ...
#  731|                     Type = [IntType] int
#  731|                     ValueCategory = lvalue
#  731|                   0: [VariableAccess] x
#  731|                       Type = [IntType] int
#  731|                       ValueCategory = lvalue
#  731|                   1: [ConditionalExpr] ... ? ... : ...
#  731|                       Type = [IntType] int
#  731|                       ValueCategory = prvalue
#  731|                     0: [VariableAccess] b
#  731|                         Type = [BoolType] bool
#  731|                         ValueCategory = prvalue(load)
#  731|                     1: [Literal] 7
#  731|                         Type = [IntType] int
#  731|                         Value = [Literal] 7
#  731|                         ValueCategory = prvalue
#  731|                     2: [ThrowExpr] throw ...
#  731|                         Type = [Struct] String
#  731|                         ValueCategory = prvalue
#  731|                       0: [ConstructorCall] call to String
#  731|                           Type = [VoidType] void
#  731|                           ValueCategory = prvalue
#  731|                         0: [ArrayToPointerConversion] array to pointer conversion
#  731|                             Type = [PointerType] const char *
#  731|                             ValueCategory = prvalue
#  731|                           expr: String object
#  731|                               Type = [ArrayType] const char[14]
#  731|                               Value = [StringLiteral] "String object"
#  731|                               ValueCategory = lvalue
#  733|         2: [ExprStmt] ExprStmt
#  733|           0: [AssignExpr] ... = ...
#  733|               Type = [IntType] int
#  733|               ValueCategory = lvalue
#  733|             0: [VariableAccess] x
#  733|                 Type = [IntType] int
#  733|                 ValueCategory = lvalue
#  733|             1: [Literal] 7
#  733|                 Type = [IntType] int
#  733|                 Value = [Literal] 7
#  733|                 ValueCategory = prvalue
#  735|       1: [Handler] <handler>
#  735|         0: [CatchBlock] { ... }
#  736|           0: [ExprStmt] ExprStmt
#  736|             0: [ThrowExpr] throw ...
#  736|                 Type = [Struct] String
#  736|                 ValueCategory = prvalue
#  736|               0: [ConstructorCall] call to String
#  736|                   Type = [VoidType] void
#  736|                   ValueCategory = prvalue
#  736|                 0: [VariableAccess] s
#  736|                     Type = [PointerType] const char *
#  736|                     ValueCategory = prvalue(load)
#  738|       2: [Handler] <handler>
#  738|         0: [CatchBlock] { ... }
#  740|       3: [Handler] <handler>
#  740|         0: [CatchAnyBlock] { ... }
#  741|           0: [ExprStmt] ExprStmt
#  741|             0: [ReThrowExpr] re-throw exception 
#  741|                 Type = [VoidType] void
#  741|                 ValueCategory = prvalue
#  743|     1: [ReturnStmt] return ...
#  745| [CopyAssignmentOperator] Base& Base::operator=(Base const&)
#  745|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const Base &
#-----|   body: [Block] { ... }
#-----|     0: [ExprStmt] ExprStmt
#-----|       0: [ReferenceDereferenceExpr] (reference dereference)
#-----|           Type = [Struct] String
#-----|           ValueCategory = lvalue
#  745|         expr: [FunctionCall] call to operator=
#  745|             Type = [LValueReferenceType] String &
#  745|             ValueCategory = prvalue
#-----|           -1: [AddressOfExpr] & ...
#-----|               Type = [PointerType] String *
#-----|               ValueCategory = prvalue
#-----|             0: [PointerFieldAccess] base_s
#-----|                 Type = [Struct] String
#-----|                 ValueCategory = lvalue
#-----|               -1: [ThisExpr] this
#-----|                   Type = [PointerType] Base *
#-----|                   ValueCategory = prvalue(load)
#-----|           0: [ReferenceToExpr] (reference to)
#-----|               Type = [LValueReferenceType] const String &
#-----|               ValueCategory = prvalue
#-----|             expr: [ReferenceFieldAccess] base_s
#-----|                 Type = [Struct] String
#-----|                 ValueCategory = lvalue
#-----|               -1: [ReferenceDereferenceExpr] (reference dereference)
#-----|                   Type = [SpecifiedType] const Base
#-----|                   ValueCategory = lvalue
#-----|                 expr: [VariableAccess] p#0
#-----|                     Type = [LValueReferenceType] const Base &
#-----|                     ValueCategory = prvalue(load)
#-----|     1: [ReturnStmt] return ...
#-----|       0: [ReferenceToExpr] (reference to)
#-----|           Type = [LValueReferenceType] Base &
#-----|           ValueCategory = prvalue
#-----|         expr: [PointerDereferenceExpr] * ...
#-----|             Type = [Struct,VirtualBaseClass] Base
#-----|             ValueCategory = lvalue
#-----|           0: [ThisExpr] this
#-----|               Type = [PointerType] Base *
#-----|               ValueCategory = prvalue(load)
#  745| [CopyConstructor] void Base::Base(Base const&)
#  745|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const Base &
#  745|   initializations: 
#  745|     0: [ConstructorFieldInit] constructor init of field base_s
#  745|         Type = [Struct] String
#  745|         ValueCategory = prvalue
#  745|       0: [ConstructorCall] call to String
#  745|           Type = [VoidType] void
#  745|           ValueCategory = prvalue
#  745|   body: [Block] { ... }
#  745|     0: [ReturnStmt] return ...
#  748| [Constructor] void Base::Base()
#  748|   params: 
#  748|   initializations: 
#  748|     0: [ConstructorFieldInit] constructor init of field base_s
#  748|         Type = [Struct] String
#  748|         ValueCategory = prvalue
#  748|       0: [ConstructorCall] call to String
#  748|           Type = [VoidType] void
#  748|           ValueCategory = prvalue
#  748|   body: [Block] { ... }
#  749|     0: [ReturnStmt] return ...
#  750| [Destructor] void Base::~Base()
#  750|   params: 
#  750|   body: [Block] { ... }
#  751|     0: [ReturnStmt] return ...
#  750|   destructions: 
#  751|     0: [DestructorFieldDestruction] destructor field destruction of base_s
#  751|         Type = [Struct] String
#  751|         ValueCategory = prvalue
#  751|       0: [DestructorCall] call to ~String
#  751|           Type = [VoidType] void
#  751|           ValueCategory = prvalue
#  751|         -1: [ImplicitThisFieldAccess] base_s
#  751|             Type = [Struct] String
#  751|             ValueCategory = lvalue
#  754| [CopyAssignmentOperator] Middle& Middle::operator=(Middle const&)
#  754|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const Middle &
#-----|   body: [Block] { ... }
#-----|     0: [ExprStmt] ExprStmt
#-----|       0: [ReferenceDereferenceExpr] (reference dereference)
#-----|           Type = [Struct,VirtualBaseClass] Base
#-----|           ValueCategory = lvalue
#  754|         expr: [FunctionCall] call to operator=
#  754|             Type = [LValueReferenceType] Base &
#  754|             ValueCategory = prvalue
#-----|           -1: [CStyleCast] (Base *)...
#-----|               Conversion = [BaseClassConversion] base class conversion
#-----|               Type = [PointerType] Base *
#-----|               ValueCategory = prvalue
#-----|             expr: [ThisExpr] this
#-----|                 Type = [PointerType] Middle *
#-----|                 ValueCategory = prvalue(load)
#-----|           0: [ReferenceToExpr] (reference to)
#-----|               Type = [LValueReferenceType] const Base &
#-----|               ValueCategory = prvalue
#-----|             expr: [PointerDereferenceExpr] * ...
#-----|                 Type = [SpecifiedType] const Base
#-----|                 ValueCategory = lvalue
#-----|               0: [CStyleCast] (const Base *)...
#-----|                   Conversion = [BaseClassConversion] base class conversion
#-----|                   Type = [PointerType] const Base *
#-----|                   ValueCategory = prvalue
#-----|                 expr: [AddressOfExpr] & ...
#-----|                     Type = [PointerType] const Middle *
#-----|                     ValueCategory = prvalue
#-----|                   0: [ReferenceDereferenceExpr] (reference dereference)
#-----|                       Type = [SpecifiedType] const Middle
#-----|                       ValueCategory = lvalue
#-----|                     expr: [VariableAccess] p#0
#-----|                         Type = [LValueReferenceType] const Middle &
#-----|                         ValueCategory = prvalue(load)
#-----|     1: [ExprStmt] ExprStmt
#-----|       0: [ReferenceDereferenceExpr] (reference dereference)
#-----|           Type = [Struct] String
#-----|           ValueCategory = lvalue
#  754|         expr: [FunctionCall] call to operator=
#  754|             Type = [LValueReferenceType] String &
#  754|             ValueCategory = prvalue
#-----|           -1: [AddressOfExpr] & ...
#-----|               Type = [PointerType] String *
#-----|               ValueCategory = prvalue
#-----|             0: [PointerFieldAccess] middle_s
#-----|                 Type = [Struct] String
#-----|                 ValueCategory = lvalue
#-----|               -1: [ThisExpr] this
#-----|                   Type = [PointerType] Middle *
#-----|                   ValueCategory = prvalue(load)
#-----|           0: [ReferenceToExpr] (reference to)
#-----|               Type = [LValueReferenceType] const String &
#-----|               ValueCategory = prvalue
#-----|             expr: [ReferenceFieldAccess] middle_s
#-----|                 Type = [Struct] String
#-----|                 ValueCategory = lvalue
#-----|               -1: [ReferenceDereferenceExpr] (reference dereference)
#-----|                   Type = [SpecifiedType] const Middle
#-----|                   ValueCategory = lvalue
#-----|                 expr: [VariableAccess] p#0
#-----|                     Type = [LValueReferenceType] const Middle &
#-----|                     ValueCategory = prvalue(load)
#-----|     2: [ReturnStmt] return ...
#-----|       0: [ReferenceToExpr] (reference to)
#-----|           Type = [LValueReferenceType] Middle &
#-----|           ValueCategory = prvalue
#-----|         expr: [PointerDereferenceExpr] * ...
#-----|             Type = [Struct] Middle
#-----|             ValueCategory = lvalue
#-----|           0: [ThisExpr] this
#-----|               Type = [PointerType] Middle *
#-----|               ValueCategory = prvalue(load)
#  754| [CopyConstructor] void Middle::Middle(Middle const&)
#  754|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const Middle &
#  757| [Constructor] void Middle::Middle()
#  757|   params: 
#  757|   initializations: 
#  757|     0: [ConstructorDirectInit] call to Base
#  757|         Type = [VoidType] void
#  757|         ValueCategory = prvalue
#  757|     1: [ConstructorFieldInit] constructor init of field middle_s
#  757|         Type = [Struct] String
#  757|         ValueCategory = prvalue
#  757|       0: [ConstructorCall] call to String
#  757|           Type = [VoidType] void
#  757|           ValueCategory = prvalue
#  757|   body: [Block] { ... }
#  758|     0: [ReturnStmt] return ...
#  759| [Destructor] void Middle::~Middle()
#  759|   params: 
#  759|   body: [Block] { ... }
#  760|     0: [ReturnStmt] return ...
#  759|   destructions: 
#  760|     0: [DestructorFieldDestruction] destructor field destruction of middle_s
#  760|         Type = [Struct] String
#  760|         ValueCategory = prvalue
#  760|       0: [DestructorCall] call to ~String
#  760|           Type = [VoidType] void
#  760|           ValueCategory = prvalue
#  760|         -1: [ImplicitThisFieldAccess] middle_s
#  760|             Type = [Struct] String
#  760|             ValueCategory = lvalue
#  760|     1: [DestructorDirectDestruction] call to ~Base
#  760|         Type = [VoidType] void
#  760|         ValueCategory = prvalue
#  763| [CopyAssignmentOperator] Derived& Derived::operator=(Derived const&)
#  763|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const Derived &
#-----|   body: [Block] { ... }
#-----|     0: [ExprStmt] ExprStmt
#-----|       0: [ReferenceDereferenceExpr] (reference dereference)
#-----|           Type = [Struct] Middle
#-----|           ValueCategory = lvalue
#  763|         expr: [FunctionCall] call to operator=
#  763|             Type = [LValueReferenceType] Middle &
#  763|             ValueCategory = prvalue
#-----|           -1: [CStyleCast] (Middle *)...
#-----|               Conversion = [BaseClassConversion] base class conversion
#-----|               Type = [PointerType] Middle *
#-----|               ValueCategory = prvalue
#-----|             expr: [ThisExpr] this
#-----|                 Type = [PointerType] Derived *
#-----|                 ValueCategory = prvalue(load)
#-----|           0: [ReferenceToExpr] (reference to)
#-----|               Type = [LValueReferenceType] const Middle &
#-----|               ValueCategory = prvalue
#-----|             expr: [PointerDereferenceExpr] * ...
#-----|                 Type = [SpecifiedType] const Middle
#-----|                 ValueCategory = lvalue
#-----|               0: [CStyleCast] (const Middle *)...
#-----|                   Conversion = [BaseClassConversion] base class conversion
#-----|                   Type = [PointerType] const Middle *
#-----|                   ValueCategory = prvalue
#-----|                 expr: [AddressOfExpr] & ...
#-----|                     Type = [PointerType] const Derived *
#-----|                     ValueCategory = prvalue
#-----|                   0: [ReferenceDereferenceExpr] (reference dereference)
#-----|                       Type = [SpecifiedType] const Derived
#-----|                       ValueCategory = lvalue
#-----|                     expr: [VariableAccess] p#0
#-----|                         Type = [LValueReferenceType] const Derived &
#-----|                         ValueCategory = prvalue(load)
#-----|     1: [ExprStmt] ExprStmt
#-----|       0: [ReferenceDereferenceExpr] (reference dereference)
#-----|           Type = [Struct] String
#-----|           ValueCategory = lvalue
#  763|         expr: [FunctionCall] call to operator=
#  763|             Type = [LValueReferenceType] String &
#  763|             ValueCategory = prvalue
#-----|           -1: [AddressOfExpr] & ...
#-----|               Type = [PointerType] String *
#-----|               ValueCategory = prvalue
#-----|             0: [PointerFieldAccess] derived_s
#-----|                 Type = [Struct] String
#-----|                 ValueCategory = lvalue
#-----|               -1: [ThisExpr] this
#-----|                   Type = [PointerType] Derived *
#-----|                   ValueCategory = prvalue(load)
#-----|           0: [ReferenceToExpr] (reference to)
#-----|               Type = [LValueReferenceType] const String &
#-----|               ValueCategory = prvalue
#-----|             expr: [ReferenceFieldAccess] derived_s
#-----|                 Type = [Struct] String
#-----|                 ValueCategory = lvalue
#-----|               -1: [ReferenceDereferenceExpr] (reference dereference)
#-----|                   Type = [SpecifiedType] const Derived
#-----|                   ValueCategory = lvalue
#-----|                 expr: [VariableAccess] p#0
#-----|                     Type = [LValueReferenceType] const Derived &
#-----|                     ValueCategory = prvalue(load)
#-----|     2: [ReturnStmt] return ...
#-----|       0: [ReferenceToExpr] (reference to)
#-----|           Type = [LValueReferenceType] Derived &
#-----|           ValueCategory = prvalue
#-----|         expr: [PointerDereferenceExpr] * ...
#-----|             Type = [Struct] Derived
#-----|             ValueCategory = lvalue
#-----|           0: [ThisExpr] this
#-----|               Type = [PointerType] Derived *
#-----|               ValueCategory = prvalue(load)
#  763| [CopyConstructor] void Derived::Derived(Derived const&)
#  763|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const Derived &
#  766| [Constructor] void Derived::Derived()
#  766|   params: 
#  766|   initializations: 
#  766|     0: [ConstructorDirectInit] call to Middle
#  766|         Type = [VoidType] void
#  766|         ValueCategory = prvalue
#  766|     1: [ConstructorFieldInit] constructor init of field derived_s
#  766|         Type = [Struct] String
#  766|         ValueCategory = prvalue
#  766|       0: [ConstructorCall] call to String
#  766|           Type = [VoidType] void
#  766|           ValueCategory = prvalue
#  766|   body: [Block] { ... }
#  767|     0: [ReturnStmt] return ...
#  768| [Destructor] void Derived::~Derived()
#  768|   params: 
#  768|   body: [Block] { ... }
#  769|     0: [ReturnStmt] return ...
#  768|   destructions: 
#  769|     0: [DestructorFieldDestruction] destructor field destruction of derived_s
#  769|         Type = [Struct] String
#  769|         ValueCategory = prvalue
#  769|       0: [DestructorCall] call to ~String
#  769|           Type = [VoidType] void
#  769|           ValueCategory = prvalue
#  769|         -1: [ImplicitThisFieldAccess] derived_s
#  769|             Type = [Struct] String
#  769|             ValueCategory = lvalue
#  769|     1: [DestructorDirectDestruction] call to ~Middle
#  769|         Type = [VoidType] void
#  769|         ValueCategory = prvalue
#  772| [CopyAssignmentOperator] MiddleVB1& MiddleVB1::operator=(MiddleVB1 const&)
#  772|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const MiddleVB1 &
#  772| [CopyConstructor] void MiddleVB1::MiddleVB1(MiddleVB1 const&)
#  772|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const MiddleVB1 &
#  775| [Constructor] void MiddleVB1::MiddleVB1()
#  775|   params: 
#  775|   initializations: 
#  775|     0: [ConstructorVirtualInit] call to Base
#  775|         Type = [VoidType] void
#  775|         ValueCategory = prvalue
#  775|     1: [ConstructorFieldInit] constructor init of field middlevb1_s
#  775|         Type = [Struct] String
#  775|         ValueCategory = prvalue
#  775|       0: [ConstructorCall] call to String
#  775|           Type = [VoidType] void
#  775|           ValueCategory = prvalue
#  775|   body: [Block] { ... }
#  776|     0: [ReturnStmt] return ...
#  777| [Destructor] void MiddleVB1::~MiddleVB1()
#  777|   params: 
#  777|   body: [Block] { ... }
#  778|     0: [ReturnStmt] return ...
#  777|   destructions: 
#  778|     0: [DestructorFieldDestruction] destructor field destruction of middlevb1_s
#  778|         Type = [Struct] String
#  778|         ValueCategory = prvalue
#  778|       0: [DestructorCall] call to ~String
#  778|           Type = [VoidType] void
#  778|           ValueCategory = prvalue
#  778|         -1: [ImplicitThisFieldAccess] middlevb1_s
#  778|             Type = [Struct] String
#  778|             ValueCategory = lvalue
#  778|     1: [DestructorVirtualDestruction] call to ~Base
#  778|         Type = [VoidType] void
#  778|         ValueCategory = prvalue
#  781| [CopyAssignmentOperator] MiddleVB2& MiddleVB2::operator=(MiddleVB2 const&)
#  781|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const MiddleVB2 &
#  781| [CopyConstructor] void MiddleVB2::MiddleVB2(MiddleVB2 const&)
#  781|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const MiddleVB2 &
#  784| [Constructor] void MiddleVB2::MiddleVB2()
#  784|   params: 
#  784|   initializations: 
#  784|     0: [ConstructorVirtualInit] call to Base
#  784|         Type = [VoidType] void
#  784|         ValueCategory = prvalue
#  784|     1: [ConstructorFieldInit] constructor init of field middlevb2_s
#  784|         Type = [Struct] String
#  784|         ValueCategory = prvalue
#  784|       0: [ConstructorCall] call to String
#  784|           Type = [VoidType] void
#  784|           ValueCategory = prvalue
#  784|   body: [Block] { ... }
#  785|     0: [ReturnStmt] return ...
#  786| [Destructor] void MiddleVB2::~MiddleVB2()
#  786|   params: 
#  786|   body: [Block] { ... }
#  787|     0: [ReturnStmt] return ...
#  786|   destructions: 
#  787|     0: [DestructorFieldDestruction] destructor field destruction of middlevb2_s
#  787|         Type = [Struct] String
#  787|         ValueCategory = prvalue
#  787|       0: [DestructorCall] call to ~String
#  787|           Type = [VoidType] void
#  787|           ValueCategory = prvalue
#  787|         -1: [ImplicitThisFieldAccess] middlevb2_s
#  787|             Type = [Struct] String
#  787|             ValueCategory = lvalue
#  787|     1: [DestructorVirtualDestruction] call to ~Base
#  787|         Type = [VoidType] void
#  787|         ValueCategory = prvalue
#  790| [CopyAssignmentOperator] DerivedVB& DerivedVB::operator=(DerivedVB const&)
#  790|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const DerivedVB &
#  790| [CopyConstructor] void DerivedVB::DerivedVB(DerivedVB const&)
#  790|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const DerivedVB &
#  793| [Constructor] void DerivedVB::DerivedVB()
#  793|   params: 
#  793|   initializations: 
#  793|     0: [ConstructorVirtualInit] call to Base
#  793|         Type = [VoidType] void
#  793|         ValueCategory = prvalue
#  793|     1: [ConstructorDirectInit] call to MiddleVB1
#  793|         Type = [VoidType] void
#  793|         ValueCategory = prvalue
#  793|     2: [ConstructorDirectInit] call to MiddleVB2
#  793|         Type = [VoidType] void
#  793|         ValueCategory = prvalue
#  793|     3: [ConstructorFieldInit] constructor init of field derivedvb_s
#  793|         Type = [Struct] String
#  793|         ValueCategory = prvalue
#  793|       0: [ConstructorCall] call to String
#  793|           Type = [VoidType] void
#  793|           ValueCategory = prvalue
#  793|   body: [Block] { ... }
#  794|     0: [ReturnStmt] return ...
#  795| [Destructor] void DerivedVB::~DerivedVB()
#  795|   params: 
#  795|   body: [Block] { ... }
#  796|     0: [ReturnStmt] return ...
#  795|   destructions: 
#  796|     0: [DestructorFieldDestruction] destructor field destruction of derivedvb_s
#  796|         Type = [Struct] String
#  796|         ValueCategory = prvalue
#  796|       0: [DestructorCall] call to ~String
#  796|           Type = [VoidType] void
#  796|           ValueCategory = prvalue
#  796|         -1: [ImplicitThisFieldAccess] derivedvb_s
#  796|             Type = [Struct] String
#  796|             ValueCategory = lvalue
#  796|     1: [DestructorDirectDestruction] call to ~MiddleVB2
#  796|         Type = [VoidType] void
#  796|         ValueCategory = prvalue
#  796|     2: [DestructorDirectDestruction] call to ~MiddleVB1
#  796|         Type = [VoidType] void
#  796|         ValueCategory = prvalue
#  796|     3: [DestructorVirtualDestruction] call to ~Base
#  796|         Type = [VoidType] void
#  796|         ValueCategory = prvalue
#  799| [TopLevelFunction] void HierarchyConversions()
#  799|   params: 
#  799|   body: [Block] { ... }
#  800|     0: [DeclStmt] declaration
#  800|       0: [VariableDeclarationEntry] definition of b
#  800|           Type = [Struct,VirtualBaseClass] Base
#  800|         init: [Initializer] initializer for b
#  800|           expr: [ConstructorCall] call to Base
#  800|               Type = [VoidType] void
#  800|               ValueCategory = prvalue
#  801|     1: [DeclStmt] declaration
#  801|       0: [VariableDeclarationEntry] definition of m
#  801|           Type = [Struct] Middle
#  801|         init: [Initializer] initializer for m
#  801|           expr: [ConstructorCall] call to Middle
#  801|               Type = [VoidType] void
#  801|               ValueCategory = prvalue
#  802|     2: [DeclStmt] declaration
#  802|       0: [VariableDeclarationEntry] definition of d
#  802|           Type = [Struct] Derived
#  802|         init: [Initializer] initializer for d
#  802|           expr: [ConstructorCall] call to Derived
#  802|               Type = [VoidType] void
#  802|               ValueCategory = prvalue
#  804|     3: [DeclStmt] declaration
#  804|       0: [VariableDeclarationEntry] definition of pb
#  804|           Type = [PointerType] Base *
#  804|         init: [Initializer] initializer for pb
#  804|           expr: [AddressOfExpr] & ...
#  804|               Type = [PointerType] Base *
#  804|               ValueCategory = prvalue
#  804|             0: [VariableAccess] b
#  804|                 Type = [Struct,VirtualBaseClass] Base
#  804|                 ValueCategory = lvalue
#  805|     4: [DeclStmt] declaration
#  805|       0: [VariableDeclarationEntry] definition of pm
#  805|           Type = [PointerType] Middle *
#  805|         init: [Initializer] initializer for pm
#  805|           expr: [AddressOfExpr] & ...
#  805|               Type = [PointerType] Middle *
#  805|               ValueCategory = prvalue
#  805|             0: [VariableAccess] m
#  805|                 Type = [Struct] Middle
#  805|                 ValueCategory = lvalue
#  806|     5: [DeclStmt] declaration
#  806|       0: [VariableDeclarationEntry] definition of pd
#  806|           Type = [PointerType] Derived *
#  806|         init: [Initializer] initializer for pd
#  806|           expr: [AddressOfExpr] & ...
#  806|               Type = [PointerType] Derived *
#  806|               ValueCategory = prvalue
#  806|             0: [VariableAccess] d
#  806|                 Type = [Struct] Derived
#  806|                 ValueCategory = lvalue
#  808|     6: [ExprStmt] ExprStmt
#  808|       0: [ReferenceDereferenceExpr] (reference dereference)
#  808|           Type = [Struct,VirtualBaseClass] Base
#  808|           ValueCategory = lvalue
#  808|         expr: [FunctionCall] call to operator=
#  808|             Type = [LValueReferenceType] Base &
#  808|             ValueCategory = prvalue
#  808|           -1: [VariableAccess] b
#  808|               Type = [Struct,VirtualBaseClass] Base
#  808|               ValueCategory = lvalue
#  808|           0: [ReferenceToExpr] (reference to)
#  808|               Type = [LValueReferenceType] const Base &
#  808|               ValueCategory = prvalue
#  808|             expr: [CStyleCast] (const Base)...
#  808|                 Conversion = [BaseClassConversion] base class conversion
#  808|                 Type = [SpecifiedType] const Base
#  808|                 ValueCategory = lvalue
#  808|               expr: [VariableAccess] m
#  808|                   Type = [Struct] Middle
#  808|                   ValueCategory = lvalue
#  809|     7: [ExprStmt] ExprStmt
#  809|       0: [ReferenceDereferenceExpr] (reference dereference)
#  809|           Type = [Struct,VirtualBaseClass] Base
#  809|           ValueCategory = lvalue
#  809|         expr: [FunctionCall] call to operator=
#  809|             Type = [LValueReferenceType] Base &
#  809|             ValueCategory = prvalue
#  809|           -1: [VariableAccess] b
#  809|               Type = [Struct,VirtualBaseClass] Base
#  809|               ValueCategory = lvalue
#  809|           0: [ReferenceToExpr] (reference to)
#  809|               Type = [LValueReferenceType] const Base &
#  809|               ValueCategory = prvalue
#  809|             expr: [CStyleCast] (const Base)...
#  809|                 Conversion = [GlvalueConversion] glvalue conversion
#  809|                 Type = [SpecifiedType] const Base
#  809|                 ValueCategory = lvalue
#  809|               expr: [ConstructorCall] call to Base
#  809|                   Type = [VoidType] void
#  809|                   ValueCategory = prvalue
#  809|                 0: [ReferenceToExpr] (reference to)
#  809|                     Type = [LValueReferenceType] const Base &
#  809|                     ValueCategory = prvalue
#  809|                   expr: [CStyleCast] (const Base)...
#  809|                       Conversion = [BaseClassConversion] base class conversion
#  809|                       Type = [SpecifiedType] const Base
#  809|                       ValueCategory = lvalue
#  809|                     expr: [VariableAccess] m
#  809|                         Type = [Struct] Middle
#  809|                         ValueCategory = lvalue
#  810|     8: [ExprStmt] ExprStmt
#  810|       0: [ReferenceDereferenceExpr] (reference dereference)
#  810|           Type = [Struct,VirtualBaseClass] Base
#  810|           ValueCategory = lvalue
#  810|         expr: [FunctionCall] call to operator=
#  810|             Type = [LValueReferenceType] Base &
#  810|             ValueCategory = prvalue
#  810|           -1: [VariableAccess] b
#  810|               Type = [Struct,VirtualBaseClass] Base
#  810|               ValueCategory = lvalue
#  810|           0: [ReferenceToExpr] (reference to)
#  810|               Type = [LValueReferenceType] const Base &
#  810|               ValueCategory = prvalue
#  810|             expr: [CStyleCast] (const Base)...
#  810|                 Conversion = [GlvalueConversion] glvalue conversion
#  810|                 Type = [SpecifiedType] const Base
#  810|                 ValueCategory = lvalue
#  810|               expr: [ConstructorCall] call to Base
#  810|                   Type = [VoidType] void
#  810|                   ValueCategory = prvalue
#  810|                 0: [ReferenceToExpr] (reference to)
#  810|                     Type = [LValueReferenceType] const Base &
#  810|                     ValueCategory = prvalue
#  810|                   expr: [CStyleCast] (const Base)...
#  810|                       Conversion = [BaseClassConversion] base class conversion
#  810|                       Type = [SpecifiedType] const Base
#  810|                       ValueCategory = lvalue
#  810|                     expr: [VariableAccess] m
#  810|                         Type = [Struct] Middle
#  810|                         ValueCategory = lvalue
#  811|     9: [ExprStmt] ExprStmt
#  811|       0: [AssignExpr] ... = ...
#  811|           Type = [PointerType] Base *
#  811|           ValueCategory = lvalue
#  811|         0: [VariableAccess] pb
#  811|             Type = [PointerType] Base *
#  811|             ValueCategory = lvalue
#  811|         1: [CStyleCast] (Base *)...
#  811|             Conversion = [BaseClassConversion] base class conversion
#  811|             Type = [PointerType] Base *
#  811|             ValueCategory = prvalue
#  811|           expr: [VariableAccess] pm
#  811|               Type = [PointerType] Middle *
#  811|               ValueCategory = prvalue(load)
#  812|     10: [ExprStmt] ExprStmt
#  812|       0: [AssignExpr] ... = ...
#  812|           Type = [PointerType] Base *
#  812|           ValueCategory = lvalue
#  812|         0: [VariableAccess] pb
#  812|             Type = [PointerType] Base *
#  812|             ValueCategory = lvalue
#  812|         1: [CStyleCast] (Base *)...
#  812|             Conversion = [BaseClassConversion] base class conversion
#  812|             Type = [PointerType] Base *
#  812|             ValueCategory = prvalue
#  812|           expr: [VariableAccess] pm
#  812|               Type = [PointerType] Middle *
#  812|               ValueCategory = prvalue(load)
#  813|     11: [ExprStmt] ExprStmt
#  813|       0: [AssignExpr] ... = ...
#  813|           Type = [PointerType] Base *
#  813|           ValueCategory = lvalue
#  813|         0: [VariableAccess] pb
#  813|             Type = [PointerType] Base *
#  813|             ValueCategory = lvalue
#  813|         1: [StaticCast] static_cast<Base *>...
#  813|             Conversion = [BaseClassConversion] base class conversion
#  813|             Type = [PointerType] Base *
#  813|             ValueCategory = prvalue
#  813|           expr: [VariableAccess] pm
#  813|               Type = [PointerType] Middle *
#  813|               ValueCategory = prvalue(load)
#  814|     12: [ExprStmt] ExprStmt
#  814|       0: [AssignExpr] ... = ...
#  814|           Type = [PointerType] Base *
#  814|           ValueCategory = lvalue
#  814|         0: [VariableAccess] pb
#  814|             Type = [PointerType] Base *
#  814|             ValueCategory = lvalue
#  814|         1: [ReinterpretCast] reinterpret_cast<Base *>...
#  814|             Conversion = [PointerConversion] pointer conversion
#  814|             Type = [PointerType] Base *
#  814|             ValueCategory = prvalue
#  814|           expr: [VariableAccess] pm
#  814|               Type = [PointerType] Middle *
#  814|               ValueCategory = prvalue(load)
#  816|     13: [ExprStmt] ExprStmt
#  816|       0: [ReferenceDereferenceExpr] (reference dereference)
#  816|           Type = [Struct] Middle
#  816|           ValueCategory = lvalue
#  816|         expr: [FunctionCall] call to operator=
#  816|             Type = [LValueReferenceType] Middle &
#  816|             ValueCategory = prvalue
#  816|           -1: [VariableAccess] m
#  816|               Type = [Struct] Middle
#  816|               ValueCategory = lvalue
#  816|           0: [ReferenceToExpr] (reference to)
#  816|               Type = [LValueReferenceType] const Middle &
#  816|               ValueCategory = prvalue
#  816|             expr: [CStyleCast] (const Middle)...
#  816|                 Conversion = [GlvalueConversion] glvalue conversion
#  816|                 Type = [SpecifiedType] const Middle
#  816|                 ValueCategory = lvalue
#  816|               expr: [CStyleCast] (Middle)...
#  816|                   Conversion = [DerivedClassConversion] derived class conversion
#  816|                   Type = [Struct] Middle
#  816|                   ValueCategory = lvalue
#  816|                 expr: [VariableAccess] b
#  816|                     Type = [Struct,VirtualBaseClass] Base
#  816|                     ValueCategory = lvalue
#  817|     14: [ExprStmt] ExprStmt
#  817|       0: [ReferenceDereferenceExpr] (reference dereference)
#  817|           Type = [Struct] Middle
#  817|           ValueCategory = lvalue
#  817|         expr: [FunctionCall] call to operator=
#  817|             Type = [LValueReferenceType] Middle &
#  817|             ValueCategory = prvalue
#  817|           -1: [VariableAccess] m
#  817|               Type = [Struct] Middle
#  817|               ValueCategory = lvalue
#  817|           0: [ReferenceToExpr] (reference to)
#  817|               Type = [LValueReferenceType] const Middle &
#  817|               ValueCategory = prvalue
#  817|             expr: [CStyleCast] (const Middle)...
#  817|                 Conversion = [GlvalueConversion] glvalue conversion
#  817|                 Type = [SpecifiedType] const Middle
#  817|                 ValueCategory = lvalue
#  817|               expr: [StaticCast] static_cast<Middle>...
#  817|                   Conversion = [DerivedClassConversion] derived class conversion
#  817|                   Type = [Struct] Middle
#  817|                   ValueCategory = lvalue
#  817|                 expr: [VariableAccess] b
#  817|                     Type = [Struct,VirtualBaseClass] Base
#  817|                     ValueCategory = lvalue
#  818|     15: [ExprStmt] ExprStmt
#  818|       0: [AssignExpr] ... = ...
#  818|           Type = [PointerType] Middle *
#  818|           ValueCategory = lvalue
#  818|         0: [VariableAccess] pm
#  818|             Type = [PointerType] Middle *
#  818|             ValueCategory = lvalue
#  818|         1: [CStyleCast] (Middle *)...
#  818|             Conversion = [DerivedClassConversion] derived class conversion
#  818|             Type = [PointerType] Middle *
#  818|             ValueCategory = prvalue
#  818|           expr: [VariableAccess] pb
#  818|               Type = [PointerType] Base *
#  818|               ValueCategory = prvalue(load)
#  819|     16: [ExprStmt] ExprStmt
#  819|       0: [AssignExpr] ... = ...
#  819|           Type = [PointerType] Middle *
#  819|           ValueCategory = lvalue
#  819|         0: [VariableAccess] pm
#  819|             Type = [PointerType] Middle *
#  819|             ValueCategory = lvalue
#  819|         1: [StaticCast] static_cast<Middle *>...
#  819|             Conversion = [DerivedClassConversion] derived class conversion
#  819|             Type = [PointerType] Middle *
#  819|             ValueCategory = prvalue
#  819|           expr: [VariableAccess] pb
#  819|               Type = [PointerType] Base *
#  819|               ValueCategory = prvalue(load)
#  820|     17: [ExprStmt] ExprStmt
#  820|       0: [AssignExpr] ... = ...
#  820|           Type = [PointerType] Middle *
#  820|           ValueCategory = lvalue
#  820|         0: [VariableAccess] pm
#  820|             Type = [PointerType] Middle *
#  820|             ValueCategory = lvalue
#  820|         1: [ReinterpretCast] reinterpret_cast<Middle *>...
#  820|             Conversion = [PointerConversion] pointer conversion
#  820|             Type = [PointerType] Middle *
#  820|             ValueCategory = prvalue
#  820|           expr: [VariableAccess] pb
#  820|               Type = [PointerType] Base *
#  820|               ValueCategory = prvalue(load)
#  822|     18: [ExprStmt] ExprStmt
#  822|       0: [ReferenceDereferenceExpr] (reference dereference)
#  822|           Type = [Struct,VirtualBaseClass] Base
#  822|           ValueCategory = lvalue
#  822|         expr: [FunctionCall] call to operator=
#  822|             Type = [LValueReferenceType] Base &
#  822|             ValueCategory = prvalue
#  822|           -1: [VariableAccess] b
#  822|               Type = [Struct,VirtualBaseClass] Base
#  822|               ValueCategory = lvalue
#  822|           0: [ReferenceToExpr] (reference to)
#  822|               Type = [LValueReferenceType] const Base &
#  822|               ValueCategory = prvalue
#  822|             expr: [CStyleCast] (const Base)...
#  822|                 Conversion = [BaseClassConversion] base class conversion
#  822|                 Type = [SpecifiedType] const Base
#  822|                 ValueCategory = lvalue
#  822|               expr: [CStyleCast] (const Middle)...
#  822|                   Conversion = [BaseClassConversion] base class conversion
#  822|                   Type = [SpecifiedType] const Middle
#  822|                   ValueCategory = lvalue
#  822|                 expr: [VariableAccess] d
#  822|                     Type = [Struct] Derived
#  822|                     ValueCategory = lvalue
#  823|     19: [ExprStmt] ExprStmt
#  823|       0: [ReferenceDereferenceExpr] (reference dereference)
#  823|           Type = [Struct,VirtualBaseClass] Base
#  823|           ValueCategory = lvalue
#  823|         expr: [FunctionCall] call to operator=
#  823|             Type = [LValueReferenceType] Base &
#  823|             ValueCategory = prvalue
#  823|           -1: [VariableAccess] b
#  823|               Type = [Struct,VirtualBaseClass] Base
#  823|               ValueCategory = lvalue
#  823|           0: [ReferenceToExpr] (reference to)
#  823|               Type = [LValueReferenceType] const Base &
#  823|               ValueCategory = prvalue
#  823|             expr: [CStyleCast] (const Base)...
#  823|                 Conversion = [GlvalueConversion] glvalue conversion
#  823|                 Type = [SpecifiedType] const Base
#  823|                 ValueCategory = lvalue
#  823|               expr: [ConstructorCall] call to Base
#  823|                   Type = [VoidType] void
#  823|                   ValueCategory = prvalue
#  823|                 0: [ReferenceToExpr] (reference to)
#  823|                     Type = [LValueReferenceType] const Base &
#  823|                     ValueCategory = prvalue
#  823|                   expr: [CStyleCast] (const Base)...
#  823|                       Conversion = [BaseClassConversion] base class conversion
#  823|                       Type = [SpecifiedType] const Base
#  823|                       ValueCategory = lvalue
#  823|                     expr: [CStyleCast] (const Middle)...
#  823|                         Conversion = [BaseClassConversion] base class conversion
#  823|                         Type = [SpecifiedType] const Middle
#  823|                         ValueCategory = lvalue
#  823|                       expr: [VariableAccess] d
#  823|                           Type = [Struct] Derived
#  823|                           ValueCategory = lvalue
#  824|     20: [ExprStmt] ExprStmt
#  824|       0: [ReferenceDereferenceExpr] (reference dereference)
#  824|           Type = [Struct,VirtualBaseClass] Base
#  824|           ValueCategory = lvalue
#  824|         expr: [FunctionCall] call to operator=
#  824|             Type = [LValueReferenceType] Base &
#  824|             ValueCategory = prvalue
#  824|           -1: [VariableAccess] b
#  824|               Type = [Struct,VirtualBaseClass] Base
#  824|               ValueCategory = lvalue
#  824|           0: [ReferenceToExpr] (reference to)
#  824|               Type = [LValueReferenceType] const Base &
#  824|               ValueCategory = prvalue
#  824|             expr: [CStyleCast] (const Base)...
#  824|                 Conversion = [GlvalueConversion] glvalue conversion
#  824|                 Type = [SpecifiedType] const Base
#  824|                 ValueCategory = lvalue
#  824|               expr: [ConstructorCall] call to Base
#  824|                   Type = [VoidType] void
#  824|                   ValueCategory = prvalue
#  824|                 0: [ReferenceToExpr] (reference to)
#  824|                     Type = [LValueReferenceType] const Base &
#  824|                     ValueCategory = prvalue
#  824|                   expr: [CStyleCast] (const Base)...
#  824|                       Conversion = [BaseClassConversion] base class conversion
#  824|                       Type = [SpecifiedType] const Base
#  824|                       ValueCategory = lvalue
#  824|                     expr: [CStyleCast] (const Middle)...
#  824|                         Conversion = [BaseClassConversion] base class conversion
#  824|                         Type = [SpecifiedType] const Middle
#  824|                         ValueCategory = lvalue
#  824|                       expr: [VariableAccess] d
#  824|                           Type = [Struct] Derived
#  824|                           ValueCategory = lvalue
#  825|     21: [ExprStmt] ExprStmt
#  825|       0: [AssignExpr] ... = ...
#  825|           Type = [PointerType] Base *
#  825|           ValueCategory = lvalue
#  825|         0: [VariableAccess] pb
#  825|             Type = [PointerType] Base *
#  825|             ValueCategory = lvalue
#  825|         1: [CStyleCast] (Base *)...
#  825|             Conversion = [BaseClassConversion] base class conversion
#  825|             Type = [PointerType] Base *
#  825|             ValueCategory = prvalue
#  825|           expr: [CStyleCast] (Middle *)...
#  825|               Conversion = [BaseClassConversion] base class conversion
#  825|               Type = [PointerType] Middle *
#  825|               ValueCategory = prvalue
#  825|             expr: [VariableAccess] pd
#  825|                 Type = [PointerType] Derived *
#  825|                 ValueCategory = prvalue(load)
#  826|     22: [ExprStmt] ExprStmt
#  826|       0: [AssignExpr] ... = ...
#  826|           Type = [PointerType] Base *
#  826|           ValueCategory = lvalue
#  826|         0: [VariableAccess] pb
#  826|             Type = [PointerType] Base *
#  826|             ValueCategory = lvalue
#  826|         1: [CStyleCast] (Base *)...
#  826|             Conversion = [BaseClassConversion] base class conversion
#  826|             Type = [PointerType] Base *
#  826|             ValueCategory = prvalue
#  826|           expr: [CStyleCast] (Middle *)...
#  826|               Conversion = [BaseClassConversion] base class conversion
#  826|               Type = [PointerType] Middle *
#  826|               ValueCategory = prvalue
#  826|             expr: [VariableAccess] pd
#  826|                 Type = [PointerType] Derived *
#  826|                 ValueCategory = prvalue(load)
#  827|     23: [ExprStmt] ExprStmt
#  827|       0: [AssignExpr] ... = ...
#  827|           Type = [PointerType] Base *
#  827|           ValueCategory = lvalue
#  827|         0: [VariableAccess] pb
#  827|             Type = [PointerType] Base *
#  827|             ValueCategory = lvalue
#  827|         1: [StaticCast] static_cast<Base *>...
#  827|             Conversion = [BaseClassConversion] base class conversion
#  827|             Type = [PointerType] Base *
#  827|             ValueCategory = prvalue
#  827|           expr: [CStyleCast] (Middle *)...
#  827|               Conversion = [BaseClassConversion] base class conversion
#  827|               Type = [PointerType] Middle *
#  827|               ValueCategory = prvalue
#  827|             expr: [VariableAccess] pd
#  827|                 Type = [PointerType] Derived *
#  827|                 ValueCategory = prvalue(load)
#  828|     24: [ExprStmt] ExprStmt
#  828|       0: [AssignExpr] ... = ...
#  828|           Type = [PointerType] Base *
#  828|           ValueCategory = lvalue
#  828|         0: [VariableAccess] pb
#  828|             Type = [PointerType] Base *
#  828|             ValueCategory = lvalue
#  828|         1: [ReinterpretCast] reinterpret_cast<Base *>...
#  828|             Conversion = [PointerConversion] pointer conversion
#  828|             Type = [PointerType] Base *
#  828|             ValueCategory = prvalue
#  828|           expr: [VariableAccess] pd
#  828|               Type = [PointerType] Derived *
#  828|               ValueCategory = prvalue(load)
#  830|     25: [ExprStmt] ExprStmt
#  830|       0: [ReferenceDereferenceExpr] (reference dereference)
#  830|           Type = [Struct] Derived
#  830|           ValueCategory = lvalue
#  830|         expr: [FunctionCall] call to operator=
#  830|             Type = [LValueReferenceType] Derived &
#  830|             ValueCategory = prvalue
#  830|           -1: [VariableAccess] d
#  830|               Type = [Struct] Derived
#  830|               ValueCategory = lvalue
#  830|           0: [ReferenceToExpr] (reference to)
#  830|               Type = [LValueReferenceType] const Derived &
#  830|               ValueCategory = prvalue
#  830|             expr: [CStyleCast] (const Derived)...
#  830|                 Conversion = [GlvalueConversion] glvalue conversion
#  830|                 Type = [SpecifiedType] const Derived
#  830|                 ValueCategory = lvalue
#  830|               expr: [CStyleCast] (Derived)...
#  830|                   Conversion = [DerivedClassConversion] derived class conversion
#  830|                   Type = [Struct] Derived
#  830|                   ValueCategory = lvalue
#  830|                 expr: [CStyleCast] (Middle)...
#  830|                     Conversion = [DerivedClassConversion] derived class conversion
#  830|                     Type = [Struct] Middle
#  830|                     ValueCategory = lvalue
#  830|                   expr: [VariableAccess] b
#  830|                       Type = [Struct,VirtualBaseClass] Base
#  830|                       ValueCategory = lvalue
#  831|     26: [ExprStmt] ExprStmt
#  831|       0: [ReferenceDereferenceExpr] (reference dereference)
#  831|           Type = [Struct] Derived
#  831|           ValueCategory = lvalue
#  831|         expr: [FunctionCall] call to operator=
#  831|             Type = [LValueReferenceType] Derived &
#  831|             ValueCategory = prvalue
#  831|           -1: [VariableAccess] d
#  831|               Type = [Struct] Derived
#  831|               ValueCategory = lvalue
#  831|           0: [ReferenceToExpr] (reference to)
#  831|               Type = [LValueReferenceType] const Derived &
#  831|               ValueCategory = prvalue
#  831|             expr: [CStyleCast] (const Derived)...
#  831|                 Conversion = [GlvalueConversion] glvalue conversion
#  831|                 Type = [SpecifiedType] const Derived
#  831|                 ValueCategory = lvalue
#  831|               expr: [StaticCast] static_cast<Derived>...
#  831|                   Conversion = [DerivedClassConversion] derived class conversion
#  831|                   Type = [Struct] Derived
#  831|                   ValueCategory = lvalue
#  831|                 expr: [CStyleCast] (Middle)...
#  831|                     Conversion = [DerivedClassConversion] derived class conversion
#  831|                     Type = [Struct] Middle
#  831|                     ValueCategory = lvalue
#  831|                   expr: [VariableAccess] b
#  831|                       Type = [Struct,VirtualBaseClass] Base
#  831|                       ValueCategory = lvalue
#  832|     27: [ExprStmt] ExprStmt
#  832|       0: [AssignExpr] ... = ...
#  832|           Type = [PointerType] Derived *
#  832|           ValueCategory = lvalue
#  832|         0: [VariableAccess] pd
#  832|             Type = [PointerType] Derived *
#  832|             ValueCategory = lvalue
#  832|         1: [CStyleCast] (Derived *)...
#  832|             Conversion = [DerivedClassConversion] derived class conversion
#  832|             Type = [PointerType] Derived *
#  832|             ValueCategory = prvalue
#  832|           expr: [CStyleCast] (Middle *)...
#  832|               Conversion = [DerivedClassConversion] derived class conversion
#  832|               Type = [PointerType] Middle *
#  832|               ValueCategory = prvalue
#  832|             expr: [VariableAccess] pb
#  832|                 Type = [PointerType] Base *
#  832|                 ValueCategory = prvalue(load)
#  833|     28: [ExprStmt] ExprStmt
#  833|       0: [AssignExpr] ... = ...
#  833|           Type = [PointerType] Derived *
#  833|           ValueCategory = lvalue
#  833|         0: [VariableAccess] pd
#  833|             Type = [PointerType] Derived *
#  833|             ValueCategory = lvalue
#  833|         1: [StaticCast] static_cast<Derived *>...
#  833|             Conversion = [DerivedClassConversion] derived class conversion
#  833|             Type = [PointerType] Derived *
#  833|             ValueCategory = prvalue
#  833|           expr: [CStyleCast] (Middle *)...
#  833|               Conversion = [DerivedClassConversion] derived class conversion
#  833|               Type = [PointerType] Middle *
#  833|               ValueCategory = prvalue
#  833|             expr: [VariableAccess] pb
#  833|                 Type = [PointerType] Base *
#  833|                 ValueCategory = prvalue(load)
#  834|     29: [ExprStmt] ExprStmt
#  834|       0: [AssignExpr] ... = ...
#  834|           Type = [PointerType] Derived *
#  834|           ValueCategory = lvalue
#  834|         0: [VariableAccess] pd
#  834|             Type = [PointerType] Derived *
#  834|             ValueCategory = lvalue
#  834|         1: [ReinterpretCast] reinterpret_cast<Derived *>...
#  834|             Conversion = [PointerConversion] pointer conversion
#  834|             Type = [PointerType] Derived *
#  834|             ValueCategory = prvalue
#  834|           expr: [VariableAccess] pb
#  834|               Type = [PointerType] Base *
#  834|               ValueCategory = prvalue(load)
#  836|     30: [DeclStmt] declaration
#  836|       0: [VariableDeclarationEntry] definition of pmv
#  836|           Type = [PointerType] MiddleVB1 *
#  836|         init: [Initializer] initializer for pmv
#  836|           expr: [CStyleCast] (MiddleVB1 *)...
#  836|               Conversion = [PointerConversion] pointer conversion
#  836|               Type = [PointerType] MiddleVB1 *
#  836|               Value = [CStyleCast] 0
#  836|               ValueCategory = prvalue
#  836|             expr: [Literal] 0
#  836|                 Type = [NullPointerType] decltype(nullptr)
#  836|                 Value = [Literal] 0
#  836|                 ValueCategory = prvalue
#  837|     31: [DeclStmt] declaration
#  837|       0: [VariableDeclarationEntry] definition of pdv
#  837|           Type = [PointerType] DerivedVB *
#  837|         init: [Initializer] initializer for pdv
#  837|           expr: [CStyleCast] (DerivedVB *)...
#  837|               Conversion = [PointerConversion] pointer conversion
#  837|               Type = [PointerType] DerivedVB *
#  837|               Value = [CStyleCast] 0
#  837|               ValueCategory = prvalue
#  837|             expr: [Literal] 0
#  837|                 Type = [NullPointerType] decltype(nullptr)
#  837|                 Value = [Literal] 0
#  837|                 ValueCategory = prvalue
#  838|     32: [ExprStmt] ExprStmt
#  838|       0: [AssignExpr] ... = ...
#  838|           Type = [PointerType] Base *
#  838|           ValueCategory = lvalue
#  838|         0: [VariableAccess] pb
#  838|             Type = [PointerType] Base *
#  838|             ValueCategory = lvalue
#  838|         1: [CStyleCast] (Base *)...
#  838|             Conversion = [BaseClassConversion] base class conversion
#  838|             Type = [PointerType] Base *
#  838|             ValueCategory = prvalue
#  838|           expr: [VariableAccess] pmv
#  838|               Type = [PointerType] MiddleVB1 *
#  838|               ValueCategory = prvalue(load)
#  839|     33: [ExprStmt] ExprStmt
#  839|       0: [AssignExpr] ... = ...
#  839|           Type = [PointerType] Base *
#  839|           ValueCategory = lvalue
#  839|         0: [VariableAccess] pb
#  839|             Type = [PointerType] Base *
#  839|             ValueCategory = lvalue
#  839|         1: [CStyleCast] (Base *)...
#  839|             Conversion = [BaseClassConversion] base class conversion
#  839|             Type = [PointerType] Base *
#  839|             ValueCategory = prvalue
#  839|           expr: [VariableAccess] pdv
#  839|               Type = [PointerType] DerivedVB *
#  839|               ValueCategory = prvalue(load)
#  840|     34: [ReturnStmt] return ...
#  842| [CopyAssignmentOperator] PolymorphicBase& PolymorphicBase::operator=(PolymorphicBase const&)
#  842|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const PolymorphicBase &
#  842| [Constructor] void PolymorphicBase::PolymorphicBase()
#  842|   params: 
#  842|   initializations: 
#  842|   body: [Block] { ... }
#  842|     0: [ReturnStmt] return ...
#  842| [CopyConstructor] void PolymorphicBase::PolymorphicBase(PolymorphicBase const&)
#  842|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const PolymorphicBase &
#  843| [Destructor,VirtualFunction] void PolymorphicBase::~PolymorphicBase()
#  843|   params: 
#  846| [CopyAssignmentOperator] PolymorphicDerived& PolymorphicDerived::operator=(PolymorphicDerived const&)
#  846|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const PolymorphicDerived &
#  846| [MoveAssignmentOperator] PolymorphicDerived& PolymorphicDerived::operator=(PolymorphicDerived&&)
#  846|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [RValueReferenceType] PolymorphicDerived &&
#  846| [Constructor] void PolymorphicDerived::PolymorphicDerived()
#  846|   params: 
#  846|   initializations: 
#  846|     0: [ConstructorDirectInit] call to PolymorphicBase
#  846|         Type = [VoidType] void
#  846|         ValueCategory = prvalue
#  846|   body: [Block] { ... }
#  846|     0: [ReturnStmt] return ...
#  846| [CopyConstructor] void PolymorphicDerived::PolymorphicDerived(PolymorphicDerived const&)
#  846|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const PolymorphicDerived &
#  846| [MoveConstructor] void PolymorphicDerived::PolymorphicDerived(PolymorphicDerived&&)
#  846|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [RValueReferenceType] PolymorphicDerived &&
#  846| [Destructor,VirtualFunction] void PolymorphicDerived::~PolymorphicDerived()
#  846|   params: 
#-----|   body: [Block] { ... }
#-----|     0: [ReturnStmt] return ...
#  846|   destructions: 
#  846|     0: [DestructorDirectDestruction] call to ~PolymorphicBase
#  846|         Type = [VoidType] void
#  846|         ValueCategory = prvalue
#  849| [TopLevelFunction] void DynamicCast()
#  849|   params: 
#  849|   body: [Block] { ... }
#  850|     0: [DeclStmt] declaration
#  850|       0: [VariableDeclarationEntry] definition of b
#  850|           Type = [Struct] PolymorphicBase
#  850|         init: [Initializer] initializer for b
#-----|           expr: [ConstructorCall] call to PolymorphicBase
#-----|               Type = [VoidType] void
#-----|               ValueCategory = prvalue
#  851|     1: [DeclStmt] declaration
#  851|       0: [VariableDeclarationEntry] definition of d
#  851|           Type = [Struct] PolymorphicDerived
#  851|         init: [Initializer] initializer for d
#-----|           expr: [ConstructorCall] call to PolymorphicDerived
#-----|               Type = [VoidType] void
#-----|               ValueCategory = prvalue
#  853|     2: [DeclStmt] declaration
#  853|       0: [VariableDeclarationEntry] definition of pb
#  853|           Type = [PointerType] PolymorphicBase *
#  853|         init: [Initializer] initializer for pb
#  853|           expr: [AddressOfExpr] & ...
#  853|               Type = [PointerType] PolymorphicBase *
#  853|               ValueCategory = prvalue
#  853|             0: [VariableAccess] b
#  853|                 Type = [Struct] PolymorphicBase
#  853|                 ValueCategory = lvalue
#  854|     3: [DeclStmt] declaration
#  854|       0: [VariableDeclarationEntry] definition of pd
#  854|           Type = [PointerType] PolymorphicDerived *
#  854|         init: [Initializer] initializer for pd
#  854|           expr: [AddressOfExpr] & ...
#  854|               Type = [PointerType] PolymorphicDerived *
#  854|               ValueCategory = prvalue
#  854|             0: [VariableAccess] d
#  854|                 Type = [Struct] PolymorphicDerived
#  854|                 ValueCategory = lvalue
#  857|     4: [ExprStmt] ExprStmt
#  857|       0: [AssignExpr] ... = ...
#  857|           Type = [PointerType] PolymorphicBase *
#  857|           ValueCategory = lvalue
#  857|         0: [VariableAccess] pb
#  857|             Type = [PointerType] PolymorphicBase *
#  857|             ValueCategory = lvalue
#  857|         1: [DynamicCast] dynamic_cast<PolymorphicBase *>...
#  857|             Conversion = [DynamicCast] dynamic_cast
#  857|             Type = [PointerType] PolymorphicBase *
#  857|             ValueCategory = prvalue
#  857|           expr: [VariableAccess] pd
#  857|               Type = [PointerType] PolymorphicDerived *
#  857|               ValueCategory = prvalue(load)
#  858|     5: [DeclStmt] declaration
#  858|       0: [VariableDeclarationEntry] definition of rb
#  858|           Type = [LValueReferenceType] PolymorphicBase &
#  858|         init: [Initializer] initializer for rb
#  858|           expr: [ReferenceToExpr] (reference to)
#  858|               Type = [LValueReferenceType] PolymorphicBase &
#  858|               ValueCategory = prvalue
#  858|             expr: [DynamicCast] dynamic_cast<PolymorphicBase>...
#  858|                 Conversion = [DynamicCast] dynamic_cast
#  858|                 Type = [Struct] PolymorphicBase
#  858|                 ValueCategory = lvalue
#  858|               expr: [VariableAccess] d
#  858|                   Type = [Struct] PolymorphicDerived
#  858|                   ValueCategory = lvalue
#  860|     6: [ExprStmt] ExprStmt
#  860|       0: [AssignExpr] ... = ...
#  860|           Type = [PointerType] PolymorphicDerived *
#  860|           ValueCategory = lvalue
#  860|         0: [VariableAccess] pd
#  860|             Type = [PointerType] PolymorphicDerived *
#  860|             ValueCategory = lvalue
#  860|         1: [DynamicCast] dynamic_cast<PolymorphicDerived *>...
#  860|             Conversion = [DynamicCast] dynamic_cast
#  860|             Type = [PointerType] PolymorphicDerived *
#  860|             ValueCategory = prvalue
#  860|           expr: [VariableAccess] pb
#  860|               Type = [PointerType] PolymorphicBase *
#  860|               ValueCategory = prvalue(load)
#  861|     7: [DeclStmt] declaration
#  861|       0: [VariableDeclarationEntry] definition of rd
#  861|           Type = [LValueReferenceType] PolymorphicDerived &
#  861|         init: [Initializer] initializer for rd
#  861|           expr: [ReferenceToExpr] (reference to)
#  861|               Type = [LValueReferenceType] PolymorphicDerived &
#  861|               ValueCategory = prvalue
#  861|             expr: [DynamicCast] dynamic_cast<PolymorphicDerived>...
#  861|                 Conversion = [DynamicCast] dynamic_cast
#  861|                 Type = [Struct] PolymorphicDerived
#  861|                 ValueCategory = lvalue
#  861|               expr: [VariableAccess] b
#  861|                   Type = [Struct] PolymorphicBase
#  861|                   ValueCategory = lvalue
#  863|     8: [DeclStmt] declaration
#  863|       0: [VariableDeclarationEntry] definition of pv
#  863|           Type = [VoidPointerType] void *
#  863|         init: [Initializer] initializer for pv
#  863|           expr: [DynamicCast] dynamic_cast<void *>...
#  863|               Conversion = [DynamicCast] dynamic_cast
#  863|               Type = [VoidPointerType] void *
#  863|               ValueCategory = prvalue
#  863|             expr: [VariableAccess] pb
#  863|                 Type = [PointerType] PolymorphicBase *
#  863|                 ValueCategory = prvalue(load)
#  864|     9: [DeclStmt] declaration
#  864|       0: [VariableDeclarationEntry] definition of pcv
#  864|           Type = [PointerType] const void *
#  864|         init: [Initializer] initializer for pcv
#  864|           expr: [DynamicCast] dynamic_cast<const void *>...
#  864|               Conversion = [DynamicCast] dynamic_cast
#  864|               Type = [PointerType] const void *
#  864|               ValueCategory = prvalue
#  864|             expr: [VariableAccess] pd
#  864|                 Type = [PointerType] PolymorphicDerived *
#  864|                 ValueCategory = prvalue(load)
#  865|     10: [ReturnStmt] return ...
#  867| [Constructor] void String::String()
#  867|   params: 
#  867|   initializations: 
#  868|     0: [ConstructorDelegationInit] call to String
#  868|         Type = [VoidType] void
#  868|         ValueCategory = prvalue
#  868|       0: [ArrayToPointerConversion] array to pointer conversion
#  868|           Type = [PointerType] const char *
#  868|           ValueCategory = prvalue
#  868|         expr: 
#  868|             Type = [ArrayType] const char[1]
#  868|             Value = [StringLiteral] ""
#  868|             ValueCategory = lvalue
#  868|   body: [Block] { ... }
#  869|     0: [ReturnStmt] return ...
#  871| [TopLevelFunction] void ArrayConversions()
#  871|   params: 
#  871|   body: [Block] { ... }
#  872|     0: [DeclStmt] declaration
#  872|       0: [VariableDeclarationEntry] definition of a
#  872|           Type = [ArrayType] char[5]
#  873|     1: [DeclStmt] declaration
#  873|       0: [VariableDeclarationEntry] definition of p
#  873|           Type = [PointerType] const char *
#  873|         init: [Initializer] initializer for p
#  873|           expr: [CStyleCast] (const char *)...
#  873|               Conversion = [PointerConversion] pointer conversion
#  873|               Type = [PointerType] const char *
#  873|               ValueCategory = prvalue
#  873|             expr: [ArrayToPointerConversion] array to pointer conversion
#  873|                 Type = [CharPointerType] char *
#  873|                 ValueCategory = prvalue
#  873|               expr: [VariableAccess] a
#  873|                   Type = [ArrayType] char[5]
#  873|                   ValueCategory = lvalue
#  874|     2: [ExprStmt] ExprStmt
#  874|       0: [AssignExpr] ... = ...
#  874|           Type = [PointerType] const char *
#  874|           ValueCategory = lvalue
#  874|         0: [VariableAccess] p
#  874|             Type = [PointerType] const char *
#  874|             ValueCategory = lvalue
#  874|         1: [ArrayToPointerConversion] array to pointer conversion
#  874|             Type = [PointerType] const char *
#  874|             ValueCategory = prvalue
#  874|           expr: test
#  874|               Type = [ArrayType] const char[5]
#  874|               Value = [StringLiteral] "test"
#  874|               ValueCategory = lvalue
#  875|     3: [ExprStmt] ExprStmt
#  875|       0: [AssignExpr] ... = ...
#  875|           Type = [PointerType] const char *
#  875|           ValueCategory = lvalue
#  875|         0: [VariableAccess] p
#  875|             Type = [PointerType] const char *
#  875|             ValueCategory = lvalue
#  875|         1: [CStyleCast] (const char *)...
#  875|             Conversion = [PointerConversion] pointer conversion
#  875|             Type = [PointerType] const char *
#  875|             ValueCategory = prvalue
#  875|           expr: [AddressOfExpr] & ...
#  875|               Type = [CharPointerType] char *
#  875|               ValueCategory = prvalue
#  875|             0: [ArrayExpr] access to array
#  875|                 Type = [PlainCharType] char
#  875|                 ValueCategory = lvalue
#  875|               0: [ArrayToPointerConversion] array to pointer conversion
#  875|                   Type = [CharPointerType] char *
#  875|                   ValueCategory = prvalue
#  875|                 expr: [VariableAccess] a
#  875|                     Type = [ArrayType] char[5]
#  875|                     ValueCategory = lvalue
#  875|               1: [Literal] 0
#  875|                   Type = [IntType] int
#  875|                   Value = [Literal] 0
#  875|                   ValueCategory = prvalue
#  876|     4: [ExprStmt] ExprStmt
#  876|       0: [AssignExpr] ... = ...
#  876|           Type = [PointerType] const char *
#  876|           ValueCategory = lvalue
#  876|         0: [VariableAccess] p
#  876|             Type = [PointerType] const char *
#  876|             ValueCategory = lvalue
#  876|         1: [AddressOfExpr] & ...
#  876|             Type = [PointerType] const char *
#  876|             ValueCategory = prvalue
#  876|           0: [ArrayExpr] access to array
#  876|               Type = [SpecifiedType] const char
#  876|               ValueCategory = lvalue
#  876|             0: [ArrayToPointerConversion] array to pointer conversion
#  876|                 Type = [PointerType] const char *
#  876|                 ValueCategory = prvalue
#  876|               expr: test
#  876|                   Type = [ArrayType] const char[5]
#  876|                   Value = [StringLiteral] "test"
#  876|                   ValueCategory = lvalue
#  876|             1: [Literal] 0
#  876|                 Type = [IntType] int
#  876|                 Value = [Literal] 0
#  876|                 ValueCategory = prvalue
#  877|     5: [DeclStmt] declaration
#  877|       0: [VariableDeclarationEntry] definition of ra
#  877|           Type = [LValueReferenceType] char(&)[5]
#  877|         init: [Initializer] initializer for ra
#  877|           expr: [ReferenceToExpr] (reference to)
#  877|               Type = [LValueReferenceType] char(&)[5]
#  877|               ValueCategory = prvalue
#  877|             expr: [VariableAccess] a
#  877|                 Type = [ArrayType] char[5]
#  877|                 ValueCategory = lvalue
#  878|     6: [DeclStmt] declaration
#  878|       0: [VariableDeclarationEntry] definition of rs
#  878|           Type = [LValueReferenceType] const char(&)[5]
#  878|         init: [Initializer] initializer for rs
#  878|           expr: [ReferenceToExpr] (reference to)
#  878|               Type = [LValueReferenceType] const char(&)[5]
#  878|               ValueCategory = prvalue
#  878|             expr: test
#  878|                 Type = [ArrayType] const char[5]
#  878|                 Value = [StringLiteral] "test"
#  878|                 ValueCategory = lvalue
#  879|     7: [DeclStmt] declaration
#  879|       0: [VariableDeclarationEntry] definition of pa
#  879|           Type = [PointerType] const char(*)[5]
#  879|         init: [Initializer] initializer for pa
#  879|           expr: [CStyleCast] (const char(*)[5])...
#  879|               Conversion = [PointerConversion] pointer conversion
#  879|               Type = [PointerType] const char(*)[5]
#  879|               ValueCategory = prvalue
#  879|             expr: [AddressOfExpr] & ...
#  879|                 Type = [PointerType] char(*)[5]
#  879|                 ValueCategory = prvalue
#  879|               0: [VariableAccess] a
#  879|                   Type = [ArrayType] char[5]
#  879|                   ValueCategory = lvalue
#  880|     8: [ExprStmt] ExprStmt
#  880|       0: [AssignExpr] ... = ...
#  880|           Type = [PointerType] const char(*)[5]
#  880|           ValueCategory = lvalue
#  880|         0: [VariableAccess] pa
#  880|             Type = [PointerType] const char(*)[5]
#  880|             ValueCategory = lvalue
#  880|         1: [AddressOfExpr] & ...
#  880|             Type = [PointerType] const char(*)[5]
#  880|             ValueCategory = prvalue
#  880|           0: test
#  880|               Type = [ArrayType] const char[5]
#  880|               Value = [StringLiteral] "test"
#  880|               ValueCategory = lvalue
#  881|     9: [ReturnStmt] return ...
#  883| [TopLevelFunction] void FuncPtrConversions(int(*)(int), void*)
#  883|   params: 
#  883|     0: [Parameter] pfn
#  883|         Type = [FunctionPointerType] ..(*)(..)
#  883|     1: [Parameter] p
#  883|         Type = [VoidPointerType] void *
#  883|   body: [Block] { ... }
#  884|     0: [ExprStmt] ExprStmt
#  884|       0: [AssignExpr] ... = ...
#  884|           Type = [VoidPointerType] void *
#  884|           ValueCategory = lvalue
#  884|         0: [VariableAccess] p
#  884|             Type = [VoidPointerType] void *
#  884|             ValueCategory = lvalue
#  884|         1: [CStyleCast] (void *)...
#  884|             Conversion = [PointerConversion] pointer conversion
#  884|             Type = [VoidPointerType] void *
#  884|             ValueCategory = prvalue
#  884|           expr: [VariableAccess] pfn
#  884|               Type = [FunctionPointerType] ..(*)(..)
#  884|               ValueCategory = prvalue(load)
#  885|     1: [ExprStmt] ExprStmt
#  885|       0: [AssignExpr] ... = ...
#  885|           Type = [FunctionPointerType] ..(*)(..)
#  885|           ValueCategory = lvalue
#  885|         0: [VariableAccess] pfn
#  885|             Type = [FunctionPointerType] ..(*)(..)
#  885|             ValueCategory = lvalue
#  885|         1: [CStyleCast] (..(*)(..))...
#  885|             Conversion = [PointerConversion] pointer conversion
#  885|             Type = [FunctionPointerType] ..(*)(..)
#  885|             ValueCategory = prvalue
#  885|           expr: [VariableAccess] p
#  885|               Type = [VoidPointerType] void *
#  885|               ValueCategory = prvalue(load)
#  886|     2: [ReturnStmt] return ...
#  888| [TopLevelFunction] void VAListUsage(int, __va_list_tag[1])
#  888|   params: 
#  888|     0: [Parameter] x
#  888|         Type = [IntType] int
#  888|     1: [Parameter] args
#  888|         Type = [ArrayType] __va_list_tag[1]
#  888|   body: [Block] { ... }
#  889|     0: [DeclStmt] declaration
#  889|       0: [VariableDeclarationEntry] definition of args2
#  889|           Type = [ArrayType] __va_list_tag[1]
#  890|     1: [ExprStmt] ExprStmt
#  890|       0: [BuiltInVarArgCopy] __builtin_va_copy
#  890|           Type = [VoidType] void
#  890|           ValueCategory = prvalue
#  890|         0: [ArrayToPointerConversion] array to pointer conversion
#  890|             Type = [PointerType] __va_list_tag *
#  890|             ValueCategory = prvalue
#  890|           expr: [VariableAccess] args2
#  890|               Type = [ArrayType] __va_list_tag[1]
#  890|               ValueCategory = lvalue
#  890|         1: [VariableAccess] args
#  890|             Type = [PointerType] __va_list_tag *
#  890|             ValueCategory = prvalue(load)
#  891|     2: [DeclStmt] declaration
#  891|       0: [VariableDeclarationEntry] definition of d
#  891|           Type = [DoubleType] double
#  891|         init: [Initializer] initializer for d
#  891|           expr: [BuiltInVarArg] __builtin_va_arg
#  891|               Type = [DoubleType] double
#  891|               ValueCategory = prvalue(load)
#  891|             0: [VariableAccess] args
#  891|                 Type = [PointerType] __va_list_tag *
#  891|                 ValueCategory = prvalue(load)
#  892|     3: [DeclStmt] declaration
#  892|       0: [VariableDeclarationEntry] definition of f
#  892|           Type = [FloatType] float
#  892|         init: [Initializer] initializer for f
#  892|           expr: [CStyleCast] (float)...
#  892|               Conversion = [IntegralToFloatingPointConversion] integral to floating point conversion
#  892|               Type = [FloatType] float
#  892|               ValueCategory = prvalue
#  892|             expr: [BuiltInVarArg] __builtin_va_arg
#  892|                 Type = [IntType] int
#  892|                 ValueCategory = prvalue(load)
#  892|               0: [VariableAccess] args
#  892|                   Type = [PointerType] __va_list_tag *
#  892|                   ValueCategory = prvalue(load)
#  893|     4: [ExprStmt] ExprStmt
#  893|       0: [BuiltInVarArgsEnd] __builtin_va_end
#  893|           Type = [VoidType] void
#  893|           ValueCategory = prvalue
#  893|         0: [ArrayToPointerConversion] array to pointer conversion
#  893|             Type = [PointerType] __va_list_tag *
#  893|             ValueCategory = prvalue
#  893|           expr: [VariableAccess] args2
#  893|               Type = [ArrayType] __va_list_tag[1]
#  893|               ValueCategory = lvalue
#  894|     5: [ReturnStmt] return ...
#  896| [TopLevelFunction] void VarArgUsage(int)
#  896|   params: 
#  896|     0: [Parameter] x
#  896|         Type = [IntType] int
#  896|   body: [Block] { ... }
#  897|     0: [DeclStmt] declaration
#  897|       0: [VariableDeclarationEntry] definition of args
#  897|           Type = [ArrayType] __va_list_tag[1]
#  899|     1: [ExprStmt] ExprStmt
#  899|       0: [BuiltInVarArgsStart] __builtin_va_start
#  899|           Type = [VoidType] void
#  899|           ValueCategory = prvalue
#  899|         0: [ArrayToPointerConversion] array to pointer conversion
#  899|             Type = [PointerType] __va_list_tag *
#  899|             ValueCategory = prvalue
#  899|           expr: [VariableAccess] args
#  899|               Type = [ArrayType] __va_list_tag[1]
#  899|               ValueCategory = lvalue
#  899|         1: [VariableAccess] x
#  899|             Type = [IntType] int
#  899|             ValueCategory = lvalue
#  900|     2: [DeclStmt] declaration
#  900|       0: [VariableDeclarationEntry] definition of args2
#  900|           Type = [ArrayType] __va_list_tag[1]
#  901|     3: [ExprStmt] ExprStmt
#  901|       0: [BuiltInVarArgCopy] __builtin_va_copy
#  901|           Type = [VoidType] void
#  901|           ValueCategory = prvalue
#  901|         0: [ArrayToPointerConversion] array to pointer conversion
#  901|             Type = [PointerType] __va_list_tag *
#  901|             ValueCategory = prvalue
#  901|           expr: [VariableAccess] args2
#  901|               Type = [ArrayType] __va_list_tag[1]
#  901|               ValueCategory = lvalue
#  901|         1: [ArrayToPointerConversion] array to pointer conversion
#  901|             Type = [PointerType] __va_list_tag *
#  901|             ValueCategory = prvalue
#  901|           expr: [VariableAccess] args
#  901|               Type = [ArrayType] __va_list_tag[1]
#  901|               ValueCategory = lvalue
#  902|     4: [DeclStmt] declaration
#  902|       0: [VariableDeclarationEntry] definition of d
#  902|           Type = [DoubleType] double
#  902|         init: [Initializer] initializer for d
#  902|           expr: [BuiltInVarArg] __builtin_va_arg
#  902|               Type = [DoubleType] double
#  902|               ValueCategory = prvalue(load)
#  902|             0: [ArrayToPointerConversion] array to pointer conversion
#  902|                 Type = [PointerType] __va_list_tag *
#  902|                 ValueCategory = prvalue
#  902|               expr: [VariableAccess] args
#  902|                   Type = [ArrayType] __va_list_tag[1]
#  902|                   ValueCategory = lvalue
#  903|     5: [DeclStmt] declaration
#  903|       0: [VariableDeclarationEntry] definition of f
#  903|           Type = [FloatType] float
#  903|         init: [Initializer] initializer for f
#  903|           expr: [CStyleCast] (float)...
#  903|               Conversion = [IntegralToFloatingPointConversion] integral to floating point conversion
#  903|               Type = [FloatType] float
#  903|               ValueCategory = prvalue
#  903|             expr: [BuiltInVarArg] __builtin_va_arg
#  903|                 Type = [IntType] int
#  903|                 ValueCategory = prvalue(load)
#  903|               0: [ArrayToPointerConversion] array to pointer conversion
#  903|                   Type = [PointerType] __va_list_tag *
#  903|                   ValueCategory = prvalue
#  903|                 expr: [VariableAccess] args
#  903|                     Type = [ArrayType] __va_list_tag[1]
#  903|                     ValueCategory = lvalue
#  904|     6: [ExprStmt] ExprStmt
#  904|       0: [BuiltInVarArgsEnd] __builtin_va_end
#  904|           Type = [VoidType] void
#  904|           ValueCategory = prvalue
#  904|         0: [ArrayToPointerConversion] array to pointer conversion
#  904|             Type = [PointerType] __va_list_tag *
#  904|             ValueCategory = prvalue
#  904|           expr: [VariableAccess] args
#  904|               Type = [ArrayType] __va_list_tag[1]
#  904|               ValueCategory = lvalue
#  905|     7: [ExprStmt] ExprStmt
#  905|       0: [FunctionCall] call to VAListUsage
#  905|           Type = [VoidType] void
#  905|           ValueCategory = prvalue
#  905|         0: [VariableAccess] x
#  905|             Type = [IntType] int
#  905|             ValueCategory = prvalue(load)
#  905|         1: [ArrayToPointerConversion] array to pointer conversion
#  905|             Type = [PointerType] __va_list_tag *
#  905|             ValueCategory = prvalue
#  905|           expr: [VariableAccess] args2
#  905|               Type = [ArrayType] __va_list_tag[1]
#  905|               ValueCategory = lvalue
#  906|     8: [ExprStmt] ExprStmt
#  906|       0: [BuiltInVarArgsEnd] __builtin_va_end
#  906|           Type = [VoidType] void
#  906|           ValueCategory = prvalue
#  906|         0: [ArrayToPointerConversion] array to pointer conversion
#  906|             Type = [PointerType] __va_list_tag *
#  906|             ValueCategory = prvalue
#  906|           expr: [VariableAccess] args2
#  906|               Type = [ArrayType] __va_list_tag[1]
#  906|               ValueCategory = lvalue
#  907|     9: [ReturnStmt] return ...
#  909| [TopLevelFunction] void CastToVoid(int)
#  909|   params: 
#  909|     0: [Parameter] x
#  909|         Type = [IntType] int
#  909|   body: [Block] { ... }
#  910|     0: [ExprStmt] ExprStmt
#  910|       0: [CStyleCast] (void)...
#  910|           Conversion = [VoidConversion] conversion to void
#  910|           Type = [VoidType] void
#  910|           ValueCategory = prvalue
#  910|         expr: [VariableAccess] x
#  910|             Type = [IntType] int
#  910|             ValueCategory = lvalue
#  911|     1: [ReturnStmt] return ...
#  913| [TopLevelFunction] void ConstantConditions(int)
#  913|   params: 
#  913|     0: [Parameter] x
#  913|         Type = [IntType] int
#  913|   body: [Block] { ... }
#  914|     0: [DeclStmt] declaration
#  914|       0: [VariableDeclarationEntry] definition of a
#  914|           Type = [BoolType] bool
#  914|         init: [Initializer] initializer for a
#  914|           expr: [LogicalAndExpr] ... && ...
#  914|               Type = [BoolType] bool
#  914|               Value = [LogicalAndExpr] 1
#  914|               ValueCategory = prvalue
#  914|             0: [Literal] 1
#  914|                 Type = [BoolType] bool
#  914|                 Value = [Literal] 1
#  914|                 ValueCategory = prvalue
#  914|             1: [Literal] 1
#  914|                 Type = [BoolType] bool
#  914|                 Value = [Literal] 1
#  914|                 ValueCategory = prvalue
#  915|     1: [DeclStmt] declaration
#  915|       0: [VariableDeclarationEntry] definition of b
#  915|           Type = [IntType] int
#  915|         init: [Initializer] initializer for b
#  915|           expr: [ConditionalExpr] ... ? ... : ...
#  915|               Type = [IntType] int
#  915|               ValueCategory = prvalue
#  915|             0: [ParenthesisExpr] (...)
#  915|                 Type = [BoolType] bool
#  915|                 Value = [ParenthesisExpr] 1
#  915|                 ValueCategory = prvalue
#  915|               expr: [Literal] 1
#  915|                   Type = [BoolType] bool
#  915|                   Value = [Literal] 1
#  915|                   ValueCategory = prvalue
#  915|             1: [VariableAccess] x
#  915|                 Type = [IntType] int
#  915|                 ValueCategory = prvalue(load)
#  915|             2: [VariableAccess] x
#  915|                 Type = [IntType] int
#  915|                 ValueCategory = prvalue(load)
#  916|     2: [ReturnStmt] return ...
#  924| [Operator,TopLevelFunction] void* operator new(size_t, float)
#  924|   params: 
#  924|     0: [Parameter] p#0
#  924|         Type = [CTypedefType,Size_t] size_t
#  924|     1: [Parameter] p#1
#  924|         Type = [FloatType] float
#  925| [Operator,TopLevelFunction] void* operator new[](size_t, float)
#  925|   params: 
#  925|     0: [Parameter] p#0
#  925|         Type = [CTypedefType,Size_t] size_t
#  925|     1: [Parameter] p#1
#  925|         Type = [FloatType] float
#  926| [Operator,TopLevelFunction] void* operator new(size_t, std::align_val_t, float)
#  926|   params: 
#  926|     0: [Parameter] p#0
#  926|         Type = [CTypedefType,Size_t] size_t
#  926|     1: [Parameter] p#1
#  926|         Type = [ScopedEnum] align_val_t
#  926|     2: [Parameter] p#2
#  926|         Type = [FloatType] float
#  927| [Operator,TopLevelFunction] void* operator new[](size_t, std::align_val_t, float)
#  927|   params: 
#  927|     0: [Parameter] p#0
#  927|         Type = [CTypedefType,Size_t] size_t
#  927|     1: [Parameter] p#1
#  927|         Type = [ScopedEnum] align_val_t
#  927|     2: [Parameter] p#2
#  927|         Type = [FloatType] float
#  928| [Operator,TopLevelFunction] void operator delete(void*, float)
#  928|   params: 
#  928|     0: [Parameter] p#0
#  928|         Type = [VoidPointerType] void *
#  928|     1: [Parameter] p#1
#  928|         Type = [FloatType] float
#  929| [Operator,TopLevelFunction] void operator delete[](void*, float)
#  929|   params: 
#  929|     0: [Parameter] p#0
#  929|         Type = [VoidPointerType] void *
#  929|     1: [Parameter] p#1
#  929|         Type = [FloatType] float
#  930| [Operator,TopLevelFunction] void operator delete(void*, std::align_val_t, float)
#  930|   params: 
#  930|     0: [Parameter] p#0
#  930|         Type = [VoidPointerType] void *
#  930|     1: [Parameter] p#1
#  930|         Type = [ScopedEnum] align_val_t
#  930|     2: [Parameter] p#2
#  930|         Type = [FloatType] float
#  931| [Operator,TopLevelFunction] void operator delete[](void*, std::align_val_t, float)
#  931|   params: 
#  931|     0: [Parameter] p#0
#  931|         Type = [VoidPointerType] void *
#  931|     1: [Parameter] p#1
#  931|         Type = [ScopedEnum] align_val_t
#  931|     2: [Parameter] p#2
#  931|         Type = [FloatType] float
#  933| [CopyAssignmentOperator] SizedDealloc& SizedDealloc::operator=(SizedDealloc const&)
#  933|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const SizedDealloc &
#  933| [MoveAssignmentOperator] SizedDealloc& SizedDealloc::operator=(SizedDealloc&&)
#  933|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [RValueReferenceType] SizedDealloc &&
#  935| [MemberFunction] void* SizedDealloc::operator new(size_t)
#  935|   params: 
#  935|     0: [Parameter] p#0
#  935|         Type = [CTypedefType,Size_t] size_t
#  936| [MemberFunction] void* SizedDealloc::operator new[](size_t)
#  936|   params: 
#  936|     0: [Parameter] p#0
#  936|         Type = [CTypedefType,Size_t] size_t
#  937| [MemberFunction] void SizedDealloc::operator delete(void*, size_t)
#  937|   params: 
#  937|     0: [Parameter] p#0
#  937|         Type = [VoidPointerType] void *
#  937|     1: [Parameter] p#1
#  937|         Type = [CTypedefType,Size_t] size_t
#  938| [MemberFunction] void SizedDealloc::operator delete[](void*, size_t)
#  938|   params: 
#  938|     0: [Parameter] p#0
#  938|         Type = [VoidPointerType] void *
#  938|     1: [Parameter] p#1
#  938|         Type = [CTypedefType,Size_t] size_t
#  941| [CopyAssignmentOperator] Overaligned& Overaligned::operator=(Overaligned const&)
#  941|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const Overaligned &
#  941| [MoveAssignmentOperator] Overaligned& Overaligned::operator=(Overaligned&&)
#  941|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [RValueReferenceType] Overaligned &&
#  945| [CopyAssignmentOperator] DefaultCtorWithDefaultParam& DefaultCtorWithDefaultParam::operator=(DefaultCtorWithDefaultParam const&)
#  945|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const DefaultCtorWithDefaultParam &
#  945| [MoveAssignmentOperator] DefaultCtorWithDefaultParam& DefaultCtorWithDefaultParam::operator=(DefaultCtorWithDefaultParam&&)
#  945|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [RValueReferenceType] DefaultCtorWithDefaultParam &&
#  945| [CopyConstructor] void DefaultCtorWithDefaultParam::DefaultCtorWithDefaultParam(DefaultCtorWithDefaultParam const&)
#  945|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const DefaultCtorWithDefaultParam &
#  945| [MoveConstructor] void DefaultCtorWithDefaultParam::DefaultCtorWithDefaultParam(DefaultCtorWithDefaultParam&&)
#  945|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [RValueReferenceType] DefaultCtorWithDefaultParam &&
#  946| [Constructor] void DefaultCtorWithDefaultParam::DefaultCtorWithDefaultParam(double)
#  946|   params: 
#  946|     0: [Parameter] d
#  946|         Type = [DoubleType] double
#  949| [TopLevelFunction] void OperatorNew()
#  949|   params: 
#  949|   body: [Block] { ... }
#  950|     0: [ExprStmt] ExprStmt
#  950|       0: [NewExpr] new
#  950|           Type = [IntPointerType] int *
#  950|           ValueCategory = prvalue
#  951|     1: [ExprStmt] ExprStmt
#  951|       0: [NewExpr] new
#  951|           Type = [IntPointerType] int *
#  951|           ValueCategory = prvalue
#  951|         0: [FunctionCall] call to operator new
#  951|             Type = [VoidPointerType] void *
#  951|             ValueCategory = prvalue
#  951|           0: [ErrorExpr] <error expr>
#  951|               Type = [LongType] unsigned long
#  951|               ValueCategory = prvalue
#  951|           1: [Literal] 1.0
#  951|               Type = [FloatType] float
#  951|               Value = [Literal] 1.0
#  951|               ValueCategory = prvalue
#  952|     2: [ExprStmt] ExprStmt
#  952|       0: [NewExpr] new
#  952|           Type = [IntPointerType] int *
#  952|           ValueCategory = prvalue
#  952|         1: [Literal] 0
#  952|             Type = [IntType] int
#  952|             Value = [Literal] 0
#  952|             ValueCategory = prvalue
#  953|     3: [ExprStmt] ExprStmt
#  953|       0: [NewExpr] new
#  953|           Type = [PointerType] String *
#  953|           ValueCategory = prvalue
#  953|         1: [ConstructorCall] call to String
#  953|             Type = [VoidType] void
#  953|             ValueCategory = prvalue
#  954|     4: [ExprStmt] ExprStmt
#  954|       0: [NewExpr] new
#  954|           Type = [PointerType] String *
#  954|           ValueCategory = prvalue
#  954|         0: [FunctionCall] call to operator new
#  954|             Type = [VoidPointerType] void *
#  954|             ValueCategory = prvalue
#  954|           0: [ErrorExpr] <error expr>
#  954|               Type = [LongType] unsigned long
#  954|               ValueCategory = prvalue
#  954|           1: [Literal] 1.0
#  954|               Type = [FloatType] float
#  954|               Value = [Literal] 1.0
#  954|               ValueCategory = prvalue
#  954|         1: [ConstructorCall] call to String
#  954|             Type = [VoidType] void
#  954|             ValueCategory = prvalue
#  954|           0: [ArrayToPointerConversion] array to pointer conversion
#  954|               Type = [PointerType] const char *
#  954|               ValueCategory = prvalue
#  954|             expr: hello
#  954|                 Type = [ArrayType] const char[6]
#  954|                 Value = [StringLiteral] "hello"
#  954|                 ValueCategory = lvalue
#  955|     5: [ExprStmt] ExprStmt
#  955|       0: [NewExpr] new
#  955|           Type = [PointerType] Overaligned *
#  955|           ValueCategory = prvalue
#  955|         3: [Literal] 128
#  955|             Type = [ScopedEnum] align_val_t
#  955|             Value = [Literal] 128
#  955|             ValueCategory = prvalue
#  956|     6: [ExprStmt] ExprStmt
#  956|       0: [NewExpr] new
#  956|           Type = [PointerType] Overaligned *
#  956|           ValueCategory = prvalue
#  956|         0: [FunctionCall] call to operator new
#  956|             Type = [VoidPointerType] void *
#  956|             ValueCategory = prvalue
#  956|           0: [ErrorExpr] <error expr>
#  956|               Type = [LongType] unsigned long
#  956|               ValueCategory = prvalue
#  956|           1: [Literal] 128
#  956|               Type = [ScopedEnum] align_val_t
#  956|               Value = [Literal] 128
#  956|               ValueCategory = prvalue
#  956|           2: [Literal] 1.0
#  956|               Type = [FloatType] float
#  956|               Value = [Literal] 1.0
#  956|               ValueCategory = prvalue
#  956|         1: [Literal] 0
#  956|             Type = [Struct] Overaligned
#  956|             Value = [Literal] 0
#  956|             ValueCategory = prvalue
#  957|     7: [ReturnStmt] return ...
#  959| [TopLevelFunction] void OperatorNewArray(int)
#  959|   params: 
#  959|     0: [Parameter] n
#  959|         Type = [IntType] int
#  959|   body: [Block] { ... }
#  960|     0: [ExprStmt] ExprStmt
#  960|       0: [NewArrayExpr] new[]
#  960|           Type = [IntPointerType] int *
#  960|           ValueCategory = prvalue
#  961|     1: [ExprStmt] ExprStmt
#  961|       0: [NewArrayExpr] new[]
#  961|           Type = [IntPointerType] int *
#  961|           ValueCategory = prvalue
#  961|         2: [VariableAccess] n
#  961|             Type = [IntType] int
#  961|             ValueCategory = prvalue(load)
#  962|     2: [ExprStmt] ExprStmt
#  962|       0: [NewArrayExpr] new[]
#  962|           Type = [IntPointerType] int *
#  962|           ValueCategory = prvalue
#  962|         0: [FunctionCall] call to operator new[]
#  962|             Type = [VoidPointerType] void *
#  962|             ValueCategory = prvalue
#  962|           0: [ErrorExpr] <error expr>
#  962|               Type = [LongType] unsigned long
#  962|               ValueCategory = prvalue
#  962|           1: [Literal] 1.0
#  962|               Type = [FloatType] float
#  962|               Value = [Literal] 1.0
#  962|               ValueCategory = prvalue
#  962|         2: [VariableAccess] n
#  962|             Type = [IntType] int
#  962|             ValueCategory = prvalue(load)
#  963|     3: [ExprStmt] ExprStmt
#  963|       0: [NewArrayExpr] new[]
#  963|           Type = [PointerType] String *
#  963|           ValueCategory = prvalue
#  963|         1: [ArrayAggregateLiteral] {...}
#  963|             Type = [ArrayType] String[]
#  963|             ValueCategory = prvalue
#  963|           [0]: [ConstructorCall] call to String
#  963|               Type = [VoidType] void
#  963|               ValueCategory = prvalue
#  963|         2: [VariableAccess] n
#  963|             Type = [IntType] int
#  963|             ValueCategory = prvalue(load)
#  964|     4: [ExprStmt] ExprStmt
#  964|       0: [NewArrayExpr] new[]
#  964|           Type = [PointerType] Overaligned *
#  964|           ValueCategory = prvalue
#  964|         2: [VariableAccess] n
#  964|             Type = [IntType] int
#  964|             ValueCategory = prvalue(load)
#  964|         3: [Literal] 128
#  964|             Type = [ScopedEnum] align_val_t
#  964|             Value = [Literal] 128
#  964|             ValueCategory = prvalue
#  965|     5: [ExprStmt] ExprStmt
#  965|       0: [NewArrayExpr] new[]
#  965|           Type = [PointerType] Overaligned *
#  965|           ValueCategory = prvalue
#  965|         0: [FunctionCall] call to operator new[]
#  965|             Type = [VoidPointerType] void *
#  965|             ValueCategory = prvalue
#  965|           0: [ErrorExpr] <error expr>
#  965|               Type = [LongType] unsigned long
#  965|               ValueCategory = prvalue
#  965|           1: [Literal] 128
#  965|               Type = [ScopedEnum] align_val_t
#  965|               Value = [Literal] 128
#  965|               ValueCategory = prvalue
#  965|           2: [Literal] 1.0
#  965|               Type = [FloatType] float
#  965|               Value = [Literal] 1.0
#  965|               ValueCategory = prvalue
#  966|     6: [ExprStmt] ExprStmt
#  966|       0: [NewArrayExpr] new[]
#  966|           Type = [PointerType] DefaultCtorWithDefaultParam *
#  966|           ValueCategory = prvalue
#  966|         1: [ArrayAggregateLiteral] {...}
#  966|             Type = [ArrayType] DefaultCtorWithDefaultParam[]
#  966|             ValueCategory = prvalue
#  966|           [0]: [ConstructorCall] call to DefaultCtorWithDefaultParam
#  966|               Type = [VoidType] void
#  966|               ValueCategory = prvalue
#  966|         2: [VariableAccess] n
#  966|             Type = [IntType] int
#  966|             ValueCategory = prvalue(load)
#  967|     7: [ExprStmt] ExprStmt
#  967|       0: [NewArrayExpr] new[]
#  967|           Type = [IntPointerType] int *
#  967|           ValueCategory = prvalue
#  967|         1: [ArrayAggregateLiteral] {...}
#  967|             Type = [ArrayType] int[3]
#  967|             ValueCategory = prvalue
#  967|           [0]: [Literal] 0
#  967|               Type = [IntType] int
#  967|               Value = [Literal] 0
#  967|               ValueCategory = prvalue
#  967|           [1]: [Literal] 1
#  967|               Type = [IntType] int
#  967|               Value = [Literal] 1
#  967|               ValueCategory = prvalue
#  967|           [2]: [Literal] 2
#  967|               Type = [IntType] int
#  967|               Value = [Literal] 2
#  967|               ValueCategory = prvalue
#  967|         2: [VariableAccess] n
#  967|             Type = [IntType] int
#  967|             ValueCategory = prvalue(load)
#  968|     8: [ReturnStmt] return ...
#  970| [TopLevelFunction] int designatedInit()
#  970|   params: 
#  970|   body: [Block] { ... }
#  971|     0: [DeclStmt] declaration
#  971|       0: [VariableDeclarationEntry] definition of a1
#  971|           Type = [ArrayType] int[1000]
#  971|         init: [Initializer] initializer for a1
#  971|           expr: [ArrayAggregateLiteral] {...}
#  971|               Type = [ArrayType] int[1000]
#  971|               ValueCategory = prvalue
#  971|             [2]: [Literal] 10002
#  971|                 Type = [IntType] int
#  971|                 Value = [Literal] 10002
#  971|                 ValueCategory = prvalue
#  971|             [900]: [Literal] 10900
#  971|                 Type = [IntType] int
#  971|                 Value = [Literal] 10900
#  971|                 ValueCategory = prvalue
#  972|     1: [ReturnStmt] return ...
#  972|       0: [ArrayExpr] access to array
#  972|           Type = [IntType] int
#  972|           ValueCategory = prvalue(load)
#  972|         0: [ArrayToPointerConversion] array to pointer conversion
#  972|             Type = [IntPointerType] int *
#  972|             ValueCategory = prvalue
#  972|           expr: [VariableAccess] a1
#  972|               Type = [ArrayType] int[1000]
#  972|               ValueCategory = lvalue
#  972|         1: [Literal] 900
#  972|             Type = [IntType] int
#  972|             Value = [Literal] 900
#  972|             ValueCategory = prvalue
#  975| [TopLevelFunction] void IfStmtWithDeclaration(int, int)
#  975|   params: 
#  975|     0: [Parameter] x
#  975|         Type = [IntType] int
#  975|     1: [Parameter] y
#  975|         Type = [IntType] int
#  975|   body: [Block] { ... }
#  976|     0: [IfStmt] if (...) ... 
#  976|       0: [ConditionDeclExpr] (condition decl)
#  976|           Type = [BoolType] bool
#  976|           ValueCategory = prvalue
#  976|         0: [VariableAccess] b
#  976|             Type = [BoolType] bool
#  976|             ValueCategory = prvalue(load)
#  976|       1: [Block] { ... }
#  977|         0: [ExprStmt] ExprStmt
#  977|           0: [AssignExpr] ... = ...
#  977|               Type = [IntType] int
#  977|               ValueCategory = lvalue
#  977|             0: [VariableAccess] x
#  977|                 Type = [IntType] int
#  977|                 ValueCategory = lvalue
#  977|             1: [Literal] 5
#  977|                 Type = [IntType] int
#  977|                 Value = [Literal] 5
#  977|                 ValueCategory = prvalue
#  979|       2: [IfStmt] if (...) ... 
#  979|         0: [ConditionDeclExpr] (condition decl)
#  979|             Type = [BoolType] bool
#  979|             ValueCategory = prvalue
#  979|           0: [CStyleCast] (bool)...
#  979|               Conversion = [BoolConversion] conversion to bool
#  979|               Type = [BoolType] bool
#  979|               ValueCategory = prvalue
#  979|             expr: [VariableAccess] z
#  979|                 Type = [IntType] int
#  979|                 ValueCategory = prvalue(load)
#  979|         1: [Block] { ... }
#  980|           0: [ExprStmt] ExprStmt
#  980|             0: [AssignExpr] ... = ...
#  980|                 Type = [IntType] int
#  980|                 ValueCategory = lvalue
#  980|               0: [VariableAccess] y
#  980|                   Type = [IntType] int
#  980|                   ValueCategory = lvalue
#  980|               1: [Literal] 7
#  980|                   Type = [IntType] int
#  980|                   Value = [Literal] 7
#  980|                   ValueCategory = prvalue
#  982|         2: [IfStmt] if (...) ... 
#  982|           0: [ConditionDeclExpr] (condition decl)
#  982|               Type = [BoolType] bool
#  982|               ValueCategory = prvalue
#  982|             0: [CStyleCast] (bool)...
#  982|                 Conversion = [BoolConversion] conversion to bool
#  982|                 Type = [BoolType] bool
#  982|                 ValueCategory = prvalue
#  982|               expr: [VariableAccess] p
#  982|                   Type = [IntPointerType] int *
#  982|                   ValueCategory = prvalue(load)
#  982|           1: [Block] { ... }
#  983|             0: [ExprStmt] ExprStmt
#  983|               0: [AssignExpr] ... = ...
#  983|                   Type = [IntType] int
#  983|                   ValueCategory = lvalue
#  983|                 0: [PointerDereferenceExpr] * ...
#  983|                     Type = [IntType] int
#  983|                     ValueCategory = lvalue
#  983|                   0: [VariableAccess] p
#  983|                       Type = [IntPointerType] int *
#  983|                       ValueCategory = prvalue(load)
#  983|                 1: [Literal] 2
#  983|                     Type = [IntType] int
#  983|                     Value = [Literal] 2
#  983|                     ValueCategory = prvalue
#  985|     1: [ReturnStmt] return ...
#  987| [TopLevelFunction] void WhileStmtWithDeclaration(int, int)
#  987|   params: 
#  987|     0: [Parameter] x
#  987|         Type = [IntType] int
#  987|     1: [Parameter] y
#  987|         Type = [IntType] int
#  987|   body: [Block] { ... }
#  988|     0: [WhileStmt] while (...) ...
#  988|       0: [ConditionDeclExpr] (condition decl)
#  988|           Type = [BoolType] bool
#  988|           ValueCategory = prvalue
#  988|         0: [VariableAccess] b
#  988|             Type = [BoolType] bool
#  988|             ValueCategory = prvalue(load)
#  988|       1: [Block] { ... }
#  990|     1: [WhileStmt] while (...) ...
#  990|       0: [ConditionDeclExpr] (condition decl)
#  990|           Type = [BoolType] bool
#  990|           ValueCategory = prvalue
#  990|         0: [CStyleCast] (bool)...
#  990|             Conversion = [BoolConversion] conversion to bool
#  990|             Type = [BoolType] bool
#  990|             ValueCategory = prvalue
#  990|           expr: [VariableAccess] z
#  990|               Type = [IntType] int
#  990|               ValueCategory = prvalue(load)
#  990|       1: [Block] { ... }
#  992|     2: [WhileStmt] while (...) ...
#  992|       0: [ConditionDeclExpr] (condition decl)
#  992|           Type = [BoolType] bool
#  992|           ValueCategory = prvalue
#  992|         0: [CStyleCast] (bool)...
#  992|             Conversion = [BoolConversion] conversion to bool
#  992|             Type = [BoolType] bool
#  992|             ValueCategory = prvalue
#  992|           expr: [VariableAccess] p
#  992|               Type = [IntPointerType] int *
#  992|               ValueCategory = prvalue(load)
#  992|       1: [Block] { ... }
#  994|     3: [ReturnStmt] return ...
#  996| [TopLevelFunction] int PointerDecay(int[], int(float))
#  996|   params: 
#  996|     0: [Parameter] a
#  996|         Type = [ArrayType] int[]
#  996|     1: [Parameter] fn
#  996|         Type = [RoutineType] ..()(..)
#  996|   body: [Block] { ... }
#  997|     0: [ReturnStmt] return ...
#  997|       0: [AddExpr] ... + ...
#  997|           Type = [IntType] int
#  997|           ValueCategory = prvalue
#  997|         0: [ArrayExpr] access to array
#  997|             Type = [IntType] int
#  997|             ValueCategory = prvalue(load)
#  997|           0: [VariableAccess] a
#  997|               Type = [IntPointerType] int *
#  997|               ValueCategory = prvalue(load)
#  997|           1: [Literal] 0
#  997|               Type = [IntType] int
#  997|               Value = [Literal] 0
#  997|               ValueCategory = prvalue
#  997|         1: [VariableCall] call to expression
#  997|             Type = [IntType] int
#  997|             ValueCategory = prvalue
#  997|           0: [VariableAccess] fn
#  997|               Type = [FunctionPointerType] ..(*)(..)
#  997|               ValueCategory = prvalue(load)
#  997|           1: [CStyleCast] (float)...
#  997|               Conversion = [FloatingPointConversion] floating point conversion
#  997|               Type = [FloatType] float
#  997|               Value = [CStyleCast] 1.0
#  997|               ValueCategory = prvalue
#  997|             expr: [Literal] 1.0
#  997|                 Type = [DoubleType] double
#  997|                 Value = [Literal] 1.0
#  997|                 ValueCategory = prvalue
# 1000| [TopLevelFunction] int ExprStmt(int, int, int)
# 1000|   params: 
# 1000|     0: [Parameter] b
# 1000|         Type = [IntType] int
# 1000|     1: [Parameter] y
# 1000|         Type = [IntType] int
# 1000|     2: [Parameter] z
# 1000|         Type = [IntType] int
# 1000|   body: [Block] { ... }
# 1001|     0: [DeclStmt] declaration
# 1001|       0: [VariableDeclarationEntry] definition of x
# 1001|           Type = [IntType] int
# 1001|         init: [Initializer] initializer for x
# 1001|           expr: [StmtExpr] (statement expression)
# 1001|               Type = [IntType] int
# 1001|               ValueCategory = prvalue
# 1011|     1: [ReturnStmt] return ...
# 1011|       0: [StmtExpr] (statement expression)
# 1011|           Type = [IntType] int
# 1011|           ValueCategory = prvalue
# 1015| [TopLevelFunction] void OperatorDelete()
# 1015|   params: 
# 1015|   body: [Block] { ... }
# 1016|     0: [ExprStmt] ExprStmt
# 1016|       0: [DeleteExpr] delete
# 1016|           Type = [VoidType] void
# 1016|           ValueCategory = prvalue
# 1016|         3: [StaticCast] static_cast<int *>...
# 1016|             Conversion = [PointerConversion] pointer conversion
# 1016|             Type = [IntPointerType] int *
# 1016|             Value = [StaticCast] 0
# 1016|             ValueCategory = prvalue
# 1016|           expr: [Literal] 0
# 1016|               Type = [NullPointerType] decltype(nullptr)
# 1016|               Value = [Literal] 0
# 1016|               ValueCategory = prvalue
# 1017|     1: [ExprStmt] ExprStmt
# 1017|       0: [DeleteExpr] delete
# 1017|           Type = [VoidType] void
# 1017|           ValueCategory = prvalue
# 1017|         1: [DestructorCall] call to ~String
# 1017|             Type = [VoidType] void
# 1017|             ValueCategory = prvalue
# 1017|           -1: [StaticCast] static_cast<String *>...
# 1017|               Conversion = [PointerConversion] pointer conversion
# 1017|               Type = [PointerType] String *
# 1017|               Value = [StaticCast] 0
# 1017|               ValueCategory = prvalue
# 1017|             expr: [Literal] 0
# 1017|                 Type = [NullPointerType] decltype(nullptr)
# 1017|                 Value = [Literal] 0
# 1017|                 ValueCategory = prvalue
# 1018|     2: [ExprStmt] ExprStmt
# 1018|       0: [DeleteExpr] delete
# 1018|           Type = [VoidType] void
# 1018|           ValueCategory = prvalue
# 1018|         0: [FunctionCall] call to operator delete
# 1018|             Type = [VoidType] void
# 1018|             ValueCategory = prvalue
# 1018|         3: [StaticCast] static_cast<SizedDealloc *>...
# 1018|             Conversion = [PointerConversion] pointer conversion
# 1018|             Type = [PointerType] SizedDealloc *
# 1018|             Value = [StaticCast] 0
# 1018|             ValueCategory = prvalue
# 1018|           expr: [Literal] 0
# 1018|               Type = [NullPointerType] decltype(nullptr)
# 1018|               Value = [Literal] 0
# 1018|               ValueCategory = prvalue
# 1019|     3: [ExprStmt] ExprStmt
# 1019|       0: [DeleteExpr] delete
# 1019|           Type = [VoidType] void
# 1019|           ValueCategory = prvalue
# 1019|         3: [StaticCast] static_cast<Overaligned *>...
# 1019|             Conversion = [PointerConversion] pointer conversion
# 1019|             Type = [PointerType] Overaligned *
# 1019|             Value = [StaticCast] 0
# 1019|             ValueCategory = prvalue
# 1019|           expr: [Literal] 0
# 1019|               Type = [NullPointerType] decltype(nullptr)
# 1019|               Value = [Literal] 0
# 1019|               ValueCategory = prvalue
# 1020|     4: [ExprStmt] ExprStmt
# 1020|       0: [DeleteExpr] delete
# 1020|           Type = [VoidType] void
# 1020|           ValueCategory = prvalue
# 1020|         1: [DestructorCall] call to ~PolymorphicBase
# 1020|             Type = [VoidType] void
# 1020|             ValueCategory = prvalue
# 1020|           -1: [StaticCast] static_cast<PolymorphicBase *>...
# 1020|               Conversion = [PointerConversion] pointer conversion
# 1020|               Type = [PointerType] PolymorphicBase *
# 1020|               Value = [StaticCast] 0
# 1020|               ValueCategory = prvalue
# 1020|             expr: [Literal] 0
# 1020|                 Type = [NullPointerType] decltype(nullptr)
# 1020|                 Value = [Literal] 0
# 1020|                 ValueCategory = prvalue
# 1021|     5: [ReturnStmt] return ...
# 1024| [TopLevelFunction] void OperatorDeleteArray()
# 1024|   params: 
# 1024|   body: [Block] { ... }
# 1025|     0: [ExprStmt] ExprStmt
# 1025|       0: [DeleteArrayExpr] delete[]
# 1025|           Type = [VoidType] void
# 1025|           ValueCategory = prvalue
# 1025|         3: [StaticCast] static_cast<int *>...
# 1025|             Conversion = [PointerConversion] pointer conversion
# 1025|             Type = [IntPointerType] int *
# 1025|             Value = [StaticCast] 0
# 1025|             ValueCategory = prvalue
# 1025|           expr: [Literal] 0
# 1025|               Type = [NullPointerType] decltype(nullptr)
# 1025|               Value = [Literal] 0
# 1025|               ValueCategory = prvalue
# 1026|     1: [ExprStmt] ExprStmt
# 1026|       0: [DeleteArrayExpr] delete[]
# 1026|           Type = [VoidType] void
# 1026|           ValueCategory = prvalue
# 1026|         1: [DestructorCall] call to ~String
# 1026|             Type = [VoidType] void
# 1026|             ValueCategory = prvalue
# 1026|           -1: [StaticCast] static_cast<String *>...
# 1026|               Conversion = [PointerConversion] pointer conversion
# 1026|               Type = [PointerType] String *
# 1026|               Value = [StaticCast] 0
# 1026|               ValueCategory = prvalue
# 1026|             expr: [Literal] 0
# 1026|                 Type = [NullPointerType] decltype(nullptr)
# 1026|                 Value = [Literal] 0
# 1026|                 ValueCategory = prvalue
# 1027|     2: [ExprStmt] ExprStmt
# 1027|       0: [DeleteArrayExpr] delete[]
# 1027|           Type = [VoidType] void
# 1027|           ValueCategory = prvalue
# 1027|         0: [FunctionCall] call to operator delete[]
# 1027|             Type = [VoidType] void
# 1027|             ValueCategory = prvalue
# 1027|         3: [StaticCast] static_cast<SizedDealloc *>...
# 1027|             Conversion = [PointerConversion] pointer conversion
# 1027|             Type = [PointerType] SizedDealloc *
# 1027|             Value = [StaticCast] 0
# 1027|             ValueCategory = prvalue
# 1027|           expr: [Literal] 0
# 1027|               Type = [NullPointerType] decltype(nullptr)
# 1027|               Value = [Literal] 0
# 1027|               ValueCategory = prvalue
# 1028|     3: [ExprStmt] ExprStmt
# 1028|       0: [DeleteArrayExpr] delete[]
# 1028|           Type = [VoidType] void
# 1028|           ValueCategory = prvalue
# 1028|         3: [StaticCast] static_cast<Overaligned *>...
# 1028|             Conversion = [PointerConversion] pointer conversion
# 1028|             Type = [PointerType] Overaligned *
# 1028|             Value = [StaticCast] 0
# 1028|             ValueCategory = prvalue
# 1028|           expr: [Literal] 0
# 1028|               Type = [NullPointerType] decltype(nullptr)
# 1028|               Value = [Literal] 0
# 1028|               ValueCategory = prvalue
# 1029|     4: [ExprStmt] ExprStmt
# 1029|       0: [DeleteArrayExpr] delete[]
# 1029|           Type = [VoidType] void
# 1029|           ValueCategory = prvalue
# 1029|         1: [DestructorCall] call to ~PolymorphicBase
# 1029|             Type = [VoidType] void
# 1029|             ValueCategory = prvalue
# 1029|           -1: [StaticCast] static_cast<PolymorphicBase *>...
# 1029|               Conversion = [PointerConversion] pointer conversion
# 1029|               Type = [PointerType] PolymorphicBase *
# 1029|               Value = [StaticCast] 0
# 1029|               ValueCategory = prvalue
# 1029|             expr: [Literal] 0
# 1029|                 Type = [NullPointerType] decltype(nullptr)
# 1029|                 Value = [Literal] 0
# 1029|                 ValueCategory = prvalue
# 1030|     5: [ReturnStmt] return ...
# 1032| [CopyAssignmentOperator] EmptyStruct& EmptyStruct::operator=(EmptyStruct const&)
# 1032|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const EmptyStruct &
# 1032| [MoveAssignmentOperator] EmptyStruct& EmptyStruct::operator=(EmptyStruct&&)
# 1032|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [RValueReferenceType] EmptyStruct &&
# 1034| [TopLevelFunction] void EmptyStructInit()
# 1034|   params: 
# 1034|   body: [Block] { ... }
# 1035|     0: [DeclStmt] declaration
# 1035|       0: [VariableDeclarationEntry] definition of s
# 1035|           Type = [Struct] EmptyStruct
# 1035|         init: [Initializer] initializer for s
# 1035|           expr: [ClassAggregateLiteral] {...}
# 1035|               Type = [Struct] EmptyStruct
# 1035|               ValueCategory = prvalue
# 1036|     1: [ReturnStmt] return ...
# 1038| [CopyAssignmentOperator] (lambda [] type at line 1038, col. 12)& (lambda [] type at line 1038, col. 12)::operator=((lambda [] type at line 1038, col. 12) const&)
# 1038|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const lambda [] type at line 1038, col. 12 &
# 1038| [CopyConstructor] void (lambda [] type at line 1038, col. 12)::(constructor)((lambda [] type at line 1038, col. 12) const&)
# 1038|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const lambda [] type at line 1038, col. 12 &
# 1038| [MoveConstructor] void (lambda [] type at line 1038, col. 12)::(constructor)((lambda [] type at line 1038, col. 12)&&)
# 1038|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [RValueReferenceType] lambda [] type at line 1038, col. 12 &&
# 1038| [Constructor] void (lambda [] type at line 1038, col. 12)::(constructor)()
# 1038|   params: 
# 1038| [MemberFunction] void (lambda [] type at line 1038, col. 12)::_FUN()
# 1038|   params: 
# 1038| [ConstMemberFunction] void (lambda [] type at line 1038, col. 12)::operator()() const
# 1038|   params: 
# 1038|   body: [Block] { ... }
# 1038|     0: [ReturnStmt] return ...
# 1038| [ConstMemberFunction,ConversionOperator] void(* (lambda [] type at line 1038, col. 12)::operator void (*)()() const)()
# 1038|   params: 
#-----|   body: [Block] { ... }
# 1038|     0: [ReturnStmt] return ...
# 1038|       0: [FunctionAccess] _FUN
# 1038|           Type = [FunctionPointerType] ..(*)(..)
# 1038|           ValueCategory = prvalue(load)
# 1040| [TopLevelFunction] void Lambda(int, String const&)
# 1040|   params: 
# 1040|     0: [Parameter] x
# 1040|         Type = [IntType] int
# 1040|     1: [Parameter] s
# 1040|         Type = [LValueReferenceType] const String &
# 1040|   body: [Block] { ... }
# 1041|     0: [DeclStmt] declaration
# 1041|       0: [VariableDeclarationEntry] definition of lambda_empty
# 1041|           Type = [Closure,LocalClass] decltype([...](...){...})
# 1041|         init: [Initializer] initializer for lambda_empty
# 1041|           expr: [LambdaExpression] [...](...){...}
# 1041|               Type = [Closure,LocalClass] decltype([...](...){...})
# 1041|               ValueCategory = prvalue
# 1042|     1: [ExprStmt] ExprStmt
# 1042|       0: [FunctionCall] call to operator()
# 1042|           Type = [PlainCharType] char
# 1042|           Value = [FunctionCall] 65
# 1042|           ValueCategory = prvalue
# 1042|         -1: [CStyleCast] (const lambda [] type at line 1041, col. 23)...
# 1042|             Conversion = [GlvalueConversion] glvalue conversion
# 1042|             Type = [SpecifiedType] const lambda [] type at line 1041, col. 23
# 1042|             ValueCategory = lvalue
# 1042|           expr: [VariableAccess] lambda_empty
# 1042|               Type = [Closure,LocalClass] decltype([...](...){...})
# 1042|               ValueCategory = lvalue
# 1042|         0: [CStyleCast] (float)...
# 1042|             Conversion = [IntegralToFloatingPointConversion] integral to floating point conversion
# 1042|             Type = [FloatType] float
# 1042|             Value = [CStyleCast] 0.0
# 1042|             ValueCategory = prvalue
# 1042|           expr: [Literal] 0
# 1042|               Type = [IntType] int
# 1042|               Value = [Literal] 0
# 1042|               ValueCategory = prvalue
# 1043|     2: [DeclStmt] declaration
# 1043|       0: [VariableDeclarationEntry] definition of lambda_ref
# 1043|           Type = [Closure,LocalClass] decltype([...](...){...})
# 1043|         init: [Initializer] initializer for lambda_ref
# 1043|           expr: [LambdaExpression] [...](...){...}
# 1043|               Type = [Closure,LocalClass] decltype([...](...){...})
# 1043|               ValueCategory = prvalue
# 1043|             0: [ClassAggregateLiteral] {...}
# 1043|                 Type = [Closure,LocalClass] decltype([...](...){...})
# 1043|                 ValueCategory = prvalue
# 1043|               .s: [ReferenceToExpr] (reference to)
# 1043|                   Type = [LValueReferenceType] const String &
# 1043|                   ValueCategory = prvalue
# 1043|                 expr: [ReferenceDereferenceExpr] (reference dereference)
# 1043|                     Type = [SpecifiedType] const String
# 1043|                     ValueCategory = lvalue
#-----|                   expr: [VariableAccess] s
#-----|                       Type = [LValueReferenceType] const String &
#-----|                       ValueCategory = prvalue(load)
#-----|               .x: [ReferenceToExpr] (reference to)
#-----|                   Type = [LValueReferenceType] int &
#-----|                   ValueCategory = prvalue
#-----|                 expr: [VariableAccess] x
#-----|                     Type = [IntType] int
#-----|                     ValueCategory = lvalue
# 1044|     3: [ExprStmt] ExprStmt
# 1044|       0: [FunctionCall] call to operator()
# 1044|           Type = [PlainCharType] char
# 1044|           ValueCategory = prvalue
# 1044|         -1: [CStyleCast] (const lambda [] type at line 1043, col. 21)...
# 1044|             Conversion = [GlvalueConversion] glvalue conversion
# 1044|             Type = [SpecifiedType] const lambda [] type at line 1043, col. 21
# 1044|             ValueCategory = lvalue
# 1044|           expr: [VariableAccess] lambda_ref
# 1044|               Type = [Closure,LocalClass] decltype([...](...){...})
# 1044|               ValueCategory = lvalue
# 1044|         0: [CStyleCast] (float)...
# 1044|             Conversion = [IntegralToFloatingPointConversion] integral to floating point conversion
# 1044|             Type = [FloatType] float
# 1044|             Value = [CStyleCast] 1.0
# 1044|             ValueCategory = prvalue
# 1044|           expr: [Literal] 1
# 1044|               Type = [IntType] int
# 1044|               Value = [Literal] 1
# 1044|               ValueCategory = prvalue
# 1045|     4: [DeclStmt] declaration
# 1045|       0: [VariableDeclarationEntry] definition of lambda_val
# 1045|           Type = [Closure,LocalClass] decltype([...](...){...})
# 1045|         init: [Initializer] initializer for lambda_val
# 1045|           expr: [LambdaExpression] [...](...){...}
# 1045|               Type = [Closure,LocalClass] decltype([...](...){...})
# 1045|               ValueCategory = prvalue
# 1045|             0: [ClassAggregateLiteral] {...}
# 1045|                 Type = [Closure,LocalClass] decltype([...](...){...})
# 1045|                 ValueCategory = prvalue
#-----|               .s: [ConstructorCall] call to String
#-----|                   Type = [VoidType] void
#-----|                   ValueCategory = prvalue
#-----|               .x: [VariableAccess] x
#-----|                   Type = [IntType] int
#-----|                   ValueCategory = prvalue(load)
# 1046|     5: [ExprStmt] ExprStmt
# 1046|       0: [FunctionCall] call to operator()
# 1046|           Type = [PlainCharType] char
# 1046|           ValueCategory = prvalue
# 1046|         -1: [CStyleCast] (const lambda [] type at line 1045, col. 21)...
# 1046|             Conversion = [GlvalueConversion] glvalue conversion
# 1046|             Type = [SpecifiedType] const lambda [] type at line 1045, col. 21
# 1046|             ValueCategory = lvalue
# 1046|           expr: [VariableAccess] lambda_val
# 1046|               Type = [Closure,LocalClass] decltype([...](...){...})
# 1046|               ValueCategory = lvalue
# 1046|         0: [CStyleCast] (float)...
# 1046|             Conversion = [IntegralToFloatingPointConversion] integral to floating point conversion
# 1046|             Type = [FloatType] float
# 1046|             Value = [CStyleCast] 2.0
# 1046|             ValueCategory = prvalue
# 1046|           expr: [Literal] 2
# 1046|               Type = [IntType] int
# 1046|               Value = [Literal] 2
# 1046|               ValueCategory = prvalue
# 1047|     6: [DeclStmt] declaration
# 1047|       0: [VariableDeclarationEntry] definition of lambda_ref_explicit
# 1047|           Type = [Closure,LocalClass] decltype([...](...){...})
# 1047|         init: [Initializer] initializer for lambda_ref_explicit
# 1047|           expr: [LambdaExpression] [...](...){...}
# 1047|               Type = [Closure,LocalClass] decltype([...](...){...})
# 1047|               ValueCategory = prvalue
# 1047|             0: [ClassAggregateLiteral] {...}
# 1047|                 Type = [Closure,LocalClass] decltype([...](...){...})
# 1047|                 ValueCategory = prvalue
# 1047|               .s: [ReferenceToExpr] (reference to)
# 1047|                   Type = [LValueReferenceType] const String &
# 1047|                   ValueCategory = prvalue
# 1047|                 expr: [ReferenceDereferenceExpr] (reference dereference)
# 1047|                     Type = [SpecifiedType] const String
# 1047|                     ValueCategory = lvalue
# 1047|                   expr: [VariableAccess] s
# 1047|                       Type = [LValueReferenceType] const String &
# 1047|                       ValueCategory = prvalue(load)
# 1048|     7: [ExprStmt] ExprStmt
# 1048|       0: [FunctionCall] call to operator()
# 1048|           Type = [PlainCharType] char
# 1048|           ValueCategory = prvalue
# 1048|         -1: [CStyleCast] (const lambda [] type at line 1047, col. 30)...
# 1048|             Conversion = [GlvalueConversion] glvalue conversion
# 1048|             Type = [SpecifiedType] const lambda [] type at line 1047, col. 30
# 1048|             ValueCategory = lvalue
# 1048|           expr: [VariableAccess] lambda_ref_explicit
# 1048|               Type = [Closure,LocalClass] decltype([...](...){...})
# 1048|               ValueCategory = lvalue
# 1048|         0: [CStyleCast] (float)...
# 1048|             Conversion = [IntegralToFloatingPointConversion] integral to floating point conversion
# 1048|             Type = [FloatType] float
# 1048|             Value = [CStyleCast] 3.0
# 1048|             ValueCategory = prvalue
# 1048|           expr: [Literal] 3
# 1048|               Type = [IntType] int
# 1048|               Value = [Literal] 3
# 1048|               ValueCategory = prvalue
# 1049|     8: [DeclStmt] declaration
# 1049|       0: [VariableDeclarationEntry] definition of lambda_val_explicit
# 1049|           Type = [Closure,LocalClass] decltype([...](...){...})
# 1049|         init: [Initializer] initializer for lambda_val_explicit
# 1049|           expr: [LambdaExpression] [...](...){...}
# 1049|               Type = [Closure,LocalClass] decltype([...](...){...})
# 1049|               ValueCategory = prvalue
# 1049|             0: [ClassAggregateLiteral] {...}
# 1049|                 Type = [Closure,LocalClass] decltype([...](...){...})
# 1049|                 ValueCategory = prvalue
#-----|               .s: [ConstructorCall] call to String
#-----|                   Type = [VoidType] void
#-----|                   ValueCategory = prvalue
# 1050|     9: [ExprStmt] ExprStmt
# 1050|       0: [FunctionCall] call to operator()
# 1050|           Type = [PlainCharType] char
# 1050|           ValueCategory = prvalue
# 1050|         -1: [CStyleCast] (const lambda [] type at line 1049, col. 30)...
# 1050|             Conversion = [GlvalueConversion] glvalue conversion
# 1050|             Type = [SpecifiedType] const lambda [] type at line 1049, col. 30
# 1050|             ValueCategory = lvalue
# 1050|           expr: [VariableAccess] lambda_val_explicit
# 1050|               Type = [Closure,LocalClass] decltype([...](...){...})
# 1050|               ValueCategory = lvalue
# 1050|         0: [CStyleCast] (float)...
# 1050|             Conversion = [IntegralToFloatingPointConversion] integral to floating point conversion
# 1050|             Type = [FloatType] float
# 1050|             Value = [CStyleCast] 4.0
# 1050|             ValueCategory = prvalue
# 1050|           expr: [Literal] 4
# 1050|               Type = [IntType] int
# 1050|               Value = [Literal] 4
# 1050|               ValueCategory = prvalue
# 1051|     10: [DeclStmt] declaration
# 1051|       0: [VariableDeclarationEntry] definition of lambda_mixed_explicit
# 1051|           Type = [Closure,LocalClass] decltype([...](...){...})
# 1051|         init: [Initializer] initializer for lambda_mixed_explicit
# 1051|           expr: [LambdaExpression] [...](...){...}
# 1051|               Type = [Closure,LocalClass] decltype([...](...){...})
# 1051|               ValueCategory = prvalue
# 1051|             0: [ClassAggregateLiteral] {...}
# 1051|                 Type = [Closure,LocalClass] decltype([...](...){...})
# 1051|                 ValueCategory = prvalue
# 1051|               .s: [ReferenceToExpr] (reference to)
# 1051|                   Type = [LValueReferenceType] const String &
# 1051|                   ValueCategory = prvalue
# 1051|                 expr: [ReferenceDereferenceExpr] (reference dereference)
# 1051|                     Type = [SpecifiedType] const String
# 1051|                     ValueCategory = lvalue
# 1051|                   expr: [VariableAccess] s
# 1051|                       Type = [LValueReferenceType] const String &
# 1051|                       ValueCategory = prvalue(load)
# 1051|               .x: [VariableAccess] x
# 1051|                   Type = [IntType] int
# 1051|                   ValueCategory = prvalue(load)
# 1052|     11: [ExprStmt] ExprStmt
# 1052|       0: [FunctionCall] call to operator()
# 1052|           Type = [PlainCharType] char
# 1052|           ValueCategory = prvalue
# 1052|         -1: [CStyleCast] (const lambda [] type at line 1051, col. 32)...
# 1052|             Conversion = [GlvalueConversion] glvalue conversion
# 1052|             Type = [SpecifiedType] const lambda [] type at line 1051, col. 32
# 1052|             ValueCategory = lvalue
# 1052|           expr: [VariableAccess] lambda_mixed_explicit
# 1052|               Type = [Closure,LocalClass] decltype([...](...){...})
# 1052|               ValueCategory = lvalue
# 1052|         0: [CStyleCast] (float)...
# 1052|             Conversion = [IntegralToFloatingPointConversion] integral to floating point conversion
# 1052|             Type = [FloatType] float
# 1052|             Value = [CStyleCast] 5.0
# 1052|             ValueCategory = prvalue
# 1052|           expr: [Literal] 5
# 1052|               Type = [IntType] int
# 1052|               Value = [Literal] 5
# 1052|               ValueCategory = prvalue
# 1053|     12: [DeclStmt] declaration
# 1053|       0: [VariableDeclarationEntry] definition of r
# 1053|           Type = [IntType] int
# 1053|         init: [Initializer] initializer for r
# 1053|           expr: [SubExpr] ... - ...
# 1053|               Type = [IntType] int
# 1053|               ValueCategory = prvalue
# 1053|             0: [VariableAccess] x
# 1053|                 Type = [IntType] int
# 1053|                 ValueCategory = prvalue(load)
# 1053|             1: [Literal] 1
# 1053|                 Type = [IntType] int
# 1053|                 Value = [Literal] 1
# 1053|                 ValueCategory = prvalue
# 1054|     13: [DeclStmt] declaration
# 1054|       0: [VariableDeclarationEntry] definition of lambda_inits
# 1054|           Type = [Closure,LocalClass] decltype([...](...){...})
# 1054|         init: [Initializer] initializer for lambda_inits
# 1054|           expr: [LambdaExpression] [...](...){...}
# 1054|               Type = [Closure,LocalClass] decltype([...](...){...})
# 1054|               ValueCategory = prvalue
# 1054|             0: [ClassAggregateLiteral] {...}
# 1054|                 Type = [Closure,LocalClass] decltype([...](...){...})
# 1054|                 ValueCategory = prvalue
# 1054|               .s: [ReferenceToExpr] (reference to)
# 1054|                   Type = [LValueReferenceType] const String &
# 1054|                   ValueCategory = prvalue
# 1054|                 expr: [ReferenceDereferenceExpr] (reference dereference)
# 1054|                     Type = [SpecifiedType] const String
# 1054|                     ValueCategory = lvalue
# 1054|                   expr: [VariableAccess] s
# 1054|                       Type = [LValueReferenceType] const String &
# 1054|                       ValueCategory = prvalue(load)
# 1054|               .x: [VariableAccess] x
# 1054|                   Type = [IntType] int
# 1054|                   ValueCategory = prvalue(load)
# 1054|               .i: [AddExpr] ... + ...
# 1054|                   Type = [IntType] int
# 1054|                   ValueCategory = prvalue
# 1054|                 0: [VariableAccess] x
# 1054|                     Type = [IntType] int
# 1054|                     ValueCategory = prvalue(load)
# 1054|                 1: [Literal] 1
# 1054|                     Type = [IntType] int
# 1054|                     Value = [Literal] 1
# 1054|                     ValueCategory = prvalue
# 1054|               .j: [ReferenceToExpr] (reference to)
# 1054|                   Type = [LValueReferenceType] int &
# 1054|                   ValueCategory = prvalue
# 1054|                 expr: [VariableAccess] r
# 1054|                     Type = [IntType] int
# 1054|                     ValueCategory = lvalue
# 1055|     14: [ExprStmt] ExprStmt
# 1055|       0: [FunctionCall] call to operator()
# 1055|           Type = [PlainCharType] char
# 1055|           ValueCategory = prvalue
# 1055|         -1: [CStyleCast] (const lambda [] type at line 1054, col. 23)...
# 1055|             Conversion = [GlvalueConversion] glvalue conversion
# 1055|             Type = [SpecifiedType] const lambda [] type at line 1054, col. 23
# 1055|             ValueCategory = lvalue
# 1055|           expr: [VariableAccess] lambda_inits
# 1055|               Type = [Closure,LocalClass] decltype([...](...){...})
# 1055|               ValueCategory = lvalue
# 1055|         0: [CStyleCast] (float)...
# 1055|             Conversion = [IntegralToFloatingPointConversion] integral to floating point conversion
# 1055|             Type = [FloatType] float
# 1055|             Value = [CStyleCast] 6.0
# 1055|             ValueCategory = prvalue
# 1055|           expr: [Literal] 6
# 1055|               Type = [IntType] int
# 1055|               Value = [Literal] 6
# 1055|               ValueCategory = prvalue
# 1056|     15: [ReturnStmt] return ...
# 1041| [CopyAssignmentOperator] (void Lambda(int, String const&))::(lambda [] type at line 1041, col. 23)& (void Lambda(int, String const&))::(lambda [] type at line 1041, col. 23)::operator=((void Lambda(int, String const&))::(lambda [] type at line 1041, col. 23) const&)
# 1041|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const lambda [] type at line 1041, col. 23 &
# 1041| [CopyConstructor] void (void Lambda(int, String const&))::(lambda [] type at line 1041, col. 23)::(constructor)((void Lambda(int, String const&))::(lambda [] type at line 1041, col. 23) const&)
# 1041|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const lambda [] type at line 1041, col. 23 &
# 1041| [MoveConstructor] void (void Lambda(int, String const&))::(lambda [] type at line 1041, col. 23)::(constructor)((void Lambda(int, String const&))::(lambda [] type at line 1041, col. 23)&&)
# 1041|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [RValueReferenceType] lambda [] type at line 1041, col. 23 &&
# 1041| [Constructor] void (void Lambda(int, String const&))::(lambda [] type at line 1041, col. 23)::(constructor)()
# 1041|   params: 
# 1041| [MemberFunction] char (void Lambda(int, String const&))::(lambda [] type at line 1041, col. 23)::_FUN(float)
# 1041|   params: 
# 1041|     0: [Parameter] f
# 1041|         Type = [FloatType] float
# 1041| [ConstMemberFunction] char (void Lambda(int, String const&))::(lambda [] type at line 1041, col. 23)::operator()(float) const
# 1041|   params: 
# 1041|     0: [Parameter] f
# 1041|         Type = [FloatType] float
# 1041|   body: [Block] { ... }
# 1041|     0: [ReturnStmt] return ...
# 1041|       0: [CharLiteral] 65
# 1041|           Type = [PlainCharType] char
# 1041|           Value = [CharLiteral] 65
# 1041|           ValueCategory = prvalue
# 1041| [ConstMemberFunction,ConversionOperator] char(* (void Lambda(int, String const&))::(lambda [] type at line 1041, col. 23)::operator char (*)(float)() const)(float)
# 1041|   params: 
#-----|   body: [Block] { ... }
# 1041|     0: [ReturnStmt] return ...
# 1041|       0: [FunctionAccess] _FUN
# 1041|           Type = [FunctionPointerType] ..(*)(..)
# 1041|           ValueCategory = prvalue(load)
# 1043| [CopyAssignmentOperator] (void Lambda(int, String const&))::(lambda [] type at line 1043, col. 21)& (void Lambda(int, String const&))::(lambda [] type at line 1043, col. 21)::operator=((void Lambda(int, String const&))::(lambda [] type at line 1043, col. 21) const&)
# 1043|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const lambda [] type at line 1043, col. 21 &
# 1043| [CopyConstructor] void (void Lambda(int, String const&))::(lambda [] type at line 1043, col. 21)::(constructor)((void Lambda(int, String const&))::(lambda [] type at line 1043, col. 21) const&)
# 1043|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const lambda [] type at line 1043, col. 21 &
# 1043| [MoveConstructor] void (void Lambda(int, String const&))::(lambda [] type at line 1043, col. 21)::(constructor)((void Lambda(int, String const&))::(lambda [] type at line 1043, col. 21)&&)
# 1043|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [RValueReferenceType] lambda [] type at line 1043, col. 21 &&
# 1043| [Constructor] void (void Lambda(int, String const&))::(lambda [] type at line 1043, col. 21)::(constructor)()
# 1043|   params: 
# 1043| [ConstMemberFunction] char (void Lambda(int, String const&))::(lambda [] type at line 1043, col. 21)::operator()(float) const
# 1043|   params: 
# 1043|     0: [Parameter] f
# 1043|         Type = [FloatType] float
# 1043|   body: [Block] { ... }
# 1043|     0: [ReturnStmt] return ...
# 1043|       0: [ArrayExpr] access to array
# 1043|           Type = [PlainCharType] char
# 1043|           ValueCategory = prvalue(load)
# 1043|         0: [FunctionCall] call to c_str
# 1043|             Type = [PointerType] const char *
# 1043|             ValueCategory = prvalue
# 1043|           -1: [ReferenceDereferenceExpr] (reference dereference)
# 1043|               Type = [SpecifiedType] const String
# 1043|               ValueCategory = lvalue
#-----|             expr: [PointerFieldAccess] s
#-----|                 Type = [LValueReferenceType] const String &
#-----|                 ValueCategory = prvalue(load)
#-----|               -1: [ThisExpr] this
#-----|                   Type = [PointerType] const lambda [] type at line 1043, col. 21 *
#-----|                   ValueCategory = prvalue(load)
# 1043|         1: [ReferenceDereferenceExpr] (reference dereference)
# 1043|             Type = [IntType] int
# 1043|             ValueCategory = prvalue(load)
#-----|           expr: [PointerFieldAccess] x
#-----|               Type = [LValueReferenceType] int &
#-----|               ValueCategory = prvalue(load)
#-----|             -1: [ThisExpr] this
#-----|                 Type = [PointerType] const lambda [] type at line 1043, col. 21 *
#-----|                 ValueCategory = prvalue(load)
# 1045| [CopyAssignmentOperator] (void Lambda(int, String const&))::(lambda [] type at line 1045, col. 21)& (void Lambda(int, String const&))::(lambda [] type at line 1045, col. 21)::operator=((void Lambda(int, String const&))::(lambda [] type at line 1045, col. 21) const&)
# 1045|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const lambda [] type at line 1045, col. 21 &
# 1045| [CopyConstructor] void (void Lambda(int, String const&))::(lambda [] type at line 1045, col. 21)::(constructor)((void Lambda(int, String const&))::(lambda [] type at line 1045, col. 21) const&)
# 1045|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const lambda [] type at line 1045, col. 21 &
# 1045| [MoveConstructor] void (void Lambda(int, String const&))::(lambda [] type at line 1045, col. 21)::(constructor)((void Lambda(int, String const&))::(lambda [] type at line 1045, col. 21)&&)
# 1045|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [RValueReferenceType] lambda [] type at line 1045, col. 21 &&
# 1045| [Constructor] void (void Lambda(int, String const&))::(lambda [] type at line 1045, col. 21)::(constructor)()
# 1045|   params: 
# 1045| [Destructor] void (void Lambda(int, String const&))::(lambda [] type at line 1045, col. 21)::~<unnamed>()
# 1045|   params: 
#-----|   body: [Block] { ... }
#-----|     0: [ReturnStmt] return ...
# 1045|   destructions: 
# 1045|     0: [DestructorFieldDestruction] destructor field destruction of s
# 1045|         Type = [SpecifiedType] const String
# 1045|         ValueCategory = prvalue
# 1045|       0: [DestructorCall] call to ~String
# 1045|           Type = [VoidType] void
# 1045|           ValueCategory = prvalue
# 1045|         -1: [ImplicitThisFieldAccess] s
# 1045|             Type = [SpecifiedType] const String
# 1045|             ValueCategory = lvalue
# 1045| [ConstMemberFunction] char (void Lambda(int, String const&))::(lambda [] type at line 1045, col. 21)::operator()(float) const
# 1045|   params: 
# 1045|     0: [Parameter] f
# 1045|         Type = [FloatType] float
# 1045|   body: [Block] { ... }
# 1045|     0: [ReturnStmt] return ...
# 1045|       0: [ArrayExpr] access to array
# 1045|           Type = [PlainCharType] char
# 1045|           ValueCategory = prvalue(load)
# 1045|         0: [FunctionCall] call to c_str
# 1045|             Type = [PointerType] const char *
# 1045|             ValueCategory = prvalue
#-----|           -1: [PointerFieldAccess] s
#-----|               Type = [SpecifiedType] const String
#-----|               ValueCategory = lvalue
#-----|             -1: [ThisExpr] this
#-----|                 Type = [PointerType] const lambda [] type at line 1045, col. 21 *
#-----|                 ValueCategory = prvalue(load)
#-----|         1: [PointerFieldAccess] x
#-----|             Type = [IntType] int
#-----|             ValueCategory = prvalue(load)
#-----|           -1: [ThisExpr] this
#-----|               Type = [PointerType] const lambda [] type at line 1045, col. 21 *
#-----|               ValueCategory = prvalue(load)
# 1047| [CopyAssignmentOperator] (void Lambda(int, String const&))::(lambda [] type at line 1047, col. 30)& (void Lambda(int, String const&))::(lambda [] type at line 1047, col. 30)::operator=((void Lambda(int, String const&))::(lambda [] type at line 1047, col. 30) const&)
# 1047|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const lambda [] type at line 1047, col. 30 &
# 1047| [CopyConstructor] void (void Lambda(int, String const&))::(lambda [] type at line 1047, col. 30)::(constructor)((void Lambda(int, String const&))::(lambda [] type at line 1047, col. 30) const&)
# 1047|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const lambda [] type at line 1047, col. 30 &
# 1047| [MoveConstructor] void (void Lambda(int, String const&))::(lambda [] type at line 1047, col. 30)::(constructor)((void Lambda(int, String const&))::(lambda [] type at line 1047, col. 30)&&)
# 1047|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [RValueReferenceType] lambda [] type at line 1047, col. 30 &&
# 1047| [Constructor] void (void Lambda(int, String const&))::(lambda [] type at line 1047, col. 30)::(constructor)()
# 1047|   params: 
# 1047| [ConstMemberFunction] char (void Lambda(int, String const&))::(lambda [] type at line 1047, col. 30)::operator()(float) const
# 1047|   params: 
# 1047|     0: [Parameter] f
# 1047|         Type = [FloatType] float
# 1047|   body: [Block] { ... }
# 1047|     0: [ReturnStmt] return ...
# 1047|       0: [ArrayExpr] access to array
# 1047|           Type = [PlainCharType] char
# 1047|           ValueCategory = prvalue(load)
# 1047|         0: [FunctionCall] call to c_str
# 1047|             Type = [PointerType] const char *
# 1047|             ValueCategory = prvalue
# 1047|           -1: [ReferenceDereferenceExpr] (reference dereference)
# 1047|               Type = [SpecifiedType] const String
# 1047|               ValueCategory = lvalue
#-----|             expr: [PointerFieldAccess] s
#-----|                 Type = [LValueReferenceType] const String &
#-----|                 ValueCategory = prvalue(load)
#-----|               -1: [ThisExpr] this
#-----|                   Type = [PointerType] const lambda [] type at line 1047, col. 30 *
#-----|                   ValueCategory = prvalue(load)
# 1047|         1: [Literal] 0
# 1047|             Type = [IntType] int
# 1047|             Value = [Literal] 0
# 1047|             ValueCategory = prvalue
# 1049| [CopyAssignmentOperator] (void Lambda(int, String const&))::(lambda [] type at line 1049, col. 30)& (void Lambda(int, String const&))::(lambda [] type at line 1049, col. 30)::operator=((void Lambda(int, String const&))::(lambda [] type at line 1049, col. 30) const&)
# 1049|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const lambda [] type at line 1049, col. 30 &
# 1049| [CopyConstructor] void (void Lambda(int, String const&))::(lambda [] type at line 1049, col. 30)::(constructor)((void Lambda(int, String const&))::(lambda [] type at line 1049, col. 30) const&)
# 1049|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const lambda [] type at line 1049, col. 30 &
# 1049| [MoveConstructor] void (void Lambda(int, String const&))::(lambda [] type at line 1049, col. 30)::(constructor)((void Lambda(int, String const&))::(lambda [] type at line 1049, col. 30)&&)
# 1049|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [RValueReferenceType] lambda [] type at line 1049, col. 30 &&
# 1049| [Constructor] void (void Lambda(int, String const&))::(lambda [] type at line 1049, col. 30)::(constructor)()
# 1049|   params: 
# 1049| [Destructor] void (void Lambda(int, String const&))::(lambda [] type at line 1049, col. 30)::~<unnamed>()
# 1049|   params: 
#-----|   body: [Block] { ... }
#-----|     0: [ReturnStmt] return ...
# 1049|   destructions: 
# 1049|     0: [DestructorFieldDestruction] destructor field destruction of s
# 1049|         Type = [SpecifiedType] const String
# 1049|         ValueCategory = prvalue
# 1049|       0: [DestructorCall] call to ~String
# 1049|           Type = [VoidType] void
# 1049|           ValueCategory = prvalue
# 1049|         -1: [ImplicitThisFieldAccess] s
# 1049|             Type = [SpecifiedType] const String
# 1049|             ValueCategory = lvalue
# 1049| [ConstMemberFunction] char (void Lambda(int, String const&))::(lambda [] type at line 1049, col. 30)::operator()(float) const
# 1049|   params: 
# 1049|     0: [Parameter] f
# 1049|         Type = [FloatType] float
# 1049|   body: [Block] { ... }
# 1049|     0: [ReturnStmt] return ...
# 1049|       0: [ArrayExpr] access to array
# 1049|           Type = [PlainCharType] char
# 1049|           ValueCategory = prvalue(load)
# 1049|         0: [FunctionCall] call to c_str
# 1049|             Type = [PointerType] const char *
# 1049|             ValueCategory = prvalue
#-----|           -1: [PointerFieldAccess] s
#-----|               Type = [SpecifiedType] const String
#-----|               ValueCategory = lvalue
#-----|             -1: [ThisExpr] this
#-----|                 Type = [PointerType] const lambda [] type at line 1049, col. 30 *
#-----|                 ValueCategory = prvalue(load)
# 1049|         1: [Literal] 0
# 1049|             Type = [IntType] int
# 1049|             Value = [Literal] 0
# 1049|             ValueCategory = prvalue
# 1051| [CopyAssignmentOperator] (void Lambda(int, String const&))::(lambda [] type at line 1051, col. 32)& (void Lambda(int, String const&))::(lambda [] type at line 1051, col. 32)::operator=((void Lambda(int, String const&))::(lambda [] type at line 1051, col. 32) const&)
# 1051|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const lambda [] type at line 1051, col. 32 &
# 1051| [CopyConstructor] void (void Lambda(int, String const&))::(lambda [] type at line 1051, col. 32)::(constructor)((void Lambda(int, String const&))::(lambda [] type at line 1051, col. 32) const&)
# 1051|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const lambda [] type at line 1051, col. 32 &
# 1051| [MoveConstructor] void (void Lambda(int, String const&))::(lambda [] type at line 1051, col. 32)::(constructor)((void Lambda(int, String const&))::(lambda [] type at line 1051, col. 32)&&)
# 1051|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [RValueReferenceType] lambda [] type at line 1051, col. 32 &&
# 1051| [Constructor] void (void Lambda(int, String const&))::(lambda [] type at line 1051, col. 32)::(constructor)()
# 1051|   params: 
# 1051| [ConstMemberFunction] char (void Lambda(int, String const&))::(lambda [] type at line 1051, col. 32)::operator()(float) const
# 1051|   params: 
# 1051|     0: [Parameter] f
# 1051|         Type = [FloatType] float
# 1051|   body: [Block] { ... }
# 1051|     0: [ReturnStmt] return ...
# 1051|       0: [ArrayExpr] access to array
# 1051|           Type = [PlainCharType] char
# 1051|           ValueCategory = prvalue(load)
# 1051|         0: [FunctionCall] call to c_str
# 1051|             Type = [PointerType] const char *
# 1051|             ValueCategory = prvalue
# 1051|           -1: [ReferenceDereferenceExpr] (reference dereference)
# 1051|               Type = [SpecifiedType] const String
# 1051|               ValueCategory = lvalue
#-----|             expr: [PointerFieldAccess] s
#-----|                 Type = [LValueReferenceType] const String &
#-----|                 ValueCategory = prvalue(load)
#-----|               -1: [ThisExpr] this
#-----|                   Type = [PointerType] const lambda [] type at line 1051, col. 32 *
#-----|                   ValueCategory = prvalue(load)
#-----|         1: [PointerFieldAccess] x
#-----|             Type = [IntType] int
#-----|             ValueCategory = prvalue(load)
#-----|           -1: [ThisExpr] this
#-----|               Type = [PointerType] const lambda [] type at line 1051, col. 32 *
#-----|               ValueCategory = prvalue(load)
# 1054| [CopyAssignmentOperator] (void Lambda(int, String const&))::(lambda [] type at line 1054, col. 23)& (void Lambda(int, String const&))::(lambda [] type at line 1054, col. 23)::operator=((void Lambda(int, String const&))::(lambda [] type at line 1054, col. 23) const&)
# 1054|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const lambda [] type at line 1054, col. 23 &
# 1054| [CopyConstructor] void (void Lambda(int, String const&))::(lambda [] type at line 1054, col. 23)::(constructor)((void Lambda(int, String const&))::(lambda [] type at line 1054, col. 23) const&)
# 1054|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const lambda [] type at line 1054, col. 23 &
# 1054| [MoveConstructor] void (void Lambda(int, String const&))::(lambda [] type at line 1054, col. 23)::(constructor)((void Lambda(int, String const&))::(lambda [] type at line 1054, col. 23)&&)
# 1054|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [RValueReferenceType] lambda [] type at line 1054, col. 23 &&
# 1054| [Constructor] void (void Lambda(int, String const&))::(lambda [] type at line 1054, col. 23)::(constructor)()
# 1054|   params: 
# 1054| [ConstMemberFunction] char (void Lambda(int, String const&))::(lambda [] type at line 1054, col. 23)::operator()(float) const
# 1054|   params: 
# 1054|     0: [Parameter] f
# 1054|         Type = [FloatType] float
# 1054|   body: [Block] { ... }
# 1054|     0: [ReturnStmt] return ...
# 1054|       0: [ArrayExpr] access to array
# 1054|           Type = [PlainCharType] char
# 1054|           ValueCategory = prvalue(load)
# 1054|         0: [FunctionCall] call to c_str
# 1054|             Type = [PointerType] const char *
# 1054|             ValueCategory = prvalue
# 1054|           -1: [ReferenceDereferenceExpr] (reference dereference)
# 1054|               Type = [SpecifiedType] const String
# 1054|               ValueCategory = lvalue
#-----|             expr: [PointerFieldAccess] s
#-----|                 Type = [LValueReferenceType] const String &
#-----|                 ValueCategory = prvalue(load)
#-----|               -1: [ThisExpr] this
#-----|                   Type = [PointerType] const lambda [] type at line 1054, col. 23 *
#-----|                   ValueCategory = prvalue(load)
# 1054|         1: [SubExpr] ... - ...
# 1054|             Type = [IntType] int
# 1054|             ValueCategory = prvalue
# 1054|           0: [AddExpr] ... + ...
# 1054|               Type = [IntType] int
# 1054|               ValueCategory = prvalue
#-----|             0: [PointerFieldAccess] x
#-----|                 Type = [IntType] int
#-----|                 ValueCategory = prvalue(load)
#-----|               -1: [ThisExpr] this
#-----|                   Type = [PointerType] const lambda [] type at line 1054, col. 23 *
#-----|                   ValueCategory = prvalue(load)
# 1054|             1: [PointerFieldAccess] i
# 1054|                 Type = [IntType] int
# 1054|                 ValueCategory = prvalue(load)
#-----|               -1: [ThisExpr] this
#-----|                   Type = [PointerType] const lambda [] type at line 1054, col. 23 *
#-----|                   ValueCategory = prvalue(load)
# 1054|           1: [ReferenceDereferenceExpr] (reference dereference)
# 1054|               Type = [IntType] int
# 1054|               ValueCategory = prvalue(load)
# 1054|             expr: [PointerFieldAccess] j
# 1054|                 Type = [LValueReferenceType] int &
# 1054|                 ValueCategory = prvalue(load)
#-----|               -1: [ThisExpr] this
#-----|                   Type = [PointerType] const lambda [] type at line 1054, col. 23 *
#-----|                   ValueCategory = prvalue(load)
# 1059| [CopyAssignmentOperator] vector<int>& vector<int>::operator=(vector<int> const&)
# 1059|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const vector<int> &
# 1059| [MoveAssignmentOperator] vector<int>& vector<int>::operator=(vector<int>&&)
# 1059|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [RValueReferenceType] vector<int> &&
# 1060| [CopyAssignmentOperator] vector<int>::iterator& vector<int>::iterator::operator=(vector<int>::iterator const public&)
# 1060|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const iterator &
# 1060| [MoveAssignmentOperator] vector<int>::iterator& vector<int>::iterator::operator=(vector<int>::iterator&&)
# 1060|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [RValueReferenceType] iterator &&
# 1062| [MemberFunction] vector<T>::iterator& vector<T>::iterator::operator++()
# 1062|   params: 
# 1062| [MemberFunction] vector<int>::iterator& vector<int>::iterator::operator++()
# 1062|   params: 
# 1063| [ConstMemberFunction] T& vector<T>::iterator::operator*() const
# 1063|   params: 
# 1063| [ConstMemberFunction] int& vector<int>::iterator::operator*() const
# 1063|   params: 
# 1065| [ConstMemberFunction] bool vector<T>::iterator::operator!=(vector<T>::iterator) const
# 1065|   params: 
# 1065|     0: [Parameter] right
# 1065|         Type = [NestedClass,TemplateClass] iterator
# 1065| [ConstMemberFunction] bool vector<int>::iterator::operator!=(vector<int>::iterator) const
# 1065|   params: 
# 1065|     0: [Parameter] right
# 1065|         Type = [NestedStruct] iterator
# 1068| [ConstMemberFunction] vector<T>::iterator vector<T>::begin() const
# 1068|   params: 
# 1068| [ConstMemberFunction] vector<int>::iterator vector<int>::begin() const
# 1068|   params: 
# 1069| [ConstMemberFunction] vector<T>::iterator vector<T>::end() const
# 1069|   params: 
# 1069| [ConstMemberFunction] vector<int>::iterator vector<int>::end() const
# 1069|   params: 
# 1073| [Operator,TemplateFunction,TopLevelFunction] bool operator==<T>(iterator, iterator)
# 1073|   params: 
# 1073|     0: [Parameter] left
# 1073|         Type = [TemplateParameter] iterator
# 1073|     1: [Parameter] right
# 1073|         Type = [TemplateParameter] iterator
# 1075| [Operator,TemplateFunction,TopLevelFunction] bool operator!=<T>(iterator, iterator)
# 1075|   params: 
# 1075|     0: [Parameter] left
# 1075|         Type = [TemplateParameter] iterator
# 1075|     1: [Parameter] right
# 1075|         Type = [TemplateParameter] iterator
# 1077| [TopLevelFunction] void RangeBasedFor(vector<int> const&)
# 1077|   params: 
# 1077|     0: [Parameter] v
# 1077|         Type = [LValueReferenceType] const vector<int> &
# 1077|   body: [Block] { ... }
# 1078|     0: [RangeBasedForStmt] for(...:...) ...
# 1078|       0: [DeclStmt] declaration
# 1078|       1: [DeclStmt] declaration
# 1078|       2: [FunctionCall] call to operator!=
# 1078|           Type = [BoolType] bool
# 1078|           ValueCategory = prvalue
#-----|         -1: [CStyleCast] (const iterator)...
#-----|             Conversion = [GlvalueConversion] glvalue conversion
#-----|             Type = [SpecifiedType] const iterator
#-----|             ValueCategory = lvalue
#-----|           expr: [VariableAccess] (__begin)
#-----|               Type = [NestedStruct] iterator
#-----|               ValueCategory = lvalue
#-----|         0: [VariableAccess] (__end)
#-----|             Type = [NestedStruct] iterator
#-----|             ValueCategory = prvalue(load)
# 1078|       3: [ReferenceDereferenceExpr] (reference dereference)
# 1078|           Type = [NestedStruct] iterator
# 1078|           ValueCategory = lvalue
# 1078|         expr: [FunctionCall] call to operator++
# 1078|             Type = [LValueReferenceType] iterator &
# 1078|             ValueCategory = prvalue
#-----|           -1: [VariableAccess] (__begin)
#-----|               Type = [NestedStruct] iterator
#-----|               ValueCategory = lvalue
# 1078|       4: [DeclStmt] declaration
# 1078|       5: [Block] { ... }
# 1079|         0: [IfStmt] if (...) ... 
# 1079|           0: [GTExpr] ... > ...
# 1079|               Type = [BoolType] bool
# 1079|               ValueCategory = prvalue
# 1079|             0: [VariableAccess] e
# 1079|                 Type = [IntType] int
# 1079|                 ValueCategory = prvalue(load)
# 1079|             1: [Literal] 0
# 1079|                 Type = [IntType] int
# 1079|                 Value = [Literal] 0
# 1079|                 ValueCategory = prvalue
# 1079|           1: [Block] { ... }
# 1080|             0: [ContinueStmt] continue;
# 1078|         1: [LabelStmt] label ...:
# 1084|     1: [RangeBasedForStmt] for(...:...) ...
# 1084|       0: [DeclStmt] declaration
# 1084|       1: [DeclStmt] declaration
# 1084|       2: [FunctionCall] call to operator!=
# 1084|           Type = [BoolType] bool
# 1084|           ValueCategory = prvalue
#-----|         -1: [CStyleCast] (const iterator)...
#-----|             Conversion = [GlvalueConversion] glvalue conversion
#-----|             Type = [SpecifiedType] const iterator
#-----|             ValueCategory = lvalue
#-----|           expr: [VariableAccess] (__begin)
#-----|               Type = [NestedStruct] iterator
#-----|               ValueCategory = lvalue
#-----|         0: [VariableAccess] (__end)
#-----|             Type = [NestedStruct] iterator
#-----|             ValueCategory = prvalue(load)
# 1084|       3: [ReferenceDereferenceExpr] (reference dereference)
# 1084|           Type = [NestedStruct] iterator
# 1084|           ValueCategory = lvalue
# 1084|         expr: [FunctionCall] call to operator++
# 1084|             Type = [LValueReferenceType] iterator &
# 1084|             ValueCategory = prvalue
#-----|           -1: [VariableAccess] (__begin)
#-----|               Type = [NestedStruct] iterator
#-----|               ValueCategory = lvalue
# 1084|       4: [DeclStmt] declaration
# 1084|       5: [Block] { ... }
# 1085|         0: [IfStmt] if (...) ... 
# 1085|           0: [LTExpr] ... < ...
# 1085|               Type = [BoolType] bool
# 1085|               ValueCategory = prvalue
# 1085|             0: [ReferenceDereferenceExpr] (reference dereference)
# 1085|                 Type = [IntType] int
# 1085|                 ValueCategory = prvalue(load)
# 1085|               expr: [VariableAccess] e
# 1085|                   Type = [LValueReferenceType] const int &
# 1085|                   ValueCategory = prvalue(load)
# 1085|             1: [Literal] 5
# 1085|                 Type = [IntType] int
# 1085|                 Value = [Literal] 5
# 1085|                 ValueCategory = prvalue
# 1085|           1: [Block] { ... }
# 1086|             0: [BreakStmt] break;
# 1088|     2: [LabelStmt] label ...:
# 1089|     3: [ReturnStmt] return ...
# 1108| [TopLevelFunction] int AsmStmt(int)
# 1108|   params: 
# 1108|     0: [Parameter] x
# 1108|         Type = [IntType] int
# 1108|   body: [Block] { ... }
# 1109|     0: [AsmStmt] asm statement
# 1110|     1: [ReturnStmt] return ...
# 1110|       0: [VariableAccess] x
# 1110|           Type = [IntType] int
# 1110|           ValueCategory = prvalue(load)
# 1113| [TopLevelFunction] void AsmStmtWithOutputs(unsigned int&, unsigned int, unsigned int&, unsigned int)
# 1113|   params: 
# 1113|     0: [Parameter] a
# 1113|         Type = [LValueReferenceType] unsigned int &
# 1113|     1: [Parameter] b
# 1113|         Type = [IntType] unsigned int
# 1113|     2: [Parameter] c
# 1113|         Type = [LValueReferenceType] unsigned int &
# 1113|     3: [Parameter] d
# 1113|         Type = [IntType] unsigned int
# 1114|   body: [Block] { ... }
# 1115|     0: [AsmStmt] asm statement
# 1118|       0: [ReferenceDereferenceExpr] (reference dereference)
# 1118|           Type = [IntType] unsigned int
# 1118|           ValueCategory = lvalue
# 1118|         expr: [VariableAccess] a
# 1118|             Type = [LValueReferenceType] unsigned int &
# 1118|             ValueCategory = prvalue(load)
# 1118|       1: [VariableAccess] b
# 1118|           Type = [IntType] unsigned int
# 1118|           ValueCategory = lvalue
# 1118|       2: [ReferenceDereferenceExpr] (reference dereference)
# 1118|           Type = [IntType] unsigned int
# 1118|           ValueCategory = prvalue(load)
# 1118|         expr: [VariableAccess] c
# 1118|             Type = [LValueReferenceType] unsigned int &
# 1118|             ValueCategory = prvalue(load)
# 1118|       3: [VariableAccess] d
# 1118|           Type = [IntType] unsigned int
# 1118|           ValueCategory = prvalue(load)
# 1120|     1: [ReturnStmt] return ...
# 1122| [TopLevelFunction] void ExternDeclarations()
# 1122|   params: 
# 1123|   body: [Block] { ... }
# 1124|     0: [DeclStmt] declaration
# 1124|       0: [VariableDeclarationEntry] declaration of g
# 1124|           Type = [IntType] int
# 1125|     1: [DeclStmt] declaration
# 1125|       0: [VariableDeclarationEntry] definition of x
# 1125|           Type = [IntType] int
# 1126|     2: [DeclStmt] declaration
# 1126|       0: [VariableDeclarationEntry] definition of y
# 1126|           Type = [IntType] int
# 1126|       1: [FunctionDeclarationEntry] declaration of f
# 1126|           Type = [IntType] int
# 1127|     3: [DeclStmt] declaration
# 1127|       0: [FunctionDeclarationEntry] declaration of z
# 1127|           Type = [IntType] int
# 1127|       1: [FunctionDeclarationEntry] declaration of w
# 1127|           Type = [IntType] int
# 1127|       2: [VariableDeclarationEntry] definition of h
# 1127|           Type = [IntType] int
# 1128|     4: [DeclStmt] declaration
# 1128|       0: [TypeDeclarationEntry] declaration of d
# 1128|           Type = [CTypedefType,LocalTypedefType] d
# 1129|     5: [ReturnStmt] return ...
# 1126| [TopLevelFunction] int f(float)
# 1126|   params: 
# 1126|     0: [Parameter] p#0
# 1126|         Type = [FloatType] float
# 1127| [TopLevelFunction] int z(float)
# 1127|   params: 
# 1127|     0: [Parameter] p#0
# 1127|         Type = [FloatType] float
# 1127| [TopLevelFunction] int w(float)
# 1127|   params: 
# 1127|     0: [Parameter] p#0
# 1127|         Type = [FloatType] float
# 1137| [TopLevelFunction] void ExternDeclarationsInMacro()
# 1137|   params: 
# 1138|   body: [Block] { ... }
# 1139|     0: [DeclStmt] declaration
# 1139|       0: [VariableDeclarationEntry] declaration of g
# 1139|           Type = [IntType] int
# 1139|     1: [ForStmt] for(...;...;...) ...
# 1139|       0: [DeclStmt] declaration
# 1139|         0: [VariableDeclarationEntry] definition of i
# 1139|             Type = [IntType] int
# 1139|           init: [Initializer] initializer for i
# 1139|             expr: [Literal] 0
# 1139|                 Type = [IntType] int
# 1139|                 Value = [Literal] 0
# 1139|                 ValueCategory = prvalue
# 1139|       1: [LTExpr] ... < ...
# 1139|           Type = [BoolType] bool
# 1139|           ValueCategory = prvalue
# 1139|         0: [VariableAccess] i
# 1139|             Type = [IntType] int
# 1139|             ValueCategory = prvalue(load)
# 1139|         1: [Literal] 10
# 1139|             Type = [IntType] int
# 1139|             Value = [Literal] 10
# 1139|             ValueCategory = prvalue
# 1139|       2: [PrefixIncrExpr] ++ ...
# 1139|           Type = [IntType] int
# 1139|           ValueCategory = lvalue
# 1139|         0: [VariableAccess] i
# 1139|             Type = [IntType] int
# 1139|             ValueCategory = lvalue
# 1139|       3: [Block] { ... }
# 1139|         0: [DeclStmt] declaration
# 1139|           0: [VariableDeclarationEntry] declaration of g
# 1139|               Type = [IntType] int
# 1139|     2: [EmptyStmt] ;
# 1140|     3: [ReturnStmt] return ...
# 1142| [TopLevelFunction] void TryCatchNoCatchAny(bool)
# 1142|   params: 
# 1142|     0: [Parameter] b
# 1142|         Type = [BoolType] bool
# 1142|   body: [Block] { ... }
# 1143|     0: [TryStmt] try { ... }
# 1143|       0: [Block] { ... }
# 1144|         0: [DeclStmt] declaration
# 1144|           0: [VariableDeclarationEntry] definition of x
# 1144|               Type = [IntType] int
# 1144|             init: [Initializer] initializer for x
# 1144|               expr: [Literal] 5
# 1144|                   Type = [IntType] int
# 1144|                   Value = [Literal] 5
# 1144|                   ValueCategory = prvalue
# 1145|         1: [IfStmt] if (...) ... 
# 1145|           0: [VariableAccess] b
# 1145|               Type = [BoolType] bool
# 1145|               ValueCategory = prvalue(load)
# 1145|           1: [Block] { ... }
# 1146|             0: [ExprStmt] ExprStmt
# 1146|               0: [ThrowExpr] throw ...
# 1146|                   Type = [PointerType] const char *
# 1146|                   ValueCategory = prvalue
# 1146|                 0: [ArrayToPointerConversion] array to pointer conversion
# 1146|                     Type = [PointerType] const char *
# 1146|                     ValueCategory = prvalue
# 1146|                   expr: string literal
# 1146|                       Type = [ArrayType] const char[15]
# 1146|                       Value = [StringLiteral] "string literal"
# 1146|                       ValueCategory = lvalue
# 1148|           2: [IfStmt] if (...) ... 
# 1148|             0: [LTExpr] ... < ...
# 1148|                 Type = [BoolType] bool
# 1148|                 ValueCategory = prvalue
# 1148|               0: [VariableAccess] x
# 1148|                   Type = [IntType] int
# 1148|                   ValueCategory = prvalue(load)
# 1148|               1: [Literal] 2
# 1148|                   Type = [IntType] int
# 1148|                   Value = [Literal] 2
# 1148|                   ValueCategory = prvalue
# 1148|             1: [Block] { ... }
# 1149|               0: [ExprStmt] ExprStmt
# 1149|                 0: [AssignExpr] ... = ...
# 1149|                     Type = [IntType] int
# 1149|                     ValueCategory = lvalue
# 1149|                   0: [VariableAccess] x
# 1149|                       Type = [IntType] int
# 1149|                       ValueCategory = lvalue
# 1149|                   1: [ConditionalExpr] ... ? ... : ...
# 1149|                       Type = [IntType] int
# 1149|                       ValueCategory = prvalue
# 1149|                     0: [VariableAccess] b
# 1149|                         Type = [BoolType] bool
# 1149|                         ValueCategory = prvalue(load)
# 1149|                     1: [Literal] 7
# 1149|                         Type = [IntType] int
# 1149|                         Value = [Literal] 7
# 1149|                         ValueCategory = prvalue
# 1149|                     2: [ThrowExpr] throw ...
# 1149|                         Type = [Struct] String
# 1149|                         ValueCategory = prvalue
# 1149|                       0: [ConstructorCall] call to String
# 1149|                           Type = [VoidType] void
# 1149|                           ValueCategory = prvalue
# 1149|                         0: [ArrayToPointerConversion] array to pointer conversion
# 1149|                             Type = [PointerType] const char *
# 1149|                             ValueCategory = prvalue
# 1149|                           expr: String object
# 1149|                               Type = [ArrayType] const char[14]
# 1149|                               Value = [StringLiteral] "String object"
# 1149|                               ValueCategory = lvalue
# 1151|         2: [ExprStmt] ExprStmt
# 1151|           0: [AssignExpr] ... = ...
# 1151|               Type = [IntType] int
# 1151|               ValueCategory = lvalue
# 1151|             0: [VariableAccess] x
# 1151|                 Type = [IntType] int
# 1151|                 ValueCategory = lvalue
# 1151|             1: [Literal] 7
# 1151|                 Type = [IntType] int
# 1151|                 Value = [Literal] 7
# 1151|                 ValueCategory = prvalue
# 1153|       1: [Handler] <handler>
# 1153|         0: [CatchBlock] { ... }
# 1154|           0: [ExprStmt] ExprStmt
# 1154|             0: [ThrowExpr] throw ...
# 1154|                 Type = [Struct] String
# 1154|                 ValueCategory = prvalue
# 1154|               0: [ConstructorCall] call to String
# 1154|                   Type = [VoidType] void
# 1154|                   ValueCategory = prvalue
# 1154|                 0: [VariableAccess] s
# 1154|                     Type = [PointerType] const char *
# 1154|                     ValueCategory = prvalue(load)
# 1156|       2: [Handler] <handler>
# 1156|         0: [CatchBlock] { ... }
# 1158|     1: [ReturnStmt] return ...
# 1162| [TopLevelFunction] void VectorTypes(int)
# 1162|   params: 
# 1162|     0: [Parameter] i
# 1162|         Type = [IntType] int
# 1162|   body: [Block] { ... }
# 1163|     0: [DeclStmt] declaration
# 1163|       0: [VariableDeclarationEntry] definition of vi4
# 1163|           Type = [SpecifiedType] __attribute((vector_size(16UL))) int
# 1163|         init: [Initializer] initializer for vi4
# 1163|           expr: [VectorAggregateLiteral] {...}
# 1163|               Type = [GNUVectorType] __attribute((vector_size(16UL))) int
# 1163|               ValueCategory = prvalue
# 1163|             0: [Literal] 0
# 1163|                 Type = [IntType] int
# 1163|                 Value = [Literal] 0
# 1163|                 ValueCategory = prvalue
# 1163|             1: [Literal] 1
# 1163|                 Type = [IntType] int
# 1163|                 Value = [Literal] 1
# 1163|                 ValueCategory = prvalue
# 1163|             2: [Literal] 2
# 1163|                 Type = [IntType] int
# 1163|                 Value = [Literal] 2
# 1163|                 ValueCategory = prvalue
# 1163|             3: [Literal] 3
# 1163|                 Type = [IntType] int
# 1163|                 Value = [Literal] 3
# 1163|                 ValueCategory = prvalue
# 1164|     1: [DeclStmt] declaration
# 1164|       0: [VariableDeclarationEntry] definition of x
# 1164|           Type = [IntType] int
# 1164|         init: [Initializer] initializer for x
# 1164|           expr: [ArrayExpr] access to array
# 1164|               Type = [IntType] int
# 1164|               ValueCategory = prvalue(load)
# 1164|             0: [VariableAccess] vi4
# 1164|                 Type = [SpecifiedType] __attribute((vector_size(16UL))) int
# 1164|                 ValueCategory = lvalue
# 1164|             1: [VariableAccess] i
# 1164|                 Type = [IntType] int
# 1164|                 ValueCategory = prvalue(load)
# 1165|     2: [ExprStmt] ExprStmt
# 1165|       0: [AssignExpr] ... = ...
# 1165|           Type = [IntType] int
# 1165|           ValueCategory = lvalue
# 1165|         0: [ArrayExpr] access to array
# 1165|             Type = [IntType] int
# 1165|             ValueCategory = lvalue
# 1165|           0: [VariableAccess] vi4
# 1165|               Type = [SpecifiedType] __attribute((vector_size(16UL))) int
# 1165|               ValueCategory = lvalue
# 1165|           1: [VariableAccess] i
# 1165|               Type = [IntType] int
# 1165|               ValueCategory = prvalue(load)
# 1165|         1: [VariableAccess] x
# 1165|             Type = [IntType] int
# 1165|             ValueCategory = prvalue(load)
# 1166|     3: [DeclStmt] declaration
# 1166|       0: [VariableDeclarationEntry] definition of vi4_shuffle
# 1166|           Type = [SpecifiedType] __attribute((vector_size(16UL))) int
# 1166|         init: [Initializer] initializer for vi4_shuffle
# 1166|           expr: [BuiltInOperationBuiltInShuffleVector] __builtin_shufflevector
# 1166|               Type = [GNUVectorType] __attribute((vector_size(16))) int
# 1166|               ValueCategory = prvalue
# 1166|             0: [VariableAccess] vi4
# 1166|                 Type = [SpecifiedType] __attribute((vector_size(16UL))) int
# 1166|                 ValueCategory = prvalue(load)
# 1166|             1: [VariableAccess] vi4
# 1166|                 Type = [SpecifiedType] __attribute((vector_size(16UL))) int
# 1166|                 ValueCategory = prvalue(load)
#-----|             2: [AddExpr] ... + ...
#-----|                 Type = [IntType] int
#-----|                 Value = [AddExpr] 3
#-----|                 ValueCategory = prvalue
# 1166|               0: [Literal] 3
# 1166|                   Type = [IntType] int
# 1166|                   Value = [Literal] 3
# 1166|                   ValueCategory = prvalue
# 1166|               1: [Literal] 0
# 1166|                   Type = [IntType] int
# 1166|                   Value = [Literal] 0
# 1166|                   ValueCategory = prvalue
# 1166|             3: [Literal] 2
# 1166|                 Type = [IntType] int
# 1166|                 Value = [Literal] 2
# 1166|                 ValueCategory = prvalue
# 1166|             4: [Literal] 1
# 1166|                 Type = [IntType] int
# 1166|                 Value = [Literal] 1
# 1166|                 ValueCategory = prvalue
# 1166|             5: [Literal] 0
# 1166|                 Type = [IntType] int
# 1166|                 Value = [Literal] 0
# 1166|                 ValueCategory = prvalue
# 1167|     4: [ExprStmt] ExprStmt
# 1167|       0: [AssignExpr] ... = ...
# 1167|           Type = [SpecifiedType] __attribute((vector_size(16UL))) int
# 1167|           ValueCategory = lvalue
# 1167|         0: [VariableAccess] vi4
# 1167|             Type = [SpecifiedType] __attribute((vector_size(16UL))) int
# 1167|             ValueCategory = lvalue
# 1167|         1: [AddExpr] ... + ...
# 1167|             Type = [GNUVectorType] __attribute((vector_size(16UL))) int
# 1167|             ValueCategory = prvalue
# 1167|           0: [VariableAccess] vi4
# 1167|               Type = [SpecifiedType] __attribute((vector_size(16UL))) int
# 1167|               ValueCategory = prvalue(load)
# 1167|           1: [VariableAccess] vi4_shuffle
# 1167|               Type = [SpecifiedType] __attribute((vector_size(16UL))) int
# 1167|               ValueCategory = prvalue(load)
# 1168|     5: [ReturnStmt] return ...
# 1170| [TopLevelFunction] void* memcpy(void*, void*, int)
# 1170|   params: 
# 1170|     0: [Parameter] dst
# 1170|         Type = [VoidPointerType] void *
# 1170|     1: [Parameter] src
# 1170|         Type = [VoidPointerType] void *
# 1170|     2: [Parameter] size
# 1170|         Type = [IntType] int
# 1172| [TopLevelFunction] int ModeledCallTarget(int)
# 1172|   params: 
# 1172|     0: [Parameter] x
# 1172|         Type = [IntType] int
# 1172|   body: [Block] { ... }
# 1173|     0: [DeclStmt] declaration
# 1173|       0: [VariableDeclarationEntry] definition of y
# 1173|           Type = [IntType] int
# 1174|     1: [ExprStmt] ExprStmt
# 1174|       0: [FunctionCall] call to memcpy
# 1174|           Type = [VoidPointerType] void *
# 1174|           ValueCategory = prvalue
# 1174|         0: [CStyleCast] (void *)...
# 1174|             Conversion = [PointerConversion] pointer conversion
# 1174|             Type = [VoidPointerType] void *
# 1174|             ValueCategory = prvalue
# 1174|           expr: [AddressOfExpr] & ...
# 1174|               Type = [IntPointerType] int *
# 1174|               ValueCategory = prvalue
# 1174|             0: [VariableAccess] y
# 1174|                 Type = [IntType] int
# 1174|                 ValueCategory = lvalue
# 1174|         1: [CStyleCast] (void *)...
# 1174|             Conversion = [PointerConversion] pointer conversion
# 1174|             Type = [VoidPointerType] void *
# 1174|             ValueCategory = prvalue
# 1174|           expr: [AddressOfExpr] & ...
# 1174|               Type = [IntPointerType] int *
# 1174|               ValueCategory = prvalue
# 1174|             0: [VariableAccess] x
# 1174|                 Type = [IntType] int
# 1174|                 ValueCategory = lvalue
# 1174|         2: [CStyleCast] (int)...
# 1174|             Conversion = [IntegralConversion] integral conversion
# 1174|             Type = [IntType] int
# 1174|             Value = [CStyleCast] 4
# 1174|             ValueCategory = prvalue
# 1174|           expr: [SizeofTypeOperator] sizeof(int)
# 1174|               Type = [LongType] unsigned long
# 1174|               Value = [SizeofTypeOperator] 4
# 1174|               ValueCategory = prvalue
# 1175|     2: [ReturnStmt] return ...
# 1175|       0: [VariableAccess] y
# 1175|           Type = [IntType] int
# 1175|           ValueCategory = prvalue(load)
# 1178| [TopLevelFunction] String ReturnObjectImpl()
# 1178|   params: 
# 1178|   body: [Block] { ... }
# 1179|     0: [ReturnStmt] return ...
# 1179|       0: [ConstructorCall] call to String
# 1179|           Type = [Struct] String
# 1179|           ValueCategory = prvalue
# 1179|         0: [ArrayToPointerConversion] array to pointer conversion
# 1179|             Type = [PointerType] const char *
# 1179|             ValueCategory = prvalue
# 1179|           expr: foo
# 1179|               Type = [ArrayType] const char[4]
# 1179|               Value = [StringLiteral] "foo"
# 1179|               ValueCategory = lvalue
# 1182| [TopLevelFunction] void switch1Case(int)
# 1182|   params: 
# 1182|     0: [Parameter] x
# 1182|         Type = [IntType] int
# 1182|   body: [Block] { ... }
# 1183|     0: [DeclStmt] declaration
# 1183|       0: [VariableDeclarationEntry] definition of y
# 1183|           Type = [IntType] int
# 1183|         init: [Initializer] initializer for y
# 1183|           expr: [Literal] 0
# 1183|               Type = [IntType] int
# 1183|               Value = [Literal] 0
# 1183|               ValueCategory = prvalue
# 1184|     1: [SwitchStmt] switch (...) ... 
# 1184|       0: [VariableAccess] x
# 1184|           Type = [IntType] int
# 1184|           ValueCategory = prvalue(load)
# 1184|       1: [Block] { ... }
# 1185|         0: [SwitchCase] case ...:
# 1185|           0: [Literal] 1
# 1185|               Type = [IntType] int
# 1185|               Value = [Literal] 1
# 1185|               ValueCategory = prvalue
# 1186|         1: [ExprStmt] ExprStmt
# 1186|           0: [AssignExpr] ... = ...
# 1186|               Type = [IntType] int
# 1186|               ValueCategory = lvalue
# 1186|             0: [VariableAccess] y
# 1186|                 Type = [IntType] int
# 1186|                 ValueCategory = lvalue
# 1186|             1: [Literal] 2
# 1186|                 Type = [IntType] int
# 1186|                 Value = [Literal] 2
# 1186|                 ValueCategory = prvalue
# 1188|     2: [DeclStmt] declaration
# 1188|       0: [VariableDeclarationEntry] definition of z
# 1188|           Type = [IntType] int
# 1188|         init: [Initializer] initializer for z
# 1188|           expr: [VariableAccess] y
# 1188|               Type = [IntType] int
# 1188|               ValueCategory = prvalue(load)
# 1189|     3: [ReturnStmt] return ...
# 1191| [TopLevelFunction] void switch2Case_fallthrough(int)
# 1191|   params: 
# 1191|     0: [Parameter] x
# 1191|         Type = [IntType] int
# 1191|   body: [Block] { ... }
# 1192|     0: [DeclStmt] declaration
# 1192|       0: [VariableDeclarationEntry] definition of y
# 1192|           Type = [IntType] int
# 1192|         init: [Initializer] initializer for y
# 1192|           expr: [Literal] 0
# 1192|               Type = [IntType] int
# 1192|               Value = [Literal] 0
# 1192|               ValueCategory = prvalue
# 1193|     1: [SwitchStmt] switch (...) ... 
# 1193|       0: [VariableAccess] x
# 1193|           Type = [IntType] int
# 1193|           ValueCategory = prvalue(load)
# 1193|       1: [Block] { ... }
# 1194|         0: [SwitchCase] case ...:
# 1194|           0: [Literal] 1
# 1194|               Type = [IntType] int
# 1194|               Value = [Literal] 1
# 1194|               ValueCategory = prvalue
# 1195|         1: [ExprStmt] ExprStmt
# 1195|           0: [AssignExpr] ... = ...
# 1195|               Type = [IntType] int
# 1195|               ValueCategory = lvalue
# 1195|             0: [VariableAccess] y
# 1195|                 Type = [IntType] int
# 1195|                 ValueCategory = lvalue
# 1195|             1: [Literal] 2
# 1195|                 Type = [IntType] int
# 1195|                 Value = [Literal] 2
# 1195|                 ValueCategory = prvalue
# 1196|         2: [SwitchCase] case ...:
# 1196|           0: [Literal] 2
# 1196|               Type = [IntType] int
# 1196|               Value = [Literal] 2
# 1196|               ValueCategory = prvalue
# 1197|         3: [ExprStmt] ExprStmt
# 1197|           0: [AssignExpr] ... = ...
# 1197|               Type = [IntType] int
# 1197|               ValueCategory = lvalue
# 1197|             0: [VariableAccess] y
# 1197|                 Type = [IntType] int
# 1197|                 ValueCategory = lvalue
# 1197|             1: [Literal] 3
# 1197|                 Type = [IntType] int
# 1197|                 Value = [Literal] 3
# 1197|                 ValueCategory = prvalue
# 1199|     2: [DeclStmt] declaration
# 1199|       0: [VariableDeclarationEntry] definition of z
# 1199|           Type = [IntType] int
# 1199|         init: [Initializer] initializer for z
# 1199|           expr: [VariableAccess] y
# 1199|               Type = [IntType] int
# 1199|               ValueCategory = prvalue(load)
# 1200|     3: [ReturnStmt] return ...
# 1202| [TopLevelFunction] void switch2Case(int)
# 1202|   params: 
# 1202|     0: [Parameter] x
# 1202|         Type = [IntType] int
# 1202|   body: [Block] { ... }
# 1203|     0: [DeclStmt] declaration
# 1203|       0: [VariableDeclarationEntry] definition of y
# 1203|           Type = [IntType] int
# 1203|         init: [Initializer] initializer for y
# 1203|           expr: [Literal] 0
# 1203|               Type = [IntType] int
# 1203|               Value = [Literal] 0
# 1203|               ValueCategory = prvalue
# 1204|     1: [SwitchStmt] switch (...) ... 
# 1204|       0: [VariableAccess] x
# 1204|           Type = [IntType] int
# 1204|           ValueCategory = prvalue(load)
# 1204|       1: [Block] { ... }
# 1205|         0: [SwitchCase] case ...:
# 1205|           0: [Literal] 1
# 1205|               Type = [IntType] int
# 1205|               Value = [Literal] 1
# 1205|               ValueCategory = prvalue
# 1206|         1: [ExprStmt] ExprStmt
# 1206|           0: [AssignExpr] ... = ...
# 1206|               Type = [IntType] int
# 1206|               ValueCategory = lvalue
# 1206|             0: [VariableAccess] y
# 1206|                 Type = [IntType] int
# 1206|                 ValueCategory = lvalue
# 1206|             1: [Literal] 2
# 1206|                 Type = [IntType] int
# 1206|                 Value = [Literal] 2
# 1206|                 ValueCategory = prvalue
# 1207|         2: [BreakStmt] break;
# 1208|         3: [SwitchCase] case ...:
# 1208|           0: [Literal] 2
# 1208|               Type = [IntType] int
# 1208|               Value = [Literal] 2
# 1208|               ValueCategory = prvalue
# 1209|         4: [ExprStmt] ExprStmt
# 1209|           0: [AssignExpr] ... = ...
# 1209|               Type = [IntType] int
# 1209|               ValueCategory = lvalue
# 1209|             0: [VariableAccess] y
# 1209|                 Type = [IntType] int
# 1209|                 ValueCategory = lvalue
# 1209|             1: [Literal] 3
# 1209|                 Type = [IntType] int
# 1209|                 Value = [Literal] 3
# 1209|                 ValueCategory = prvalue
# 1210|     2: [LabelStmt] label ...:
# 1211|     3: [DeclStmt] declaration
# 1211|       0: [VariableDeclarationEntry] definition of z
# 1211|           Type = [IntType] int
# 1211|         init: [Initializer] initializer for z
# 1211|           expr: [VariableAccess] y
# 1211|               Type = [IntType] int
# 1211|               ValueCategory = prvalue(load)
# 1212|     4: [ReturnStmt] return ...
# 1214| [TopLevelFunction] void switch2Case_default(int)
# 1214|   params: 
# 1214|     0: [Parameter] x
# 1214|         Type = [IntType] int
# 1214|   body: [Block] { ... }
# 1215|     0: [DeclStmt] declaration
# 1215|       0: [VariableDeclarationEntry] definition of y
# 1215|           Type = [IntType] int
# 1215|         init: [Initializer] initializer for y
# 1215|           expr: [Literal] 0
# 1215|               Type = [IntType] int
# 1215|               Value = [Literal] 0
# 1215|               ValueCategory = prvalue
# 1216|     1: [SwitchStmt] switch (...) ... 
# 1216|       0: [VariableAccess] x
# 1216|           Type = [IntType] int
# 1216|           ValueCategory = prvalue(load)
# 1216|       1: [Block] { ... }
# 1217|         0: [SwitchCase] case ...:
# 1217|           0: [Literal] 1
# 1217|               Type = [IntType] int
# 1217|               Value = [Literal] 1
# 1217|               ValueCategory = prvalue
# 1218|         1: [ExprStmt] ExprStmt
# 1218|           0: [AssignExpr] ... = ...
# 1218|               Type = [IntType] int
# 1218|               ValueCategory = lvalue
# 1218|             0: [VariableAccess] y
# 1218|                 Type = [IntType] int
# 1218|                 ValueCategory = lvalue
# 1218|             1: [Literal] 2
# 1218|                 Type = [IntType] int
# 1218|                 Value = [Literal] 2
# 1218|                 ValueCategory = prvalue
# 1219|         2: [BreakStmt] break;
# 1221|         3: [SwitchCase] case ...:
# 1221|           0: [Literal] 2
# 1221|               Type = [IntType] int
# 1221|               Value = [Literal] 2
# 1221|               ValueCategory = prvalue
# 1222|         4: [ExprStmt] ExprStmt
# 1222|           0: [AssignExpr] ... = ...
# 1222|               Type = [IntType] int
# 1222|               ValueCategory = lvalue
# 1222|             0: [VariableAccess] y
# 1222|                 Type = [IntType] int
# 1222|                 ValueCategory = lvalue
# 1222|             1: [Literal] 3
# 1222|                 Type = [IntType] int
# 1222|                 Value = [Literal] 3
# 1222|                 ValueCategory = prvalue
# 1223|         5: [BreakStmt] break;
# 1225|         6: [SwitchCase] default: 
# 1226|         7: [ExprStmt] ExprStmt
# 1226|           0: [AssignExpr] ... = ...
# 1226|               Type = [IntType] int
# 1226|               ValueCategory = lvalue
# 1226|             0: [VariableAccess] y
# 1226|                 Type = [IntType] int
# 1226|                 ValueCategory = lvalue
# 1226|             1: [Literal] 4
# 1226|                 Type = [IntType] int
# 1226|                 Value = [Literal] 4
# 1226|                 ValueCategory = prvalue
# 1227|     2: [LabelStmt] label ...:
# 1228|     3: [DeclStmt] declaration
# 1228|       0: [VariableDeclarationEntry] definition of z
# 1228|           Type = [IntType] int
# 1228|         init: [Initializer] initializer for z
# 1228|           expr: [VariableAccess] y
# 1228|               Type = [IntType] int
# 1228|               ValueCategory = prvalue(load)
# 1229|     4: [ReturnStmt] return ...
# 1231| [TopLevelFunction] int staticLocalInit(int)
# 1231|   params: 
# 1231|     0: [Parameter] x
# 1231|         Type = [IntType] int
# 1231|   body: [Block] { ... }
# 1232|     0: [DeclStmt] declaration
# 1232|       0: [VariableDeclarationEntry] definition of a
# 1232|           Type = [IntType] int
# 1232|         init: [Initializer] initializer for a
# 1232|           expr: [Literal] 0
# 1232|               Type = [IntType] int
# 1232|               Value = [Literal] 0
# 1232|               ValueCategory = prvalue
# 1233|     1: [DeclStmt] declaration
# 1233|       0: [VariableDeclarationEntry] definition of b
# 1233|           Type = [IntType] int
# 1233|         init: [Initializer] initializer for b
# 1233|           expr: [CStyleCast] (int)...
# 1233|               Conversion = [IntegralConversion] integral conversion
# 1233|               Type = [IntType] int
# 1233|               Value = [CStyleCast] 4
# 1233|               ValueCategory = prvalue
# 1233|             expr: [SizeofExprOperator] sizeof(<expr>)
# 1233|                 Type = [LongType] unsigned long
# 1233|                 Value = [SizeofExprOperator] 4
# 1233|                 ValueCategory = prvalue
# 1233|               0: [ParenthesisExpr] (...)
# 1233|                   Type = [IntType] int
# 1233|                   ValueCategory = lvalue
# 1233|                 expr: [VariableAccess] x
# 1233|                     Type = [IntType] int
# 1233|                     ValueCategory = lvalue
# 1234|     2: [DeclStmt] declaration
# 1234|       0: [VariableDeclarationEntry] definition of c
# 1234|           Type = [IntType] int
# 1234|         init: [Initializer] initializer for c
# 1234|           expr: [VariableAccess] x
# 1234|               Type = [IntType] int
# 1234|               ValueCategory = prvalue(load)
# 1235|     3: [DeclStmt] declaration
# 1235|       0: [VariableDeclarationEntry] definition of d
# 1235|           Type = [IntType] int
# 1237|     4: [ReturnStmt] return ...
# 1237|       0: [AddExpr] ... + ...
# 1237|           Type = [IntType] int
# 1237|           ValueCategory = prvalue
# 1237|         0: [AddExpr] ... + ...
# 1237|             Type = [IntType] int
# 1237|             ValueCategory = prvalue
# 1237|           0: [AddExpr] ... + ...
# 1237|               Type = [IntType] int
# 1237|               ValueCategory = prvalue
# 1237|             0: [VariableAccess] a
# 1237|                 Type = [IntType] int
# 1237|                 ValueCategory = prvalue(load)
# 1237|             1: [VariableAccess] b
# 1237|                 Type = [IntType] int
# 1237|                 ValueCategory = prvalue(load)
# 1237|           1: [VariableAccess] c
# 1237|               Type = [IntType] int
# 1237|               ValueCategory = prvalue(load)
# 1237|         1: [VariableAccess] d
# 1237|             Type = [IntType] int
# 1237|             ValueCategory = prvalue(load)
# 1240| [TopLevelFunction] void staticLocalWithConstructor(char const*)
# 1240|   params: 
# 1240|     0: [Parameter] dynamic
# 1240|         Type = [PointerType] const char *
# 1240|   body: [Block] { ... }
# 1241|     0: [DeclStmt] declaration
# 1241|       0: [VariableDeclarationEntry] definition of a
# 1241|           Type = [Struct] String
#-----|         init: [Initializer] initializer for a
#-----|           expr: [ConstructorCall] call to String
#-----|               Type = [VoidType] void
#-----|               ValueCategory = prvalue
# 1242|     1: [DeclStmt] declaration
# 1242|       0: [VariableDeclarationEntry] definition of b
# 1242|           Type = [Struct] String
# 1242|         init: [Initializer] initializer for b
# 1242|           expr: [ConstructorCall] call to String
# 1242|               Type = [VoidType] void
# 1242|               ValueCategory = prvalue
# 1242|             0: [ArrayToPointerConversion] array to pointer conversion
# 1242|                 Type = [PointerType] const char *
# 1242|                 ValueCategory = prvalue
# 1242|               expr: static
# 1242|                   Type = [ArrayType] const char[7]
# 1242|                   Value = [StringLiteral] "static"
# 1242|                   ValueCategory = lvalue
# 1243|     2: [DeclStmt] declaration
# 1243|       0: [VariableDeclarationEntry] definition of c
# 1243|           Type = [Struct] String
# 1243|         init: [Initializer] initializer for c
# 1243|           expr: [ConstructorCall] call to String
# 1243|               Type = [VoidType] void
# 1243|               ValueCategory = prvalue
# 1243|             0: [VariableAccess] dynamic
# 1243|                 Type = [PointerType] const char *
# 1243|                 ValueCategory = prvalue(load)
# 1244|     3: [ReturnStmt] return ...
# 1248| [TopLevelFunction] char* strcpy(char*, char const*)
# 1248|   params: 
# 1248|     0: [Parameter] destination
# 1248|         Type = [CharPointerType] char *
# 1248|     1: [Parameter] source
# 1248|         Type = [PointerType] const char *
# 1249| [TopLevelFunction] char* strcat(char*, char const*)
# 1249|   params: 
# 1249|     0: [Parameter] destination
# 1249|         Type = [CharPointerType] char *
# 1249|     1: [Parameter] source
# 1249|         Type = [PointerType] const char *
# 1251| [TopLevelFunction] void test_strings(char*, char*)
# 1251|   params: 
# 1251|     0: [Parameter] s1
# 1251|         Type = [CharPointerType] char *
# 1251|     1: [Parameter] s2
# 1251|         Type = [CharPointerType] char *
# 1251|   body: [Block] { ... }
# 1252|     0: [DeclStmt] declaration
# 1252|       0: [VariableDeclarationEntry] definition of buffer
# 1252|           Type = [ArrayType] char[1024]
# 1252|         init: [Initializer] initializer for buffer
# 1252|           expr: [ArrayAggregateLiteral] {...}
# 1252|               Type = [ArrayType] char[1024]
# 1252|               ValueCategory = prvalue
# 1252|             [0]: [CStyleCast] (char)...
# 1252|                 Conversion = [IntegralConversion] integral conversion
# 1252|                 Type = [PlainCharType] char
# 1252|                 Value = [CStyleCast] 0
# 1252|                 ValueCategory = prvalue
# 1252|               expr: [Literal] 0
# 1252|                   Type = [IntType] int
# 1252|                   Value = [Literal] 0
# 1252|                   ValueCategory = prvalue
# 1254|     1: [ExprStmt] ExprStmt
# 1254|       0: [FunctionCall] call to strcpy
# 1254|           Type = [CharPointerType] char *
# 1254|           ValueCategory = prvalue
# 1254|         0: [ArrayToPointerConversion] array to pointer conversion
# 1254|             Type = [CharPointerType] char *
# 1254|             ValueCategory = prvalue
# 1254|           expr: [VariableAccess] buffer
# 1254|               Type = [ArrayType] char[1024]
# 1254|               ValueCategory = lvalue
# 1254|         1: [CStyleCast] (const char *)...
# 1254|             Conversion = [PointerConversion] pointer conversion
# 1254|             Type = [PointerType] const char *
# 1254|             ValueCategory = prvalue
# 1254|           expr: [VariableAccess] s1
# 1254|               Type = [CharPointerType] char *
# 1254|               ValueCategory = prvalue(load)
# 1255|     2: [ExprStmt] ExprStmt
# 1255|       0: [FunctionCall] call to strcat
# 1255|           Type = [CharPointerType] char *
# 1255|           ValueCategory = prvalue
# 1255|         0: [ArrayToPointerConversion] array to pointer conversion
# 1255|             Type = [CharPointerType] char *
# 1255|             ValueCategory = prvalue
# 1255|           expr: [VariableAccess] buffer
# 1255|               Type = [ArrayType] char[1024]
# 1255|               ValueCategory = lvalue
# 1255|         1: [CStyleCast] (const char *)...
# 1255|             Conversion = [PointerConversion] pointer conversion
# 1255|             Type = [PointerType] const char *
# 1255|             ValueCategory = prvalue
# 1255|           expr: [VariableAccess] s2
# 1255|               Type = [CharPointerType] char *
# 1255|               ValueCategory = prvalue(load)
# 1256|     3: [ReturnStmt] return ...
# 1258| [CopyAssignmentOperator] A& A::operator=(A const&)
# 1258|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const A &
# 1258| [MoveAssignmentOperator] A& A::operator=(A&&)
# 1258|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [RValueReferenceType] A &&
# 1261| [MemberFunction] void A::static_member(A*, int)
# 1261|   params: 
# 1261|     0: [Parameter] a
# 1261|         Type = [PointerType] A *
# 1261|     1: [Parameter] x
# 1261|         Type = [IntType] int
# 1261|   body: [Block] { ... }
# 1262|     0: [ExprStmt] ExprStmt
# 1262|       0: [AssignExpr] ... = ...
# 1262|           Type = [IntType] int
# 1262|           ValueCategory = lvalue
# 1262|         0: [PointerFieldAccess] member
# 1262|             Type = [IntType] int
# 1262|             ValueCategory = lvalue
# 1262|           -1: [VariableAccess] a
# 1262|               Type = [PointerType] A *
# 1262|               ValueCategory = prvalue(load)
# 1262|         1: [VariableAccess] x
# 1262|             Type = [IntType] int
# 1262|             ValueCategory = prvalue(load)
# 1263|     1: [ReturnStmt] return ...
# 1265| [MemberFunction] void A::static_member_without_def()
# 1265|   params: 
# 1268| [TopLevelFunction] A* getAnInstanceOfA()
# 1268|   params: 
# 1270| [TopLevelFunction] void test_static_member_functions(int, A*)
# 1270|   params: 
# 1270|     0: [Parameter] int_arg
# 1270|         Type = [IntType] int
# 1270|     1: [Parameter] a_arg
# 1270|         Type = [PointerType] A *
# 1270|   body: [Block] { ... }
# 1271|     0: [DeclStmt] declaration
# 1271|       0: [VariableDeclarationEntry] definition of c
# 1271|           Type = [Class] C
# 1271|         init: [Initializer] initializer for c
# 1271|           expr: [ConstructorCall] call to C
# 1271|               Type = [VoidType] void
# 1271|               ValueCategory = prvalue
# 1272|     1: [ExprStmt] ExprStmt
# 1272|       0: [FunctionCall] call to StaticMemberFunction
# 1272|           Type = [IntType] int
# 1272|           ValueCategory = prvalue
# 1272|         -1: [VariableAccess] c
# 1272|             Type = [Class] C
# 1272|             ValueCategory = lvalue
# 1272|         0: [Literal] 10
# 1272|             Type = [IntType] int
# 1272|             Value = [Literal] 10
# 1272|             ValueCategory = prvalue
# 1273|     2: [ExprStmt] ExprStmt
# 1273|       0: [FunctionCall] call to StaticMemberFunction
# 1273|           Type = [IntType] int
# 1273|           ValueCategory = prvalue
# 1273|         0: [Literal] 10
# 1273|             Type = [IntType] int
# 1273|             Value = [Literal] 10
# 1273|             ValueCategory = prvalue
# 1275|     3: [DeclStmt] declaration
# 1275|       0: [VariableDeclarationEntry] definition of a
# 1275|           Type = [Struct] A
# 1276|     4: [ExprStmt] ExprStmt
# 1276|       0: [FunctionCall] call to static_member
# 1276|           Type = [VoidType] void
# 1276|           ValueCategory = prvalue
# 1276|         -1: [VariableAccess] a
# 1276|             Type = [Struct] A
# 1276|             ValueCategory = lvalue
# 1276|         0: [AddressOfExpr] & ...
# 1276|             Type = [PointerType] A *
# 1276|             ValueCategory = prvalue
# 1276|           0: [VariableAccess] a
# 1276|               Type = [Struct] A
# 1276|               ValueCategory = lvalue
# 1276|         1: [VariableAccess] int_arg
# 1276|             Type = [IntType] int
# 1276|             ValueCategory = prvalue(load)
# 1277|     5: [ExprStmt] ExprStmt
# 1277|       0: [FunctionCall] call to static_member
# 1277|           Type = [VoidType] void
# 1277|           ValueCategory = prvalue
# 1277|         0: [AddressOfExpr] & ...
# 1277|             Type = [PointerType] A *
# 1277|             ValueCategory = prvalue
# 1277|           0: [VariableAccess] a
# 1277|               Type = [Struct] A
# 1277|               ValueCategory = lvalue
# 1277|         1: [VariableAccess] int_arg
# 1277|             Type = [IntType] int
# 1277|             ValueCategory = prvalue(load)
# 1279|     6: [ExprStmt] ExprStmt
# 1279|       0: [FunctionCall] call to static_member
# 1279|           Type = [VoidType] void
# 1279|           ValueCategory = prvalue
# 1279|         -1: [ParenthesisExpr] (...)
# 1279|             Type = [PointerType] A *
# 1279|             ValueCategory = prvalue
# 1279|           expr: [AddressOfExpr] & ...
# 1279|               Type = [PointerType] A *
# 1279|               ValueCategory = prvalue
# 1279|             0: [VariableAccess] a
# 1279|                 Type = [Struct] A
# 1279|                 ValueCategory = lvalue
# 1279|         0: [VariableAccess] a_arg
# 1279|             Type = [PointerType] A *
# 1279|             ValueCategory = prvalue(load)
# 1279|         1: [AddExpr] ... + ...
# 1279|             Type = [IntType] int
# 1279|             ValueCategory = prvalue
# 1279|           0: [VariableAccess] int_arg
# 1279|               Type = [IntType] int
# 1279|               ValueCategory = prvalue(load)
# 1279|           1: [Literal] 2
# 1279|               Type = [IntType] int
# 1279|               Value = [Literal] 2
# 1279|               ValueCategory = prvalue
# 1280|     7: [ExprStmt] ExprStmt
# 1280|       0: [FunctionCall] call to static_member
# 1280|           Type = [VoidType] void
# 1280|           ValueCategory = prvalue
# 1280|         -1: [ParenthesisExpr] (...)
# 1280|             Type = [Struct] A
# 1280|             ValueCategory = lvalue
# 1280|           expr: [PointerDereferenceExpr] * ...
# 1280|               Type = [Struct] A
# 1280|               ValueCategory = lvalue
# 1280|             0: [VariableAccess] a_arg
# 1280|                 Type = [PointerType] A *
# 1280|                 ValueCategory = prvalue(load)
# 1280|         0: [AddressOfExpr] & ...
# 1280|             Type = [PointerType] A *
# 1280|             ValueCategory = prvalue
# 1280|           0: [VariableAccess] a
# 1280|               Type = [Struct] A
# 1280|               ValueCategory = lvalue
# 1280|         1: [Literal] 99
# 1280|             Type = [IntType] int
# 1280|             Value = [Literal] 99
# 1280|             ValueCategory = prvalue
# 1281|     8: [ExprStmt] ExprStmt
# 1281|       0: [FunctionCall] call to static_member
# 1281|           Type = [VoidType] void
# 1281|           ValueCategory = prvalue
# 1281|         -1: [VariableAccess] a_arg
# 1281|             Type = [PointerType] A *
# 1281|             ValueCategory = prvalue(load)
# 1281|         0: [VariableAccess] a_arg
# 1281|             Type = [PointerType] A *
# 1281|             ValueCategory = prvalue(load)
# 1281|         1: [UnaryMinusExpr] - ...
# 1281|             Type = [IntType] int
# 1281|             Value = [UnaryMinusExpr] -1
# 1281|             ValueCategory = prvalue
# 1281|           0: [Literal] 1
# 1281|               Type = [IntType] int
# 1281|               Value = [Literal] 1
# 1281|               ValueCategory = prvalue
# 1283|     9: [ExprStmt] ExprStmt
# 1283|       0: [FunctionCall] call to static_member_without_def
# 1283|           Type = [VoidType] void
# 1283|           ValueCategory = prvalue
# 1283|         -1: [VariableAccess] a
# 1283|             Type = [Struct] A
# 1283|             ValueCategory = lvalue
# 1284|     10: [ExprStmt] ExprStmt
# 1284|       0: [FunctionCall] call to static_member_without_def
# 1284|           Type = [VoidType] void
# 1284|           ValueCategory = prvalue
# 1286|     11: [ExprStmt] ExprStmt
# 1286|       0: [FunctionCall] call to static_member_without_def
# 1286|           Type = [VoidType] void
# 1286|           ValueCategory = prvalue
# 1286|         -1: [FunctionCall] call to getAnInstanceOfA
# 1286|             Type = [PointerType] A *
# 1286|             ValueCategory = prvalue
# 1287|     12: [ReturnStmt] return ...
# 1289| [TopLevelFunction] int missingReturnValue(bool, int)
# 1289|   params: 
# 1289|     0: [Parameter] b
# 1289|         Type = [BoolType] bool
# 1289|     1: [Parameter] x
# 1289|         Type = [IntType] int
# 1289|   body: [Block] { ... }
# 1290|     0: [IfStmt] if (...) ... 
# 1290|       0: [VariableAccess] b
# 1290|           Type = [BoolType] bool
# 1290|           ValueCategory = prvalue(load)
# 1290|       1: [Block] { ... }
# 1291|         0: [ReturnStmt] return ...
# 1291|           0: [VariableAccess] x
# 1291|               Type = [IntType] int
# 1291|               ValueCategory = prvalue(load)
# 1293|     1: [ReturnStmt] return ...
# 1295| [TopLevelFunction] void returnVoid(int, int)
# 1295|   params: 
# 1295|     0: [Parameter] x
# 1295|         Type = [IntType] int
# 1295|     1: [Parameter] y
# 1295|         Type = [IntType] int
# 1295|   body: [Block] { ... }
# 1296|     0: [ReturnStmt] return ...
# 1296|       0: [FunctionCall] call to IntegerOps
# 1296|           Type = [VoidType] void
# 1296|           ValueCategory = prvalue
# 1296|         0: [VariableAccess] x
# 1296|             Type = [IntType] int
# 1296|             ValueCategory = prvalue(load)
# 1296|         1: [VariableAccess] y
# 1296|             Type = [IntType] int
# 1296|             ValueCategory = prvalue(load)
# 1299| [TopLevelFunction] void gccBinaryConditional(bool, int, long)
# 1299|   params: 
# 1299|     0: [Parameter] b
# 1299|         Type = [BoolType] bool
# 1299|     1: [Parameter] x
# 1299|         Type = [IntType] int
# 1299|     2: [Parameter] y
# 1299|         Type = [LongType] long
# 1299|   body: [Block] { ... }
# 1300|     0: [DeclStmt] declaration
# 1300|       0: [VariableDeclarationEntry] definition of z
# 1300|           Type = [IntType] int
# 1300|         init: [Initializer] initializer for z
# 1300|           expr: [VariableAccess] x
# 1300|               Type = [IntType] int
# 1300|               ValueCategory = prvalue(load)
# 1301|     1: [ExprStmt] ExprStmt
# 1301|       0: [AssignExpr] ... = ...
# 1301|           Type = [IntType] int
# 1301|           ValueCategory = lvalue
# 1301|         0: [VariableAccess] z
# 1301|             Type = [IntType] int
# 1301|             ValueCategory = lvalue
# 1301|         1: [ConditionalExpr] ... ? ... : ...
# 1301|             Type = [IntType] int
# 1301|             ValueCategory = prvalue
# 1301|           0: [VariableAccess] b
# 1301|               Type = [BoolType] bool
# 1301|               ValueCategory = prvalue(load)
# 1301|           1: [VariableAccess] x
# 1301|               Type = [IntType] int
# 1301|               ValueCategory = prvalue(load)
# 1302|     2: [ExprStmt] ExprStmt
# 1302|       0: [AssignExpr] ... = ...
# 1302|           Type = [IntType] int
# 1302|           ValueCategory = lvalue
# 1302|         0: [VariableAccess] z
# 1302|             Type = [IntType] int
# 1302|             ValueCategory = lvalue
# 1302|         1: [CStyleCast] (int)...
# 1302|             Conversion = [IntegralConversion] integral conversion
# 1302|             Type = [IntType] int
# 1302|             ValueCategory = prvalue
# 1302|           expr: [ConditionalExpr] ... ? ... : ...
# 1302|               Type = [LongType] long
# 1302|               ValueCategory = prvalue
# 1302|             0: [VariableAccess] b
# 1302|                 Type = [BoolType] bool
# 1302|                 ValueCategory = prvalue(load)
# 1302|             1: [VariableAccess] y
# 1302|                 Type = [LongType] long
# 1302|                 ValueCategory = prvalue(load)
# 1303|     3: [ExprStmt] ExprStmt
# 1303|       0: [AssignExpr] ... = ...
# 1303|           Type = [IntType] int
# 1303|           ValueCategory = lvalue
# 1303|         0: [VariableAccess] z
# 1303|             Type = [IntType] int
# 1303|             ValueCategory = lvalue
# 1303|         1: [ConditionalExpr] ... ? ... : ...
# 1303|             Type = [IntType] int
# 1303|             ValueCategory = prvalue
# 1303|           0: [CStyleCast] (bool)...
# 1303|               Conversion = [BoolConversion] conversion to bool
# 1303|               Type = [BoolType] bool
# 1303|               ValueCategory = prvalue
# 1303|             expr: [VariableAccess] x
# 1303|                 Type = [IntType] int
# 1303|                 ValueCategory = prvalue(load)
# 1303|           1: [VariableAccess] x
# 1303|               Type = [IntType] int
# 1303|               ValueCategory = prvalue(load)
# 1304|     4: [ExprStmt] ExprStmt
# 1304|       0: [AssignExpr] ... = ...
# 1304|           Type = [IntType] int
# 1304|           ValueCategory = lvalue
# 1304|         0: [VariableAccess] z
# 1304|             Type = [IntType] int
# 1304|             ValueCategory = lvalue
# 1304|         1: [CStyleCast] (int)...
# 1304|             Conversion = [IntegralConversion] integral conversion
# 1304|             Type = [IntType] int
# 1304|             ValueCategory = prvalue
# 1304|           expr: [ConditionalExpr] ... ? ... : ...
# 1304|               Type = [LongType] long
# 1304|               ValueCategory = prvalue
# 1304|             0: [CStyleCast] (bool)...
# 1304|                 Conversion = [BoolConversion] conversion to bool
# 1304|                 Type = [BoolType] bool
# 1304|                 ValueCategory = prvalue
# 1304|               expr: [VariableAccess] x
# 1304|                   Type = [IntType] int
# 1304|                   ValueCategory = prvalue(load)
# 1304|             1: [VariableAccess] y
# 1304|                 Type = [LongType] long
# 1304|                 ValueCategory = prvalue(load)
# 1305|     5: [ExprStmt] ExprStmt
# 1305|       0: [AssignExpr] ... = ...
# 1305|           Type = [IntType] int
# 1305|           ValueCategory = lvalue
# 1305|         0: [VariableAccess] z
# 1305|             Type = [IntType] int
# 1305|             ValueCategory = lvalue
# 1305|         1: [CStyleCast] (int)...
# 1305|             Conversion = [IntegralConversion] integral conversion
# 1305|             Type = [IntType] int
# 1305|             ValueCategory = prvalue
# 1305|           expr: [ConditionalExpr] ... ? ... : ...
# 1305|               Type = [LongType] long
# 1305|               ValueCategory = prvalue
# 1305|             0: [CStyleCast] (bool)...
# 1305|                 Conversion = [BoolConversion] conversion to bool
# 1305|                 Type = [BoolType] bool
# 1305|                 ValueCategory = prvalue
# 1305|               expr: [VariableAccess] y
# 1305|                   Type = [LongType] long
# 1305|                   ValueCategory = prvalue(load)
# 1305|             1: [CStyleCast] (long)...
# 1305|                 Conversion = [IntegralConversion] integral conversion
# 1305|                 Type = [LongType] long
# 1305|                 ValueCategory = prvalue
# 1305|               expr: [VariableAccess] x
# 1305|                   Type = [IntType] int
# 1305|                   ValueCategory = prvalue(load)
# 1306|     6: [ExprStmt] ExprStmt
# 1306|       0: [AssignExpr] ... = ...
# 1306|           Type = [IntType] int
# 1306|           ValueCategory = lvalue
# 1306|         0: [VariableAccess] z
# 1306|             Type = [IntType] int
# 1306|             ValueCategory = lvalue
# 1306|         1: [CStyleCast] (int)...
# 1306|             Conversion = [IntegralConversion] integral conversion
# 1306|             Type = [IntType] int
# 1306|             ValueCategory = prvalue
# 1306|           expr: [ConditionalExpr] ... ? ... : ...
# 1306|               Type = [LongType] long
# 1306|               ValueCategory = prvalue
# 1306|             0: [CStyleCast] (bool)...
# 1306|                 Conversion = [BoolConversion] conversion to bool
# 1306|                 Type = [BoolType] bool
# 1306|                 ValueCategory = prvalue
# 1306|               expr: [VariableAccess] y
# 1306|                   Type = [LongType] long
# 1306|                   ValueCategory = prvalue(load)
# 1306|             1: [VariableAccess] y
# 1306|                 Type = [LongType] long
# 1306|                 ValueCategory = prvalue(load)
# 1308|     7: [ExprStmt] ExprStmt
# 1308|       0: [AssignExpr] ... = ...
# 1308|           Type = [IntType] int
# 1308|           ValueCategory = lvalue
# 1308|         0: [VariableAccess] z
# 1308|             Type = [IntType] int
# 1308|             ValueCategory = lvalue
# 1308|         1: [ConditionalExpr] ... ? ... : ...
# 1308|             Type = [IntType] int
# 1308|             ValueCategory = prvalue
# 1308|           0: [ParenthesisExpr] (...)
# 1308|               Type = [BoolType] bool
# 1308|               ValueCategory = prvalue
# 1308|             expr: [LogicalOrExpr] ... || ...
# 1308|                 Type = [BoolType] bool
# 1308|                 ValueCategory = prvalue
# 1308|               0: [LogicalAndExpr] ... && ...
# 1308|                   Type = [BoolType] bool
# 1308|                   ValueCategory = prvalue
# 1308|                 0: [CStyleCast] (bool)...
# 1308|                     Conversion = [BoolConversion] conversion to bool
# 1308|                     Type = [BoolType] bool
# 1308|                     ValueCategory = prvalue
# 1308|                   expr: [VariableAccess] x
# 1308|                       Type = [IntType] int
# 1308|                       ValueCategory = prvalue(load)
# 1308|                 1: [VariableAccess] b
# 1308|                     Type = [BoolType] bool
# 1308|                     ValueCategory = prvalue(load)
# 1308|               1: [CStyleCast] (bool)...
# 1308|                   Conversion = [BoolConversion] conversion to bool
# 1308|                   Type = [BoolType] bool
# 1308|                   ValueCategory = prvalue
# 1308|                 expr: [VariableAccess] y
# 1308|                     Type = [LongType] long
# 1308|                     ValueCategory = prvalue(load)
# 1308|           1: [VariableAccess] x
# 1308|               Type = [IntType] int
# 1308|               ValueCategory = prvalue(load)
# 1309|     8: [ReturnStmt] return ...
# 1311| [TopLevelFunction] bool predicateA()
# 1311|   params: 
# 1312| [TopLevelFunction] bool predicateB()
# 1312|   params: 
# 1314| [TopLevelFunction] int shortCircuitConditional(int, int)
# 1314|   params: 
# 1314|     0: [Parameter] x
# 1314|         Type = [IntType] int
# 1314|     1: [Parameter] y
# 1314|         Type = [IntType] int
# 1314|   body: [Block] { ... }
# 1315|     0: [ReturnStmt] return ...
# 1315|       0: [ConditionalExpr] ... ? ... : ...
# 1315|           Type = [IntType] int
# 1315|           ValueCategory = prvalue
# 1315|         0: [LogicalAndExpr] ... && ...
# 1315|             Type = [BoolType] bool
# 1315|             ValueCategory = prvalue
# 1315|           0: [FunctionCall] call to predicateA
# 1315|               Type = [BoolType] bool
# 1315|               ValueCategory = prvalue
# 1315|           1: [FunctionCall] call to predicateB
# 1315|               Type = [BoolType] bool
# 1315|               ValueCategory = prvalue
# 1315|         1: [VariableAccess] x
# 1315|             Type = [IntType] int
# 1315|             ValueCategory = prvalue(load)
# 1315|         2: [VariableAccess] y
# 1315|             Type = [IntType] int
# 1315|             ValueCategory = prvalue(load)
perf-regression.cpp:
#    4| [CopyAssignmentOperator] Big& Big::operator=(Big const&)
#    4|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const Big &
#    4| [MoveAssignmentOperator] Big& Big::operator=(Big&&)
#    4|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [RValueReferenceType] Big &&
#    4| [CopyConstructor] void Big::Big(Big const&)
#    4|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const Big &
#    4| [MoveConstructor] void Big::Big(Big&&)
#    4|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [RValueReferenceType] Big &&
#    6| [Constructor] void Big::Big()
#    6|   params: 
#    6|   initializations: 
#    6|     0: [ConstructorFieldInit] constructor init of field buffer
#    6|         Type = [ArrayType] char[1073741824]
#    6|         ValueCategory = prvalue
#    6|       0: [ArrayAggregateLiteral] {...}
#    6|           Type = [ArrayType] char[1073741824]
#    6|           ValueCategory = prvalue
#    6|   body: [Block] { ... }
#    6|     0: [ReturnStmt] return ...
#    9| [TopLevelFunction] int main()
#    9|   params: 
#    9|   body: [Block] { ... }
#   10|     0: [DeclStmt] declaration
#   10|       0: [VariableDeclarationEntry] definition of big
#   10|           Type = [PointerType] Big *
#   10|         init: [Initializer] initializer for big
#   10|           expr: [NewExpr] new
#   10|               Type = [PointerType] Big *
#   10|               ValueCategory = prvalue
#   10|             1: [ConstructorCall] call to Big
#   10|                 Type = [VoidType] void
#   10|                 ValueCategory = prvalue
#   12|     1: [ReturnStmt] return ...
#   12|       0: [Literal] 0
#   12|           Type = [IntType] int
#   12|           Value = [Literal] 0
#   12|           ValueCategory = prvalue
struct_init.cpp:
#    1| [TopLevelFunction] int handler1(void*)
#    1|   params: 
#    1|     0: [Parameter] p
#    1|         Type = [VoidPointerType] void *
#    2| [TopLevelFunction] int handler2(void*)
#    2|   params: 
#    2|     0: [Parameter] p
#    2|         Type = [VoidPointerType] void *
#    4| [CopyAssignmentOperator] Info& Info::operator=(Info const&)
#    4|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [LValueReferenceType] const Info &
#    4| [MoveAssignmentOperator] Info& Info::operator=(Info&&)
#    4|   params: 
#-----|     0: [Parameter] p#0
#-----|         Type = [RValueReferenceType] Info &&
#   16| [TopLevelFunction] void let_info_escape(Info*)
#   16|   params: 
#   16|     0: [Parameter] info
#   16|         Type = [PointerType] Info *
#   16|   body: [Block] { ... }
#   17|     0: [ExprStmt] ExprStmt
#   17|       0: [AssignExpr] ... = ...
#   17|           Type = [PointerType] Info *
#   17|           ValueCategory = lvalue
#   17|         0: [VariableAccess] global_pointer
#   17|             Type = [PointerType] Info *
#   17|             ValueCategory = lvalue
#   17|         1: [VariableAccess] info
#   17|             Type = [PointerType] Info *
#   17|             ValueCategory = prvalue(load)
#   18|     1: [ReturnStmt] return ...
#   20| [TopLevelFunction] void declare_static_infos()
#   20|   params: 
#   20|   body: [Block] { ... }
#   21|     0: [DeclStmt] declaration
#   21|       0: [VariableDeclarationEntry] definition of static_infos
#   21|           Type = [ArrayType] Info[]
#   21|         init: [Initializer] initializer for static_infos
#   21|           expr: [ArrayAggregateLiteral] {...}
#   21|               Type = [ArrayType] Info[2]
#   21|               ValueCategory = prvalue
#   22|             [0]: [ClassAggregateLiteral] {...}
#   22|                 Type = [Struct] Info
#   22|                 ValueCategory = prvalue
#   22|               .name: [ArrayToPointerConversion] array to pointer conversion
#   22|                   Type = [PointerType] const char *
#   22|                   ValueCategory = prvalue
#   22|                 expr: 1
#   22|                     Type = [ArrayType] const char[2]
#   22|                     Value = [StringLiteral] "1"
#   22|                     ValueCategory = lvalue
#   22|               .handler: [FunctionAccess] handler1
#   22|                   Type = [FunctionPointerType] ..(*)(..)
#   22|                   ValueCategory = prvalue(load)
#   23|             [1]: [ClassAggregateLiteral] {...}
#   23|                 Type = [Struct] Info
#   23|                 ValueCategory = prvalue
#   23|               .name: [ArrayToPointerConversion] array to pointer conversion
#   23|                   Type = [PointerType] const char *
#   23|                   ValueCategory = prvalue
#   23|                 expr: 2
#   23|                     Type = [ArrayType] const char[2]
#   23|                     Value = [StringLiteral] "2"
#   23|                     ValueCategory = lvalue
#   23|               .handler: [AddressOfExpr] & ...
#   23|                   Type = [FunctionPointerType] ..(*)(..)
#   23|                   ValueCategory = prvalue
#   23|                 0: [FunctionAccess] handler2
#   23|                     Type = [RoutineType] ..()(..)
#   23|                     ValueCategory = lvalue
#   25|     1: [ExprStmt] ExprStmt
#   25|       0: [FunctionCall] call to let_info_escape
#   25|           Type = [VoidType] void
#   25|           ValueCategory = prvalue
#   25|         0: [ArrayToPointerConversion] array to pointer conversion
#   25|             Type = [PointerType] Info *
#   25|             ValueCategory = prvalue
#   25|           expr: [VariableAccess] static_infos
#   25|               Type = [ArrayType] Info[2]
#   25|               ValueCategory = lvalue
#   26|     2: [ReturnStmt] return ...
#   28| [TopLevelFunction] void declare_local_infos()
#   28|   params: 
#   28|   body: [Block] { ... }
#   29|     0: [DeclStmt] declaration
#   29|       0: [VariableDeclarationEntry] definition of local_infos
#   29|           Type = [ArrayType] Info[]
#   29|         init: [Initializer] initializer for local_infos
#   29|           expr: [ArrayAggregateLiteral] {...}
#   29|               Type = [ArrayType] Info[2]
#   29|               ValueCategory = prvalue
#   30|             [0]: [ClassAggregateLiteral] {...}
#   30|                 Type = [Struct] Info
#   30|                 ValueCategory = prvalue
#   30|               .name: [ArrayToPointerConversion] array to pointer conversion
#   30|                   Type = [PointerType] const char *
#   30|                   ValueCategory = prvalue
#   30|                 expr: 1
#   30|                     Type = [ArrayType] const char[2]
#   30|                     Value = [StringLiteral] "1"
#   30|                     ValueCategory = lvalue
#   30|               .handler: [FunctionAccess] handler1
#   30|                   Type = [FunctionPointerType] ..(*)(..)
#   30|                   ValueCategory = prvalue(load)
#   31|             [1]: [ClassAggregateLiteral] {...}
#   31|                 Type = [Struct] Info
#   31|                 ValueCategory = prvalue
#   31|               .name: [ArrayToPointerConversion] array to pointer conversion
#   31|                   Type = [PointerType] const char *
#   31|                   ValueCategory = prvalue
#   31|                 expr: 2
#   31|                     Type = [ArrayType] const char[2]
#   31|                     Value = [StringLiteral] "2"
#   31|                     ValueCategory = lvalue
#   31|               .handler: [AddressOfExpr] & ...
#   31|                   Type = [FunctionPointerType] ..(*)(..)
#   31|                   ValueCategory = prvalue
#   31|                 0: [FunctionAccess] handler2
#   31|                     Type = [RoutineType] ..()(..)
#   31|                     ValueCategory = lvalue
#   33|     1: [ExprStmt] ExprStmt
#   33|       0: [FunctionCall] call to let_info_escape
#   33|           Type = [VoidType] void
#   33|           ValueCategory = prvalue
#   33|         0: [ArrayToPointerConversion] array to pointer conversion
#   33|             Type = [PointerType] Info *
#   33|             ValueCategory = prvalue
#   33|           expr: [VariableAccess] local_infos
#   33|               Type = [ArrayType] Info[2]
#   33|               ValueCategory = lvalue
#   34|     2: [ReturnStmt] return ...
#   36| [TopLevelFunction] void declare_static_runtime_infos(char const*)
#   36|   params: 
#   36|     0: [Parameter] name1
#   36|         Type = [PointerType] const char *
#   36|   body: [Block] { ... }
#   37|     0: [DeclStmt] declaration
#   37|       0: [VariableDeclarationEntry] definition of static_infos
#   37|           Type = [ArrayType] Info[]
#   37|         init: [Initializer] initializer for static_infos
#   37|           expr: [ArrayAggregateLiteral] {...}
#   37|               Type = [ArrayType] Info[2]
#   37|               ValueCategory = prvalue
#   38|             [0]: [ClassAggregateLiteral] {...}
#   38|                 Type = [Struct] Info
#   38|                 ValueCategory = prvalue
#   38|               .name: [VariableAccess] name1
#   38|                   Type = [PointerType] const char *
#   38|                   ValueCategory = prvalue(load)
#   38|               .handler: [FunctionAccess] handler1
#   38|                   Type = [FunctionPointerType] ..(*)(..)
#   38|                   ValueCategory = prvalue(load)
#   39|             [1]: [ClassAggregateLiteral] {...}
#   39|                 Type = [Struct] Info
#   39|                 ValueCategory = prvalue
#   39|               .name: [ArrayToPointerConversion] array to pointer conversion
#   39|                   Type = [PointerType] const char *
#   39|                   ValueCategory = prvalue
#   39|                 expr: 2
#   39|                     Type = [ArrayType] const char[2]
#   39|                     Value = [StringLiteral] "2"
#   39|                     ValueCategory = lvalue
#   39|               .handler: [AddressOfExpr] & ...
#   39|                   Type = [FunctionPointerType] ..(*)(..)
#   39|                   ValueCategory = prvalue
#   39|                 0: [FunctionAccess] handler2
#   39|                     Type = [RoutineType] ..()(..)
#   39|                     ValueCategory = lvalue
#   41|     1: [ExprStmt] ExprStmt
#   41|       0: [FunctionCall] call to let_info_escape
#   41|           Type = [VoidType] void
#   41|           ValueCategory = prvalue
#   41|         0: [ArrayToPointerConversion] array to pointer conversion
#   41|             Type = [PointerType] Info *
#   41|             ValueCategory = prvalue
#   41|           expr: [VariableAccess] static_infos
#   41|               Type = [ArrayType] Info[2]
#   41|               ValueCategory = lvalue
#   42|     2: [ReturnStmt] return ...

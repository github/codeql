<!DOCTYPE qhelp PUBLIC
  "-//Semmle//qhelp//EN"
  "qhelp.dtd">
<qhelp>
<overview>
<p>This metric measures the average number of parameters to functions.</p>

<p>Functions with an excessive number of parameters often exhibit one or more of the
following problems.</p>

<ul>
<li>The functions lack cohesion because they do several unrelated tasks.</li>
<li>Several of the arguments would be better grouped together using a struct or class,
    because they represent one conceptual entity.</li>
<li>Calling the function is prone to mistakes because arguments may be accidentally transposed,
    possibly without a type-error.</li>
</ul>

</overview>
<recommendation>

<p>Consider refactoring functions with too many arguments into smaller functions, each with
a single well-defined purpose.</p>

<p>It may also be possible to create new abstractions for usefully grouping arguments. For
example, rather than representing a buffer by a pointer and an integer length, they could be
encapsulated into a single struct, with utility functions for common operations.</p>

</recommendation>
<references>

<li>
  M. Fowler. <em>Refactoring</em>. Addison-Wesley, 1999.
</li>
<li>
  <a href="https://en.wikipedia.org/wiki/Code_refactoring">Wikipedia: Code refactoring</a>
</li>
<li>
  <a href="http://www.jot.fm/issues/issue_2005_01/column1/">Refactoring as Meta Programming?</a>
</li>


</references>
</qhelp>

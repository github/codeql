<!DOCTYPE qhelp PUBLIC
  "-//Semmle//qhelp//EN"
  "qhelp.dtd">
<qhelp>
<overview>
<p>Accessing paths controlled by users can allow an attacker to access unexpected resources. This 
can result in sensitive information being revealed or deleted, or an attacker being able to influence
behavior by modifying unexpected files.</p>

<p>Paths that are naively constructed from data controlled by a user may be absolute paths, or may contain
unexpected special characters such as "..". Such a path could point anywhere on the file system.</p>

</overview>
<recommendation>

<p>Validate user input before using it to construct a file path.</p>

<p>Common validation methods include checking that the normalized path is relative and does not contain
any ".." components, or checking that the path is contained within a safe folder. The method you should use depends 
on how the path is used in the application, and whether the path should be a single path component.
</p>

<p>If the path should be a single path component (such as a file name), you can check for the existence 
of any path separators ("/" or "\"), or ".." sequences in the input, and reject the input if any are found.
</p>

<p>
Note that removing "../" sequences is <i>not</i> sufficient, since the input could still contain a path separator
followed by "..". For example, the input ".../...//" would still result in the string "../" if only "../" sequences
are removed.
</p>

<p>Finally, the simplest (but most restrictive) option is to use an allow list of safe patterns and make sure that
the user input matches one of these patterns.</p>

</recommendation>
<example>

<p>In this example, a file name is read from a user and then used to access a file. 
However, a malicious user could enter a file name anywhere on the file system,
such as "/etc/passwd" or "../../../etc/passwd".</p>

<sample src="examples/TaintedPath.c" />

<p>
If the input should only be a file name, you can check that it doesn't contain any path separators or ".." sequences.
</p>

<sample src="examples/TaintedPathNormalize.c" />

<p>
If the input should be within a specific directory, you can check that the resolved path 
is still contained within that directory.
</p>

<sample src="examples/TaintedPathFolder.c" />

</example>
<references>

<li>
OWASP:
<a href="https://owasp.org/www-community/attacks/Path_Traversal">Path Traversal</a>.
</li>
<li>Linux man pages: <a href="https://man7.org/linux/man-pages/man3/realpath.3.html">realpath(3)</a>.</li>

</references>
</qhelp>

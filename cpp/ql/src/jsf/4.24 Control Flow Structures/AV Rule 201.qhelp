<!DOCTYPE qhelp PUBLIC
  "-//Semmle//qhelp//EN"
  "qhelp.dtd">
<qhelp>


<overview>
<p>
This rule finds <code>for</code> loop variables that are being modified in the loop body. <code>for</code> loops should
be reserved for simple iteration, use <code>while</code> loops for more complicated cases. Most developers assume that 
the <code>for</code> loop iteration statement is the only thing that changes the value of the loop counter, so changing it
inside the loop body can lead to confusion. 
</p>


</overview>
<recommendation>
<p>
Use only the increment expression in the <code>for</code> loop to modify loop variables, or change it to a <code>while</code>
loop if the loop requires more complicated variable iteration.
</p>

</recommendation>
<example><sample src="AV Rule 201.cpp" />



</example>
<references>

<li>
  AV Rule 201, <em>Joint Strike Fighter Air Vehicle C++ Coding Standards</em>. Lockheed Martin Corporation, 2005.
</li>
<li>
  MISRA C++ Rule 6-5-3, <em>Guidelines for the use of the C++ language in critical systems</em>. The Motor Industry Software Reliability Associate, 2008.
</li>
<li>
  <a href="http://www.learncpp.com/cpp-tutorial/57-for-statements/">For statements</a>
</li>
<li>
  Mats Henricson and Erik Nyquist, <i>Industrial Strength C++</i>, published by Prentice Hall PTR (1997). 
  Chapter 4: Control Flow, Rule 4.1 (<a href="https://web.archive.org/web/20190919025638/https://mongers.org/industrial-c++/">PDF</a>).
</li>


</references>
</qhelp>

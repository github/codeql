<!DOCTYPE qhelp PUBLIC
  "-//Semmle//qhelp//EN"
  "qhelp.dtd">
<qhelp>
<overview>
<p>Calling <code>memset</code>, <code>bzero</code>, <code>FillMemory</code> or
<code>ZeroMemory</code> on a buffer in order to clear its contents may get
optimized away by the compiler if said buffer is not subsequently used.
This is not desirable behavior if the buffer contains sensitive data that
could be exploited by an attacker.</p>

</overview>
<recommendation>
<p>The best workaround is to use alternate platform-supplied functions that
 will not get optimized away: <code>memset_s</code>, <code>SecureZeroMemory</code>,
 <code>bzero_explicit</code>, and the like (if they are available).
 Otherwise, passing the <code>-fno-builtin-memset</code> flag to the 
 GCC/Clang compiler is usually effective.  Finally, the public-domain 
 <code>secure_memzero</code> routine (see below) can be helpful.</p>

</recommendation>
<example>
<p>The following program fragment uses <code>memset</code> to scrub memory after
 it is no longer used:</p>
<sample src="MemsetMayBeDeleted-bad.c" />
<p>Because of dead store elimination (DSE), the <code>memset</code> may be removed
 by the compiler (since the data being scrubbed is not subsequently used), resulting
 in potentially sensitive data remaining in memory.</p>
 
<p>The best solution to this problem is to use the <code>memset_s</code> function
 instead of <code>memset</code>:</p>
<sample src="MemsetMayBeDeleted-good.c" />

</example>

<references>

<li>MITRE:
  <a href="https://cwe.mitre.org/data/definitions/14.html">
  CWE-14</a>.</li>
<li>Public domain:
  <a href="https://compsec.sysnet.ucsd.edu/secure_memzero.h">
  secure_memzero</a>implementation.</li>
<li>Blog:
  <a href="https://www.cryptologie.net/article/419/zeroing-memory-compiler-optimizations-and-memset_sC">
  Zero'ing memory, compiler optimizations and memset_s</a>.</li>
<li>USENIX 2017 Paper:
  <a href="https://www.usenix.org/system/files/conference/usenixsecurity17/sec17-yang.pdf">
  Dead Store Elimination (Still) Considered Harmful</a>.</li>

</references>
</qhelp>

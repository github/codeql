extensions:
  - addsTo:
      pack: codeql/python-all
      extensible: sourceModel
    data: []

  - addsTo:
      pack: codeql/python-all
      extensible: sinkModel
    data: []

  - addsTo:
      pack: codeql/python-all
      extensible: summaryModel
    data:
      - ["_collections_abc", "Member[Mapping].Member[get]", "Argument[2,default:]", "ReturnValue", "taint"]
      - ["argparse", "Member[ArgumentParser].Member[_parse_known_args]", "Argument[1,arg_strings:]", "ReturnValue", "taint"]
      - ["argparse", "Member[ArgumentParser].Member[_read_args_from_files]", "Argument[1,arg_strings:]", "ReturnValue", "taint"]
      - ["argparse", "Member[ArgumentParser].Member[parse_args]", "Argument[1,args:]", "ReturnValue", "taint"]
      - ["argparse", "Member[ArgumentParser].Member[parse_known_args]", "Argument[1,args:]", "ReturnValue", "taint"]
      - ["cgi", "Member[FieldStorage].Member[getvalue]", "Argument[0,self:]", "ReturnValue", "taint"]
      - ["contextlib", "Member[_BaseExitStack].Member[enter_context]", "Argument[1,cm:]", "ReturnValue", "taint"]
      - ["ctypes", "Member[create_unicode_buffer]", "Argument[0,init:]", "ReturnValue", "taint"]
      - ["email", "Member[header].Member[Header].Member[__init__]", "Argument[1,s:]", "ReturnValue", "taint"]
      - ["email", "Member[utils].Member[parseaddr]", "Argument[0,addr:]", "ReturnValue", "taint"]
      - ["fnmatch", "Member[filter]", "Argument[0,names:]", "ReturnValue", "taint"]
      - ["functools", "Member[reduce]", "Argument[1,sequence:]", "ReturnValue", "taint"]
      - ["getopt", "Member[getopt]", "Argument[0,args:]", "ReturnValue", "taint"]
      - ["getopt", "Member[getopt]", "Argument[2,longopts:]", "ReturnValue", "taint"]
      - ["gettext", "Member[gettext]", "Argument[0,message:]", "ReturnValue", "taint"]
      - ["gzip", "Member[GzipFile].Member[__init__]", "Argument[1,filename:]", "ReturnValue", "taint"]
      - ["html", "Member[escape]", "Argument[0,s:]", "ReturnValue", "taint"]
      - ["imp", "Member[find_module]", "Argument[0,name:]", "ReturnValue", "taint"]
      - ["imp", "Member[find_module]", "Argument[1,path:]", "ReturnValue", "taint"]
      - ["logging", "Member[getLevelName]", "Argument[0,level:]", "ReturnValue", "taint"]
      - ["logging", "Member[LogRecord].Member[getMessage]", "Argument[0,self:]", "ReturnValue", "taint"]
      - ["mimetypes", "Member[guess_type]", "Argument[0,url:]", "ReturnValue", "taint"]
      - ["multiprocessing", "Member[connection].Member[Listener].Member[__init__]", "Argument[4,authkey:]", "ReturnValue", "taint"]
      - ["nturl2path", "Member[pathname2url]", "Argument[0,p:]", "ReturnValue", "taint"]
      - ["nturl2path", "Member[url2pathname]", "Argument[0,url:]", "ReturnValue", "taint"]
      - ["optparse", "Member[OptionParser].Member[parse_args]", "Argument[1,args:]", "ReturnValue", "taint"]
      - ["pathlib", "Member[Path].Member[__enter__]", "Argument[0,self:]", "ReturnValue", "taint"]
      - ["random", "Member[Random].Member[choice]", "Argument[1,seq:]", "ReturnValue", "taint"]
      - ["re", "Member[split]", "Argument[0,pattern:]", "ReturnValue", "taint"]
      - ["shlex", "Member[quote]", "Argument[0,s:]", "ReturnValue", "taint"]
      - ["shutil", "Member[which]", "Argument[0,cmd:]", "ReturnValue", "taint"]
      - ["shutil", "Member[which]", "Argument[2,path:]", "ReturnValue", "taint"]
      - ["subprocess", "Member[Popen].Member[__init__]", "Argument[1,args:]", "ReturnValue", "taint"]
      - ["tarfile", "Member[TarFile].Member[open]", "Argument[1,name:]", "ReturnValue", "taint"]
      - ["tarfile", "Member[TarFile].Member[open]", "Argument[3,fileobj:]", "ReturnValue", "taint"]
      - ["tempfile", "Member[mkdtemp]", "Argument[0,suffix:]", "ReturnValue", "taint"]
      - ["tempfile", "Member[mkdtemp]", "Argument[1,prefix:]", "ReturnValue", "taint"]
      - ["tempfile", "Member[mkdtemp]", "Argument[2,dir:]", "ReturnValue", "taint"]
      - ["tempfile", "Member[mkstemp]", "Argument[0,suffix:]", "ReturnValue", "taint"]
      - ["tempfile", "Member[mkstemp]", "Argument[2,dir:]", "ReturnValue", "taint"]
      - ["textwrap", "Member[dedent]", "Argument[0,text:]", "ReturnValue", "taint"]
      - ["traceback", "Member[StackSummary].Member[from_list]", "Argument[1,a_list:]", "ReturnValue", "taint"]
      - ["typing", "Member[cast]", "Argument[1,val:]", "ReturnValue", "taint"]
      - ["urllib", "Member[parse].Member[quote_plus]", "Argument[0,string:]", "ReturnValue", "taint"]
      - ["urllib", "Member[parse].Member[quote]", "Argument[0,string:]", "ReturnValue", "taint"]
      - ["urllib", "Member[parse].Member[splitquery]", "Argument[0,url:]", "ReturnValue", "taint"]
      - ["urllib", "Member[parse].Member[unquote_plus]", "Argument[0,string:]", "ReturnValue", "taint"]
      - ["urllib", "Member[parse].Member[unquote]", "Argument[0,string:]", "ReturnValue", "taint"]
      - ["urllib", "Member[parse].Member[urlencode]", "Argument[0,query:]", "ReturnValue", "taint"]
      - ["urllib", "Member[parse].Member[urljoin]", "Argument[1,url:]", "ReturnValue", "taint"]
      - ["urllib", "Member[request].Member[pathname2url]", "Argument[0,pathname:]", "ReturnValue", "taint"]
      - ["urllib", "Member[request].Member[Request].Member[__init__]", "Argument[1,url:]", "ReturnValue", "taint"]
      - ["urllib", "Member[request].Member[Request].Member[get_full_url]", "Argument[0,self:]", "ReturnValue", "taint"]
      - ["urllib", "Member[request].Member[url2pathname]", "Argument[0,pathname:]", "ReturnValue", "taint"]
      - ["urllib", "Member[request].Member[urlretrieve]", "Argument[0,url:]", "ReturnValue", "taint"]
      - ["zipfile", "Member[CompleteDirs].Member[namelist]", "Argument[0,self:]", "ReturnValue", "taint"]
      - ["zipfile", "Member[ZipFile].Member[__init__]", "Argument[1,file:]", "ReturnValue", "taint"]
      - ["zipfile", "Member[ZipFile].Member[_extract_member]", "Argument[2,targetpath:]", "ReturnValue", "taint"]
      - ["zipfile", "Member[ZipFile].Member[infolist]", "Argument[0,self:]", "ReturnValue", "taint"]
      - ["zipfile", "Member[ZipFile].Member[namelist]", "Argument[0,self:]", "ReturnValue", "taint"]

  - addsTo:
      pack: codeql/python-all
      extensible: neutralModel
    data: []

  - addsTo:
      pack: codeql/python-all
      extensible: typeModel
    data: []

  - addsTo:
      pack: codeql/python-all
      extensible: typeVariableModel
    data: []

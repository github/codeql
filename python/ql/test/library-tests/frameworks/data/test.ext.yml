extensions:
  # Contribute empty data sets to avoid errors about an undefined extensionals
  - addsTo:
      pack: codeql/python-all
      extensible: sourceModel
    data:
      - ["testlib", "Member[getSource].ReturnValue", "test-source", "manual"]
      - ["testlib.Alias", "", "test-source", "manual"]
      # testing parameter syntax
      - ["testlib", "Member[Callbacks].Member[first].Argument[0].Parameter[0]", "test-source", "manual"]
      - ["testlib", "Member[Callbacks].Member[param1to3].Argument[0].Parameter[1..3]", "test-source", "manual"]
      - ["testlib", "Member[Callbacks].Member[nonFirst].Argument[0].Parameter[1..]", "test-source", "manual"]
      # Common tokens.
      - ["testlib", "Member[CommonTokens].Member[makePromise].ReturnValue.Awaited", "test-source", "manual"]
      - ["testlib", "Member[CommonTokens].Member[Class].Instance", "test-source", "manual"]
      - ["testlib", "Member[CommonTokens].Member[Super].Subclass.Instance", "test-source", "manual"]
      # method
      - ["testlib", "Member[CommonTokens].Member[Class].Instance.Method[foo]", "test-source", "manual"]
      # testing non-positional arguments
      - ["testlib", "Member[ArgPos].Member[MyClass].Subclass.Member[foo].Parameter[self]", "test-source", "manual"]
      - ["testlib", "Member[ArgPos].Member[MyClass].Subclass.Member[foo].Parameter[named:]", "test-source", "manual"]
      - ["testlib", "Member[ArgPos].Member[MyClass].Subclass.Member[secondAndAfter].Parameter[1..]", "test-source", "manual"]
      - ["testlib", "Member[ArgPos].Member[MyClass].Subclass.Member[otherSelfTest].Parameter[0]", "test-source", "manual"]
      - ["testlib", "Member[ArgPos].Member[MyClass].Subclass.Member[anyParam].Parameter[any]", "test-source", "manual"]
      - ["testlib", "Member[ArgPos].Member[MyClass].Subclass.Member[anyNamed].Parameter[any-named]", "test-source", "manual"]

  - addsTo:
      pack: codeql/python-all
      extensible: sinkModel
    data:
      - ["testlib", "Member[mySink].Argument[0,sinkName:]", "test-sink", "manual"]
      # testing argument syntax
      - ["testlib", "Member[Args].Member[arg0].Argument[0]", "test-sink", "manual"]
      - ["testlib", "Member[Args].Member[arg1to3].Argument[1..3]", "test-sink", "manual"]
      - ["testlib", "Member[Args].Member[lastarg].Argument[N-1]", "test-sink", "manual"]
      - ["testlib", "Member[Args].Member[nonFist].Argument[1..]", "test-sink", "manual"]
      # callsite filter.
      - ["testlib", "Member[CallFilter].Member[arityOne].WithArity[1].Argument[any]", "test-sink", "manual"]
      - ["testlib", "Member[CallFilter].Member[twoOrMore].WithArity[2..].Argument[0..]", "test-sink", "manual"]
      # testing non-positional arguments
      - ["testlib", "Member[ArgPos].Instance.Member[self_thing].Argument[self]", "test-sink", "manual"]
      # any argument
      - ["testlib", "Member[ArgPos].Member[anyParam].Argument[any]", "test-sink", "manual"]
      - ["testlib", "Member[ArgPos].Member[anyNamed].Argument[any-named]", "test-sink", "manual"]
      # testing package syntax
      - ["foo1.bar", "Member[baz1].Argument[any]", "test-sink", "manual"]
      - ["foo2", "Member[bar].Member[baz2].Argument[any]", "test-sink", "manual"]
      # testing fuzzy
      - ["testlib", "Fuzzy.Member[fuzzyCall].Argument[0]", "test-sink", "manual"]
      # testing syntax errors
      - ["testlib", "Member[foo],Member[bar]", "test-sink", "manual"]
      - ["testlib", "Member[foo] Member[bar]", "test-sink", "manual"]
      - ["testlib", "Member[foo]. Member[bar]", "test-sink", "manual"]
      - ["testlib", "Member[foo], Member[bar]", "test-sink", "manual"]
      - ["testlib", "Member[foo]..Member[bar]", "test-sink", "manual"]
      - ["testlib", "Member[foo] .Member[bar]", "test-sink", "manual"]
      - ["testlib", "Member[foo]Member[bar]", "test-sink", "manual"]
      - ["testlib", "Member[foo", "test-sink", "manual"]
      - ["testlib", "Member[foo]]", "test-sink", "manual"]
      - ["testlib", "Member[foo]].Member[bar]", "test-sink", "manual"]

  - addsTo:
      pack: codeql/python-all
      extensible: summaryModel
    data:
      - ["testlib", "Member[Steps].Member[preserveTaint].Call", "Argument[0]", "ReturnValue", "taint", "manual"]
      - ["testlib", "Member[Steps].Member[taintIntoCallback]", "Argument[0]", "Argument[1..2].Parameter[0]", "taint", "manual"]
      - ["testlib", "Member[Steps].Member[preserveArgZeroAndTwo]", "Argument[0,2]", "ReturnValue", "taint", "manual"]
      - ["testlib", "Member[Steps].Member[preserveAllButFirstArgument].Call", "Argument[1..]", "ReturnValue", "taint", "manual"]

  - addsTo:
      pack: codeql/python-all
      extensible: typeModel
    data:
     - ["testlib.Alias", "testlib", "Member[alias].ReturnValue", "manual"]
     - ["testlib.Alias", "testlib.Alias", "Member[chain].ReturnValue", "manual"]

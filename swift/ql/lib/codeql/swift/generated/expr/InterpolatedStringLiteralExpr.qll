// generated by codegen/codegen.py, do not edit
/**
 * This module provides the generated definition of `InterpolatedStringLiteralExpr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.expr.internal.LiteralExprImpl::Impl as LiteralExprImpl
import codeql.swift.elements.expr.OpaqueValueExpr
import codeql.swift.elements.expr.TapExpr

/**
 * INTERNAL: This module contains the fully generated definition of `InterpolatedStringLiteralExpr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::InterpolatedStringLiteralExpr` class directly.
   * Use the subclass `InterpolatedStringLiteralExpr`, where the following predicates are available.
   */
  class InterpolatedStringLiteralExpr extends Synth::TInterpolatedStringLiteralExpr,
    LiteralExprImpl::LiteralExpr
  {
    override string getAPrimaryQlClass() { result = "InterpolatedStringLiteralExpr" }

    /**
     * Gets the interpolation expression of this interpolated string literal expression, if it exists.
     *
     * This includes nodes from the "hidden" AST. It can be overridden in subclasses to change the
     * behavior of both the `Immediate` and non-`Immediate` versions.
     */
    OpaqueValueExpr getImmediateInterpolationExpr() {
      result =
        Synth::convertOpaqueValueExprFromRaw(Synth::convertInterpolatedStringLiteralExprToRaw(this)
              .(Raw::InterpolatedStringLiteralExpr)
              .getInterpolationExpr())
    }

    /**
     * Gets the interpolation expression of this interpolated string literal expression, if it exists.
     */
    final OpaqueValueExpr getInterpolationExpr() {
      exists(OpaqueValueExpr immediate |
        immediate = this.getImmediateInterpolationExpr() and
        if exists(this.getResolveStep()) then result = immediate else result = immediate.resolve()
      )
    }

    /**
     * Holds if `getInterpolationExpr()` exists.
     */
    final predicate hasInterpolationExpr() { exists(this.getInterpolationExpr()) }

    /**
     * Gets the appending expression of this interpolated string literal expression, if it exists.
     *
     * This includes nodes from the "hidden" AST. It can be overridden in subclasses to change the
     * behavior of both the `Immediate` and non-`Immediate` versions.
     */
    TapExpr getImmediateAppendingExpr() {
      result =
        Synth::convertTapExprFromRaw(Synth::convertInterpolatedStringLiteralExprToRaw(this)
              .(Raw::InterpolatedStringLiteralExpr)
              .getAppendingExpr())
    }

    /**
     * Gets the appending expression of this interpolated string literal expression, if it exists.
     */
    final TapExpr getAppendingExpr() {
      exists(TapExpr immediate |
        immediate = this.getImmediateAppendingExpr() and
        if exists(this.getResolveStep()) then result = immediate else result = immediate.resolve()
      )
    }

    /**
     * Holds if `getAppendingExpr()` exists.
     */
    final predicate hasAppendingExpr() { exists(this.getAppendingExpr()) }
  }
}

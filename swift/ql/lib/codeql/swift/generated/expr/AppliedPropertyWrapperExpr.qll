// generated by codegen/codegen.py, do not edit
/**
 * This module provides the generated definition of `AppliedPropertyWrapperExpr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.expr.Expr
import codeql.swift.elements.expr.internal.ExprImpl::Impl as ExprImpl
import codeql.swift.elements.decl.ParamDecl

/**
 * INTERNAL: This module contains the fully generated definition of `AppliedPropertyWrapperExpr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * An implicit application of a property wrapper on the argument of a call.
   * INTERNAL: Do not reference the `Generated::AppliedPropertyWrapperExpr` class directly.
   * Use the subclass `AppliedPropertyWrapperExpr`, where the following predicates are available.
   */
  class AppliedPropertyWrapperExpr extends Synth::TAppliedPropertyWrapperExpr, ExprImpl::Expr {
    override string getAPrimaryQlClass() { result = "AppliedPropertyWrapperExpr" }

    /**
     * Gets the kind of this applied property wrapper expression.
     *
     * This is 1 for a wrapped value and 2 for a projected one.
     */
    int getKind() {
      result =
        Synth::convertAppliedPropertyWrapperExprToRaw(this)
            .(Raw::AppliedPropertyWrapperExpr)
            .getKind()
    }

    /**
     * Gets the value of this applied property wrapper expression.
     *
     * This includes nodes from the "hidden" AST. It can be overridden in subclasses to change the
     * behavior of both the `Immediate` and non-`Immediate` versions.
     */
    Expr getImmediateValue() {
      result =
        Synth::convertExprFromRaw(Synth::convertAppliedPropertyWrapperExprToRaw(this)
              .(Raw::AppliedPropertyWrapperExpr)
              .getValue())
    }

    /**
     * Gets the value of this applied property wrapper expression.
     *
     * The value on which the wrapper is applied.
     */
    final Expr getValue() {
      exists(Expr immediate |
        immediate = this.getImmediateValue() and
        if exists(this.getResolveStep()) then result = immediate else result = immediate.resolve()
      )
    }

    /**
     * Gets the parameter declaration owning this wrapper application.
     */
    ParamDecl getParam() {
      result =
        Synth::convertParamDeclFromRaw(Synth::convertAppliedPropertyWrapperExprToRaw(this)
              .(Raw::AppliedPropertyWrapperExpr)
              .getParam())
    }
  }
}

// generated by codegen/codegen.py
private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.ErrorElement
import codeql.swift.elements.expr.Expr
import codeql.swift.elements.decl.ValueDecl

module Generated {
  /**
   * An ambiguous expression that might refer to multiple declarations. This will be present only
   * for failing compilations.
   */
  class OverloadedDeclRefExpr extends Synth::TOverloadedDeclRefExpr, Expr, ErrorElement {
    override string getAPrimaryQlClass() { result = "OverloadedDeclRefExpr" }

    /**
     * Gets the `index`th possible declaration of this overloaded declaration reference expression (0-based).
     *
     * This includes nodes from the "hidden" AST. It can be overridden in subclasses to change the
     * behavior of both the `Immediate` and non-`Immediate` versions.
     */
    ValueDecl getImmediatePossibleDeclaration(int index) {
      result =
        Synth::convertValueDeclFromRaw(Synth::convertOverloadedDeclRefExprToRaw(this)
              .(Raw::OverloadedDeclRefExpr)
              .getPossibleDeclaration(index))
    }

    /**
     * Gets the `index`th possible declaration of this overloaded declaration reference expression (0-based).
     */
    final ValueDecl getPossibleDeclaration(int index) {
      result = getImmediatePossibleDeclaration(index).resolve()
    }

    /**
     * Gets any of the possible declarations of this overloaded declaration reference expression.
     */
    final ValueDecl getAPossibleDeclaration() { result = getPossibleDeclaration(_) }

    /**
     * Gets the number of possible declarations of this overloaded declaration reference expression.
     */
    final int getNumberOfPossibleDeclarations() {
      result = count(int i | exists(getPossibleDeclaration(i)))
    }
  }
}

// generated by codegen/codegen.py
private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.expr.Expr

module Generated {
  class DotSyntaxBaseIgnoredExpr extends Synth::TDotSyntaxBaseIgnoredExpr, Expr {
    override string getAPrimaryQlClass() { result = "DotSyntaxBaseIgnoredExpr" }

    /**
     * Gets the qualifier of this dot syntax base ignored expression.
     *
     * This includes nodes from the "hidden" AST. It can be overridden in subclasses to change the
     * behavior of both the `Immediate` and non-`Immediate` versions.
     */
    Expr getImmediateQualifier() {
      result =
        Synth::convertExprFromRaw(Synth::convertDotSyntaxBaseIgnoredExprToRaw(this)
              .(Raw::DotSyntaxBaseIgnoredExpr)
              .getQualifier())
    }

    /**
     * Gets the qualifier of this dot syntax base ignored expression.
     */
    final Expr getQualifier() { result = getImmediateQualifier().resolve() }

    /**
     * Gets the sub expression of this dot syntax base ignored expression.
     *
     * This includes nodes from the "hidden" AST. It can be overridden in subclasses to change the
     * behavior of both the `Immediate` and non-`Immediate` versions.
     */
    Expr getImmediateSubExpr() {
      result =
        Synth::convertExprFromRaw(Synth::convertDotSyntaxBaseIgnoredExprToRaw(this)
              .(Raw::DotSyntaxBaseIgnoredExpr)
              .getSubExpr())
    }

    /**
     * Gets the sub expression of this dot syntax base ignored expression.
     */
    final Expr getSubExpr() { result = getImmediateSubExpr().resolve() }
  }
}

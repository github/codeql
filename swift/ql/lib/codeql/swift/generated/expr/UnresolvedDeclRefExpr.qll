// generated by codegen/codegen.py, do not edit
/**
 * This module provides the generated definition of `UnresolvedDeclRefExpr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.internal.ErrorElementImpl::Impl as ErrorElementImpl
import codeql.swift.elements.expr.internal.ExprImpl::Impl as ExprImpl

/**
 * INTERNAL: This module contains the fully generated definition of `UnresolvedDeclRefExpr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::UnresolvedDeclRefExpr` class directly.
   * Use the subclass `UnresolvedDeclRefExpr`, where the following predicates are available.
   */
  class UnresolvedDeclRefExpr extends Synth::TUnresolvedDeclRefExpr, ExprImpl::Expr,
    ErrorElementImpl::ErrorElement
  {
    override string getAPrimaryQlClass() { result = "UnresolvedDeclRefExpr" }

    /**
     * Gets the name of this unresolved declaration reference expression, if it exists.
     */
    string getName() {
      result = Synth::convertUnresolvedDeclRefExprToRaw(this).(Raw::UnresolvedDeclRefExpr).getName()
    }

    /**
     * Holds if `getName()` exists.
     */
    final predicate hasName() { exists(this.getName()) }
  }
}

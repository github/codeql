// generated by codegen/codegen.py, do not edit
/**
 * This module provides the generated definition of `CaptureListExpr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.expr.ClosureExpr
import codeql.swift.elements.expr.internal.ExprImpl::Impl as ExprImpl
import codeql.swift.elements.decl.PatternBindingDecl
import codeql.swift.elements.decl.VarDecl

/**
 * INTERNAL: This module contains the fully generated definition of `CaptureListExpr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::CaptureListExpr` class directly.
   * Use the subclass `CaptureListExpr`, where the following predicates are available.
   */
  class CaptureListExpr extends Synth::TCaptureListExpr, ExprImpl::Expr {
    override string getAPrimaryQlClass() { result = "CaptureListExpr" }

    /**
     * Gets the `index`th binding declaration of this capture list expression (0-based).
     */
    PatternBindingDecl getBindingDecl(int index) {
      result =
        Synth::convertPatternBindingDeclFromRaw(Synth::convertCaptureListExprToRaw(this)
              .(Raw::CaptureListExpr)
              .getBindingDecl(index))
    }

    /**
     * Gets any of the binding declarations of this capture list expression.
     */
    final PatternBindingDecl getABindingDecl() { result = this.getBindingDecl(_) }

    /**
     * Gets the number of binding declarations of this capture list expression.
     */
    final int getNumberOfBindingDecls() { result = count(int i | exists(this.getBindingDecl(i))) }

    /**
     * Gets the `index`th variable of this capture list expression (0-based).
     *
     * These are the variables introduced by this capture in the closure's scope, not the captured ones.
     */
    VarDecl getVariable(int index) { none() }

    /**
     * Gets any of the variables of this capture list expression.
     */
    final VarDecl getAVariable() { result = this.getVariable(_) }

    /**
     * Gets the number of variables of this capture list expression.
     */
    final int getNumberOfVariables() { result = count(int i | exists(this.getVariable(i))) }

    /**
     * Gets the closure body of this capture list expression.
     *
     * This includes nodes from the "hidden" AST. It can be overridden in subclasses to change the
     * behavior of both the `Immediate` and non-`Immediate` versions.
     */
    ClosureExpr getImmediateClosureBody() {
      result =
        Synth::convertClosureExprFromRaw(Synth::convertCaptureListExprToRaw(this)
              .(Raw::CaptureListExpr)
              .getClosureBody())
    }

    /**
     * Gets the closure body of this capture list expression.
     */
    final ClosureExpr getClosureBody() {
      exists(ClosureExpr immediate |
        immediate = this.getImmediateClosureBody() and
        if exists(this.getResolveStep()) then result = immediate else result = immediate.resolve()
      )
    }
  }
}

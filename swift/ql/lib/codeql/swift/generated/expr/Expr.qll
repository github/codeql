// generated by codegen/codegen.py, do not edit
/**
 * This module provides the generated definition of `Expr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.internal.AstNodeImpl::Impl as AstNodeImpl
import codeql.swift.elements.type.Type

/**
 * INTERNAL: This module contains the fully generated definition of `Expr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * The base class for all expressions in Swift.
   * INTERNAL: Do not reference the `Generated::Expr` class directly.
   * Use the subclass `Expr`, where the following predicates are available.
   */
  class Expr extends Synth::TExpr, AstNodeImpl::AstNode {
    /**
     * Gets the type of this expression, if it exists.
     *
     * This includes nodes from the "hidden" AST. It can be overridden in subclasses to change the
     * behavior of both the `Immediate` and non-`Immediate` versions.
     */
    Type getImmediateType() {
      result = Synth::convertTypeFromRaw(Synth::convertExprToRaw(this).(Raw::Expr).getType())
    }

    /**
     * Gets the type of this expression, if it exists.
     */
    final Type getType() {
      exists(Type immediate |
        immediate = this.getImmediateType() and
        if exists(this.getResolveStep()) then result = immediate else result = immediate.resolve()
      )
    }

    /**
     * Holds if `getType()` exists.
     */
    final predicate hasType() { exists(this.getType()) }
  }
}

// generated by codegen/codegen.py, do not edit
/**
 * This module provides the generated definition of `DynamicTypeExpr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.expr.Expr
import codeql.swift.elements.expr.internal.ExprImpl::Impl as ExprImpl

/**
 * INTERNAL: This module contains the fully generated definition of `DynamicTypeExpr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::DynamicTypeExpr` class directly.
   * Use the subclass `DynamicTypeExpr`, where the following predicates are available.
   */
  class DynamicTypeExpr extends Synth::TDynamicTypeExpr, ExprImpl::Expr {
    override string getAPrimaryQlClass() { result = "DynamicTypeExpr" }

    /**
     * Gets the base of this dynamic type expression.
     *
     * This includes nodes from the "hidden" AST. It can be overridden in subclasses to change the
     * behavior of both the `Immediate` and non-`Immediate` versions.
     */
    Expr getImmediateBase() {
      result =
        Synth::convertExprFromRaw(Synth::convertDynamicTypeExprToRaw(this)
              .(Raw::DynamicTypeExpr)
              .getBase())
    }

    /**
     * Gets the base of this dynamic type expression.
     */
    final Expr getBase() {
      exists(Expr immediate |
        immediate = this.getImmediateBase() and
        if exists(this.getResolveStep()) then result = immediate else result = immediate.resolve()
      )
    }
  }
}

// generated by codegen/codegen.py
private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.stmt.BraceStmt
import codeql.swift.elements.expr.Expr
import codeql.swift.elements.decl.VarDecl

class TapExprBase extends Synth::TTapExpr, Expr {
  override string getAPrimaryQlClass() { result = "TapExpr" }

  Expr getImmediateSubExpr() {
    result = Synth::convertExprFromRaw(Synth::convertTapExprToRaw(this).(Raw::TapExpr).getSubExpr())
  }

  final Expr getSubExpr() { result = getImmediateSubExpr().resolve() }

  final predicate hasSubExpr() { exists(getSubExpr()) }

  BraceStmt getImmediateBody() {
    result =
      Synth::convertBraceStmtFromRaw(Synth::convertTapExprToRaw(this).(Raw::TapExpr).getBody())
  }

  final BraceStmt getBody() { result = getImmediateBody().resolve() }

  VarDecl getImmediateVar() {
    result = Synth::convertVarDeclFromRaw(Synth::convertTapExprToRaw(this).(Raw::TapExpr).getVar())
  }

  final VarDecl getVar() { result = getImmediateVar().resolve() }
}

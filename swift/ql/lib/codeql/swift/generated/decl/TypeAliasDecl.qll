// generated by codegen/codegen.py, do not edit
/**
 * This module provides the generated definition of `TypeAliasDecl`.
 * INTERNAL: Do not import directly.
 */

private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.decl.internal.GenericTypeDeclImpl::Impl as GenericTypeDeclImpl
import codeql.swift.elements.type.Type

/**
 * INTERNAL: This module contains the fully generated definition of `TypeAliasDecl` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A declaration of a type alias to another type. For example:
   * ```
   * typealias MyInt = Int
   * ```
   * INTERNAL: Do not reference the `Generated::TypeAliasDecl` class directly.
   * Use the subclass `TypeAliasDecl`, where the following predicates are available.
   */
  class TypeAliasDecl extends Synth::TTypeAliasDecl, GenericTypeDeclImpl::GenericTypeDecl {
    override string getAPrimaryQlClass() { result = "TypeAliasDecl" }

    /**
     * Gets the aliased type on the right-hand side of this type alias declaration.
     *
     * This includes nodes from the "hidden" AST. It can be overridden in subclasses to change the
     * behavior of both the `Immediate` and non-`Immediate` versions.
     */
    Type getImmediateAliasedType() {
      result =
        Synth::convertTypeFromRaw(Synth::convertTypeAliasDeclToRaw(this)
              .(Raw::TypeAliasDecl)
              .getAliasedType())
    }

    /**
     * Gets the aliased type on the right-hand side of this type alias declaration.
     *
     * For example the aliased type of `MyInt` in the following code is `Int`:
     * ```
     * typealias MyInt = Int
     * ```
     */
    final Type getAliasedType() {
      exists(Type immediate |
        immediate = this.getImmediateAliasedType() and
        result = immediate.resolve()
      )
    }
  }
}

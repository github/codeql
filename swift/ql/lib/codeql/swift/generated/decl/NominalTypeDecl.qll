// generated by codegen/codegen.py, do not edit
/**
 * This module provides the generated definition of `NominalTypeDecl`.
 * INTERNAL: Do not import directly.
 */

private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.decl.internal.GenericTypeDeclImpl::Impl as GenericTypeDeclImpl
import codeql.swift.elements.type.Type

/**
 * INTERNAL: This module contains the fully generated definition of `NominalTypeDecl` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::NominalTypeDecl` class directly.
   * Use the subclass `NominalTypeDecl`, where the following predicates are available.
   */
  class NominalTypeDecl extends Synth::TNominalTypeDecl, GenericTypeDeclImpl::GenericTypeDecl {
    /**
     * Gets the type of this nominal type declaration.
     *
     * This includes nodes from the "hidden" AST. It can be overridden in subclasses to change the
     * behavior of both the `Immediate` and non-`Immediate` versions.
     */
    Type getImmediateType() {
      result =
        Synth::convertTypeFromRaw(Synth::convertNominalTypeDeclToRaw(this)
              .(Raw::NominalTypeDecl)
              .getType())
    }

    /**
     * Gets the type of this nominal type declaration.
     */
    final Type getType() {
      exists(Type immediate |
        immediate = this.getImmediateType() and
        result = immediate.resolve()
      )
    }
  }
}

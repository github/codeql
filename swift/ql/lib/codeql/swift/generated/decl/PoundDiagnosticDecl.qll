// generated by codegen/codegen.py, do not edit
/**
 * This module provides the generated definition of `PoundDiagnosticDecl`.
 * INTERNAL: Do not import directly.
 */

private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.decl.internal.DeclImpl::Impl as DeclImpl
import codeql.swift.elements.expr.StringLiteralExpr

/**
 * INTERNAL: This module contains the fully generated definition of `PoundDiagnosticDecl` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A diagnostic directive, which is either `#error` or `#warning`.
   * INTERNAL: Do not reference the `Generated::PoundDiagnosticDecl` class directly.
   * Use the subclass `PoundDiagnosticDecl`, where the following predicates are available.
   */
  class PoundDiagnosticDecl extends Synth::TPoundDiagnosticDecl, DeclImpl::Decl {
    override string getAPrimaryQlClass() { result = "PoundDiagnosticDecl" }

    /**
     * Gets the kind of this pound diagnostic declaration.
     *
     * This is 1 for `#error` and 2 for `#warning`.
     * INTERNAL: Do not use.
     */
    int getKind() {
      result = Synth::convertPoundDiagnosticDeclToRaw(this).(Raw::PoundDiagnosticDecl).getKind()
    }

    /**
     * Gets the message of this pound diagnostic declaration.
     *
     * This includes nodes from the "hidden" AST. It can be overridden in subclasses to change the
     * behavior of both the `Immediate` and non-`Immediate` versions.
     */
    StringLiteralExpr getImmediateMessage() {
      result =
        Synth::convertStringLiteralExprFromRaw(Synth::convertPoundDiagnosticDeclToRaw(this)
              .(Raw::PoundDiagnosticDecl)
              .getMessage())
    }

    /**
     * Gets the message of this pound diagnostic declaration.
     */
    final StringLiteralExpr getMessage() {
      exists(StringLiteralExpr immediate |
        immediate = this.getImmediateMessage() and
        result = immediate.resolve()
      )
    }
  }
}

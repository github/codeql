// generated by codegen/codegen.py
private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.decl.AbstractStorageDecl
import codeql.swift.elements.decl.GenericContext
import codeql.swift.elements.decl.ParamDecl
import codeql.swift.elements.type.Type

module Generated {
  class SubscriptDecl extends Synth::TSubscriptDecl, AbstractStorageDecl, GenericContext {
    override string getAPrimaryQlClass() { result = "SubscriptDecl" }

    /**
     * Gets the `index`th parameter of this subscript declaration (0-based).
     */
    ParamDecl getParam(int index) {
      result =
        Synth::convertParamDeclFromRaw(Synth::convertSubscriptDeclToRaw(this)
              .(Raw::SubscriptDecl)
              .getParam(index))
    }

    /**
     * Gets any of the parameters of this subscript declaration.
     */
    final ParamDecl getAParam() { result = this.getParam(_) }

    /**
     * Gets the number of parameters of this subscript declaration.
     */
    final int getNumberOfParams() { result = count(int i | exists(this.getParam(i))) }

    /**
     * Gets the element type of this subscript declaration.
     *
     * This includes nodes from the "hidden" AST. It can be overridden in subclasses to change the
     * behavior of both the `Immediate` and non-`Immediate` versions.
     */
    Type getImmediateElementType() {
      result =
        Synth::convertTypeFromRaw(Synth::convertSubscriptDeclToRaw(this)
              .(Raw::SubscriptDecl)
              .getElementType())
    }

    /**
     * Gets the element type of this subscript declaration.
     */
    final Type getElementType() {
      exists(Type immediate |
        immediate = this.getImmediateElementType() and
        result = immediate.resolve()
      )
    }
  }
}

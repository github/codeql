// generated by codegen/codegen.py, do not edit
/**
 * This module provides the generated definition of `SubscriptDecl`.
 * INTERNAL: Do not import directly.
 */

private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.decl.internal.AbstractStorageDeclImpl::Impl as AbstractStorageDeclImpl
import codeql.swift.elements.decl.internal.GenericContextImpl::Impl as GenericContextImpl
import codeql.swift.elements.decl.ParamDecl
import codeql.swift.elements.type.Type

/**
 * INTERNAL: This module contains the fully generated definition of `SubscriptDecl` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::SubscriptDecl` class directly.
   * Use the subclass `SubscriptDecl`, where the following predicates are available.
   */
  class SubscriptDecl extends Synth::TSubscriptDecl, AbstractStorageDeclImpl::AbstractStorageDecl,
    GenericContextImpl::GenericContext
  {
    override string getAPrimaryQlClass() { result = "SubscriptDecl" }

    /**
     * Gets the `index`th parameter of this subscript declaration (0-based).
     */
    ParamDecl getParam(int index) {
      result =
        Synth::convertParamDeclFromRaw(Synth::convertSubscriptDeclToRaw(this)
              .(Raw::SubscriptDecl)
              .getParam(index))
    }

    /**
     * Gets any of the parameters of this subscript declaration.
     */
    final ParamDecl getAParam() { result = this.getParam(_) }

    /**
     * Gets the number of parameters of this subscript declaration.
     */
    final int getNumberOfParams() { result = count(int i | exists(this.getParam(i))) }

    /**
     * Gets the element type of this subscript declaration.
     *
     * This includes nodes from the "hidden" AST. It can be overridden in subclasses to change the
     * behavior of both the `Immediate` and non-`Immediate` versions.
     */
    Type getImmediateElementType() {
      result =
        Synth::convertTypeFromRaw(Synth::convertSubscriptDeclToRaw(this)
              .(Raw::SubscriptDecl)
              .getElementType())
    }

    /**
     * Gets the element type of this subscript declaration.
     */
    final Type getElementType() {
      exists(Type immediate |
        immediate = this.getImmediateElementType() and
        result = immediate.resolve()
      )
    }
  }
}

// generated by codegen/codegen.py, do not edit
/**
 * This module provides the generated definition of `GenericContext`.
 * INTERNAL: Do not import directly.
 */

private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.internal.ElementImpl::Impl as ElementImpl
import codeql.swift.elements.decl.GenericTypeParamDecl

/**
 * INTERNAL: This module contains the fully generated definition of `GenericContext` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::GenericContext` class directly.
   * Use the subclass `GenericContext`, where the following predicates are available.
   */
  class GenericContext extends Synth::TGenericContext, ElementImpl::Element {
    /**
     * Gets the `index`th generic type parameter of this generic context (0-based).
     */
    GenericTypeParamDecl getGenericTypeParam(int index) {
      result =
        Synth::convertGenericTypeParamDeclFromRaw(Synth::convertGenericContextToRaw(this)
              .(Raw::GenericContext)
              .getGenericTypeParam(index))
    }

    /**
     * Gets any of the generic type parameters of this generic context.
     */
    final GenericTypeParamDecl getAGenericTypeParam() { result = this.getGenericTypeParam(_) }

    /**
     * Gets the number of generic type parameters of this generic context.
     */
    final int getNumberOfGenericTypeParams() {
      result = count(int i | exists(this.getGenericTypeParam(i)))
    }
  }
}

// generated by codegen/codegen.py
private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.decl.ModuleDecl
import codeql.swift.elements.decl.TypeDecl

class ModuleDeclBase extends Synth::TModuleDecl, TypeDecl {
  override string getAPrimaryQlClass() { result = "ModuleDecl" }

  predicate isBuiltinModule() {
    Synth::convertModuleDeclToRaw(this).(Raw::ModuleDecl).isBuiltinModule()
  }

  predicate isSystemModule() {
    Synth::convertModuleDeclToRaw(this).(Raw::ModuleDecl).isSystemModule()
  }

  ModuleDecl getImmediateImportedModule(int index) {
    result =
      Synth::convertModuleDeclFromRaw(Synth::convertModuleDeclToRaw(this)
            .(Raw::ModuleDecl)
            .getImportedModule(index))
  }

  final ModuleDecl getImportedModule(int index) {
    result = getImmediateImportedModule(index).resolve()
  }

  final ModuleDecl getAnImportedModule() { result = getImportedModule(_) }

  final int getNumberOfImportedModules() { result = count(getAnImportedModule()) }

  ModuleDecl getImmediateExportedModule(int index) {
    result =
      Synth::convertModuleDeclFromRaw(Synth::convertModuleDeclToRaw(this)
            .(Raw::ModuleDecl)
            .getExportedModule(index))
  }

  final ModuleDecl getExportedModule(int index) {
    result = getImmediateExportedModule(index).resolve()
  }

  final ModuleDecl getAnExportedModule() { result = getExportedModule(_) }

  final int getNumberOfExportedModules() { result = count(getAnExportedModule()) }
}

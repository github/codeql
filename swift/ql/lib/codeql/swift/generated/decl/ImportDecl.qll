// generated by codegen/codegen.py, do not edit
/**
 * This module provides the generated definition of `ImportDecl`.
 * INTERNAL: Do not import directly.
 */

private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.decl.internal.DeclImpl::Impl as DeclImpl
import codeql.swift.elements.decl.ModuleDecl
import codeql.swift.elements.decl.ValueDecl

/**
 * INTERNAL: This module contains the fully generated definition of `ImportDecl` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::ImportDecl` class directly.
   * Use the subclass `ImportDecl`, where the following predicates are available.
   */
  class ImportDecl extends Synth::TImportDecl, DeclImpl::Decl {
    override string getAPrimaryQlClass() { result = "ImportDecl" }

    /**
     * Holds if this import declaration is exported.
     */
    predicate isExported() { Synth::convertImportDeclToRaw(this).(Raw::ImportDecl).isExported() }

    /**
     * Gets the imported module of this import declaration, if it exists.
     */
    ModuleDecl getImportedModule() {
      result =
        Synth::convertModuleDeclFromRaw(Synth::convertImportDeclToRaw(this)
              .(Raw::ImportDecl)
              .getImportedModule())
    }

    /**
     * Holds if `getImportedModule()` exists.
     */
    final predicate hasImportedModule() { exists(this.getImportedModule()) }

    /**
     * Gets the `index`th declaration of this import declaration (0-based).
     */
    ValueDecl getDeclaration(int index) {
      result =
        Synth::convertValueDeclFromRaw(Synth::convertImportDeclToRaw(this)
              .(Raw::ImportDecl)
              .getDeclaration(index))
    }

    /**
     * Gets any of the declarations of this import declaration.
     */
    final ValueDecl getADeclaration() { result = this.getDeclaration(_) }

    /**
     * Gets the number of declarations of this import declaration.
     */
    final int getNumberOfDeclarations() { result = count(int i | exists(this.getDeclaration(i))) }
  }
}

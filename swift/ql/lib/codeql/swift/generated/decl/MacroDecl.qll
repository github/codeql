// generated by codegen/codegen.py, do not edit
/**
 * This module provides the generated definition of `MacroDecl`.
 * INTERNAL: Do not import directly.
 */

private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.decl.internal.GenericContextImpl::Impl as GenericContextImpl
import codeql.swift.elements.MacroRole
import codeql.swift.elements.decl.ParamDecl
import codeql.swift.elements.decl.internal.ValueDeclImpl::Impl as ValueDeclImpl

/**
 * INTERNAL: This module contains the fully generated definition of `MacroDecl` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A declaration of a macro. Some examples:
   *
   * ```
   * @freestanding(declaration)
   * macro A() = #externalMacro(module: "A", type: "A")
   * @freestanding(expression)
   * macro B() = Builtin.B
   * @attached(member)
   * macro C() = C.C
   * ```
   * INTERNAL: Do not reference the `Generated::MacroDecl` class directly.
   * Use the subclass `MacroDecl`, where the following predicates are available.
   */
  class MacroDecl extends Synth::TMacroDecl, GenericContextImpl::GenericContext,
    ValueDeclImpl::ValueDecl
  {
    override string getAPrimaryQlClass() { result = "MacroDecl" }

    /**
     * Gets the name of this macro.
     */
    string getName() { result = Synth::convertMacroDeclToRaw(this).(Raw::MacroDecl).getName() }

    /**
     * Gets the `index`th parameter of this macro (0-based).
     */
    ParamDecl getParameter(int index) {
      result =
        Synth::convertParamDeclFromRaw(Synth::convertMacroDeclToRaw(this)
              .(Raw::MacroDecl)
              .getParameter(index))
    }

    /**
     * Gets any of the parameters of this macro.
     */
    final ParamDecl getAParameter() { result = this.getParameter(_) }

    /**
     * Gets the number of parameters of this macro.
     */
    final int getNumberOfParameters() { result = count(int i | exists(this.getParameter(i))) }

    /**
     * Gets the `index`th role of this macro (0-based).
     */
    MacroRole getRole(int index) {
      result =
        Synth::convertMacroRoleFromRaw(Synth::convertMacroDeclToRaw(this)
              .(Raw::MacroDecl)
              .getRole(index))
    }

    /**
     * Gets any of the roles of this macro.
     */
    final MacroRole getARole() { result = this.getRole(_) }

    /**
     * Gets the number of roles of this macro.
     */
    final int getNumberOfRoles() { result = count(int i | exists(this.getRole(i))) }
  }
}

// generated by codegen/codegen.py, do not edit
/**
 * This module provides the generated definition of `BreakStmt`.
 * INTERNAL: Do not import directly.
 */

private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.stmt.Stmt
import codeql.swift.elements.stmt.internal.StmtImpl::Impl as StmtImpl

/**
 * INTERNAL: This module contains the fully generated definition of `BreakStmt` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::BreakStmt` class directly.
   * Use the subclass `BreakStmt`, where the following predicates are available.
   */
  class BreakStmt extends Synth::TBreakStmt, StmtImpl::Stmt {
    override string getAPrimaryQlClass() { result = "BreakStmt" }

    /**
     * Gets the target name of this break statement, if it exists.
     */
    string getTargetName() {
      result = Synth::convertBreakStmtToRaw(this).(Raw::BreakStmt).getTargetName()
    }

    /**
     * Holds if `getTargetName()` exists.
     */
    final predicate hasTargetName() { exists(this.getTargetName()) }

    /**
     * Gets the target of this break statement, if it exists.
     */
    Stmt getTarget() {
      result =
        Synth::convertStmtFromRaw(Synth::convertBreakStmtToRaw(this).(Raw::BreakStmt).getTarget())
    }

    /**
     * Holds if `getTarget()` exists.
     */
    final predicate hasTarget() { exists(this.getTarget()) }
  }
}

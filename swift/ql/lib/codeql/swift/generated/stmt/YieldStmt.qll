// generated by codegen/codegen.py, do not edit
/**
 * This module provides the generated definition of `YieldStmt`.
 * INTERNAL: Do not import directly.
 */

private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.expr.Expr
import codeql.swift.elements.stmt.internal.StmtImpl::Impl as StmtImpl

/**
 * INTERNAL: This module contains the fully generated definition of `YieldStmt` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::YieldStmt` class directly.
   * Use the subclass `YieldStmt`, where the following predicates are available.
   */
  class YieldStmt extends Synth::TYieldStmt, StmtImpl::Stmt {
    override string getAPrimaryQlClass() { result = "YieldStmt" }

    /**
     * Gets the `index`th result of this yield statement (0-based).
     *
     * This includes nodes from the "hidden" AST. It can be overridden in subclasses to change the
     * behavior of both the `Immediate` and non-`Immediate` versions.
     */
    Expr getImmediateResult(int index) {
      result =
        Synth::convertExprFromRaw(Synth::convertYieldStmtToRaw(this)
              .(Raw::YieldStmt)
              .getResult(index))
    }

    /**
     * Gets the `index`th result of this yield statement (0-based).
     */
    final Expr getResult(int index) {
      exists(Expr immediate |
        immediate = this.getImmediateResult(index) and
        result = immediate.resolve()
      )
    }

    /**
     * Gets any of the results of this yield statement.
     */
    final Expr getAResult() { result = this.getResult(_) }

    /**
     * Gets the number of results of this yield statement.
     */
    final int getNumberOfResults() { result = count(int i | exists(this.getResult(i))) }
  }
}

// generated by codegen/codegen.py
private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.stmt.CaseStmt
import codeql.swift.elements.expr.Expr
import codeql.swift.elements.stmt.LabeledStmt

module Generated {
  class SwitchStmt extends Synth::TSwitchStmt, LabeledStmt {
    override string getAPrimaryQlClass() { result = "SwitchStmt" }

    /**
     * Gets the expression of this switch statement.
     *
     * This includes nodes from the "hidden" AST. It can be overridden in subclasses to change the
     * behavior of both the `Immediate` and non-`Immediate` versions.
     */
    Expr getImmediateExpr() {
      result =
        Synth::convertExprFromRaw(Synth::convertSwitchStmtToRaw(this).(Raw::SwitchStmt).getExpr())
    }

    /**
     * Gets the expression of this switch statement.
     */
    final Expr getExpr() { result = getImmediateExpr().resolve() }

    /**
     * Gets the `index`th case of this switch statement (0-based).
     *
     * This includes nodes from the "hidden" AST. It can be overridden in subclasses to change the
     * behavior of both the `Immediate` and non-`Immediate` versions.
     */
    CaseStmt getImmediateCase(int index) {
      result =
        Synth::convertCaseStmtFromRaw(Synth::convertSwitchStmtToRaw(this)
              .(Raw::SwitchStmt)
              .getCase(index))
    }

    /**
     * Gets the `index`th case of this switch statement (0-based).
     */
    final CaseStmt getCase(int index) { result = getImmediateCase(index).resolve() }

    /**
     * Gets any of the cases of this switch statement.
     */
    final CaseStmt getACase() { result = getCase(_) }

    /**
     * Gets the number of cases of this switch statement.
     */
    final int getNumberOfCases() { result = count(int i | exists(getCase(i))) }
  }
}

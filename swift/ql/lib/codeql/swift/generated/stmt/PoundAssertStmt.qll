// generated by codegen/codegen.py, do not edit
/**
 * This module provides the generated definition of `PoundAssertStmt`.
 * INTERNAL: Do not import directly.
 */

private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.expr.Expr
import codeql.swift.elements.stmt.internal.StmtImpl::Impl as StmtImpl

/**
 * INTERNAL: This module contains the fully generated definition of `PoundAssertStmt` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::PoundAssertStmt` class directly.
   * Use the subclass `PoundAssertStmt`, where the following predicates are available.
   */
  class PoundAssertStmt extends Synth::TPoundAssertStmt, StmtImpl::Stmt {
    override string getAPrimaryQlClass() { result = "PoundAssertStmt" }

    /**
     * Gets the condition of this pound assert statement.
     *
     * This includes nodes from the "hidden" AST. It can be overridden in subclasses to change the
     * behavior of both the `Immediate` and non-`Immediate` versions.
     */
    Expr getImmediateCondition() {
      result =
        Synth::convertExprFromRaw(Synth::convertPoundAssertStmtToRaw(this)
              .(Raw::PoundAssertStmt)
              .getCondition())
    }

    /**
     * Gets the condition of this pound assert statement.
     */
    final Expr getCondition() {
      exists(Expr immediate |
        immediate = this.getImmediateCondition() and
        result = immediate.resolve()
      )
    }

    /**
     * Gets the message of this pound assert statement.
     */
    string getMessage() {
      result = Synth::convertPoundAssertStmtToRaw(this).(Raw::PoundAssertStmt).getMessage()
    }
  }
}

// generated by codegen/codegen.py
private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.expr.Expr
import codeql.swift.elements.stmt.Stmt

module Generated {
  class ReturnStmt extends Synth::TReturnStmt, Stmt {
    override string getAPrimaryQlClass() { result = "ReturnStmt" }

    /**
     * Gets the result of this return statement, if it exists.
     *
     * This includes nodes from the "hidden" AST. It can be overridden in subclasses to change the
     * behavior of both the `Immediate` and non-`Immediate` versions.
     */
    Expr getImmediateResult() {
      result =
        Synth::convertExprFromRaw(Synth::convertReturnStmtToRaw(this).(Raw::ReturnStmt).getResult())
    }

    /**
     * Gets the result of this return statement, if it exists.
     */
    final Expr getResult() { result = getImmediateResult().resolve() }

    /**
     * Holds if `getResult()` exists.
     */
    final predicate hasResult() { exists(getResult()) }
  }
}

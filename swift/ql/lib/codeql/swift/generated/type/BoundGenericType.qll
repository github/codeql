// generated by codegen/codegen.py, do not edit
/**
 * This module provides the generated definition of `BoundGenericType`.
 * INTERNAL: Do not import directly.
 */

private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.type.internal.NominalOrBoundGenericNominalTypeImpl::Impl as NominalOrBoundGenericNominalTypeImpl
import codeql.swift.elements.type.Type

/**
 * INTERNAL: This module contains the fully generated definition of `BoundGenericType` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::BoundGenericType` class directly.
   * Use the subclass `BoundGenericType`, where the following predicates are available.
   */
  class BoundGenericType extends Synth::TBoundGenericType,
    NominalOrBoundGenericNominalTypeImpl::NominalOrBoundGenericNominalType
  {
    /**
     * Gets the `index`th argument type of this bound generic type (0-based).
     *
     * This includes nodes from the "hidden" AST. It can be overridden in subclasses to change the
     * behavior of both the `Immediate` and non-`Immediate` versions.
     */
    Type getImmediateArgType(int index) {
      result =
        Synth::convertTypeFromRaw(Synth::convertBoundGenericTypeToRaw(this)
              .(Raw::BoundGenericType)
              .getArgType(index))
    }

    /**
     * Gets the `index`th argument type of this bound generic type (0-based).
     */
    final Type getArgType(int index) {
      exists(Type immediate |
        immediate = this.getImmediateArgType(index) and
        if exists(this.getResolveStep()) then result = immediate else result = immediate.resolve()
      )
    }

    /**
     * Gets any of the argument types of this bound generic type.
     */
    final Type getAnArgType() { result = this.getArgType(_) }

    /**
     * Gets the number of argument types of this bound generic type.
     */
    final int getNumberOfArgTypes() { result = count(int i | exists(this.getArgType(i))) }
  }
}

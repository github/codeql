// generated by codegen/codegen.py, do not edit
/**
 * This module provides the generated definition of `UnarySyntaxSugarType`.
 * INTERNAL: Do not import directly.
 */

private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.type.internal.SyntaxSugarTypeImpl::Impl as SyntaxSugarTypeImpl
import codeql.swift.elements.type.Type

/**
 * INTERNAL: This module contains the fully generated definition of `UnarySyntaxSugarType` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::UnarySyntaxSugarType` class directly.
   * Use the subclass `UnarySyntaxSugarType`, where the following predicates are available.
   */
  class UnarySyntaxSugarType extends Synth::TUnarySyntaxSugarType,
    SyntaxSugarTypeImpl::SyntaxSugarType
  {
    /**
     * Gets the base type of this unary syntax sugar type.
     *
     * This includes nodes from the "hidden" AST. It can be overridden in subclasses to change the
     * behavior of both the `Immediate` and non-`Immediate` versions.
     */
    Type getImmediateBaseType() {
      result =
        Synth::convertTypeFromRaw(Synth::convertUnarySyntaxSugarTypeToRaw(this)
              .(Raw::UnarySyntaxSugarType)
              .getBaseType())
    }

    /**
     * Gets the base type of this unary syntax sugar type.
     */
    final Type getBaseType() {
      exists(Type immediate |
        immediate = this.getImmediateBaseType() and
        if exists(this.getResolveStep()) then result = immediate else result = immediate.resolve()
      )
    }
  }
}

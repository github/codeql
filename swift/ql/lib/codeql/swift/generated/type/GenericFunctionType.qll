// generated by codegen/codegen.py, do not edit
/**
 * This module provides the generated definition of `GenericFunctionType`.
 * INTERNAL: Do not import directly.
 */

private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.type.internal.AnyFunctionTypeImpl::Impl as AnyFunctionTypeImpl
import codeql.swift.elements.type.GenericTypeParamType

/**
 * INTERNAL: This module contains the fully generated definition of `GenericFunctionType` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * The type of a generic function with type parameters
   * INTERNAL: Do not reference the `Generated::GenericFunctionType` class directly.
   * Use the subclass `GenericFunctionType`, where the following predicates are available.
   */
  class GenericFunctionType extends Synth::TGenericFunctionType,
    AnyFunctionTypeImpl::AnyFunctionType
  {
    override string getAPrimaryQlClass() { result = "GenericFunctionType" }

    /**
     * Gets the `index`th type parameter of this generic type (0-based).
     *
     * This includes nodes from the "hidden" AST. It can be overridden in subclasses to change the
     * behavior of both the `Immediate` and non-`Immediate` versions.
     */
    GenericTypeParamType getImmediateGenericParam(int index) {
      result =
        Synth::convertGenericTypeParamTypeFromRaw(Synth::convertGenericFunctionTypeToRaw(this)
              .(Raw::GenericFunctionType)
              .getGenericParam(index))
    }

    /**
     * Gets the `index`th type parameter of this generic type (0-based).
     */
    final GenericTypeParamType getGenericParam(int index) {
      exists(GenericTypeParamType immediate |
        immediate = this.getImmediateGenericParam(index) and
        if exists(this.getResolveStep()) then result = immediate else result = immediate.resolve()
      )
    }

    /**
     * Gets any of the type parameters of this generic type.
     */
    final GenericTypeParamType getAGenericParam() { result = this.getGenericParam(_) }

    /**
     * Gets the number of type parameters of this generic type.
     */
    final int getNumberOfGenericParams() { result = count(int i | exists(this.getGenericParam(i))) }
  }
}

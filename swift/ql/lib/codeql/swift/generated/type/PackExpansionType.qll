// generated by codegen/codegen.py, do not edit
/**
 * This module provides the generated definition of `PackExpansionType`.
 * INTERNAL: Do not import directly.
 */

private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.type.Type
import codeql.swift.elements.type.internal.TypeImpl::Impl as TypeImpl

/**
 * INTERNAL: This module contains the fully generated definition of `PackExpansionType` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A type of PackExpansionExpr, see PackExpansionExpr for more information.
   * INTERNAL: Do not reference the `Generated::PackExpansionType` class directly.
   * Use the subclass `PackExpansionType`, where the following predicates are available.
   */
  class PackExpansionType extends Synth::TPackExpansionType, TypeImpl::Type {
    override string getAPrimaryQlClass() { result = "PackExpansionType" }

    /**
     * Gets the pattern type of this pack expansion type.
     *
     * This includes nodes from the "hidden" AST. It can be overridden in subclasses to change the
     * behavior of both the `Immediate` and non-`Immediate` versions.
     */
    Type getImmediatePatternType() {
      result =
        Synth::convertTypeFromRaw(Synth::convertPackExpansionTypeToRaw(this)
              .(Raw::PackExpansionType)
              .getPatternType())
    }

    /**
     * Gets the pattern type of this pack expansion type.
     */
    final Type getPatternType() {
      exists(Type immediate |
        immediate = this.getImmediatePatternType() and
        if exists(this.getResolveStep()) then result = immediate else result = immediate.resolve()
      )
    }

    /**
     * Gets the count type of this pack expansion type.
     *
     * This includes nodes from the "hidden" AST. It can be overridden in subclasses to change the
     * behavior of both the `Immediate` and non-`Immediate` versions.
     */
    Type getImmediateCountType() {
      result =
        Synth::convertTypeFromRaw(Synth::convertPackExpansionTypeToRaw(this)
              .(Raw::PackExpansionType)
              .getCountType())
    }

    /**
     * Gets the count type of this pack expansion type.
     */
    final Type getCountType() {
      exists(Type immediate |
        immediate = this.getImmediateCountType() and
        if exists(this.getResolveStep()) then result = immediate else result = immediate.resolve()
      )
    }
  }
}

// generated by codegen/codegen.py
private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.decl.ProtocolDecl
import codeql.swift.elements.type.SubstitutableType
import codeql.swift.elements.type.Type

module Generated {
  class ArchetypeType extends Synth::TArchetypeType, SubstitutableType {
    Type getImmediateInterfaceType() {
      result =
        Synth::convertTypeFromRaw(Synth::convertArchetypeTypeToRaw(this)
              .(Raw::ArchetypeType)
              .getInterfaceType())
    }

    final Type getInterfaceType() { result = getImmediateInterfaceType().resolve() }

    Type getImmediateSuperclass() {
      result =
        Synth::convertTypeFromRaw(Synth::convertArchetypeTypeToRaw(this)
              .(Raw::ArchetypeType)
              .getSuperclass())
    }

    final Type getSuperclass() { result = getImmediateSuperclass().resolve() }

    final predicate hasSuperclass() { exists(getSuperclass()) }

    ProtocolDecl getImmediateProtocol(int index) {
      result =
        Synth::convertProtocolDeclFromRaw(Synth::convertArchetypeTypeToRaw(this)
              .(Raw::ArchetypeType)
              .getProtocol(index))
    }

    final ProtocolDecl getProtocol(int index) { result = getImmediateProtocol(index).resolve() }

    final ProtocolDecl getAProtocol() { result = getProtocol(_) }

    final int getNumberOfProtocols() { result = count(getAProtocol()) }
  }
}

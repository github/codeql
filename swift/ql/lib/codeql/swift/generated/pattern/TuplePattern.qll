// generated by codegen/codegen.py, do not edit
/**
 * This module provides the generated definition of `TuplePattern`.
 * INTERNAL: Do not import directly.
 */

private import codeql.swift.generated.Synth
private import codeql.swift.generated.Raw
import codeql.swift.elements.pattern.Pattern
import codeql.swift.elements.pattern.internal.PatternImpl::Impl as PatternImpl

/**
 * INTERNAL: This module contains the fully generated definition of `TuplePattern` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * INTERNAL: Do not reference the `Generated::TuplePattern` class directly.
   * Use the subclass `TuplePattern`, where the following predicates are available.
   */
  class TuplePattern extends Synth::TTuplePattern, PatternImpl::Pattern {
    override string getAPrimaryQlClass() { result = "TuplePattern" }

    /**
     * Gets the `index`th element of this tuple pattern (0-based).
     *
     * This includes nodes from the "hidden" AST. It can be overridden in subclasses to change the
     * behavior of both the `Immediate` and non-`Immediate` versions.
     */
    Pattern getImmediateElement(int index) {
      result =
        Synth::convertPatternFromRaw(Synth::convertTuplePatternToRaw(this)
              .(Raw::TuplePattern)
              .getElement(index))
    }

    /**
     * Gets the `index`th element of this tuple pattern (0-based).
     */
    final Pattern getElement(int index) {
      exists(Pattern immediate |
        immediate = this.getImmediateElement(index) and
        if exists(this.getResolveStep()) then result = immediate else result = immediate.resolve()
      )
    }

    /**
     * Gets any of the elements of this tuple pattern.
     */
    final Pattern getAnElement() { result = this.getElement(_) }

    /**
     * Gets the number of elements of this tuple pattern.
     */
    final int getNumberOfElements() { result = count(int i | exists(this.getElement(i))) }
  }
}

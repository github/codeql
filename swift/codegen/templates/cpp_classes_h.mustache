// generated by {{generator}} from {{source}}
// clang-format off
#pragma once

#include <iostream>
#include <optional>
#include <vector>

#include "swift/extractor/trap/TrapLabel.h"
#include "swift/extractor/trap/TrapTagTraits.h"
#include "./TrapEntries.h"
{{#include_parent}}
#include "../TrapClasses.h"
{{/include_parent}}

namespace codeql {
{{#classes}}

struct {{name}}{{#has_bases}} : {{#bases}}{{^first}}, {{/first}}{{ref.name}}{{/bases}}{{/has_bases}} {
  {{#final}}
  explicit {{name}}(TrapLabel<{{name}}Tag> id) : id{id} {}

  TrapLabel<{{name}}Tag> id{};
  {{/final}}
  {{#fields}}
  {{type}} {{field_name}}{};
  {{/fields}}
  {{#final}}

  friend std::ostream& operator<<(std::ostream& out, const {{name}}& x) {
    x.emit(out);
    return out;
  }
  {{/final}}

 protected:
  void emit({{^final}}TrapLabel<{{name}}Tag> id, {{/final}}std::ostream& out) const;
};

template <>
struct detail::ToTrapClassFunctor<{{name}}Tag> {
  using type = {{name}};
};
{{/classes}}
}

// generated by {{generator}}

import codeql.swift.elements

/**
 * Gets any of the "immediate" children of `e`. "Immediate" means not taking into account node resolution: for example
 * if the AST child is the first of a series of conversions that would normally be hidden away, this will select the
 * next conversion down the hidden AST tree instead of the corresponding fully uncoverted node at the bottom.
 * Outside this module this file is mainly intended to be used to test uniqueness of parents.
 */
cached
Element getAnImmediateChild(Element e) {
  // why does this look more complicated than it should?
  // * none() simplifies generation, as we can append `or ...` without a special case for the first item
  none()
  {{#classes}}
  {{#properties}}
  {{#is_child}}
  or
  result = e.({{name}}).getImmediate{{singular}}({{#is_repeated}}_{{/is_repeated}})
  {{/is_child}}
  {{/properties}}
  {{/classes}}
}

/**
 * Gets the "immediate" parent of `e`. "Immediate" means not taking into account node resolution: for example
 * if `e` has conversions, `getImmediateParent(e)` will give the bottom conversion in the hidden AST.
 */
 Element getImmediateParent(Element e) {
   // `unique` is used here to tell the optimizer that there is in fact only one result
   // this is tested by the `library-tests/parent/no_double_parents.ql` test
   result = unique(Element x | e = getAnImmediateChild(x) | x)
}
